/* AsyncImage.c generated by valac 0.48.14, the Vala compiler
 * generated from AsyncImage.vala, do not modify */

/*
* Copyright (c) 2017â€“2019 elementary, Inc. (https://elementary.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <gio/gio.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <gdk/gdk.h>
#include <cairo-gobject.h>
#include <gobject/gvaluecollector.h>

#define GRANITE_TYPE_ASYNC_IMAGE (granite_async_image_get_type ())
#define GRANITE_ASYNC_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_TYPE_ASYNC_IMAGE, GraniteAsyncImage))
#define GRANITE_ASYNC_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_TYPE_ASYNC_IMAGE, GraniteAsyncImageClass))
#define GRANITE_IS_ASYNC_IMAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_TYPE_ASYNC_IMAGE))
#define GRANITE_IS_ASYNC_IMAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_TYPE_ASYNC_IMAGE))
#define GRANITE_ASYNC_IMAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_TYPE_ASYNC_IMAGE, GraniteAsyncImageClass))

typedef struct _GraniteAsyncImage GraniteAsyncImage;
typedef struct _GraniteAsyncImageClass GraniteAsyncImageClass;
typedef struct _GraniteAsyncImagePrivate GraniteAsyncImagePrivate;
enum  {
	GRANITE_ASYNC_IMAGE_0_PROPERTY,
	GRANITE_ASYNC_IMAGE_LOAD_ON_REALIZE_PROPERTY,
	GRANITE_ASYNC_IMAGE_AUTO_SIZE_REQUEST_PROPERTY,
	GRANITE_ASYNC_IMAGE_GICON_ASYNC_PROPERTY,
	GRANITE_ASYNC_IMAGE_SIZE_ASYNC_PROPERTY,
	GRANITE_ASYNC_IMAGE_NUM_PROPERTIES
};
static GParamSpec* granite_async_image_properties[GRANITE_ASYNC_IMAGE_NUM_PROPERTIES];

#define GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY (granite_async_image_cache_entry_get_type ())
#define GRANITE_ASYNC_IMAGE_CACHE_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY, GraniteAsyncImageCacheEntry))
#define GRANITE_ASYNC_IMAGE_CACHE_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY, GraniteAsyncImageCacheEntryClass))
#define GRANITE_ASYNC_IMAGE_IS_CACHE_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY))
#define GRANITE_ASYNC_IMAGE_IS_CACHE_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY))
#define GRANITE_ASYNC_IMAGE_CACHE_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY, GraniteAsyncImageCacheEntryClass))

typedef struct _GraniteAsyncImageCacheEntry GraniteAsyncImageCacheEntry;
typedef struct _GraniteAsyncImageCacheEntryClass GraniteAsyncImageCacheEntryClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _GraniteAsyncImageSetFromGiconAsyncData GraniteAsyncImageSetFromGiconAsyncData;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _GraniteAsyncImageSetFromIconNameAsyncData GraniteAsyncImageSetFromIconNameAsyncData;
#define _cairo_surface_destroy0(var) ((var == NULL) ? NULL : (var = (cairo_surface_destroy (var), NULL)))
typedef struct _GraniteAsyncImageSetFromFileAsyncData GraniteAsyncImageSetFromFileAsyncData;
typedef struct _GraniteAsyncImageCacheEntryPrivate GraniteAsyncImageCacheEntryPrivate;
#define _granite_async_image_cache_entry_unref0(var) ((var == NULL) ? NULL : (var = (granite_async_image_cache_entry_unref (var), NULL)))
typedef struct _GraniteAsyncImageSetFromGiconAsyncInternalData GraniteAsyncImageSetFromGiconAsyncInternalData;
typedef struct _GraniteAsyncImageUpdateData GraniteAsyncImageUpdateData;
typedef struct _GraniteAsyncImageParamSpecCacheEntry GraniteAsyncImageParamSpecCacheEntry;

struct _GraniteAsyncImage {
	GtkImage parent_instance;
	GraniteAsyncImagePrivate * priv;
};

struct _GraniteAsyncImageClass {
	GtkImageClass parent_class;
};

struct _GraniteAsyncImagePrivate {
	gboolean _load_on_realize;
	gboolean _auto_size_request;
	GIcon* _gicon_async;
	gint _size_async;
	gint current_scale_factor;
};

struct _GraniteAsyncImageSetFromGiconAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GraniteAsyncImage* self;
	GIcon* icon;
	gint size;
	GCancellable* cancellable;
	gboolean _tmp0_;
	gboolean _tmp1_;
	GIcon* _tmp2_;
	gint _tmp3_;
	GError* e;
	GError* _tmp4_;
	GError* _tmp5_;
	GError* _inner_error0_;
};

struct _GraniteAsyncImageSetFromIconNameAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GraniteAsyncImage* self;
	gchar* icon_name;
	GtkIconSize icon_size;
	GCancellable* cancellable;
	gint width;
	gint height;
	gint _tmp0_;
	gint _tmp1_;
	gboolean _tmp2_;
	GThemedIcon* _tmp3_;
	GThemedIcon* _tmp4_;
	GError* e;
	GError* _tmp5_;
	GError* _tmp6_;
	GError* _inner_error0_;
};

struct _GraniteAsyncImageSetFromFileAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GraniteAsyncImage* self;
	GFile* file;
	gint width;
	gint height;
	gboolean preserve_aspect_ratio;
	GCancellable* cancellable;
	gboolean _tmp0_;
	GFileInputStream* stream;
	GFileInputStream* _tmp1_;
	GdkPixbuf* pixbuf;
	GFileInputStream* _tmp2_;
	GdkPixbuf* _tmp3_;
	GdkPixbuf* _tmp4_;
	cairo_surface_t* _tmp5_;
	cairo_surface_t* _tmp6_;
	GError* e;
	GError* _tmp7_;
	GError* _tmp8_;
	GError* _inner_error0_;
};

struct _GraniteAsyncImageCacheEntry {
	GTypeInstance parent_instance;
	volatile int ref_count;
	gchar* icon;
	cairo_surface_t* surface;
	gint size;
	gint scale_factor;
	GraniteAsyncImageCacheEntryPrivate * priv;
};

struct _GraniteAsyncImageCacheEntryClass {
	GTypeClass parent_class;
	void (*finalize) (GraniteAsyncImageCacheEntry *self);
};

struct _GraniteAsyncImageSetFromGiconAsyncInternalData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GraniteAsyncImage* self;
	GIcon* icon;
	gint size;
	GCancellable* cancellable;
	gboolean bypass_cache;
	gboolean _tmp0_;
	gchar* target_icon;
	gchar* _tmp1_;
	GeeArrayList* _entry_list;
	GeeArrayList* _tmp2_;
	GeeArrayList* _tmp3_;
	gint _entry_size;
	GeeArrayList* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	gint _entry_index;
	gint _tmp7_;
	gint _tmp8_;
	GraniteAsyncImageCacheEntry* entry;
	GeeArrayList* _tmp9_;
	gpointer _tmp10_;
	gboolean _tmp11_;
	gboolean _tmp12_;
	GraniteAsyncImageCacheEntry* _tmp13_;
	const gchar* _tmp14_;
	const gchar* _tmp15_;
	GraniteAsyncImageCacheEntry* _tmp16_;
	GraniteAsyncImageCacheEntry* _tmp17_;
	GraniteAsyncImageCacheEntry* _tmp18_;
	cairo_surface_t* _tmp19_;
	GFile* _tmp20_;
	GFile* _tmp21_;
	GError* e;
	GError* _tmp22_;
	GError* _tmp23_;
	GtkStyleContext* style_context;
	GtkStyleContext* _tmp24_;
	GtkStyleContext* _tmp25_;
	GtkIconTheme* theme;
	GtkStyleContext* _tmp26_;
	GdkScreen* _tmp27_;
	GtkIconTheme* _tmp28_;
	GtkIconTheme* _tmp29_;
	GtkIconLookupFlags flags;
	GtkStyleContext* _tmp30_;
	GtkIconLookupFlags _tmp31_;
	GtkIconLookupFlags _tmp32_;
	GtkIconInfo* info;
	GtkIconTheme* _tmp33_;
	GtkIconLookupFlags _tmp34_;
	GtkIconInfo* _tmp35_;
	GtkIconInfo* _tmp36_;
	gchar* _tmp37_;
	gchar* _tmp38_;
	gchar* _tmp39_;
	gchar* _tmp40_;
	GError* _tmp41_;
	GError* _tmp42_;
	GdkPixbuf* pixbuf;
	GtkIconInfo* _tmp43_;
	GdkPixbuf* _tmp44_;
	GtkIconInfo* _tmp45_;
	GtkStyleContext* _tmp46_;
	GdkPixbuf* _tmp47_;
	GdkPixbuf* _tmp48_;
	GdkPixbuf* _tmp49_;
	GtkIconInfo* _tmp50_;
	GdkPixbuf* _tmp51_;
	GdkPixbuf* _tmp52_;
	GdkPixbuf* _tmp53_;
	cairo_surface_t* _tmp54_;
	cairo_surface_t* _tmp55_;
	GraniteAsyncImageCacheEntry* _vala1_entry;
	gchar* _tmp56_;
	gchar* _tmp57_;
	cairo_surface_t* _tmp58_;
	cairo_surface_t* _tmp59_;
	cairo_surface_t* _tmp60_;
	GraniteAsyncImageCacheEntry* _tmp61_;
	GraniteAsyncImageCacheEntry* _tmp62_;
	GeeArrayList* _tmp63_;
	GraniteAsyncImageCacheEntry* _tmp64_;
	GError* _vala1_e;
	GError* _tmp65_;
	GError* _tmp66_;
	GError* _inner_error0_;
};

struct _GraniteAsyncImageUpdateData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GraniteAsyncImage* self;
	gboolean bypass_cache;
	gboolean _tmp0_;
	GIcon* _tmp1_;
	gboolean _tmp2_;
	GIcon* _tmp3_;
	GIcon* _tmp4_;
	GIcon* _tmp5_;
	gint _tmp6_;
	GError* e;
	GError* _tmp7_;
	const gchar* _tmp8_;
	GError* _inner_error0_;
};

struct _GraniteAsyncImageParamSpecCacheEntry {
	GParamSpec parent_instance;
};

static gint GraniteAsyncImage_private_offset;
static gpointer granite_async_image_parent_class = NULL;
static GeeArrayList* granite_async_image_cache;
static GeeArrayList* granite_async_image_cache = NULL;
static gpointer granite_async_image_cache_entry_parent_class = NULL;

GType granite_async_image_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteAsyncImage, g_object_unref)
static gpointer granite_async_image_cache_entry_ref (gpointer instance);
static void granite_async_image_cache_entry_unref (gpointer instance);
static GParamSpec* granite_async_image_param_spec_cache_entry (const gchar* name,
                                                        const gchar* nick,
                                                        const gchar* blurb,
                                                        GType object_type,
                                                        GParamFlags flags) G_GNUC_UNUSED;
static void granite_async_image_value_set_cache_entry (GValue* value,
                                                gpointer v_object) G_GNUC_UNUSED;
static void granite_async_image_value_take_cache_entry (GValue* value,
                                                 gpointer v_object) G_GNUC_UNUSED;
static gpointer granite_async_image_value_get_cache_entry (const GValue* value) G_GNUC_UNUSED;
static GType granite_async_image_cache_entry_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteAsyncImageCacheEntry, granite_async_image_cache_entry_unref)
static gboolean granite_async_image_get_load_on_realize (GraniteAsyncImage* self);
static void granite_async_image_set_load_on_realize (GraniteAsyncImage* self,
                                              gboolean value);
static gboolean granite_async_image_get_auto_size_request (GraniteAsyncImage* self);
static void granite_async_image_set_auto_size_request (GraniteAsyncImage* self,
                                                gboolean value);
GIcon* granite_async_image_get_gicon_async (GraniteAsyncImage* self);
static void granite_async_image_set_gicon_async (GraniteAsyncImage* self,
                                          GIcon* value);
gint granite_async_image_get_size_async (GraniteAsyncImage* self);
static void granite_async_image_set_size_async (GraniteAsyncImage* self,
                                         gint value);
GraniteAsyncImage* granite_async_image_new (gboolean load_on_realize,
                                            gboolean auto_size_request);
GraniteAsyncImage* granite_async_image_construct (GType object_type,
                                                  gboolean load_on_realize,
                                                  gboolean auto_size_request);
GraniteAsyncImage* granite_async_image_new_from_gicon_async (GIcon* icon,
                                                             gint size,
                                                             gboolean load_on_realize,
                                                             gboolean auto_size_request);
GraniteAsyncImage* granite_async_image_construct_from_gicon_async (GType object_type,
                                                                   GIcon* icon,
                                                                   gint size,
                                                                   gboolean load_on_realize,
                                                                   gboolean auto_size_request);
void granite_async_image_set_from_gicon_async (GraniteAsyncImage* self,
                                               GIcon* icon,
                                               gint size,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
void granite_async_image_set_from_gicon_finish (GraniteAsyncImage* self,
                                                GAsyncResult* _res_,
                                                GError** error);
GraniteAsyncImage* granite_async_image_new_from_icon_name_async (const gchar* icon_name,
                                                                 GtkIconSize icon_size,
                                                                 gboolean load_on_realize,
                                                                 gboolean auto_size_request);
GraniteAsyncImage* granite_async_image_construct_from_icon_name_async (GType object_type,
                                                                       const gchar* icon_name,
                                                                       GtkIconSize icon_size,
                                                                       gboolean load_on_realize,
                                                                       gboolean auto_size_request);
void granite_async_image_set_from_icon_name_async (GraniteAsyncImage* self,
                                                   const gchar* icon_name,
                                                   GtkIconSize icon_size,
                                                   GCancellable* cancellable,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
void granite_async_image_set_from_icon_name_finish (GraniteAsyncImage* self,
                                                    GAsyncResult* _res_,
                                                    GError** error);
static void granite_async_image_set_from_gicon_async_data_free (gpointer _data);
static gboolean granite_async_image_set_from_gicon_async_co (GraniteAsyncImageSetFromGiconAsyncData* _data_);
static void granite_async_image_set_from_gicon_async_internal (GraniteAsyncImage* self,
                                                        GIcon* icon,
                                                        gint size,
                                                        GCancellable* cancellable,
                                                        gboolean bypass_cache,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_);
static void granite_async_image_set_from_gicon_async_internal_finish (GraniteAsyncImage* self,
                                                               GAsyncResult* _res_,
                                                               GError** error);
static void granite_async_image_set_from_gicon_async_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_);
static void granite_async_image_set_from_icon_name_async_data_free (gpointer _data);
static gboolean granite_async_image_set_from_icon_name_async_co (GraniteAsyncImageSetFromIconNameAsyncData* _data_);
static void granite_async_image_set_from_icon_name_async_ready (GObject* source_object,
                                                         GAsyncResult* _res_,
                                                         gpointer _user_data_);
static void granite_async_image_set_from_file_async_data_free (gpointer _data);
void granite_async_image_set_from_file_async (GraniteAsyncImage* self,
                                              GFile* file,
                                              gint width,
                                              gint height,
                                              gboolean preserve_aspect_ratio,
                                              GCancellable* cancellable,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
void granite_async_image_set_from_file_finish (GraniteAsyncImage* self,
                                               GAsyncResult* _res_,
                                               GError** error);
static gboolean granite_async_image_set_from_file_async_co (GraniteAsyncImageSetFromFileAsyncData* _data_);
static void granite_async_image_set_from_file_async_ready (GObject* source_object,
                                                    GAsyncResult* _res_,
                                                    gpointer _user_data_);
static void granite_async_image_reset_size_request (GraniteAsyncImage* self);
static void granite_async_image_set_from_gicon_async_internal_data_free (gpointer _data);
static gboolean granite_async_image_set_from_gicon_async_internal_co (GraniteAsyncImageSetFromGiconAsyncInternalData* _data_);
static void granite_async_image_set_from_gicon_async_internal_ready (GObject* source_object,
                                                              GAsyncResult* _res_,
                                                              gpointer _user_data_);
static GraniteAsyncImageCacheEntry* granite_async_image_cache_entry_new (const gchar* icon,
                                                                  cairo_surface_t* surface,
                                                                  gint size,
                                                                  gint scale_factor);
static GraniteAsyncImageCacheEntry* granite_async_image_cache_entry_construct (GType object_type,
                                                                        const gchar* icon,
                                                                        cairo_surface_t* surface,
                                                                        gint size,
                                                                        gint scale_factor);
static void granite_async_image_update_data_free (gpointer _data);
static void granite_async_image_update (GraniteAsyncImage* self,
                                 gboolean bypass_cache,
                                 GAsyncReadyCallback _callback_,
                                 gpointer _user_data_);
static void granite_async_image_update_finish (GraniteAsyncImage* self,
                                        GAsyncResult* _res_);
static gboolean granite_async_image_update_co (GraniteAsyncImageUpdateData* _data_);
static void granite_async_image_update_ready (GObject* source_object,
                                       GAsyncResult* _res_,
                                       gpointer _user_data_);
static void granite_async_image_cache_entry_finalize (GraniteAsyncImageCacheEntry * obj);
static GType granite_async_image_cache_entry_get_type_once (void);
static GObject * granite_async_image_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
static void _granite_async_image____lambda14_ (GraniteAsyncImage* self);
static void __granite_async_image____lambda14__gtk_widget_realize (GtkWidget* _sender,
                                                            gpointer self);
static void _granite_async_image___lambda15_ (GraniteAsyncImage* self);
static void __granite_async_image___lambda15__gtk_widget_style_updated (GtkWidget* _sender,
                                                                 gpointer self);
static void _granite_async_image___lambda16_ (GraniteAsyncImage* self);
static void __granite_async_image___lambda16__gtk_widget_direction_changed (GtkWidget* _sender,
                                                                     GtkTextDirection previous_direction,
                                                                     gpointer self);
static void _granite_async_image___lambda17_ (GraniteAsyncImage* self);
static void __granite_async_image___lambda17__g_object_notify (GObject* _sender,
                                                        GParamSpec* pspec,
                                                        gpointer self);
static void granite_async_image_finalize (GObject * obj);
static GType granite_async_image_get_type_once (void);
static void _vala_granite_async_image_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_granite_async_image_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);

static inline gpointer
granite_async_image_get_instance_private (GraniteAsyncImage* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteAsyncImage_private_offset);
}

static gboolean
granite_async_image_get_load_on_realize (GraniteAsyncImage* self)
{
	gboolean result;
#line 72 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 72 "../lib/Widgets/AsyncImage.vala"
	result = self->priv->_load_on_realize;
#line 72 "../lib/Widgets/AsyncImage.vala"
	return result;
#line 477 "AsyncImage.c"
}

static void
granite_async_image_set_load_on_realize (GraniteAsyncImage* self,
                                         gboolean value)
{
	gboolean old_value;
#line 72 "../lib/Widgets/AsyncImage.vala"
	g_return_if_fail (self != NULL);
#line 72 "../lib/Widgets/AsyncImage.vala"
	old_value = granite_async_image_get_load_on_realize (self);
#line 72 "../lib/Widgets/AsyncImage.vala"
	if (old_value != value) {
#line 72 "../lib/Widgets/AsyncImage.vala"
		self->priv->_load_on_realize = value;
#line 72 "../lib/Widgets/AsyncImage.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_async_image_properties[GRANITE_ASYNC_IMAGE_LOAD_ON_REALIZE_PROPERTY]);
#line 495 "AsyncImage.c"
	}
}

static gboolean
granite_async_image_get_auto_size_request (GraniteAsyncImage* self)
{
	gboolean result;
#line 79 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 79 "../lib/Widgets/AsyncImage.vala"
	result = self->priv->_auto_size_request;
#line 79 "../lib/Widgets/AsyncImage.vala"
	return result;
#line 509 "AsyncImage.c"
}

static void
granite_async_image_set_auto_size_request (GraniteAsyncImage* self,
                                           gboolean value)
{
	gboolean old_value;
#line 79 "../lib/Widgets/AsyncImage.vala"
	g_return_if_fail (self != NULL);
#line 79 "../lib/Widgets/AsyncImage.vala"
	old_value = granite_async_image_get_auto_size_request (self);
#line 79 "../lib/Widgets/AsyncImage.vala"
	if (old_value != value) {
#line 79 "../lib/Widgets/AsyncImage.vala"
		self->priv->_auto_size_request = value;
#line 79 "../lib/Widgets/AsyncImage.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_async_image_properties[GRANITE_ASYNC_IMAGE_AUTO_SIZE_REQUEST_PROPERTY]);
#line 527 "AsyncImage.c"
	}
}

GIcon*
granite_async_image_get_gicon_async (GraniteAsyncImage* self)
{
	GIcon* result;
	GIcon* _tmp0_;
#line 86 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 86 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = self->priv->_gicon_async;
#line 86 "../lib/Widgets/AsyncImage.vala"
	result = _tmp0_;
#line 86 "../lib/Widgets/AsyncImage.vala"
	return result;
#line 544 "AsyncImage.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 86 "../lib/Widgets/AsyncImage.vala"
	return self ? g_object_ref (self) : NULL;
#line 552 "AsyncImage.c"
}

static void
granite_async_image_set_gicon_async (GraniteAsyncImage* self,
                                     GIcon* value)
{
	GIcon* old_value;
#line 86 "../lib/Widgets/AsyncImage.vala"
	g_return_if_fail (self != NULL);
#line 86 "../lib/Widgets/AsyncImage.vala"
	old_value = granite_async_image_get_gicon_async (self);
#line 86 "../lib/Widgets/AsyncImage.vala"
	if (old_value != value) {
#line 566 "AsyncImage.c"
		GIcon* _tmp0_;
#line 86 "../lib/Widgets/AsyncImage.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 86 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (self->priv->_gicon_async);
#line 86 "../lib/Widgets/AsyncImage.vala"
		self->priv->_gicon_async = _tmp0_;
#line 86 "../lib/Widgets/AsyncImage.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_async_image_properties[GRANITE_ASYNC_IMAGE_GICON_ASYNC_PROPERTY]);
#line 576 "AsyncImage.c"
	}
}

gint
granite_async_image_get_size_async (GraniteAsyncImage* self)
{
	gint result;
#line 93 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 93 "../lib/Widgets/AsyncImage.vala"
	result = self->priv->_size_async;
#line 93 "../lib/Widgets/AsyncImage.vala"
	return result;
#line 590 "AsyncImage.c"
}

static void
granite_async_image_set_size_async (GraniteAsyncImage* self,
                                    gint value)
{
	gint old_value;
#line 93 "../lib/Widgets/AsyncImage.vala"
	g_return_if_fail (self != NULL);
#line 93 "../lib/Widgets/AsyncImage.vala"
	old_value = granite_async_image_get_size_async (self);
#line 93 "../lib/Widgets/AsyncImage.vala"
	if (old_value != value) {
#line 93 "../lib/Widgets/AsyncImage.vala"
		self->priv->_size_async = value;
#line 93 "../lib/Widgets/AsyncImage.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_async_image_properties[GRANITE_ASYNC_IMAGE_SIZE_ASYNC_PROPERTY]);
#line 608 "AsyncImage.c"
	}
}

/**
     * Creates a new {@link Granite.AsyncImage} that displays
     * a requested icon or file to display asynchronously.
     *
     * The ``load_on_realize`` boolean parameter specifies if the requested image should load when
     * it's about to render and show. This is useful when you don't want to have the image data
     * loaded into memory immediately after calling {@link Granite.AsyncImage.set_from_gicon_async}.
     * Internally this parameter causes the {@link Granite.AsyncImage} to connect to the {@link Gtk.Widget.realize} signal.
     *
     * ``auto_size_request`` boolean parameter specifies if AsyncImage should allocate initial
     * space when loading the image. This is useful when the image is not yet loaded and the widget
     * should act as a placeholder until the image is loaded. Calling any of the ``set_from`` methods will
     * call the {@link Gtk.Widget.set_size_request} with the passed ``size`` or ``width`` and ``height`` if you called {@link Granite.AsyncImage.set_from_file_async}.
     * When image is loaded and shown the size request is then reset to the original values.
     *
     * @param load_on_realize if ``true`` the image will be loaded when it's rendered, false to load the image immediately
     * @param auto_size_request if the widget should act as a placeholder when the image is not yet loaded
     */
GraniteAsyncImage*
granite_async_image_construct (GType object_type,
                               gboolean load_on_realize,
                               gboolean auto_size_request)
{
	GraniteAsyncImage * self = NULL;
#line 116 "../lib/Widgets/AsyncImage.vala"
	self = (GraniteAsyncImage*) g_object_new (object_type, "load-on-realize", load_on_realize, "auto-size-request", auto_size_request, NULL);
#line 115 "../lib/Widgets/AsyncImage.vala"
	return self;
#line 640 "AsyncImage.c"
}

GraniteAsyncImage*
granite_async_image_new (gboolean load_on_realize,
                         gboolean auto_size_request)
{
#line 115 "../lib/Widgets/AsyncImage.vala"
	return granite_async_image_construct (GRANITE_TYPE_ASYNC_IMAGE, load_on_realize, auto_size_request);
#line 649 "AsyncImage.c"
}

/**
     * Creates a new {@link Granite.AsyncImage} with the supplied
     * ``icon`` and ``size``. See {@link Granite.AsyncImage.AsyncImage} for more details.
     *
     * This is equivalent to calling {@link Granite.AsyncImage.AsyncImage} and {@link Granite.AsyncImage.set_from_gicon_async}.
     *
     * @param icon the {@link GLib.Icon} to display in the image
     * @param size the size of the icon, ``-1`` to load the default size
     * @param load_on_realize if ``true`` the image will be loaded when it's rendered, false to load the image immediately
     * @param auto_size_request if the widget should act as a placeholder when the image is not yet loaded
     */
GraniteAsyncImage*
granite_async_image_construct_from_gicon_async (GType object_type,
                                                GIcon* icon,
                                                gint size,
                                                gboolean load_on_realize,
                                                gboolean auto_size_request)
{
	GraniteAsyncImage * self = NULL;
#line 130 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (icon != NULL, NULL);
#line 136 "../lib/Widgets/AsyncImage.vala"
	self = (GraniteAsyncImage*) g_object_new (object_type, "load-on-realize", load_on_realize, "auto-size-request", auto_size_request, NULL);
#line 137 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_gicon_async (self, icon, size, NULL, NULL, NULL);
#line 130 "../lib/Widgets/AsyncImage.vala"
	return self;
#line 679 "AsyncImage.c"
}

GraniteAsyncImage*
granite_async_image_new_from_gicon_async (GIcon* icon,
                                          gint size,
                                          gboolean load_on_realize,
                                          gboolean auto_size_request)
{
#line 130 "../lib/Widgets/AsyncImage.vala"
	return granite_async_image_construct_from_gicon_async (GRANITE_TYPE_ASYNC_IMAGE, icon, size, load_on_realize, auto_size_request);
#line 690 "AsyncImage.c"
}

/**
     * Creates a new {@link Granite.AsyncImage} with the supplied
     * ``icon_name`` and {@link Gtk.IconSize}. See {@link Granite.AsyncImage.AsyncImage} for more details.
     *
     * This is equivalent to calling {@link Granite.AsyncImage.AsyncImage} and {@link Granite.AsyncImage.set_from_icon_name_async}.
     *
     * @param icon_name the icon name to display in the image
     * @param icon_size the {@link Gtk.IconSize} as the size for the image
     * @param load_on_realize if ``true`` the image will be loaded when it's rendered, false to load the image immediately
     * @param auto_size_request if the widget should act as a placeholder when the image is not yet loaded
     */
GraniteAsyncImage*
granite_async_image_construct_from_icon_name_async (GType object_type,
                                                    const gchar* icon_name,
                                                    GtkIconSize icon_size,
                                                    gboolean load_on_realize,
                                                    gboolean auto_size_request)
{
	GraniteAsyncImage * self = NULL;
#line 151 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (icon_name != NULL, NULL);
#line 157 "../lib/Widgets/AsyncImage.vala"
	self = (GraniteAsyncImage*) g_object_new (object_type, "load-on-realize", load_on_realize, "auto-size-request", auto_size_request, NULL);
#line 158 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_icon_name_async (self, icon_name, icon_size, NULL, NULL, NULL);
#line 151 "../lib/Widgets/AsyncImage.vala"
	return self;
#line 720 "AsyncImage.c"
}

GraniteAsyncImage*
granite_async_image_new_from_icon_name_async (const gchar* icon_name,
                                              GtkIconSize icon_size,
                                              gboolean load_on_realize,
                                              gboolean auto_size_request)
{
#line 151 "../lib/Widgets/AsyncImage.vala"
	return granite_async_image_construct_from_icon_name_async (GRANITE_TYPE_ASYNC_IMAGE, icon_name, icon_size, load_on_realize, auto_size_request);
#line 731 "AsyncImage.c"
}

static void
granite_async_image_set_from_gicon_async_data_free (gpointer _data)
{
	GraniteAsyncImageSetFromGiconAsyncData* _data_;
	_data_ = _data;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->icon);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_slice_free (GraniteAsyncImageSetFromGiconAsyncData, _data_);
#line 747 "AsyncImage.c"
}

void
granite_async_image_set_from_gicon_async (GraniteAsyncImage* self,
                                          GIcon* icon,
                                          gint size,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	GraniteAsyncImageSetFromGiconAsyncData* _data_;
	GraniteAsyncImage* _tmp0_;
	GIcon* _tmp1_;
	GCancellable* _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_slice_new0 (GraniteAsyncImageSetFromGiconAsyncData);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, _callback_, _user_data_);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_task_set_task_data (_data_->_async_result, _data_, granite_async_image_set_from_gicon_async_data_free);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->self = _tmp0_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp1_ = _g_object_ref0 (icon);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->icon);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->icon = _tmp1_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->size = size;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp2_ = _g_object_ref0 (cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->cancellable = _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_gicon_async_co (_data_);
#line 788 "AsyncImage.c"
}

void
granite_async_image_set_from_gicon_finish (GraniteAsyncImage* self,
                                           GAsyncResult* _res_,
                                           GError** error)
{
	GraniteAsyncImageSetFromGiconAsyncData* _data_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 50 "../lib/Widgets/AsyncImage.vala"
	if (NULL == _data_) {
#line 50 "../lib/Widgets/AsyncImage.vala"
		return;
#line 803 "AsyncImage.c"
	}
}

/**
     * Sets the image to display an {@link GLib.Icon} with a specified size asynchronously.
     *
     * This method sets the {@link Granite.AsyncImage.gicon_async} and {@link Granite.AsyncImage.size_async} properties
     * and depending on the {@link Granite.AsyncImage.load_on_realize} setting, loads it when the image realizes or
     * loads it immediately.
     *
     * Use {@link GLib.ThemedIcon} or {@link Granite.AsyncImage.set_from_icon_name_async} to load the image
     * from an icon name.
     *
     * If the ``icon`` is a {@link GLib.FileIcon} then the image will be loaded using  the {@link Granite.AsyncImage.set_from_file_async}
     * method with the supplied size for both ``width`` and ``height`` with preserving the aspect ratio of the image.
     *
     * If the {@link Granite.AsyncImage.load_on_realize} is ``true``, the error will never be thrown in this method since
     * the loading will happen internally in the AsyncImage when the {@link Gtk.Widget.realize} signal is invoked.
     * In this case, a warning will be printed with relevant information about a fauilure.
     *
     * @param icon the {@link GLib.Icon} to display in the image
     * @param size the size of the icon, ``0`` will clear the {@link Gtk.Image.pixbuf}, ``-1`` to load the default size
     * @param cancellable the cancellable to stop loading the icon
     *
     * @throws GLib.Error when the the icon was not found or failed to load
     */
static void
granite_async_image_set_from_gicon_async_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_)
{
	GraniteAsyncImageSetFromGiconAsyncData* _data_;
#line 218 "../lib/Widgets/AsyncImage.vala"
	_data_ = _user_data_;
#line 218 "../lib/Widgets/AsyncImage.vala"
	_data_->_source_object_ = source_object;
#line 218 "../lib/Widgets/AsyncImage.vala"
	_data_->_res_ = _res_;
#line 218 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_gicon_async_co (_data_);
#line 844 "AsyncImage.c"
}

static gpointer
_g_error_copy0 (gpointer self)
{
#line 220 "../lib/Widgets/AsyncImage.vala"
	return self ? g_error_copy (self) : NULL;
#line 852 "AsyncImage.c"
}

static gboolean
granite_async_image_set_from_gicon_async_co (GraniteAsyncImageSetFromGiconAsyncData* _data_)
{
#line 208 "../lib/Widgets/AsyncImage.vala"
	switch (_data_->_state_) {
#line 208 "../lib/Widgets/AsyncImage.vala"
		case 0:
#line 862 "AsyncImage.c"
		goto _state_0;
#line 208 "../lib/Widgets/AsyncImage.vala"
		case 1:
#line 866 "AsyncImage.c"
		goto _state_1;
		default:
#line 208 "../lib/Widgets/AsyncImage.vala"
		g_assert_not_reached ();
#line 871 "AsyncImage.c"
	}
	_state_0:
#line 209 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_gicon_async (_data_->self, _data_->icon);
#line 210 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_size_async (_data_->self, _data_->size);
#line 212 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp0_ = _data_->self->priv->_auto_size_request;
#line 212 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_tmp0_) {
#line 213 "../lib/Widgets/AsyncImage.vala"
		gtk_widget_set_size_request ((GtkWidget*) _data_->self, _data_->size, _data_->size);
#line 884 "AsyncImage.c"
	}
#line 216 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp1_ = _data_->self->priv->_load_on_realize;
#line 216 "../lib/Widgets/AsyncImage.vala"
	if (!_data_->_tmp1_) {
#line 890 "AsyncImage.c"
		{
#line 218 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp2_ = _data_->self->priv->_gicon_async;
#line 218 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp3_ = _data_->self->priv->_size_async;
#line 218 "../lib/Widgets/AsyncImage.vala"
			_data_->_state_ = 1;
#line 218 "../lib/Widgets/AsyncImage.vala"
			granite_async_image_set_from_gicon_async_internal (_data_->self, _data_->_tmp2_, _data_->_tmp3_, _data_->cancellable, FALSE, granite_async_image_set_from_gicon_async_ready, _data_);
#line 218 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 902 "AsyncImage.c"
			_state_1:
#line 218 "../lib/Widgets/AsyncImage.vala"
			granite_async_image_set_from_gicon_async_internal_finish (_data_->self, _data_->_res_, &_data_->_inner_error0_);
#line 218 "../lib/Widgets/AsyncImage.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 908 "AsyncImage.c"
				goto __catch0_g_error;
			}
		}
		goto __finally0;
		__catch0_g_error:
		{
#line 217 "../lib/Widgets/AsyncImage.vala"
			_data_->e = _data_->_inner_error0_;
#line 217 "../lib/Widgets/AsyncImage.vala"
			_data_->_inner_error0_ = NULL;
#line 220 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp4_ = _data_->e;
#line 220 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp5_ = _g_error_copy0 (_data_->_tmp4_);
#line 220 "../lib/Widgets/AsyncImage.vala"
			_data_->_inner_error0_ = _data_->_tmp5_;
#line 220 "../lib/Widgets/AsyncImage.vala"
			_g_error_free0 (_data_->e);
#line 927 "AsyncImage.c"
			goto __finally0;
		}
		__finally0:
#line 217 "../lib/Widgets/AsyncImage.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 217 "../lib/Widgets/AsyncImage.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 217 "../lib/Widgets/AsyncImage.vala"
			g_object_unref (_data_->_async_result);
#line 217 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 939 "AsyncImage.c"
		}
	}
#line 208 "../lib/Widgets/AsyncImage.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 208 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_state_ != 0) {
#line 208 "../lib/Widgets/AsyncImage.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 208 "../lib/Widgets/AsyncImage.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 950 "AsyncImage.c"
		}
	}
#line 208 "../lib/Widgets/AsyncImage.vala"
	g_object_unref (_data_->_async_result);
#line 208 "../lib/Widgets/AsyncImage.vala"
	return FALSE;
#line 957 "AsyncImage.c"
}

static void
granite_async_image_set_from_icon_name_async_data_free (gpointer _data)
{
	GraniteAsyncImageSetFromIconNameAsyncData* _data_;
	_data_ = _data;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_free0 (_data_->icon_name);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_slice_free (GraniteAsyncImageSetFromIconNameAsyncData, _data_);
#line 973 "AsyncImage.c"
}

void
granite_async_image_set_from_icon_name_async (GraniteAsyncImage* self,
                                              const gchar* icon_name,
                                              GtkIconSize icon_size,
                                              GCancellable* cancellable,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_)
{
	GraniteAsyncImageSetFromIconNameAsyncData* _data_;
	GraniteAsyncImage* _tmp0_;
	gchar* _tmp1_;
	GCancellable* _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_slice_new0 (GraniteAsyncImageSetFromIconNameAsyncData);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, _callback_, _user_data_);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_task_set_task_data (_data_->_async_result, _data_, granite_async_image_set_from_icon_name_async_data_free);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->self = _tmp0_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp1_ = g_strdup (icon_name);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_free0 (_data_->icon_name);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->icon_name = _tmp1_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->icon_size = icon_size;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp2_ = _g_object_ref0 (cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->cancellable = _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_icon_name_async_co (_data_);
#line 1014 "AsyncImage.c"
}

void
granite_async_image_set_from_icon_name_finish (GraniteAsyncImage* self,
                                               GAsyncResult* _res_,
                                               GError** error)
{
	GraniteAsyncImageSetFromIconNameAsyncData* _data_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 50 "../lib/Widgets/AsyncImage.vala"
	if (NULL == _data_) {
#line 50 "../lib/Widgets/AsyncImage.vala"
		return;
#line 1029 "AsyncImage.c"
	}
}

/**
     * A wrapper for {@link Granite.AsyncImage.set_from_gicon_async} to display an icon name.
     *
     * This is a convenience method for setting an icon name with a desired {@link Gtk.IconSize}. Note that you'll not be
     * able to change the icon size afterwards with {@link Gtk.Image.pixel_size} or {@link Gtk.Image.icon_size}. You will
     * have to call one of the {@link Granite.AsyncImage} set_from_ methods to change it's size.
     *
     * See {@link Granite.AsyncImage.set_from_gicon_async} for more details.
     *
     * @param icon_name the icon name to display in the image
     * @param icon_size the {@link Gtk.IconSize} as the size for the image
     * @param cancellable the cancellable to stop loading the icon
     *
     * @throws GLib.Error when the the icon was not found or failed to load
     */
static void
granite_async_image_set_from_icon_name_async_ready (GObject* source_object,
                                                    GAsyncResult* _res_,
                                                    gpointer _user_data_)
{
	GraniteAsyncImageSetFromIconNameAsyncData* _data_;
#line 252 "../lib/Widgets/AsyncImage.vala"
	_data_ = _user_data_;
#line 252 "../lib/Widgets/AsyncImage.vala"
	_data_->_source_object_ = source_object;
#line 252 "../lib/Widgets/AsyncImage.vala"
	_data_->_res_ = _res_;
#line 252 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_icon_name_async_co (_data_);
#line 1062 "AsyncImage.c"
}

static gboolean
granite_async_image_set_from_icon_name_async_co (GraniteAsyncImageSetFromIconNameAsyncData* _data_)
{
#line 240 "../lib/Widgets/AsyncImage.vala"
	switch (_data_->_state_) {
#line 240 "../lib/Widgets/AsyncImage.vala"
		case 0:
#line 1072 "AsyncImage.c"
		goto _state_0;
#line 240 "../lib/Widgets/AsyncImage.vala"
		case 1:
#line 1076 "AsyncImage.c"
		goto _state_1;
		default:
#line 240 "../lib/Widgets/AsyncImage.vala"
		g_assert_not_reached ();
#line 1081 "AsyncImage.c"
	}
	_state_0:
#line 246 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp0_ = 0;
#line 246 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp1_ = 0;
#line 246 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp2_ = gtk_icon_size_lookup (_data_->icon_size, &_data_->_tmp0_, &_data_->_tmp1_);
#line 246 "../lib/Widgets/AsyncImage.vala"
	_data_->width = _data_->_tmp0_;
#line 246 "../lib/Widgets/AsyncImage.vala"
	_data_->height = _data_->_tmp1_;
#line 246 "../lib/Widgets/AsyncImage.vala"
	if (!_data_->_tmp2_) {
#line 247 "../lib/Widgets/AsyncImage.vala"
		g_warning ("AsyncImage.vala:247: Invalid icon size %d", (gint) _data_->icon_size);
#line 248 "../lib/Widgets/AsyncImage.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 248 "../lib/Widgets/AsyncImage.vala"
		if (_data_->_state_ != 0) {
#line 248 "../lib/Widgets/AsyncImage.vala"
			while (!g_task_get_completed (_data_->_async_result)) {
#line 248 "../lib/Widgets/AsyncImage.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1106 "AsyncImage.c"
			}
		}
#line 248 "../lib/Widgets/AsyncImage.vala"
		g_object_unref (_data_->_async_result);
#line 248 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1113 "AsyncImage.c"
	}
	{
#line 252 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp3_ = (GThemedIcon*) g_themed_icon_new (_data_->icon_name);
#line 252 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp4_ = _data_->_tmp3_;
#line 252 "../lib/Widgets/AsyncImage.vala"
		_data_->_state_ = 1;
#line 252 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_set_from_gicon_async (_data_->self, (GIcon*) _data_->_tmp4_, MIN (_data_->width, _data_->height), _data_->cancellable, granite_async_image_set_from_icon_name_async_ready, _data_);
#line 252 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1126 "AsyncImage.c"
		_state_1:
#line 252 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_set_from_gicon_finish (_data_->self, _data_->_res_, &_data_->_inner_error0_);
#line 252 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->_tmp4_);
#line 252 "../lib/Widgets/AsyncImage.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 1134 "AsyncImage.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 251 "../lib/Widgets/AsyncImage.vala"
		_data_->e = _data_->_inner_error0_;
#line 251 "../lib/Widgets/AsyncImage.vala"
		_data_->_inner_error0_ = NULL;
#line 254 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp5_ = _data_->e;
#line 254 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp6_ = _g_error_copy0 (_data_->_tmp5_);
#line 254 "../lib/Widgets/AsyncImage.vala"
		_data_->_inner_error0_ = _data_->_tmp6_;
#line 254 "../lib/Widgets/AsyncImage.vala"
		_g_error_free0 (_data_->e);
#line 1153 "AsyncImage.c"
		goto __finally0;
	}
	__finally0:
#line 251 "../lib/Widgets/AsyncImage.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 251 "../lib/Widgets/AsyncImage.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 251 "../lib/Widgets/AsyncImage.vala"
		g_object_unref (_data_->_async_result);
#line 251 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1165 "AsyncImage.c"
	}
#line 240 "../lib/Widgets/AsyncImage.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 240 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_state_ != 0) {
#line 240 "../lib/Widgets/AsyncImage.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 240 "../lib/Widgets/AsyncImage.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1175 "AsyncImage.c"
		}
	}
#line 240 "../lib/Widgets/AsyncImage.vala"
	g_object_unref (_data_->_async_result);
#line 240 "../lib/Widgets/AsyncImage.vala"
	return FALSE;
#line 1182 "AsyncImage.c"
}

static void
granite_async_image_set_from_file_async_data_free (gpointer _data)
{
	GraniteAsyncImageSetFromFileAsyncData* _data_;
	_data_ = _data;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->file);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_slice_free (GraniteAsyncImageSetFromFileAsyncData, _data_);
#line 1198 "AsyncImage.c"
}

void
granite_async_image_set_from_file_async (GraniteAsyncImage* self,
                                         GFile* file,
                                         gint width,
                                         gint height,
                                         gboolean preserve_aspect_ratio,
                                         GCancellable* cancellable,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_)
{
	GraniteAsyncImageSetFromFileAsyncData* _data_;
	GraniteAsyncImage* _tmp0_;
	GFile* _tmp1_;
	GCancellable* _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_slice_new0 (GraniteAsyncImageSetFromFileAsyncData);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, _callback_, _user_data_);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_task_set_task_data (_data_->_async_result, _data_, granite_async_image_set_from_file_async_data_free);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->self = _tmp0_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp1_ = _g_object_ref0 (file);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->file);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->file = _tmp1_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->width = width;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->height = height;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->preserve_aspect_ratio = preserve_aspect_ratio;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp2_ = _g_object_ref0 (cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->cancellable = _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_file_async_co (_data_);
#line 1245 "AsyncImage.c"
}

void
granite_async_image_set_from_file_finish (GraniteAsyncImage* self,
                                          GAsyncResult* _res_,
                                          GError** error)
{
	GraniteAsyncImageSetFromFileAsyncData* _data_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 50 "../lib/Widgets/AsyncImage.vala"
	if (NULL == _data_) {
#line 50 "../lib/Widgets/AsyncImage.vala"
		return;
#line 1260 "AsyncImage.c"
	}
}

/**
     * Sets the image to display a {@link GLib.File} with requested width and height.
     *
     * ''Note that this method is not a wrapper to the main'' {@link Granite.AsyncImage.set_from_gicon_async} ''method''. Internally, it only creates
     * a {@link Gdk.Pixbuf} with an {@link GLib.InputStream}, loads it asynchronously and sets the {@link Gtk.Image}'s surface to the result.
     *
     * This method will reset the {@link Granite.AsyncImage.gicon_async} and {@link Granite.AsyncImage.size_async} properties to their
     * default values and will not make the {@link Granite.AsyncImage} update the image when the scale factor or icon theme changes.
     *
     * For the time that the image is loaded, the size request of the AsyncImage will be set to ``width`` and ``height`` if ``auto_size_request`` is set to ``true``
     *
     * @param file the {@link GLib.File} to display in the image
     * @param width the width of the final image, ``-1`` to not constrain the width
     * @param height the height of the final image, ``-1`` to not constrain the height
     * @param preserve_aspect_ratio ``true`` to preserve the image's aspect ratio
     * @param cancellable the cancellable to stop loading the image
     *
     * @throws GLib.Error when the the file was not found or failed to load
     */
static void
granite_async_image_set_from_file_async_ready (GObject* source_object,
                                               GAsyncResult* _res_,
                                               gpointer _user_data_)
{
	GraniteAsyncImageSetFromFileAsyncData* _data_;
#line 292 "../lib/Widgets/AsyncImage.vala"
	_data_ = _user_data_;
#line 292 "../lib/Widgets/AsyncImage.vala"
	_data_->_source_object_ = source_object;
#line 292 "../lib/Widgets/AsyncImage.vala"
	_data_->_res_ = _res_;
#line 292 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_file_async_co (_data_);
#line 1297 "AsyncImage.c"
}

static gboolean
granite_async_image_set_from_file_async_co (GraniteAsyncImageSetFromFileAsyncData* _data_)
{
#line 277 "../lib/Widgets/AsyncImage.vala"
	switch (_data_->_state_) {
#line 277 "../lib/Widgets/AsyncImage.vala"
		case 0:
#line 1307 "AsyncImage.c"
		goto _state_0;
#line 277 "../lib/Widgets/AsyncImage.vala"
		case 1:
#line 1311 "AsyncImage.c"
		goto _state_1;
#line 277 "../lib/Widgets/AsyncImage.vala"
		case 2:
#line 1315 "AsyncImage.c"
		goto _state_2;
		default:
#line 277 "../lib/Widgets/AsyncImage.vala"
		g_assert_not_reached ();
#line 1320 "AsyncImage.c"
	}
	_state_0:
#line 284 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_gicon_async (_data_->self, NULL);
#line 285 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_size_async (_data_->self, -1);
#line 287 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp0_ = _data_->self->priv->_auto_size_request;
#line 287 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_tmp0_) {
#line 288 "../lib/Widgets/AsyncImage.vala"
		gtk_widget_set_size_request ((GtkWidget*) _data_->self, _data_->width, _data_->height);
#line 1333 "AsyncImage.c"
	}
	{
#line 292 "../lib/Widgets/AsyncImage.vala"
		_data_->_state_ = 1;
#line 292 "../lib/Widgets/AsyncImage.vala"
		g_file_read_async (_data_->file, G_PRIORITY_DEFAULT, NULL, granite_async_image_set_from_file_async_ready, _data_);
#line 292 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1342 "AsyncImage.c"
		_state_1:
#line 292 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp1_ = g_file_read_finish (_data_->file, _data_->_res_, &_data_->_inner_error0_);
#line 292 "../lib/Widgets/AsyncImage.vala"
		_data_->stream = _data_->_tmp1_;
#line 292 "../lib/Widgets/AsyncImage.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 1350 "AsyncImage.c"
			goto __catch0_g_error;
		}
#line 293 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp2_ = _data_->stream;
#line 293 "../lib/Widgets/AsyncImage.vala"
		_data_->_state_ = 2;
#line 293 "../lib/Widgets/AsyncImage.vala"
		gdk_pixbuf_new_from_stream_at_scale_async ((GInputStream*) _data_->_tmp2_, _data_->width * _data_->self->priv->current_scale_factor, _data_->height * _data_->self->priv->current_scale_factor, _data_->preserve_aspect_ratio, _data_->cancellable, granite_async_image_set_from_file_async_ready, _data_);
#line 293 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1361 "AsyncImage.c"
		_state_2:
#line 293 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp3_ = (GdkPixbuf*) gdk_pixbuf_new_from_stream_finish (_data_->_res_, &_data_->_inner_error0_);
#line 293 "../lib/Widgets/AsyncImage.vala"
		_data_->pixbuf = _data_->_tmp3_;
#line 293 "../lib/Widgets/AsyncImage.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 293 "../lib/Widgets/AsyncImage.vala"
			_g_object_unref0 (_data_->stream);
#line 1371 "AsyncImage.c"
			goto __catch0_g_error;
		}
#line 300 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp4_ = _data_->pixbuf;
#line 300 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp5_ = gdk_cairo_surface_create_from_pixbuf (_data_->_tmp4_, _data_->self->priv->current_scale_factor, NULL);
#line 300 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 300 "../lib/Widgets/AsyncImage.vala"
		g_object_set ((GtkImage*) _data_->self, "surface", _data_->_tmp6_, NULL);
#line 300 "../lib/Widgets/AsyncImage.vala"
		_cairo_surface_destroy0 (_data_->_tmp6_);
#line 301 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_reset_size_request (_data_->self);
#line 291 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->pixbuf);
#line 291 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->stream);
#line 1390 "AsyncImage.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 291 "../lib/Widgets/AsyncImage.vala"
		_data_->e = _data_->_inner_error0_;
#line 291 "../lib/Widgets/AsyncImage.vala"
		_data_->_inner_error0_ = NULL;
#line 303 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_reset_size_request (_data_->self);
#line 304 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp7_ = _data_->e;
#line 304 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp8_ = _g_error_copy0 (_data_->_tmp7_);
#line 304 "../lib/Widgets/AsyncImage.vala"
		_data_->_inner_error0_ = _data_->_tmp8_;
#line 304 "../lib/Widgets/AsyncImage.vala"
		_g_error_free0 (_data_->e);
#line 1409 "AsyncImage.c"
		goto __finally0;
	}
	__finally0:
#line 291 "../lib/Widgets/AsyncImage.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 291 "../lib/Widgets/AsyncImage.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 291 "../lib/Widgets/AsyncImage.vala"
		g_object_unref (_data_->_async_result);
#line 291 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1421 "AsyncImage.c"
	}
#line 277 "../lib/Widgets/AsyncImage.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 277 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_state_ != 0) {
#line 277 "../lib/Widgets/AsyncImage.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 277 "../lib/Widgets/AsyncImage.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1431 "AsyncImage.c"
		}
	}
#line 277 "../lib/Widgets/AsyncImage.vala"
	g_object_unref (_data_->_async_result);
#line 277 "../lib/Widgets/AsyncImage.vala"
	return FALSE;
#line 1438 "AsyncImage.c"
}

static void
granite_async_image_set_from_gicon_async_internal_data_free (gpointer _data)
{
	GraniteAsyncImageSetFromGiconAsyncInternalData* _data_;
	_data_ = _data;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->icon);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_slice_free (GraniteAsyncImageSetFromGiconAsyncInternalData, _data_);
#line 1454 "AsyncImage.c"
}

static void
granite_async_image_set_from_gicon_async_internal (GraniteAsyncImage* self,
                                                   GIcon* icon,
                                                   gint size,
                                                   GCancellable* cancellable,
                                                   gboolean bypass_cache,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_)
{
	GraniteAsyncImageSetFromGiconAsyncInternalData* _data_;
	GraniteAsyncImage* _tmp0_;
	GIcon* _tmp1_;
	GCancellable* _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_slice_new0 (GraniteAsyncImageSetFromGiconAsyncInternalData);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, _callback_, _user_data_);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_task_set_task_data (_data_->_async_result, _data_, granite_async_image_set_from_gicon_async_internal_data_free);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->self = _tmp0_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp1_ = _g_object_ref0 (icon);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->icon);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->icon = _tmp1_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->size = size;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp2_ = _g_object_ref0 (cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->cancellable);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->cancellable = _tmp2_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->bypass_cache = bypass_cache;
#line 50 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_gicon_async_internal_co (_data_);
#line 1498 "AsyncImage.c"
}

static void
granite_async_image_set_from_gicon_async_internal_finish (GraniteAsyncImage* self,
                                                          GAsyncResult* _res_,
                                                          GError** error)
{
	GraniteAsyncImageSetFromGiconAsyncInternalData* _data_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 50 "../lib/Widgets/AsyncImage.vala"
	if (NULL == _data_) {
#line 50 "../lib/Widgets/AsyncImage.vala"
		return;
#line 1513 "AsyncImage.c"
	}
}

static void
granite_async_image_set_from_gicon_async_internal_ready (GObject* source_object,
                                                         GAsyncResult* _res_,
                                                         gpointer _user_data_)
{
	GraniteAsyncImageSetFromGiconAsyncInternalData* _data_;
#line 336 "../lib/Widgets/AsyncImage.vala"
	_data_ = _user_data_;
#line 336 "../lib/Widgets/AsyncImage.vala"
	_data_->_source_object_ = source_object;
#line 336 "../lib/Widgets/AsyncImage.vala"
	_data_->_res_ = _res_;
#line 336 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_set_from_gicon_async_internal_co (_data_);
#line 1531 "AsyncImage.c"
}

static gboolean
granite_async_image_set_from_gicon_async_internal_co (GraniteAsyncImageSetFromGiconAsyncInternalData* _data_)
{
#line 308 "../lib/Widgets/AsyncImage.vala"
	switch (_data_->_state_) {
#line 308 "../lib/Widgets/AsyncImage.vala"
		case 0:
#line 1541 "AsyncImage.c"
		goto _state_0;
#line 308 "../lib/Widgets/AsyncImage.vala"
		case 1:
#line 1545 "AsyncImage.c"
		goto _state_1;
#line 308 "../lib/Widgets/AsyncImage.vala"
		case 2:
#line 1549 "AsyncImage.c"
		goto _state_2;
#line 308 "../lib/Widgets/AsyncImage.vala"
		case 3:
#line 1553 "AsyncImage.c"
		goto _state_3;
		default:
#line 308 "../lib/Widgets/AsyncImage.vala"
		g_assert_not_reached ();
#line 1558 "AsyncImage.c"
	}
	_state_0:
#line 314 "../lib/Widgets/AsyncImage.vala"
	_data_->self->priv->current_scale_factor = gtk_widget_get_scale_factor ((GtkWidget*) _data_->self);
#line 316 "../lib/Widgets/AsyncImage.vala"
	if (_data_->size == 0) {
#line 317 "../lib/Widgets/AsyncImage.vala"
		gtk_image_clear ((GtkImage*) _data_->self);
#line 318 "../lib/Widgets/AsyncImage.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 318 "../lib/Widgets/AsyncImage.vala"
		if (_data_->_state_ != 0) {
#line 318 "../lib/Widgets/AsyncImage.vala"
			while (!g_task_get_completed (_data_->_async_result)) {
#line 318 "../lib/Widgets/AsyncImage.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1575 "AsyncImage.c"
			}
		}
#line 318 "../lib/Widgets/AsyncImage.vala"
		g_object_unref (_data_->_async_result);
#line 318 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1582 "AsyncImage.c"
	} else {
#line 319 "../lib/Widgets/AsyncImage.vala"
		if (_data_->size != -1) {
#line 319 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp0_ = !_data_->bypass_cache;
#line 1588 "AsyncImage.c"
		} else {
#line 319 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp0_ = FALSE;
#line 1592 "AsyncImage.c"
		}
#line 319 "../lib/Widgets/AsyncImage.vala"
		if (_data_->_tmp0_) {
#line 320 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp1_ = g_icon_to_string (_data_->icon);
#line 320 "../lib/Widgets/AsyncImage.vala"
			_data_->target_icon = _data_->_tmp1_;
#line 1600 "AsyncImage.c"
			{
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_tmp2_ = granite_async_image_cache;
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_tmp3_ = _g_object_ref0 (_data_->_tmp2_);
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_entry_list = _data_->_tmp3_;
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_tmp4_ = _data_->_entry_list;
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_tmp5_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _data_->_tmp4_);
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_tmp6_ = _data_->_tmp5_;
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_entry_size = _data_->_tmp6_;
#line 321 "../lib/Widgets/AsyncImage.vala"
				_data_->_entry_index = -1;
#line 321 "../lib/Widgets/AsyncImage.vala"
				while (TRUE) {
#line 321 "../lib/Widgets/AsyncImage.vala"
					_data_->_entry_index = _data_->_entry_index + 1;
#line 321 "../lib/Widgets/AsyncImage.vala"
					_data_->_tmp7_ = _data_->_entry_index;
#line 321 "../lib/Widgets/AsyncImage.vala"
					_data_->_tmp8_ = _data_->_entry_size;
#line 321 "../lib/Widgets/AsyncImage.vala"
					if (!(_data_->_tmp7_ < _data_->_tmp8_)) {
#line 321 "../lib/Widgets/AsyncImage.vala"
						break;
#line 1630 "AsyncImage.c"
					}
#line 321 "../lib/Widgets/AsyncImage.vala"
					_data_->_tmp9_ = _data_->_entry_list;
#line 321 "../lib/Widgets/AsyncImage.vala"
					_data_->_tmp10_ = gee_abstract_list_get ((GeeAbstractList*) _data_->_tmp9_, _data_->_entry_index);
#line 321 "../lib/Widgets/AsyncImage.vala"
					_data_->entry = (GraniteAsyncImageCacheEntry*) _data_->_tmp10_;
#line 323 "../lib/Widgets/AsyncImage.vala"
					_data_->_tmp13_ = _data_->entry;
#line 323 "../lib/Widgets/AsyncImage.vala"
					_data_->_tmp14_ = _data_->_tmp13_->icon;
#line 323 "../lib/Widgets/AsyncImage.vala"
					_data_->_tmp15_ = _data_->target_icon;
#line 323 "../lib/Widgets/AsyncImage.vala"
					if (g_strcmp0 (_data_->_tmp14_, _data_->_tmp15_) == 0) {
#line 324 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp16_ = _data_->entry;
#line 324 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp12_ = _data_->_tmp16_->size == _data_->size;
#line 1650 "AsyncImage.c"
					} else {
#line 323 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp12_ = FALSE;
#line 1654 "AsyncImage.c"
					}
#line 323 "../lib/Widgets/AsyncImage.vala"
					if (_data_->_tmp12_) {
#line 325 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp17_ = _data_->entry;
#line 325 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp11_ = _data_->_tmp17_->scale_factor == _data_->self->priv->current_scale_factor;
#line 1662 "AsyncImage.c"
					} else {
#line 323 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp11_ = FALSE;
#line 1666 "AsyncImage.c"
					}
#line 322 "../lib/Widgets/AsyncImage.vala"
					if (_data_->_tmp11_) {
#line 327 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp18_ = _data_->entry;
#line 327 "../lib/Widgets/AsyncImage.vala"
						_data_->_tmp19_ = _data_->_tmp18_->surface;
#line 327 "../lib/Widgets/AsyncImage.vala"
						g_object_set ((GtkImage*) _data_->self, "surface", _data_->_tmp19_, NULL);
#line 328 "../lib/Widgets/AsyncImage.vala"
						granite_async_image_reset_size_request (_data_->self);
#line 329 "../lib/Widgets/AsyncImage.vala"
						_granite_async_image_cache_entry_unref0 (_data_->entry);
#line 329 "../lib/Widgets/AsyncImage.vala"
						_g_object_unref0 (_data_->_entry_list);
#line 329 "../lib/Widgets/AsyncImage.vala"
						_g_free0 (_data_->target_icon);
#line 329 "../lib/Widgets/AsyncImage.vala"
						g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 329 "../lib/Widgets/AsyncImage.vala"
						if (_data_->_state_ != 0) {
#line 329 "../lib/Widgets/AsyncImage.vala"
							while (!g_task_get_completed (_data_->_async_result)) {
#line 329 "../lib/Widgets/AsyncImage.vala"
								g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1692 "AsyncImage.c"
							}
						}
#line 329 "../lib/Widgets/AsyncImage.vala"
						g_object_unref (_data_->_async_result);
#line 329 "../lib/Widgets/AsyncImage.vala"
						return FALSE;
#line 1699 "AsyncImage.c"
					}
#line 321 "../lib/Widgets/AsyncImage.vala"
					_granite_async_image_cache_entry_unref0 (_data_->entry);
#line 1703 "AsyncImage.c"
				}
#line 321 "../lib/Widgets/AsyncImage.vala"
				_g_object_unref0 (_data_->_entry_list);
#line 1707 "AsyncImage.c"
			}
#line 319 "../lib/Widgets/AsyncImage.vala"
			_g_free0 (_data_->target_icon);
#line 1711 "AsyncImage.c"
		}
	}
#line 334 "../lib/Widgets/AsyncImage.vala"
	if (G_TYPE_CHECK_INSTANCE_TYPE (_data_->icon, g_file_icon_get_type ())) {
#line 1716 "AsyncImage.c"
		{
#line 336 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp20_ = g_file_icon_get_file (G_TYPE_CHECK_INSTANCE_CAST (_data_->icon, g_file_icon_get_type (), GFileIcon));
#line 336 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp21_ = _data_->_tmp20_;
#line 336 "../lib/Widgets/AsyncImage.vala"
			_data_->_state_ = 1;
#line 336 "../lib/Widgets/AsyncImage.vala"
			granite_async_image_set_from_file_async (_data_->self, _data_->_tmp21_, _data_->size, _data_->size, TRUE, NULL, granite_async_image_set_from_gicon_async_internal_ready, _data_);
#line 336 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 1728 "AsyncImage.c"
			_state_1:
#line 336 "../lib/Widgets/AsyncImage.vala"
			granite_async_image_set_from_file_finish (_data_->self, _data_->_res_, &_data_->_inner_error0_);
#line 336 "../lib/Widgets/AsyncImage.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 1734 "AsyncImage.c"
				goto __catch0_g_error;
			}
		}
		goto __finally0;
		__catch0_g_error:
		{
#line 335 "../lib/Widgets/AsyncImage.vala"
			_data_->e = _data_->_inner_error0_;
#line 335 "../lib/Widgets/AsyncImage.vala"
			_data_->_inner_error0_ = NULL;
#line 338 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp22_ = _data_->e;
#line 338 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp23_ = _g_error_copy0 (_data_->_tmp22_);
#line 338 "../lib/Widgets/AsyncImage.vala"
			_data_->_inner_error0_ = _data_->_tmp23_;
#line 338 "../lib/Widgets/AsyncImage.vala"
			_g_error_free0 (_data_->e);
#line 1753 "AsyncImage.c"
			goto __finally0;
		}
		__finally0:
#line 335 "../lib/Widgets/AsyncImage.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 335 "../lib/Widgets/AsyncImage.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 335 "../lib/Widgets/AsyncImage.vala"
			g_object_unref (_data_->_async_result);
#line 335 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 1765 "AsyncImage.c"
		}
#line 341 "../lib/Widgets/AsyncImage.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 341 "../lib/Widgets/AsyncImage.vala"
		if (_data_->_state_ != 0) {
#line 341 "../lib/Widgets/AsyncImage.vala"
			while (!g_task_get_completed (_data_->_async_result)) {
#line 341 "../lib/Widgets/AsyncImage.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1775 "AsyncImage.c"
			}
		}
#line 341 "../lib/Widgets/AsyncImage.vala"
		g_object_unref (_data_->_async_result);
#line 341 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1782 "AsyncImage.c"
	}
#line 344 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp24_ = gtk_widget_get_style_context ((GtkWidget*) _data_->self);
#line 344 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp25_ = _g_object_ref0 (_data_->_tmp24_);
#line 344 "../lib/Widgets/AsyncImage.vala"
	_data_->style_context = _data_->_tmp25_;
#line 345 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp26_ = _data_->style_context;
#line 345 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp27_ = gtk_style_context_get_screen (_data_->_tmp26_);
#line 345 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp28_ = gtk_icon_theme_get_for_screen (_data_->_tmp27_);
#line 345 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp29_ = _g_object_ref0 (_data_->_tmp28_);
#line 345 "../lib/Widgets/AsyncImage.vala"
	_data_->theme = _data_->_tmp29_;
#line 347 "../lib/Widgets/AsyncImage.vala"
	_data_->flags = GTK_ICON_LOOKUP_FORCE_SIZE | GTK_ICON_LOOKUP_USE_BUILTIN;
#line 348 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp30_ = _data_->style_context;
#line 348 "../lib/Widgets/AsyncImage.vala"
	if ((gtk_style_context_get_state (_data_->_tmp30_) & GTK_STATE_FLAG_DIR_RTL) == GTK_STATE_FLAG_DIR_RTL) {
#line 349 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp31_ = _data_->flags;
#line 349 "../lib/Widgets/AsyncImage.vala"
		_data_->flags = _data_->_tmp31_ | GTK_ICON_LOOKUP_DIR_RTL;
#line 1810 "AsyncImage.c"
	} else {
#line 351 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp32_ = _data_->flags;
#line 351 "../lib/Widgets/AsyncImage.vala"
		_data_->flags = _data_->_tmp32_ | GTK_ICON_LOOKUP_DIR_LTR;
#line 1816 "AsyncImage.c"
	}
#line 354 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp33_ = _data_->theme;
#line 354 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp34_ = _data_->flags;
#line 354 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp35_ = gtk_icon_theme_lookup_by_gicon_for_scale (_data_->_tmp33_, _data_->icon, _data_->size, _data_->self->priv->current_scale_factor, _data_->_tmp34_);
#line 354 "../lib/Widgets/AsyncImage.vala"
	_data_->info = _data_->_tmp35_;
#line 355 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp36_ = _data_->info;
#line 355 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_tmp36_ == NULL) {
#line 356 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_reset_size_request (_data_->self);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp37_ = g_icon_to_string (_data_->icon);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp38_ = _data_->_tmp37_;
#line 357 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp39_ = g_strdup_printf ("Failed to lookup icon \"%s\" at size %i", _data_->_tmp38_, _data_->size);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp40_ = _data_->_tmp39_;
#line 357 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp41_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_NOT_FOUND, _data_->_tmp40_);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp42_ = _data_->_tmp41_;
#line 357 "../lib/Widgets/AsyncImage.vala"
		_g_free0 (_data_->_tmp40_);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_g_free0 (_data_->_tmp38_);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_data_->_inner_error0_ = _data_->_tmp42_;
#line 357 "../lib/Widgets/AsyncImage.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->info);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->theme);
#line 357 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->style_context);
#line 357 "../lib/Widgets/AsyncImage.vala"
		g_object_unref (_data_->_async_result);
#line 357 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 1862 "AsyncImage.c"
	}
	{
#line 362 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp43_ = _data_->info;
#line 362 "../lib/Widgets/AsyncImage.vala"
		if (gtk_icon_info_is_symbolic (_data_->_tmp43_)) {
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp45_ = _data_->info;
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp46_ = _data_->style_context;
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->_state_ = 2;
#line 363 "../lib/Widgets/AsyncImage.vala"
			gtk_icon_info_load_symbolic_for_context_async (_data_->_tmp45_, _data_->_tmp46_, _data_->cancellable, granite_async_image_set_from_gicon_async_internal_ready, _data_);
#line 363 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 1879 "AsyncImage.c"
			_state_2:
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp47_ = gtk_icon_info_load_symbolic_for_context_finish (_data_->_tmp45_, _data_->_res_, NULL, &_data_->_inner_error0_);
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp44_ = _data_->_tmp47_;
#line 363 "../lib/Widgets/AsyncImage.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 363 "../lib/Widgets/AsyncImage.vala"
				_g_object_unref0 (_data_->pixbuf);
#line 1889 "AsyncImage.c"
				goto __catch1_g_error;
			}
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp48_ = _data_->_tmp44_;
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp44_ = NULL;
#line 363 "../lib/Widgets/AsyncImage.vala"
			_g_object_unref0 (_data_->pixbuf);
#line 363 "../lib/Widgets/AsyncImage.vala"
			_data_->pixbuf = _data_->_tmp48_;
#line 362 "../lib/Widgets/AsyncImage.vala"
			_g_object_unref0 (_data_->_tmp44_);
#line 1902 "AsyncImage.c"
		} else {
#line 365 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp50_ = _data_->info;
#line 365 "../lib/Widgets/AsyncImage.vala"
			_data_->_state_ = 3;
#line 365 "../lib/Widgets/AsyncImage.vala"
			gtk_icon_info_load_icon_async (_data_->_tmp50_, NULL, granite_async_image_set_from_gicon_async_internal_ready, _data_);
#line 365 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 1912 "AsyncImage.c"
			_state_3:
#line 365 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp51_ = gtk_icon_info_load_icon_finish (_data_->_tmp50_, _data_->_res_, &_data_->_inner_error0_);
#line 365 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp49_ = _data_->_tmp51_;
#line 365 "../lib/Widgets/AsyncImage.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 365 "../lib/Widgets/AsyncImage.vala"
				_g_object_unref0 (_data_->pixbuf);
#line 1922 "AsyncImage.c"
				goto __catch1_g_error;
			}
#line 365 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp52_ = _data_->_tmp49_;
#line 365 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp49_ = NULL;
#line 365 "../lib/Widgets/AsyncImage.vala"
			_g_object_unref0 (_data_->pixbuf);
#line 365 "../lib/Widgets/AsyncImage.vala"
			_data_->pixbuf = _data_->_tmp52_;
#line 362 "../lib/Widgets/AsyncImage.vala"
			_g_object_unref0 (_data_->_tmp49_);
#line 1935 "AsyncImage.c"
		}
#line 368 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp53_ = _data_->pixbuf;
#line 368 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp54_ = gdk_cairo_surface_create_from_pixbuf (_data_->_tmp53_, _data_->self->priv->current_scale_factor, NULL);
#line 368 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp55_ = _data_->_tmp54_;
#line 368 "../lib/Widgets/AsyncImage.vala"
		g_object_set ((GtkImage*) _data_->self, "surface", _data_->_tmp55_, NULL);
#line 368 "../lib/Widgets/AsyncImage.vala"
		_cairo_surface_destroy0 (_data_->_tmp55_);
#line 369 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_reset_size_request (_data_->self);
#line 371 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp56_ = g_icon_to_string (_data_->icon);
#line 371 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp57_ = _data_->_tmp56_;
#line 371 "../lib/Widgets/AsyncImage.vala"
		g_object_get ((GtkImage*) _data_->self, "surface", &_data_->_tmp58_, NULL);
#line 371 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp59_ = _data_->_tmp58_;
#line 371 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp60_ = _data_->_tmp59_;
#line 371 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp61_ = granite_async_image_cache_entry_new (_data_->_tmp57_, _data_->_tmp60_, _data_->size, _data_->self->priv->current_scale_factor);
#line 371 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp62_ = _data_->_tmp61_;
#line 371 "../lib/Widgets/AsyncImage.vala"
		_cairo_surface_destroy0 (_data_->_tmp60_);
#line 371 "../lib/Widgets/AsyncImage.vala"
		_g_free0 (_data_->_tmp57_);
#line 371 "../lib/Widgets/AsyncImage.vala"
		_data_->_vala1_entry = _data_->_tmp62_;
#line 372 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp63_ = granite_async_image_cache;
#line 372 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp64_ = _data_->_vala1_entry;
#line 372 "../lib/Widgets/AsyncImage.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _data_->_tmp63_, _data_->_tmp64_);
#line 360 "../lib/Widgets/AsyncImage.vala"
		_granite_async_image_cache_entry_unref0 (_data_->_vala1_entry);
#line 360 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->pixbuf);
#line 1979 "AsyncImage.c"
	}
	goto __finally1;
	__catch1_g_error:
	{
#line 360 "../lib/Widgets/AsyncImage.vala"
		_data_->_vala1_e = _data_->_inner_error0_;
#line 360 "../lib/Widgets/AsyncImage.vala"
		_data_->_inner_error0_ = NULL;
#line 374 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_reset_size_request (_data_->self);
#line 375 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp65_ = _data_->_vala1_e;
#line 375 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp66_ = _g_error_copy0 (_data_->_tmp65_);
#line 375 "../lib/Widgets/AsyncImage.vala"
		_data_->_inner_error0_ = _data_->_tmp66_;
#line 375 "../lib/Widgets/AsyncImage.vala"
		_g_error_free0 (_data_->_vala1_e);
#line 1998 "AsyncImage.c"
		goto __finally1;
	}
	__finally1:
#line 360 "../lib/Widgets/AsyncImage.vala"
	if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 360 "../lib/Widgets/AsyncImage.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error0_);
#line 360 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->info);
#line 360 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->theme);
#line 360 "../lib/Widgets/AsyncImage.vala"
		_g_object_unref0 (_data_->style_context);
#line 360 "../lib/Widgets/AsyncImage.vala"
		g_object_unref (_data_->_async_result);
#line 360 "../lib/Widgets/AsyncImage.vala"
		return FALSE;
#line 2016 "AsyncImage.c"
	}
#line 308 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->info);
#line 308 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->theme);
#line 308 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->style_context);
#line 308 "../lib/Widgets/AsyncImage.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 308 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_state_ != 0) {
#line 308 "../lib/Widgets/AsyncImage.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 308 "../lib/Widgets/AsyncImage.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2032 "AsyncImage.c"
		}
	}
#line 308 "../lib/Widgets/AsyncImage.vala"
	g_object_unref (_data_->_async_result);
#line 308 "../lib/Widgets/AsyncImage.vala"
	return FALSE;
#line 2039 "AsyncImage.c"
}

static void
granite_async_image_update_data_free (gpointer _data)
{
	GraniteAsyncImageUpdateData* _data_;
	_data_ = _data;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (_data_->self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_slice_free (GraniteAsyncImageUpdateData, _data_);
#line 2051 "AsyncImage.c"
}

static void
granite_async_image_update (GraniteAsyncImage* self,
                            gboolean bypass_cache,
                            GAsyncReadyCallback _callback_,
                            gpointer _user_data_)
{
	GraniteAsyncImageUpdateData* _data_;
	GraniteAsyncImage* _tmp0_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_slice_new0 (GraniteAsyncImageUpdateData);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_task_set_task_data (_data_->_async_result, _data_, granite_async_image_update_data_free);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->self = _tmp0_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_->bypass_cache = bypass_cache;
#line 50 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_update_co (_data_);
#line 2076 "AsyncImage.c"
}

static void
granite_async_image_update_finish (GraniteAsyncImage* self,
                                   GAsyncResult* _res_)
{
	GraniteAsyncImageUpdateData* _data_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 2086 "AsyncImage.c"
}

static void
granite_async_image_update_ready (GObject* source_object,
                                  GAsyncResult* _res_,
                                  gpointer _user_data_)
{
	GraniteAsyncImageUpdateData* _data_;
#line 382 "../lib/Widgets/AsyncImage.vala"
	_data_ = _user_data_;
#line 382 "../lib/Widgets/AsyncImage.vala"
	_data_->_source_object_ = source_object;
#line 382 "../lib/Widgets/AsyncImage.vala"
	_data_->_res_ = _res_;
#line 382 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_update_co (_data_);
#line 2103 "AsyncImage.c"
}

static gboolean
granite_async_image_update_co (GraniteAsyncImageUpdateData* _data_)
{
#line 379 "../lib/Widgets/AsyncImage.vala"
	switch (_data_->_state_) {
#line 379 "../lib/Widgets/AsyncImage.vala"
		case 0:
#line 2113 "AsyncImage.c"
		goto _state_0;
#line 379 "../lib/Widgets/AsyncImage.vala"
		case 1:
#line 2117 "AsyncImage.c"
		goto _state_1;
		default:
#line 379 "../lib/Widgets/AsyncImage.vala"
		g_assert_not_reached ();
#line 2122 "AsyncImage.c"
	}
	_state_0:
#line 380 "../lib/Widgets/AsyncImage.vala"
	_data_->_tmp1_ = _data_->self->priv->_gicon_async;
#line 380 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_tmp1_ != NULL) {
#line 380 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp3_ = _data_->self->priv->_gicon_async;
#line 380 "../lib/Widgets/AsyncImage.vala"
		if (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp3_, g_themed_icon_get_type ())) {
#line 380 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp2_ = TRUE;
#line 2135 "AsyncImage.c"
		} else {
#line 380 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp4_ = _data_->self->priv->_gicon_async;
#line 380 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp2_ = G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp4_, g_file_icon_get_type ());
#line 2141 "AsyncImage.c"
		}
#line 380 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp0_ = _data_->_tmp2_;
#line 2145 "AsyncImage.c"
	} else {
#line 380 "../lib/Widgets/AsyncImage.vala"
		_data_->_tmp0_ = FALSE;
#line 2149 "AsyncImage.c"
	}
#line 380 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_tmp0_) {
#line 2153 "AsyncImage.c"
		{
#line 382 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp5_ = _data_->self->priv->_gicon_async;
#line 382 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp6_ = _data_->self->priv->_size_async;
#line 382 "../lib/Widgets/AsyncImage.vala"
			_data_->_state_ = 1;
#line 382 "../lib/Widgets/AsyncImage.vala"
			granite_async_image_set_from_gicon_async_internal (_data_->self, _data_->_tmp5_, _data_->_tmp6_, NULL, _data_->bypass_cache, granite_async_image_update_ready, _data_);
#line 382 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 2165 "AsyncImage.c"
			_state_1:
#line 382 "../lib/Widgets/AsyncImage.vala"
			granite_async_image_set_from_gicon_async_internal_finish (_data_->self, _data_->_res_, &_data_->_inner_error0_);
#line 382 "../lib/Widgets/AsyncImage.vala"
			if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 2171 "AsyncImage.c"
				goto __catch0_g_error;
			}
		}
		goto __finally0;
		__catch0_g_error:
		{
#line 381 "../lib/Widgets/AsyncImage.vala"
			_data_->e = _data_->_inner_error0_;
#line 381 "../lib/Widgets/AsyncImage.vala"
			_data_->_inner_error0_ = NULL;
#line 384 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp7_ = _data_->e;
#line 384 "../lib/Widgets/AsyncImage.vala"
			_data_->_tmp8_ = _data_->_tmp7_->message;
#line 384 "../lib/Widgets/AsyncImage.vala"
			g_warning ("AsyncImage.vala:384: %s", _data_->_tmp8_);
#line 381 "../lib/Widgets/AsyncImage.vala"
			_g_error_free0 (_data_->e);
#line 2190 "AsyncImage.c"
		}
		__finally0:
#line 381 "../lib/Widgets/AsyncImage.vala"
		if (G_UNLIKELY (_data_->_inner_error0_ != NULL)) {
#line 381 "../lib/Widgets/AsyncImage.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error0_->message, g_quark_to_string (_data_->_inner_error0_->domain), _data_->_inner_error0_->code);
#line 381 "../lib/Widgets/AsyncImage.vala"
			g_clear_error (&_data_->_inner_error0_);
#line 381 "../lib/Widgets/AsyncImage.vala"
			g_object_unref (_data_->_async_result);
#line 381 "../lib/Widgets/AsyncImage.vala"
			return FALSE;
#line 2203 "AsyncImage.c"
		}
	}
#line 379 "../lib/Widgets/AsyncImage.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 379 "../lib/Widgets/AsyncImage.vala"
	if (_data_->_state_ != 0) {
#line 379 "../lib/Widgets/AsyncImage.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 379 "../lib/Widgets/AsyncImage.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2214 "AsyncImage.c"
		}
	}
#line 379 "../lib/Widgets/AsyncImage.vala"
	g_object_unref (_data_->_async_result);
#line 379 "../lib/Widgets/AsyncImage.vala"
	return FALSE;
#line 2221 "AsyncImage.c"
}

static void
granite_async_image_reset_size_request (GraniteAsyncImage* self)
{
	gboolean _tmp0_;
#line 389 "../lib/Widgets/AsyncImage.vala"
	g_return_if_fail (self != NULL);
#line 390 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = self->priv->_auto_size_request;
#line 390 "../lib/Widgets/AsyncImage.vala"
	if (_tmp0_) {
#line 391 "../lib/Widgets/AsyncImage.vala"
		gtk_widget_set_size_request ((GtkWidget*) self, -1, -1);
#line 2236 "AsyncImage.c"
	}
}

static gpointer
_cairo_surface_reference0 (gpointer self)
{
#line 59 "../lib/Widgets/AsyncImage.vala"
	return self ? cairo_surface_reference (self) : NULL;
#line 2245 "AsyncImage.c"
}

static GraniteAsyncImageCacheEntry*
granite_async_image_cache_entry_construct (GType object_type,
                                           const gchar* icon,
                                           cairo_surface_t* surface,
                                           gint size,
                                           gint scale_factor)
{
	GraniteAsyncImageCacheEntry* self = NULL;
	gchar* _tmp0_;
	cairo_surface_t* _tmp1_;
#line 57 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (icon != NULL, NULL);
#line 57 "../lib/Widgets/AsyncImage.vala"
	self = (GraniteAsyncImageCacheEntry*) g_type_create_instance (object_type);
#line 58 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = g_strdup (icon);
#line 58 "../lib/Widgets/AsyncImage.vala"
	_g_free0 (self->icon);
#line 58 "../lib/Widgets/AsyncImage.vala"
	self->icon = _tmp0_;
#line 59 "../lib/Widgets/AsyncImage.vala"
	_tmp1_ = _cairo_surface_reference0 (surface);
#line 59 "../lib/Widgets/AsyncImage.vala"
	_cairo_surface_destroy0 (self->surface);
#line 59 "../lib/Widgets/AsyncImage.vala"
	self->surface = _tmp1_;
#line 60 "../lib/Widgets/AsyncImage.vala"
	self->size = size;
#line 61 "../lib/Widgets/AsyncImage.vala"
	self->scale_factor = scale_factor;
#line 57 "../lib/Widgets/AsyncImage.vala"
	return self;
#line 2280 "AsyncImage.c"
}

static GraniteAsyncImageCacheEntry*
granite_async_image_cache_entry_new (const gchar* icon,
                                     cairo_surface_t* surface,
                                     gint size,
                                     gint scale_factor)
{
#line 57 "../lib/Widgets/AsyncImage.vala"
	return granite_async_image_cache_entry_construct (GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY, icon, surface, size, scale_factor);
#line 2291 "AsyncImage.c"
}

static void
granite_async_image_value_cache_entry_init (GValue* value)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	value->data[0].v_pointer = NULL;
#line 2299 "AsyncImage.c"
}

static void
granite_async_image_value_cache_entry_free_value (GValue* value)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (value->data[0].v_pointer) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_cache_entry_unref (value->data[0].v_pointer);
#line 2309 "AsyncImage.c"
	}
}

static void
granite_async_image_value_cache_entry_copy_value (const GValue* src_value,
                                                  GValue* dest_value)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (src_value->data[0].v_pointer) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		dest_value->data[0].v_pointer = granite_async_image_cache_entry_ref (src_value->data[0].v_pointer);
#line 2321 "AsyncImage.c"
	} else {
#line 51 "../lib/Widgets/AsyncImage.vala"
		dest_value->data[0].v_pointer = NULL;
#line 2325 "AsyncImage.c"
	}
}

static gpointer
granite_async_image_value_cache_entry_peek_pointer (const GValue* value)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	return value->data[0].v_pointer;
#line 2334 "AsyncImage.c"
}

static gchar*
granite_async_image_value_cache_entry_collect_value (GValue* value,
                                                     guint n_collect_values,
                                                     GTypeCValue* collect_values,
                                                     guint collect_flags)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (collect_values[0].v_pointer) {
#line 2345 "AsyncImage.c"
		GraniteAsyncImageCacheEntry * object;
		object = collect_values[0].v_pointer;
#line 51 "../lib/Widgets/AsyncImage.vala"
		if (object->parent_instance.g_class == NULL) {
#line 51 "../lib/Widgets/AsyncImage.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 2352 "AsyncImage.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 51 "../lib/Widgets/AsyncImage.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 2356 "AsyncImage.c"
		}
#line 51 "../lib/Widgets/AsyncImage.vala"
		value->data[0].v_pointer = granite_async_image_cache_entry_ref (object);
#line 2360 "AsyncImage.c"
	} else {
#line 51 "../lib/Widgets/AsyncImage.vala"
		value->data[0].v_pointer = NULL;
#line 2364 "AsyncImage.c"
	}
#line 51 "../lib/Widgets/AsyncImage.vala"
	return NULL;
#line 2368 "AsyncImage.c"
}

static gchar*
granite_async_image_value_cache_entry_lcopy_value (const GValue* value,
                                                   guint n_collect_values,
                                                   GTypeCValue* collect_values,
                                                   guint collect_flags)
{
	GraniteAsyncImageCacheEntry ** object_p;
	object_p = collect_values[0].v_pointer;
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (!object_p) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 2383 "AsyncImage.c"
	}
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (!value->data[0].v_pointer) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		*object_p = NULL;
#line 2389 "AsyncImage.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		*object_p = value->data[0].v_pointer;
#line 2393 "AsyncImage.c"
	} else {
#line 51 "../lib/Widgets/AsyncImage.vala"
		*object_p = granite_async_image_cache_entry_ref (value->data[0].v_pointer);
#line 2397 "AsyncImage.c"
	}
#line 51 "../lib/Widgets/AsyncImage.vala"
	return NULL;
#line 2401 "AsyncImage.c"
}

static GParamSpec*
granite_async_image_param_spec_cache_entry (const gchar* name,
                                            const gchar* nick,
                                            const gchar* blurb,
                                            GType object_type,
                                            GParamFlags flags)
{
	GraniteAsyncImageParamSpecCacheEntry* spec;
#line 51 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (g_type_is_a (object_type, GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY), NULL);
#line 51 "../lib/Widgets/AsyncImage.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 51 "../lib/Widgets/AsyncImage.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 51 "../lib/Widgets/AsyncImage.vala"
	return G_PARAM_SPEC (spec);
#line 2420 "AsyncImage.c"
}

static gpointer
granite_async_image_value_get_cache_entry (const GValue* value)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY), NULL);
#line 51 "../lib/Widgets/AsyncImage.vala"
	return value->data[0].v_pointer;
#line 2430 "AsyncImage.c"
}

static void
granite_async_image_value_set_cache_entry (GValue* value,
                                           gpointer v_object)
{
	GraniteAsyncImageCacheEntry * old;
#line 51 "../lib/Widgets/AsyncImage.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY));
#line 51 "../lib/Widgets/AsyncImage.vala"
	old = value->data[0].v_pointer;
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (v_object) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY));
#line 51 "../lib/Widgets/AsyncImage.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 51 "../lib/Widgets/AsyncImage.vala"
		value->data[0].v_pointer = v_object;
#line 51 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_cache_entry_ref (value->data[0].v_pointer);
#line 2452 "AsyncImage.c"
	} else {
#line 51 "../lib/Widgets/AsyncImage.vala"
		value->data[0].v_pointer = NULL;
#line 2456 "AsyncImage.c"
	}
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (old) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_cache_entry_unref (old);
#line 2462 "AsyncImage.c"
	}
}

static void
granite_async_image_value_take_cache_entry (GValue* value,
                                            gpointer v_object)
{
	GraniteAsyncImageCacheEntry * old;
#line 51 "../lib/Widgets/AsyncImage.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY));
#line 51 "../lib/Widgets/AsyncImage.vala"
	old = value->data[0].v_pointer;
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (v_object) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY));
#line 51 "../lib/Widgets/AsyncImage.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 51 "../lib/Widgets/AsyncImage.vala"
		value->data[0].v_pointer = v_object;
#line 2483 "AsyncImage.c"
	} else {
#line 51 "../lib/Widgets/AsyncImage.vala"
		value->data[0].v_pointer = NULL;
#line 2487 "AsyncImage.c"
	}
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (old) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_cache_entry_unref (old);
#line 2493 "AsyncImage.c"
	}
}

static void
granite_async_image_cache_entry_class_init (GraniteAsyncImageCacheEntryClass * klass,
                                            gpointer klass_data)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_cache_entry_parent_class = g_type_class_peek_parent (klass);
#line 51 "../lib/Widgets/AsyncImage.vala"
	((GraniteAsyncImageCacheEntryClass *) klass)->finalize = granite_async_image_cache_entry_finalize;
#line 2505 "AsyncImage.c"
}

static void
granite_async_image_cache_entry_instance_init (GraniteAsyncImageCacheEntry * self,
                                               gpointer klass)
{
#line 51 "../lib/Widgets/AsyncImage.vala"
	self->ref_count = 1;
#line 2514 "AsyncImage.c"
}

static void
granite_async_image_cache_entry_finalize (GraniteAsyncImageCacheEntry * obj)
{
	GraniteAsyncImageCacheEntry * self;
#line 51 "../lib/Widgets/AsyncImage.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY, GraniteAsyncImageCacheEntry);
#line 51 "../lib/Widgets/AsyncImage.vala"
	g_signal_handlers_destroy (self);
#line 52 "../lib/Widgets/AsyncImage.vala"
	_g_free0 (self->icon);
#line 53 "../lib/Widgets/AsyncImage.vala"
	_cairo_surface_destroy0 (self->surface);
#line 2529 "AsyncImage.c"
}

static GType
granite_async_image_cache_entry_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { granite_async_image_value_cache_entry_init, granite_async_image_value_cache_entry_free_value, granite_async_image_value_cache_entry_copy_value, granite_async_image_value_cache_entry_peek_pointer, "p", granite_async_image_value_cache_entry_collect_value, "p", granite_async_image_value_cache_entry_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (GraniteAsyncImageCacheEntryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_async_image_cache_entry_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteAsyncImageCacheEntry), 0, (GInstanceInitFunc) granite_async_image_cache_entry_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType granite_async_image_cache_entry_type_id;
	granite_async_image_cache_entry_type_id = g_type_register_fundamental (g_type_fundamental_next (), "GraniteAsyncImageCacheEntry", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return granite_async_image_cache_entry_type_id;
}

static GType
granite_async_image_cache_entry_get_type (void)
{
	static volatile gsize granite_async_image_cache_entry_type_id__volatile = 0;
	if (g_once_init_enter (&granite_async_image_cache_entry_type_id__volatile)) {
		GType granite_async_image_cache_entry_type_id;
		granite_async_image_cache_entry_type_id = granite_async_image_cache_entry_get_type_once ();
		g_once_init_leave (&granite_async_image_cache_entry_type_id__volatile, granite_async_image_cache_entry_type_id);
	}
	return granite_async_image_cache_entry_type_id__volatile;
}

static gpointer
granite_async_image_cache_entry_ref (gpointer instance)
{
	GraniteAsyncImageCacheEntry * self;
	self = instance;
#line 51 "../lib/Widgets/AsyncImage.vala"
	g_atomic_int_inc (&self->ref_count);
#line 51 "../lib/Widgets/AsyncImage.vala"
	return instance;
#line 2564 "AsyncImage.c"
}

static void
granite_async_image_cache_entry_unref (gpointer instance)
{
	GraniteAsyncImageCacheEntry * self;
	self = instance;
#line 51 "../lib/Widgets/AsyncImage.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 51 "../lib/Widgets/AsyncImage.vala"
		GRANITE_ASYNC_IMAGE_CACHE_ENTRY_GET_CLASS (self)->finalize (self);
#line 51 "../lib/Widgets/AsyncImage.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 2578 "AsyncImage.c"
	}
}

static void
_granite_async_image____lambda14_ (GraniteAsyncImage* self)
{
#line 167 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_update (self, FALSE, NULL, NULL);
#line 2587 "AsyncImage.c"
}

static void
__granite_async_image____lambda14__gtk_widget_realize (GtkWidget* _sender,
                                                       gpointer self)
{
#line 167 "../lib/Widgets/AsyncImage.vala"
	_granite_async_image____lambda14_ ((GraniteAsyncImage*) self);
#line 2596 "AsyncImage.c"
}

static void
_granite_async_image___lambda15_ (GraniteAsyncImage* self)
{
#line 171 "../lib/Widgets/AsyncImage.vala"
	if (gtk_widget_get_realized ((GtkWidget*) self)) {
#line 172 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_update (self, TRUE, NULL, NULL);
#line 2606 "AsyncImage.c"
	}
}

static void
__granite_async_image___lambda15__gtk_widget_style_updated (GtkWidget* _sender,
                                                            gpointer self)
{
#line 170 "../lib/Widgets/AsyncImage.vala"
	_granite_async_image___lambda15_ ((GraniteAsyncImage*) self);
#line 2616 "AsyncImage.c"
}

static void
_granite_async_image___lambda16_ (GraniteAsyncImage* self)
{
#line 176 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_update (self, TRUE, NULL, NULL);
#line 2624 "AsyncImage.c"
}

static void
__granite_async_image___lambda16__gtk_widget_direction_changed (GtkWidget* _sender,
                                                                GtkTextDirection previous_direction,
                                                                gpointer self)
{
#line 176 "../lib/Widgets/AsyncImage.vala"
	_granite_async_image___lambda16_ ((GraniteAsyncImage*) self);
#line 2634 "AsyncImage.c"
}

static void
_granite_async_image___lambda17_ (GraniteAsyncImage* self)
{
#line 179 "../lib/Widgets/AsyncImage.vala"
	if (gtk_widget_get_scale_factor ((GtkWidget*) self) != self->priv->current_scale_factor) {
#line 180 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_update (self, FALSE, NULL, NULL);
#line 2644 "AsyncImage.c"
	}
}

static void
__granite_async_image___lambda17__g_object_notify (GObject* _sender,
                                                   GParamSpec* pspec,
                                                   gpointer self)
{
#line 178 "../lib/Widgets/AsyncImage.vala"
	_granite_async_image___lambda17_ ((GraniteAsyncImage*) self);
#line 2655 "AsyncImage.c"
}

static GObject *
granite_async_image_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteAsyncImage * self;
	gboolean _tmp0_;
#line 165 "../lib/Widgets/AsyncImage.vala"
	parent_class = G_OBJECT_CLASS (granite_async_image_parent_class);
#line 165 "../lib/Widgets/AsyncImage.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 165 "../lib/Widgets/AsyncImage.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_ASYNC_IMAGE, GraniteAsyncImage);
#line 166 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = self->priv->_load_on_realize;
#line 166 "../lib/Widgets/AsyncImage.vala"
	if (_tmp0_) {
#line 167 "../lib/Widgets/AsyncImage.vala"
		g_signal_connect_object ((GtkWidget*) self, "realize", (GCallback) __granite_async_image____lambda14__gtk_widget_realize, self, 0);
#line 2679 "AsyncImage.c"
	}
#line 170 "../lib/Widgets/AsyncImage.vala"
	g_signal_connect_object ((GtkWidget*) self, "style-updated", (GCallback) __granite_async_image___lambda15__gtk_widget_style_updated, self, 0);
#line 176 "../lib/Widgets/AsyncImage.vala"
	g_signal_connect_object ((GtkWidget*) self, "direction-changed", (GCallback) __granite_async_image___lambda16__gtk_widget_direction_changed, self, 0);
#line 178 "../lib/Widgets/AsyncImage.vala"
	g_signal_connect_object ((GObject*) self, "notify::scale-factor", (GCallback) __granite_async_image___lambda17__g_object_notify, self, 0);
#line 165 "../lib/Widgets/AsyncImage.vala"
	return obj;
#line 2689 "AsyncImage.c"
}

static void
granite_async_image_class_init (GraniteAsyncImageClass * klass,
                                gpointer klass_data)
{
	GeeArrayList* _tmp0_;
#line 50 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_parent_class = g_type_class_peek_parent (klass);
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_type_class_adjust_private_offset (klass, &GraniteAsyncImage_private_offset);
#line 50 "../lib/Widgets/AsyncImage.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_async_image_get_property;
#line 50 "../lib/Widgets/AsyncImage.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_async_image_set_property;
#line 50 "../lib/Widgets/AsyncImage.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_async_image_constructor;
#line 50 "../lib/Widgets/AsyncImage.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_async_image_finalize;
#line 2709 "AsyncImage.c"
	/**
	     * If the image should be loaded when the image is rendered.
	     *
	     * For more details see {@link Granite.AsyncImage.AsyncImage}.
	     */
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_ASYNC_IMAGE_LOAD_ON_REALIZE_PROPERTY, granite_async_image_properties[GRANITE_ASYNC_IMAGE_LOAD_ON_REALIZE_PROPERTY] = g_param_spec_boolean ("load-on-realize", "load-on-realize", "load-on-realize", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2717 "AsyncImage.c"
	/**
	     * If the widget should act as a placeholder when the image is not yet loaded.
	     *
	     * For more details see {@link Granite.AsyncImage.AsyncImage}.
	     */
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_ASYNC_IMAGE_AUTO_SIZE_REQUEST_PROPERTY, granite_async_image_properties[GRANITE_ASYNC_IMAGE_AUTO_SIZE_REQUEST_PROPERTY] = g_param_spec_boolean ("auto-size-request", "auto-size-request", "auto-size-request", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2725 "AsyncImage.c"
	/**
	     * The icon that will be or is currently displayed in the image.
	     *
	     * Note that this property is by default and will be ``null`` if you didn't call the {@link Granite.AsyncImage.set_from_gicon_async} or it's wrappers.
	     */
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_ASYNC_IMAGE_GICON_ASYNC_PROPERTY, granite_async_image_properties[GRANITE_ASYNC_IMAGE_GICON_ASYNC_PROPERTY] = g_param_spec_object ("gicon-async", "gicon-async", "gicon-async", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 2733 "AsyncImage.c"
	/**
	     * The size in pixels of the displayed {@link Granite.AsyncImage.gicon_async}.
	     *
	     * Note that this property is by default and will be ``-1`` if you didn't call the {@link Granite.AsyncImage.set_from_gicon_async} or it's wrappers.
	     */
#line 50 "../lib/Widgets/AsyncImage.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_ASYNC_IMAGE_SIZE_ASYNC_PROPERTY, granite_async_image_properties[GRANITE_ASYNC_IMAGE_SIZE_ASYNC_PROPERTY] = g_param_spec_int ("size-async", "size-async", "size-async", G_MININT, G_MAXINT, -1, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 162 "../lib/Widgets/AsyncImage.vala"
	_tmp0_ = gee_array_list_new (GRANITE_ASYNC_IMAGE_TYPE_CACHE_ENTRY, (GBoxedCopyFunc) granite_async_image_cache_entry_ref, (GDestroyNotify) granite_async_image_cache_entry_unref, NULL, NULL, NULL);
#line 162 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (granite_async_image_cache);
#line 162 "../lib/Widgets/AsyncImage.vala"
	granite_async_image_cache = _tmp0_;
#line 2747 "AsyncImage.c"
}

static void
granite_async_image_instance_init (GraniteAsyncImage * self,
                                   gpointer klass)
{
#line 50 "../lib/Widgets/AsyncImage.vala"
	self->priv = granite_async_image_get_instance_private (self);
#line 86 "../lib/Widgets/AsyncImage.vala"
	self->priv->_gicon_async = NULL;
#line 93 "../lib/Widgets/AsyncImage.vala"
	self->priv->_size_async = -1;
#line 95 "../lib/Widgets/AsyncImage.vala"
	self->priv->current_scale_factor = 1;
#line 2762 "AsyncImage.c"
}

static void
granite_async_image_finalize (GObject * obj)
{
	GraniteAsyncImage * self;
#line 50 "../lib/Widgets/AsyncImage.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_ASYNC_IMAGE, GraniteAsyncImage);
#line 86 "../lib/Widgets/AsyncImage.vala"
	_g_object_unref0 (self->priv->_gicon_async);
#line 50 "../lib/Widgets/AsyncImage.vala"
	G_OBJECT_CLASS (granite_async_image_parent_class)->finalize (obj);
#line 2775 "AsyncImage.c"
}

/**
 * AsyncImage is a {@link Gtk.Image} that provides a way to load
 * icons and images asynchronously without blocking the main GTK thread.
 *
 * AsyncImage can be used to improve your GTK interface's performance that
 * has a lot of images to load and populate e.g: the applications menu and
 * an icon chooser.
 *
 * Primarily the {@link Gtk.Image} loads it's surface synchronously and blocks the main GTK thread
 * which can cause significant slow downs and lagging. The AsyncImage is a wrapper for the {@link Gtk.Image}
 * and provides with two main methods: {@link Granite.AsyncImage.set_from_gicon_async} and {@link Granite.AsyncImage.set_from_file_async}.
 *
 * AsyncImage internally operates only on {@link Gdk.Pixbuf} and {@link Cairo.Surface}'s which means that you cannot read valid properties
 * from the main {@link Gtk.Image} like {@link Gtk.Image.icon_name}, {@link Gtk.Image.gicon} or {@link Gtk.Image.file}.
 * The only property which will be set is the final surface: {@link Gtk.Image.surface}.
 *
 * Even though AsyncImage sets only the {@link Gtk.Image.surface}, it automatically detects changes to the underlying {@link Gtk.Widget.scale_factor}
 * and reloads the icon to a new scale factor when it changes. If you request to set an {@link GLib.ThemedIcon} and the icon or GTK theme changes
 * the AsyncImage will also reload it to display the new icon with applied changes.
 *
 * The {@link Granite.AsyncImage.gicon_async} and {@link Granite.AsyncImage.size_async} are properties which reflect
 * the current icon and it's size which will or is currently displayed. Note that those two properties will return
 * meaningful results //''only''// when you call {@link Granite.AsyncImage.set_from_gicon_async} and it's wrappers.
 *
 * AsyncImage has also its own cache for already loaded icons. If you attempt to load the same icon at the same size
 * AsyncImage will look it up and if it's available, will set it immediately.
 *
 * If you want to detect when the image was actually loaded into the {@link Cairo.Surface} you can connect to
 * the {@link GLib.Object.notify} signal for {@link Gtk.Image.surface}.
 */
static GType
granite_async_image_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteAsyncImageClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_async_image_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteAsyncImage), 0, (GInstanceInitFunc) granite_async_image_instance_init, NULL };
	GType granite_async_image_type_id;
	granite_async_image_type_id = g_type_register_static (gtk_image_get_type (), "GraniteAsyncImage", &g_define_type_info, 0);
	GraniteAsyncImage_private_offset = g_type_add_instance_private (granite_async_image_type_id, sizeof (GraniteAsyncImagePrivate));
	return granite_async_image_type_id;
}

GType
granite_async_image_get_type (void)
{
	static volatile gsize granite_async_image_type_id__volatile = 0;
	if (g_once_init_enter (&granite_async_image_type_id__volatile)) {
		GType granite_async_image_type_id;
		granite_async_image_type_id = granite_async_image_get_type_once ();
		g_once_init_leave (&granite_async_image_type_id__volatile, granite_async_image_type_id);
	}
	return granite_async_image_type_id__volatile;
}

static void
_vala_granite_async_image_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	GraniteAsyncImage * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_TYPE_ASYNC_IMAGE, GraniteAsyncImage);
#line 50 "../lib/Widgets/AsyncImage.vala"
	switch (property_id) {
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_LOAD_ON_REALIZE_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		g_value_set_boolean (value, granite_async_image_get_load_on_realize (self));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_AUTO_SIZE_REQUEST_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		g_value_set_boolean (value, granite_async_image_get_auto_size_request (self));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_GICON_ASYNC_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		g_value_set_object (value, granite_async_image_get_gicon_async (self));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_SIZE_ASYNC_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		g_value_set_int (value, granite_async_image_get_size_async (self));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 2864 "AsyncImage.c"
		default:
#line 50 "../lib/Widgets/AsyncImage.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 2870 "AsyncImage.c"
	}
}

static void
_vala_granite_async_image_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	GraniteAsyncImage * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_TYPE_ASYNC_IMAGE, GraniteAsyncImage);
#line 50 "../lib/Widgets/AsyncImage.vala"
	switch (property_id) {
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_LOAD_ON_REALIZE_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_set_load_on_realize (self, g_value_get_boolean (value));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_AUTO_SIZE_REQUEST_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_set_auto_size_request (self, g_value_get_boolean (value));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_GICON_ASYNC_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_set_gicon_async (self, g_value_get_object (value));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 50 "../lib/Widgets/AsyncImage.vala"
		case GRANITE_ASYNC_IMAGE_SIZE_ASYNC_PROPERTY:
#line 50 "../lib/Widgets/AsyncImage.vala"
		granite_async_image_set_size_async (self, g_value_get_int (value));
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 2908 "AsyncImage.c"
		default:
#line 50 "../lib/Widgets/AsyncImage.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 50 "../lib/Widgets/AsyncImage.vala"
		break;
#line 2914 "AsyncImage.c"
	}
}


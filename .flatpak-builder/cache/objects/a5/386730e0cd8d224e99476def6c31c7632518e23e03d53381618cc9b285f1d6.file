/* SettingsPage.c generated by valac 0.48.14, the Vala compiler
 * generated from SettingsPage.vala, do not modify */

/*
 * Copyright (c) 2017 elementary LLC. (https://elementary.io)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 */

#include "granite.h"
#include <glib-object.h>
#include <gtk/gtk.h>
#include <glib.h>
#include <float.h>
#include <math.h>

#define TYPE_SETTINGS_PAGE (settings_page_get_type ())
#define SETTINGS_PAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SETTINGS_PAGE, SettingsPage))
#define SETTINGS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SETTINGS_PAGE, SettingsPageClass))
#define IS_SETTINGS_PAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SETTINGS_PAGE))
#define IS_SETTINGS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SETTINGS_PAGE))
#define SETTINGS_PAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SETTINGS_PAGE, SettingsPageClass))

typedef struct _SettingsPage SettingsPage;
typedef struct _SettingsPageClass SettingsPageClass;
typedef struct _SettingsPagePrivate SettingsPagePrivate;
enum  {
	SETTINGS_PAGE_0_PROPERTY,
	SETTINGS_PAGE_NUM_PROPERTIES
};
static GParamSpec* settings_page_properties[SETTINGS_PAGE_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block12Data Block12Data;

struct _SettingsPage {
	GraniteSettingsPage parent_instance;
	SettingsPagePrivate * priv;
};

struct _SettingsPageClass {
	GraniteSettingsPageClass parent_class;
};

struct _Block12Data {
	int _ref_count_;
	SettingsPage* self;
	GtkEntry* title_entry;
};

static gpointer settings_page_parent_class = NULL;

GType settings_page_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SettingsPage, g_object_unref)
SettingsPage* settings_page_new (void);
SettingsPage* settings_page_construct (GType object_type);
static GObject * settings_page_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
static Block12Data* block12_data_ref (Block12Data* _data12_);
static void block12_data_unref (void * _userdata_);
static void _settings_page___lambda23_ (Block12Data* _data12_);
static void __settings_page___lambda23__gtk_editable_changed (GtkEditable* _sender,
                                                       gpointer self);
static GType settings_page_get_type_once (void);

SettingsPage*
settings_page_construct (GType object_type)
{
	SettingsPage * self = NULL;
	GtkSpinner* display_widget = NULL;
	GtkSpinner* _tmp0_ = NULL;
#line 22 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp0_ = (GtkSpinner*) gtk_spinner_new ();
#line 22 "../demo/Views/SettingsView/SettingsPage.vala"
	g_object_set ((GtkWidget*) _tmp0_, "height-request", 32, NULL);
#line 22 "../demo/Views/SettingsView/SettingsPage.vala"
	g_object_ref_sink (_tmp0_);
#line 22 "../demo/Views/SettingsView/SettingsPage.vala"
	display_widget = _tmp0_;
#line 25 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_spinner_start (display_widget);
#line 27 "../demo/Views/SettingsView/SettingsPage.vala"
	self = (SettingsPage*) g_object_new (object_type, "display-widget", display_widget, "status", "Spinning", "header", "Manual Pages", "title", "Custom Display Widget Page", NULL);
#line 21 "../demo/Views/SettingsView/SettingsPage.vala"
	_g_object_unref0 (display_widget);
#line 21 "../demo/Views/SettingsView/SettingsPage.vala"
	return self;
#line 102 "SettingsPage.c"
}

SettingsPage*
settings_page_new (void)
{
#line 21 "../demo/Views/SettingsView/SettingsPage.vala"
	return settings_page_construct (TYPE_SETTINGS_PAGE);
#line 110 "SettingsPage.c"
}

static Block12Data*
block12_data_ref (Block12Data* _data12_)
{
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	g_atomic_int_inc (&_data12_->_ref_count_);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	return _data12_;
#line 120 "SettingsPage.c"
}

static void
block12_data_unref (void * _userdata_)
{
	Block12Data* _data12_;
	_data12_ = (Block12Data*) _userdata_;
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	if (g_atomic_int_dec_and_test (&_data12_->_ref_count_)) {
#line 130 "SettingsPage.c"
		SettingsPage* self;
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
		self = _data12_->self;
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
		_g_object_unref0 (_data12_->title_entry);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
		_g_object_unref0 (self);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
		g_slice_free (Block12Data, _data12_);
#line 140 "SettingsPage.c"
	}
}

static void
_settings_page___lambda23_ (Block12Data* _data12_)
{
	SettingsPage* self;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 52 "../demo/Views/SettingsView/SettingsPage.vala"
	self = _data12_->self;
#line 53 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp0_ = _data12_->title_entry;
#line 53 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 53 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp2_ = _tmp1_;
#line 53 "../demo/Views/SettingsView/SettingsPage.vala"
	granite_settings_page_set_title ((GraniteSettingsPage*) self, _tmp2_);
#line 161 "SettingsPage.c"
}

static void
__settings_page___lambda23__gtk_editable_changed (GtkEditable* _sender,
                                                  gpointer self)
{
#line 52 "../demo/Views/SettingsView/SettingsPage.vala"
	_settings_page___lambda23_ (self);
#line 170 "SettingsPage.c"
}

static GObject *
settings_page_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	SettingsPage * self;
	Block12Data* _data12_;
	GtkLabel* title_label = NULL;
	GtkLabel* _tmp0_;
	GtkLabel* _tmp1_;
	GtkEntry* _tmp2_;
	GtkEntry* _tmp3_;
	GtkEntry* _tmp4_;
	GtkGrid* content_area = NULL;
	GtkGrid* _tmp5_;
	GtkGrid* _tmp6_;
	GtkGrid* _tmp7_;
	GtkGrid* _tmp8_;
	GtkGrid* _tmp9_;
	GtkLabel* _tmp10_;
	GtkGrid* _tmp11_;
	GtkEntry* _tmp12_;
	GtkGrid* _tmp13_;
	GtkEntry* _tmp14_;
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	parent_class = G_OBJECT_CLASS (settings_page_parent_class);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_SETTINGS_PAGE, SettingsPage);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	_data12_ = g_slice_new0 (Block12Data);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	_data12_->_ref_count_ = 1;
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	_data12_->self = g_object_ref (self);
#line 36 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp0_ = (GtkLabel*) gtk_label_new ("Title:");
#line 36 "../demo/Views/SettingsView/SettingsPage.vala"
	g_object_ref_sink (_tmp0_);
#line 36 "../demo/Views/SettingsView/SettingsPage.vala"
	title_label = _tmp0_;
#line 37 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp1_ = title_label;
#line 37 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_label_set_xalign (_tmp1_, (gfloat) 1);
#line 39 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp2_ = (GtkEntry*) gtk_entry_new ();
#line 39 "../demo/Views/SettingsView/SettingsPage.vala"
	g_object_ref_sink (_tmp2_);
#line 39 "../demo/Views/SettingsView/SettingsPage.vala"
	_data12_->title_entry = _tmp2_;
#line 40 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp3_ = _data12_->title_entry;
#line 40 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp3_, TRUE);
#line 41 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp4_ = _data12_->title_entry;
#line 41 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_entry_set_placeholder_text (_tmp4_, "This page's title");
#line 43 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp5_ = (GtkGrid*) gtk_grid_new ();
#line 43 "../demo/Views/SettingsView/SettingsPage.vala"
	g_object_ref_sink (_tmp5_);
#line 43 "../demo/Views/SettingsView/SettingsPage.vala"
	content_area = _tmp5_;
#line 44 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp6_ = content_area;
#line 44 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_grid_set_column_spacing (_tmp6_, 12);
#line 45 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp7_ = content_area;
#line 45 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_grid_set_row_spacing (_tmp7_, 12);
#line 46 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp8_ = content_area;
#line 46 "../demo/Views/SettingsView/SettingsPage.vala"
	g_object_set ((GtkWidget*) _tmp8_, "margin", 12, NULL);
#line 47 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp9_ = content_area;
#line 47 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp10_ = title_label;
#line 47 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_grid_attach (_tmp9_, (GtkWidget*) _tmp10_, 0, 1, 1, 1);
#line 48 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp11_ = content_area;
#line 48 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp12_ = _data12_->title_entry;
#line 48 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_grid_attach (_tmp11_, (GtkWidget*) _tmp12_, 1, 1, 1, 1);
#line 50 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp13_ = content_area;
#line 50 "../demo/Views/SettingsView/SettingsPage.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp13_);
#line 52 "../demo/Views/SettingsView/SettingsPage.vala"
	_tmp14_ = _data12_->title_entry;
#line 52 "../demo/Views/SettingsView/SettingsPage.vala"
	g_signal_connect_data ((GtkEditable*) _tmp14_, "changed", (GCallback) __settings_page___lambda23__gtk_editable_changed, block12_data_ref (_data12_), (GClosureNotify) block12_data_unref, 0);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	_g_object_unref0 (content_area);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	_g_object_unref0 (title_label);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	block12_data_unref (_data12_);
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	_data12_ = NULL;
#line 35 "../demo/Views/SettingsView/SettingsPage.vala"
	return obj;
#line 283 "SettingsPage.c"
}

static void
settings_page_class_init (SettingsPageClass * klass,
                          gpointer klass_data)
{
#line 20 "../demo/Views/SettingsView/SettingsPage.vala"
	settings_page_parent_class = g_type_class_peek_parent (klass);
#line 20 "../demo/Views/SettingsView/SettingsPage.vala"
	G_OBJECT_CLASS (klass)->constructor = settings_page_constructor;
#line 294 "SettingsPage.c"
}

static void
settings_page_instance_init (SettingsPage * self,
                             gpointer klass)
{
}

static GType
settings_page_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (SettingsPageClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) settings_page_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (SettingsPage), 0, (GInstanceInitFunc) settings_page_instance_init, NULL };
	GType settings_page_type_id;
	settings_page_type_id = g_type_register_static (GRANITE_TYPE_SETTINGS_PAGE, "SettingsPage", &g_define_type_info, 0);
	return settings_page_type_id;
}

GType
settings_page_get_type (void)
{
	static volatile gsize settings_page_type_id__volatile = 0;
	if (g_once_init_enter (&settings_page_type_id__volatile)) {
		GType settings_page_type_id;
		settings_page_type_id = settings_page_get_type_once ();
		g_once_init_leave (&settings_page_type_id__volatile, settings_page_type_id);
	}
	return settings_page_type_id__volatile;
}


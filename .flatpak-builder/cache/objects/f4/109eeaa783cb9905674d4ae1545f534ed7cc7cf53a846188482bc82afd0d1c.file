/* SimpleCommand.c generated by valac 0.48.14, the Vala compiler
 * generated from SimpleCommand.vala, do not modify */

/*
 *  Copyright (C) 2019 elementary, Inc. (https://elementary.io)
 *                2011â€“2013 Lucas Baudin <xapantu@gmail.com>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#define GRANITE_SERVICES_TYPE_SIMPLE_COMMAND (granite_services_simple_command_get_type ())
#define GRANITE_SERVICES_SIMPLE_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, GraniteServicesSimpleCommand))
#define GRANITE_SERVICES_SIMPLE_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, GraniteServicesSimpleCommandClass))
#define GRANITE_SERVICES_IS_SIMPLE_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_TYPE_SIMPLE_COMMAND))
#define GRANITE_SERVICES_IS_SIMPLE_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_SERVICES_TYPE_SIMPLE_COMMAND))
#define GRANITE_SERVICES_SIMPLE_COMMAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, GraniteServicesSimpleCommandClass))

typedef struct _GraniteServicesSimpleCommand GraniteServicesSimpleCommand;
typedef struct _GraniteServicesSimpleCommandClass GraniteServicesSimpleCommandClass;
typedef struct _GraniteServicesSimpleCommandPrivate GraniteServicesSimpleCommandPrivate;
enum  {
	GRANITE_SERVICES_SIMPLE_COMMAND_0_PROPERTY,
	GRANITE_SERVICES_SIMPLE_COMMAND_NUM_PROPERTIES
};
static GParamSpec* granite_services_simple_command_properties[GRANITE_SERVICES_SIMPLE_COMMAND_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_io_channel_unref0(var) ((var == NULL) ? NULL : (var = (g_io_channel_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	GRANITE_SERVICES_SIMPLE_COMMAND_DONE_SIGNAL,
	GRANITE_SERVICES_SIMPLE_COMMAND_OUTPUT_CHANGED_SIGNAL,
	GRANITE_SERVICES_SIMPLE_COMMAND_STANDARD_CHANGED_SIGNAL,
	GRANITE_SERVICES_SIMPLE_COMMAND_ERROR_CHANGED_SIGNAL,
	GRANITE_SERVICES_SIMPLE_COMMAND_NUM_SIGNALS
};
static guint granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_NUM_SIGNALS] = {0};

struct _GraniteServicesSimpleCommand {
	GObject parent_instance;
	gchar* standard_output_str;
	gchar* error_output_str;
	gchar* output_str;
	GraniteServicesSimpleCommandPrivate * priv;
};

struct _GraniteServicesSimpleCommandClass {
	GObjectClass parent_class;
};

struct _GraniteServicesSimpleCommandPrivate {
	GIOChannel* out_make;
	GIOChannel* error_out;
	gchar* dir;
	gchar* command;
	GPid pid;
};

static gint GraniteServicesSimpleCommand_private_offset;
static gpointer granite_services_simple_command_parent_class = NULL;

GType granite_services_simple_command_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteServicesSimpleCommand, g_object_unref)
GraniteServicesSimpleCommand* granite_services_simple_command_new (const gchar* dir,
                                                                   const gchar* command);
GraniteServicesSimpleCommand* granite_services_simple_command_construct (GType object_type,
                                                                         const gchar* dir,
                                                                         const gchar* command);
void granite_services_simple_command_run (GraniteServicesSimpleCommand* self);
static void __lambda8_ (GraniteServicesSimpleCommand* self,
                 GPid pid,
                 gint exit);
static void ___lambda8__gchild_watch_func (GPid pid,
                                    gint status,
                                    gpointer self);
static gboolean __lambda9_ (GraniteServicesSimpleCommand* self,
                     GIOChannel* source,
                     GIOCondition condition);
static gboolean ___lambda9__gio_func (GIOChannel* source,
                               GIOCondition condition,
                               gpointer self);
static gboolean __lambda10_ (GraniteServicesSimpleCommand* self,
                      GIOChannel* source,
                      GIOCondition condition);
static gboolean ___lambda10__gio_func (GIOChannel* source,
                                GIOCondition condition,
                                gpointer self);
static void granite_services_simple_command_finalize (GObject * obj);
static GType granite_services_simple_command_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

static inline gpointer
granite_services_simple_command_get_instance_private (GraniteServicesSimpleCommand* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteServicesSimpleCommand_private_offset);
}

/**
     * Create a new object. You will have to call `run ()` when you want to run the command.
     *
     * @param dir The working dir
     * @param command The command to execute (using absolute paths like /usr/bin/make causes less
     * strange bugs).
     *
     */
GraniteServicesSimpleCommand*
granite_services_simple_command_construct (GType object_type,
                                           const gchar* dir,
                                           const gchar* command)
{
	GraniteServicesSimpleCommand * self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 79 "../lib/Services/SimpleCommand.vala"
	g_return_val_if_fail (dir != NULL, NULL);
#line 79 "../lib/Services/SimpleCommand.vala"
	g_return_val_if_fail (command != NULL, NULL);
#line 79 "../lib/Services/SimpleCommand.vala"
	self = (GraniteServicesSimpleCommand*) g_object_new (object_type, NULL);
#line 80 "../lib/Services/SimpleCommand.vala"
	_tmp0_ = g_strdup (dir);
#line 80 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->priv->dir);
#line 80 "../lib/Services/SimpleCommand.vala"
	self->priv->dir = _tmp0_;
#line 81 "../lib/Services/SimpleCommand.vala"
	_tmp1_ = g_strdup (command);
#line 81 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->priv->command);
#line 81 "../lib/Services/SimpleCommand.vala"
	self->priv->command = _tmp1_;
#line 79 "../lib/Services/SimpleCommand.vala"
	return self;
#line 158 "SimpleCommand.c"
}

GraniteServicesSimpleCommand*
granite_services_simple_command_new (const gchar* dir,
                                     const gchar* command)
{
#line 79 "../lib/Services/SimpleCommand.vala"
	return granite_services_simple_command_construct (GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, dir, command);
#line 167 "SimpleCommand.c"
}

/**
     * Launch the command. It is async.
     */
static void
__lambda8_ (GraniteServicesSimpleCommand* self,
            GPid pid,
            gint exit)
{
#line 108 "../lib/Services/SimpleCommand.vala"
	g_signal_emit (self, granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_DONE_SIGNAL], 0, exit);
#line 180 "SimpleCommand.c"
}

static void
___lambda8__gchild_watch_func (GPid pid,
                               gint status,
                               gpointer self)
{
#line 107 "../lib/Services/SimpleCommand.vala"
	__lambda8_ ((GraniteServicesSimpleCommand*) self, pid, status);
#line 190 "SimpleCommand.c"
}

static gboolean
__lambda9_ (GraniteServicesSimpleCommand* self,
            GIOChannel* source,
            GIOCondition condition)
{
	gchar* output = NULL;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	const gchar* _tmp12_;
	const gchar* _tmp13_;
	GError* _inner_error0_ = NULL;
	gboolean result = FALSE;
#line 112 "../lib/Services/SimpleCommand.vala"
	g_return_val_if_fail (source != NULL, FALSE);
#line 113 "../lib/Services/SimpleCommand.vala"
	if (condition == G_IO_HUP) {
#line 114 "../lib/Services/SimpleCommand.vala"
		result = FALSE;
#line 114 "../lib/Services/SimpleCommand.vala"
		return result;
#line 217 "SimpleCommand.c"
	}
#line 117 "../lib/Services/SimpleCommand.vala"
	output = NULL;
#line 221 "SimpleCommand.c"
	{
		GIOChannel* _tmp0_;
		gchar* _tmp1_ = NULL;
#line 120 "../lib/Services/SimpleCommand.vala"
		_tmp0_ = self->priv->out_make;
#line 120 "../lib/Services/SimpleCommand.vala"
		g_io_channel_read_line (_tmp0_, &_tmp1_, NULL, NULL, &_inner_error0_);
#line 120 "../lib/Services/SimpleCommand.vala"
		_g_free0 (output);
#line 120 "../lib/Services/SimpleCommand.vala"
		output = _tmp1_;
#line 120 "../lib/Services/SimpleCommand.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 235 "SimpleCommand.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		const gchar* _tmp2_;
		GError* _tmp3_;
		const gchar* _tmp4_;
#line 119 "../lib/Services/SimpleCommand.vala"
		e = _inner_error0_;
#line 119 "../lib/Services/SimpleCommand.vala"
		_inner_error0_ = NULL;
#line 122 "../lib/Services/SimpleCommand.vala"
		_tmp2_ = self->priv->command;
#line 122 "../lib/Services/SimpleCommand.vala"
		_tmp3_ = e;
#line 122 "../lib/Services/SimpleCommand.vala"
		_tmp4_ = _tmp3_->message;
#line 122 "../lib/Services/SimpleCommand.vala"
		g_critical ("SimpleCommand.vala:122: Error in the output retrieving of %s: %s", _tmp2_, _tmp4_);
#line 119 "../lib/Services/SimpleCommand.vala"
		_g_error_free0 (e);
#line 260 "SimpleCommand.c"
	}
	__finally0:
#line 119 "../lib/Services/SimpleCommand.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 265 "SimpleCommand.c"
		gboolean _tmp5_ = FALSE;
#line 119 "../lib/Services/SimpleCommand.vala"
		_g_free0 (output);
#line 119 "../lib/Services/SimpleCommand.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 119 "../lib/Services/SimpleCommand.vala"
		g_clear_error (&_inner_error0_);
#line 119 "../lib/Services/SimpleCommand.vala"
		return _tmp5_;
#line 275 "SimpleCommand.c"
	}
#line 125 "../lib/Services/SimpleCommand.vala"
	_tmp6_ = self->standard_output_str;
#line 125 "../lib/Services/SimpleCommand.vala"
	_tmp7_ = output;
#line 125 "../lib/Services/SimpleCommand.vala"
	_tmp8_ = g_strconcat (_tmp6_, _tmp7_, NULL);
#line 125 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->standard_output_str);
#line 125 "../lib/Services/SimpleCommand.vala"
	self->standard_output_str = _tmp8_;
#line 126 "../lib/Services/SimpleCommand.vala"
	_tmp9_ = self->output_str;
#line 126 "../lib/Services/SimpleCommand.vala"
	_tmp10_ = output;
#line 126 "../lib/Services/SimpleCommand.vala"
	_tmp11_ = g_strconcat (_tmp9_, _tmp10_, NULL);
#line 126 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->output_str);
#line 126 "../lib/Services/SimpleCommand.vala"
	self->output_str = _tmp11_;
#line 127 "../lib/Services/SimpleCommand.vala"
	_tmp12_ = output;
#line 127 "../lib/Services/SimpleCommand.vala"
	g_signal_emit (self, granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_STANDARD_CHANGED_SIGNAL], 0, _tmp12_);
#line 128 "../lib/Services/SimpleCommand.vala"
	_tmp13_ = output;
#line 128 "../lib/Services/SimpleCommand.vala"
	g_signal_emit (self, granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_OUTPUT_CHANGED_SIGNAL], 0, _tmp13_);
#line 130 "../lib/Services/SimpleCommand.vala"
	result = TRUE;
#line 130 "../lib/Services/SimpleCommand.vala"
	_g_free0 (output);
#line 130 "../lib/Services/SimpleCommand.vala"
	return result;
#line 311 "SimpleCommand.c"
}

static gboolean
___lambda9__gio_func (GIOChannel* source,
                      GIOCondition condition,
                      gpointer self)
{
	gboolean result;
	result = __lambda9_ ((GraniteServicesSimpleCommand*) self, source, condition);
#line 112 "../lib/Services/SimpleCommand.vala"
	return result;
#line 323 "SimpleCommand.c"
}

static gboolean
__lambda10_ (GraniteServicesSimpleCommand* self,
             GIOChannel* source,
             GIOCondition condition)
{
	gchar* output = NULL;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	const gchar* _tmp12_;
	const gchar* _tmp13_;
	GError* _inner_error0_ = NULL;
	gboolean result = FALSE;
#line 134 "../lib/Services/SimpleCommand.vala"
	g_return_val_if_fail (source != NULL, FALSE);
#line 135 "../lib/Services/SimpleCommand.vala"
	if (condition == G_IO_HUP) {
#line 136 "../lib/Services/SimpleCommand.vala"
		result = FALSE;
#line 136 "../lib/Services/SimpleCommand.vala"
		return result;
#line 350 "SimpleCommand.c"
	}
#line 139 "../lib/Services/SimpleCommand.vala"
	output = NULL;
#line 354 "SimpleCommand.c"
	{
		GIOChannel* _tmp0_;
		gchar* _tmp1_ = NULL;
#line 142 "../lib/Services/SimpleCommand.vala"
		_tmp0_ = self->priv->error_out;
#line 142 "../lib/Services/SimpleCommand.vala"
		g_io_channel_read_line (_tmp0_, &_tmp1_, NULL, NULL, &_inner_error0_);
#line 142 "../lib/Services/SimpleCommand.vala"
		_g_free0 (output);
#line 142 "../lib/Services/SimpleCommand.vala"
		output = _tmp1_;
#line 142 "../lib/Services/SimpleCommand.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 368 "SimpleCommand.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		const gchar* _tmp2_;
		GError* _tmp3_;
		const gchar* _tmp4_;
#line 141 "../lib/Services/SimpleCommand.vala"
		e = _inner_error0_;
#line 141 "../lib/Services/SimpleCommand.vala"
		_inner_error0_ = NULL;
#line 144 "../lib/Services/SimpleCommand.vala"
		_tmp2_ = self->priv->command;
#line 144 "../lib/Services/SimpleCommand.vala"
		_tmp3_ = e;
#line 144 "../lib/Services/SimpleCommand.vala"
		_tmp4_ = _tmp3_->message;
#line 144 "../lib/Services/SimpleCommand.vala"
		g_critical ("SimpleCommand.vala:144: Error in the output retrieving of %s: %s", _tmp2_, _tmp4_);
#line 141 "../lib/Services/SimpleCommand.vala"
		_g_error_free0 (e);
#line 393 "SimpleCommand.c"
	}
	__finally0:
#line 141 "../lib/Services/SimpleCommand.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 398 "SimpleCommand.c"
		gboolean _tmp5_ = FALSE;
#line 141 "../lib/Services/SimpleCommand.vala"
		_g_free0 (output);
#line 141 "../lib/Services/SimpleCommand.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 141 "../lib/Services/SimpleCommand.vala"
		g_clear_error (&_inner_error0_);
#line 141 "../lib/Services/SimpleCommand.vala"
		return _tmp5_;
#line 408 "SimpleCommand.c"
	}
#line 147 "../lib/Services/SimpleCommand.vala"
	_tmp6_ = self->error_output_str;
#line 147 "../lib/Services/SimpleCommand.vala"
	_tmp7_ = output;
#line 147 "../lib/Services/SimpleCommand.vala"
	_tmp8_ = g_strconcat (_tmp6_, _tmp7_, NULL);
#line 147 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->error_output_str);
#line 147 "../lib/Services/SimpleCommand.vala"
	self->error_output_str = _tmp8_;
#line 148 "../lib/Services/SimpleCommand.vala"
	_tmp9_ = self->output_str;
#line 148 "../lib/Services/SimpleCommand.vala"
	_tmp10_ = output;
#line 148 "../lib/Services/SimpleCommand.vala"
	_tmp11_ = g_strconcat (_tmp9_, _tmp10_, NULL);
#line 148 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->output_str);
#line 148 "../lib/Services/SimpleCommand.vala"
	self->output_str = _tmp11_;
#line 149 "../lib/Services/SimpleCommand.vala"
	_tmp12_ = output;
#line 149 "../lib/Services/SimpleCommand.vala"
	g_signal_emit (self, granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_ERROR_CHANGED_SIGNAL], 0, _tmp12_);
#line 150 "../lib/Services/SimpleCommand.vala"
	_tmp13_ = output;
#line 150 "../lib/Services/SimpleCommand.vala"
	g_signal_emit (self, granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_OUTPUT_CHANGED_SIGNAL], 0, _tmp13_);
#line 152 "../lib/Services/SimpleCommand.vala"
	result = TRUE;
#line 152 "../lib/Services/SimpleCommand.vala"
	_g_free0 (output);
#line 152 "../lib/Services/SimpleCommand.vala"
	return result;
#line 444 "SimpleCommand.c"
}

static gboolean
___lambda10__gio_func (GIOChannel* source,
                       GIOCondition condition,
                       gpointer self)
{
	gboolean result;
	result = __lambda10_ ((GraniteServicesSimpleCommand*) self, source, condition);
#line 134 "../lib/Services/SimpleCommand.vala"
	return result;
#line 456 "SimpleCommand.c"
}

void
granite_services_simple_command_run (GraniteServicesSimpleCommand* self)
{
	gint standard_output = 0;
	gint standard_error = 0;
	GIOChannel* _tmp12_;
	GIOChannel* _tmp13_;
	GIOChannel* _tmp14_;
	GIOChannel* _tmp15_;
	GError* _inner_error0_ = NULL;
#line 87 "../lib/Services/SimpleCommand.vala"
	g_return_if_fail (self != NULL);
#line 88 "../lib/Services/SimpleCommand.vala"
	standard_output = 0;
#line 89 "../lib/Services/SimpleCommand.vala"
	standard_error = 0;
#line 475 "SimpleCommand.c"
	{
		const gchar* _tmp0_;
		const gchar* _tmp1_;
		gchar** _tmp2_;
		gchar** _tmp3_;
		gchar** _tmp4_;
		gint _tmp4__length1;
		GPid _tmp5_ = 0;
		gint _tmp6_ = 0;
		gint _tmp7_ = 0;
#line 92 "../lib/Services/SimpleCommand.vala"
		_tmp0_ = self->priv->dir;
#line 92 "../lib/Services/SimpleCommand.vala"
		_tmp1_ = self->priv->command;
#line 92 "../lib/Services/SimpleCommand.vala"
		_tmp3_ = _tmp2_ = g_strsplit (_tmp1_, " ", 0);
#line 92 "../lib/Services/SimpleCommand.vala"
		_tmp4_ = _tmp3_;
#line 92 "../lib/Services/SimpleCommand.vala"
		_tmp4__length1 = _vala_array_length (_tmp2_);
#line 92 "../lib/Services/SimpleCommand.vala"
		g_spawn_async_with_pipes (_tmp0_, _tmp4_, NULL, G_SPAWN_DO_NOT_REAP_CHILD, NULL, NULL, &_tmp5_, NULL, &_tmp6_, &_tmp7_, &_inner_error0_);
#line 92 "../lib/Services/SimpleCommand.vala"
		self->priv->pid = _tmp5_;
#line 92 "../lib/Services/SimpleCommand.vala"
		standard_output = _tmp6_;
#line 92 "../lib/Services/SimpleCommand.vala"
		standard_error = _tmp7_;
#line 92 "../lib/Services/SimpleCommand.vala"
		_tmp4_ = (_vala_array_free (_tmp4_, _tmp4__length1, (GDestroyNotify) g_free), NULL);
#line 92 "../lib/Services/SimpleCommand.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 508 "SimpleCommand.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		GError* _tmp10_;
		const gchar* _tmp11_;
#line 91 "../lib/Services/SimpleCommand.vala"
		e = _inner_error0_;
#line 91 "../lib/Services/SimpleCommand.vala"
		_inner_error0_ = NULL;
#line 104 "../lib/Services/SimpleCommand.vala"
		_tmp8_ = self->priv->command;
#line 104 "../lib/Services/SimpleCommand.vala"
		_tmp9_ = self->priv->dir;
#line 104 "../lib/Services/SimpleCommand.vala"
		_tmp10_ = e;
#line 104 "../lib/Services/SimpleCommand.vala"
		_tmp11_ = _tmp10_->message;
#line 104 "../lib/Services/SimpleCommand.vala"
		g_critical ("SimpleCommand.vala:104: Couldn't launch command %s in the directory %s" \
": %s", _tmp8_, _tmp9_, _tmp11_);
#line 91 "../lib/Services/SimpleCommand.vala"
		_g_error_free0 (e);
#line 536 "SimpleCommand.c"
	}
	__finally0:
#line 91 "../lib/Services/SimpleCommand.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 91 "../lib/Services/SimpleCommand.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 91 "../lib/Services/SimpleCommand.vala"
		g_clear_error (&_inner_error0_);
#line 91 "../lib/Services/SimpleCommand.vala"
		return;
#line 547 "SimpleCommand.c"
	}
#line 107 "../lib/Services/SimpleCommand.vala"
	g_child_watch_add_full (G_PRIORITY_DEFAULT_IDLE, self->priv->pid, ___lambda8__gchild_watch_func, g_object_ref (self), g_object_unref);
#line 111 "../lib/Services/SimpleCommand.vala"
	_tmp12_ = g_io_channel_unix_new (standard_output);
#line 111 "../lib/Services/SimpleCommand.vala"
	_g_io_channel_unref0 (self->priv->out_make);
#line 111 "../lib/Services/SimpleCommand.vala"
	self->priv->out_make = _tmp12_;
#line 112 "../lib/Services/SimpleCommand.vala"
	_tmp13_ = self->priv->out_make;
#line 112 "../lib/Services/SimpleCommand.vala"
	g_io_add_watch (_tmp13_, G_IO_IN | G_IO_HUP, ___lambda9__gio_func, self);
#line 133 "../lib/Services/SimpleCommand.vala"
	_tmp14_ = g_io_channel_unix_new (standard_error);
#line 133 "../lib/Services/SimpleCommand.vala"
	_g_io_channel_unref0 (self->priv->error_out);
#line 133 "../lib/Services/SimpleCommand.vala"
	self->priv->error_out = _tmp14_;
#line 134 "../lib/Services/SimpleCommand.vala"
	_tmp15_ = self->priv->error_out;
#line 134 "../lib/Services/SimpleCommand.vala"
	g_io_add_watch (_tmp15_, G_IO_IN | G_IO_HUP, ___lambda10__gio_func, self);
#line 571 "SimpleCommand.c"
}

static void
granite_services_simple_command_class_init (GraniteServicesSimpleCommandClass * klass,
                                            gpointer klass_data)
{
#line 25 "../lib/Services/SimpleCommand.vala"
	granite_services_simple_command_parent_class = g_type_class_peek_parent (klass);
#line 25 "../lib/Services/SimpleCommand.vala"
	g_type_class_adjust_private_offset (klass, &GraniteServicesSimpleCommand_private_offset);
#line 25 "../lib/Services/SimpleCommand.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_services_simple_command_finalize;
#line 584 "SimpleCommand.c"
	/**
	     * Emitted when the command is finished.
	     */
#line 25 "../lib/Services/SimpleCommand.vala"
	granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_DONE_SIGNAL] = g_signal_new ("done", GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
#line 590 "SimpleCommand.c"
	/**
	     * When the output changed (std.out and std.err).
	     *
	     * @param text the new text
	     */
#line 25 "../lib/Services/SimpleCommand.vala"
	granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_OUTPUT_CHANGED_SIGNAL] = g_signal_new ("output-changed", GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
#line 598 "SimpleCommand.c"
	/**
	     * When the standard output is changed.
	     *
	     * @param text the new text from std.out
	     */
#line 25 "../lib/Services/SimpleCommand.vala"
	granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_STANDARD_CHANGED_SIGNAL] = g_signal_new ("standard-changed", GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
#line 606 "SimpleCommand.c"
	/**
	     * When the error output is changed.
	     *
	     * @param text the new text from std.err
	     */
#line 25 "../lib/Services/SimpleCommand.vala"
	granite_services_simple_command_signals[GRANITE_SERVICES_SIMPLE_COMMAND_ERROR_CHANGED_SIGNAL] = g_signal_new ("error-changed", GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
#line 614 "SimpleCommand.c"
}

static void
granite_services_simple_command_instance_init (GraniteServicesSimpleCommand * self,
                                               gpointer klass)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 25 "../lib/Services/SimpleCommand.vala"
	self->priv = granite_services_simple_command_get_instance_private (self);
#line 55 "../lib/Services/SimpleCommand.vala"
	_tmp0_ = g_strdup ("");
#line 55 "../lib/Services/SimpleCommand.vala"
	self->standard_output_str = _tmp0_;
#line 59 "../lib/Services/SimpleCommand.vala"
	_tmp1_ = g_strdup ("");
#line 59 "../lib/Services/SimpleCommand.vala"
	self->error_output_str = _tmp1_;
#line 63 "../lib/Services/SimpleCommand.vala"
	_tmp2_ = g_strdup ("");
#line 63 "../lib/Services/SimpleCommand.vala"
	self->output_str = _tmp2_;
#line 638 "SimpleCommand.c"
}

static void
granite_services_simple_command_finalize (GObject * obj)
{
	GraniteServicesSimpleCommand * self;
#line 25 "../lib/Services/SimpleCommand.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_SERVICES_TYPE_SIMPLE_COMMAND, GraniteServicesSimpleCommand);
#line 55 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->standard_output_str);
#line 59 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->error_output_str);
#line 63 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->output_str);
#line 65 "../lib/Services/SimpleCommand.vala"
	_g_io_channel_unref0 (self->priv->out_make);
#line 66 "../lib/Services/SimpleCommand.vala"
	_g_io_channel_unref0 (self->priv->error_out);
#line 67 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->priv->dir);
#line 68 "../lib/Services/SimpleCommand.vala"
	_g_free0 (self->priv->command);
#line 25 "../lib/Services/SimpleCommand.vala"
	G_OBJECT_CLASS (granite_services_simple_command_parent_class)->finalize (obj);
#line 663 "SimpleCommand.c"
}

/**
 * This class is a wrapper to run an async command. It provides useful signals.
 */
static GType
granite_services_simple_command_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteServicesSimpleCommandClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_services_simple_command_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteServicesSimpleCommand), 0, (GInstanceInitFunc) granite_services_simple_command_instance_init, NULL };
	GType granite_services_simple_command_type_id;
	granite_services_simple_command_type_id = g_type_register_static (G_TYPE_OBJECT, "GraniteServicesSimpleCommand", &g_define_type_info, 0);
	GraniteServicesSimpleCommand_private_offset = g_type_add_instance_private (granite_services_simple_command_type_id, sizeof (GraniteServicesSimpleCommandPrivate));
	return granite_services_simple_command_type_id;
}

GType
granite_services_simple_command_get_type (void)
{
	static volatile gsize granite_services_simple_command_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_simple_command_type_id__volatile)) {
		GType granite_services_simple_command_type_id;
		granite_services_simple_command_type_id = granite_services_simple_command_get_type_once ();
		g_once_init_leave (&granite_services_simple_command_type_id__volatile, granite_services_simple_command_type_id);
	}
	return granite_services_simple_command_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


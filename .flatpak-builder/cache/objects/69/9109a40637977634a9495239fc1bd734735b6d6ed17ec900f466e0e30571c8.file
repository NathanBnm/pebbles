/* CharStack.c generated by valac 0.48.14, the Vala compiler
 * generated from CharStack.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#define TYPE_CHAR_STACK (char_stack_get_type ())
#define CHAR_STACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CHAR_STACK, CharStack))
#define CHAR_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CHAR_STACK, CharStackClass))
#define IS_CHAR_STACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CHAR_STACK))
#define IS_CHAR_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CHAR_STACK))
#define CHAR_STACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CHAR_STACK, CharStackClass))

typedef struct _CharStack CharStack;
typedef struct _CharStackClass CharStackClass;
typedef struct _CharStackPrivate CharStackPrivate;
typedef struct _ParamSpecCharStack ParamSpecCharStack;

struct _CharStack {
	GTypeInstance parent_instance;
	volatile int ref_count;
	CharStackPrivate * priv;
	gchar* stack;
	gint stack_length1;
};

struct _CharStackClass {
	GTypeClass parent_class;
	void (*finalize) (CharStack *self);
};

struct _CharStackPrivate {
	gint top;
	gint n;
	gchar temp;
};

struct _ParamSpecCharStack {
	GParamSpec parent_instance;
};

static gint CharStack_private_offset;
static gpointer char_stack_parent_class = NULL;

gpointer char_stack_ref (gpointer instance);
void char_stack_unref (gpointer instance);
GParamSpec* param_spec_char_stack (const gchar* name,
                                   const gchar* nick,
                                   const gchar* blurb,
                                   GType object_type,
                                   GParamFlags flags);
void value_set_char_stack (GValue* value,
                           gpointer v_object);
void value_take_char_stack (GValue* value,
                            gpointer v_object);
gpointer value_get_char_stack (const GValue* value);
GType char_stack_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (CharStack, char_stack_unref)
CharStack* char_stack_new (gint num);
CharStack* char_stack_construct (GType object_type,
                                 gint num);
gboolean char_stack_push (CharStack* self,
                          gchar elem);
gchar char_stack_pop (CharStack* self);
gchar char_stack_peek (CharStack* self);
gboolean char_stack_empty (CharStack* self);
static void char_stack_finalize (CharStack * obj);
static GType char_stack_get_type_once (void);

static inline gpointer
char_stack_get_instance_private (CharStack* self)
{
	return G_STRUCT_MEMBER_P (self, CharStack_private_offset);
}

CharStack*
char_stack_construct (GType object_type,
                      gint num)
{
	CharStack* self = NULL;
	gchar* _tmp0_;
#line 6 "../src/Core/CharStack.vala"
	self = (CharStack*) g_type_create_instance (object_type);
#line 7 "../src/Core/CharStack.vala"
	self->priv->n = num;
#line 8 "../src/Core/CharStack.vala"
	_tmp0_ = g_new0 (gchar, num);
#line 8 "../src/Core/CharStack.vala"
	self->stack = (g_free (self->stack), NULL);
#line 8 "../src/Core/CharStack.vala"
	self->stack = _tmp0_;
#line 8 "../src/Core/CharStack.vala"
	self->stack_length1 = num;
#line 9 "../src/Core/CharStack.vala"
	self->priv->top = -1;
#line 6 "../src/Core/CharStack.vala"
	return self;
#line 100 "CharStack.c"
}

CharStack*
char_stack_new (gint num)
{
#line 6 "../src/Core/CharStack.vala"
	return char_stack_construct (TYPE_CHAR_STACK, num);
#line 108 "CharStack.c"
}

gboolean
char_stack_push (CharStack* self,
                 gchar elem)
{
	gboolean result = FALSE;
#line 11 "../src/Core/CharStack.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 12 "../src/Core/CharStack.vala"
	if (self->priv->top < self->priv->n) {
#line 120 "CharStack.c"
		gint _tmp0_;
		gchar* _tmp1_;
		gint _tmp1__length1;
#line 13 "../src/Core/CharStack.vala"
		self->priv->top = self->priv->top + 1;
#line 13 "../src/Core/CharStack.vala"
		_tmp0_ = self->priv->top;
#line 14 "../src/Core/CharStack.vala"
		_tmp1_ = self->stack;
#line 14 "../src/Core/CharStack.vala"
		_tmp1__length1 = self->stack_length1;
#line 14 "../src/Core/CharStack.vala"
		_tmp1_[self->priv->top] = elem;
#line 15 "../src/Core/CharStack.vala"
		result = TRUE;
#line 15 "../src/Core/CharStack.vala"
		return result;
#line 138 "CharStack.c"
	} else {
#line 18 "../src/Core/CharStack.vala"
		result = FALSE;
#line 18 "../src/Core/CharStack.vala"
		return result;
#line 144 "CharStack.c"
	}
}

gchar
char_stack_pop (CharStack* self)
{
	gchar result = '\0';
#line 21 "../src/Core/CharStack.vala"
	g_return_val_if_fail (self != NULL, '\0');
#line 22 "../src/Core/CharStack.vala"
	if (self->priv->top >= 0) {
#line 156 "CharStack.c"
		gchar* _tmp0_;
		gint _tmp0__length1;
		gchar _tmp1_;
		gint _tmp2_;
#line 23 "../src/Core/CharStack.vala"
		_tmp0_ = self->stack;
#line 23 "../src/Core/CharStack.vala"
		_tmp0__length1 = self->stack_length1;
#line 23 "../src/Core/CharStack.vala"
		_tmp1_ = _tmp0_[self->priv->top];
#line 23 "../src/Core/CharStack.vala"
		self->priv->temp = _tmp1_;
#line 24 "../src/Core/CharStack.vala"
		_tmp2_ = self->priv->top;
#line 24 "../src/Core/CharStack.vala"
		self->priv->top = _tmp2_ - 1;
#line 25 "../src/Core/CharStack.vala"
		result = self->priv->temp;
#line 25 "../src/Core/CharStack.vala"
		return result;
#line 177 "CharStack.c"
	}
#line 27 "../src/Core/CharStack.vala"
	result = self->priv->temp;
#line 27 "../src/Core/CharStack.vala"
	return result;
#line 183 "CharStack.c"
}

gchar
char_stack_peek (CharStack* self)
{
	gchar result = '\0';
#line 29 "../src/Core/CharStack.vala"
	g_return_val_if_fail (self != NULL, '\0');
#line 30 "../src/Core/CharStack.vala"
	if (self->priv->top >= 0) {
#line 194 "CharStack.c"
		gchar* _tmp0_;
		gint _tmp0__length1;
		gchar _tmp1_;
#line 31 "../src/Core/CharStack.vala"
		_tmp0_ = self->stack;
#line 31 "../src/Core/CharStack.vala"
		_tmp0__length1 = self->stack_length1;
#line 31 "../src/Core/CharStack.vala"
		_tmp1_ = _tmp0_[self->priv->top];
#line 31 "../src/Core/CharStack.vala"
		result = _tmp1_;
#line 31 "../src/Core/CharStack.vala"
		return result;
#line 208 "CharStack.c"
	}
#line 33 "../src/Core/CharStack.vala"
	result = '0';
#line 33 "../src/Core/CharStack.vala"
	return result;
#line 214 "CharStack.c"
}

gboolean
char_stack_empty (CharStack* self)
{
	gboolean result = FALSE;
#line 35 "../src/Core/CharStack.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 36 "../src/Core/CharStack.vala"
	if (self->priv->top < 0) {
#line 37 "../src/Core/CharStack.vala"
		result = TRUE;
#line 37 "../src/Core/CharStack.vala"
		return result;
#line 229 "CharStack.c"
	} else {
#line 40 "../src/Core/CharStack.vala"
		result = FALSE;
#line 40 "../src/Core/CharStack.vala"
		return result;
#line 235 "CharStack.c"
	}
}

static void
value_char_stack_init (GValue* value)
{
#line 1 "../src/Core/CharStack.vala"
	value->data[0].v_pointer = NULL;
#line 244 "CharStack.c"
}

static void
value_char_stack_free_value (GValue* value)
{
#line 1 "../src/Core/CharStack.vala"
	if (value->data[0].v_pointer) {
#line 1 "../src/Core/CharStack.vala"
		char_stack_unref (value->data[0].v_pointer);
#line 254 "CharStack.c"
	}
}

static void
value_char_stack_copy_value (const GValue* src_value,
                             GValue* dest_value)
{
#line 1 "../src/Core/CharStack.vala"
	if (src_value->data[0].v_pointer) {
#line 1 "../src/Core/CharStack.vala"
		dest_value->data[0].v_pointer = char_stack_ref (src_value->data[0].v_pointer);
#line 266 "CharStack.c"
	} else {
#line 1 "../src/Core/CharStack.vala"
		dest_value->data[0].v_pointer = NULL;
#line 270 "CharStack.c"
	}
}

static gpointer
value_char_stack_peek_pointer (const GValue* value)
{
#line 1 "../src/Core/CharStack.vala"
	return value->data[0].v_pointer;
#line 279 "CharStack.c"
}

static gchar*
value_char_stack_collect_value (GValue* value,
                                guint n_collect_values,
                                GTypeCValue* collect_values,
                                guint collect_flags)
{
#line 1 "../src/Core/CharStack.vala"
	if (collect_values[0].v_pointer) {
#line 290 "CharStack.c"
		CharStack * object;
		object = collect_values[0].v_pointer;
#line 1 "../src/Core/CharStack.vala"
		if (object->parent_instance.g_class == NULL) {
#line 1 "../src/Core/CharStack.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 297 "CharStack.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 1 "../src/Core/CharStack.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 301 "CharStack.c"
		}
#line 1 "../src/Core/CharStack.vala"
		value->data[0].v_pointer = char_stack_ref (object);
#line 305 "CharStack.c"
	} else {
#line 1 "../src/Core/CharStack.vala"
		value->data[0].v_pointer = NULL;
#line 309 "CharStack.c"
	}
#line 1 "../src/Core/CharStack.vala"
	return NULL;
#line 313 "CharStack.c"
}

static gchar*
value_char_stack_lcopy_value (const GValue* value,
                              guint n_collect_values,
                              GTypeCValue* collect_values,
                              guint collect_flags)
{
	CharStack ** object_p;
	object_p = collect_values[0].v_pointer;
#line 1 "../src/Core/CharStack.vala"
	if (!object_p) {
#line 1 "../src/Core/CharStack.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 328 "CharStack.c"
	}
#line 1 "../src/Core/CharStack.vala"
	if (!value->data[0].v_pointer) {
#line 1 "../src/Core/CharStack.vala"
		*object_p = NULL;
#line 334 "CharStack.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 1 "../src/Core/CharStack.vala"
		*object_p = value->data[0].v_pointer;
#line 338 "CharStack.c"
	} else {
#line 1 "../src/Core/CharStack.vala"
		*object_p = char_stack_ref (value->data[0].v_pointer);
#line 342 "CharStack.c"
	}
#line 1 "../src/Core/CharStack.vala"
	return NULL;
#line 346 "CharStack.c"
}

GParamSpec*
param_spec_char_stack (const gchar* name,
                       const gchar* nick,
                       const gchar* blurb,
                       GType object_type,
                       GParamFlags flags)
{
	ParamSpecCharStack* spec;
#line 1 "../src/Core/CharStack.vala"
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_CHAR_STACK), NULL);
#line 1 "../src/Core/CharStack.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 1 "../src/Core/CharStack.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 1 "../src/Core/CharStack.vala"
	return G_PARAM_SPEC (spec);
#line 365 "CharStack.c"
}

gpointer
value_get_char_stack (const GValue* value)
{
#line 1 "../src/Core/CharStack.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_CHAR_STACK), NULL);
#line 1 "../src/Core/CharStack.vala"
	return value->data[0].v_pointer;
#line 375 "CharStack.c"
}

void
value_set_char_stack (GValue* value,
                      gpointer v_object)
{
	CharStack * old;
#line 1 "../src/Core/CharStack.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_CHAR_STACK));
#line 1 "../src/Core/CharStack.vala"
	old = value->data[0].v_pointer;
#line 1 "../src/Core/CharStack.vala"
	if (v_object) {
#line 1 "../src/Core/CharStack.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_CHAR_STACK));
#line 1 "../src/Core/CharStack.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 1 "../src/Core/CharStack.vala"
		value->data[0].v_pointer = v_object;
#line 1 "../src/Core/CharStack.vala"
		char_stack_ref (value->data[0].v_pointer);
#line 397 "CharStack.c"
	} else {
#line 1 "../src/Core/CharStack.vala"
		value->data[0].v_pointer = NULL;
#line 401 "CharStack.c"
	}
#line 1 "../src/Core/CharStack.vala"
	if (old) {
#line 1 "../src/Core/CharStack.vala"
		char_stack_unref (old);
#line 407 "CharStack.c"
	}
}

void
value_take_char_stack (GValue* value,
                       gpointer v_object)
{
	CharStack * old;
#line 1 "../src/Core/CharStack.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_CHAR_STACK));
#line 1 "../src/Core/CharStack.vala"
	old = value->data[0].v_pointer;
#line 1 "../src/Core/CharStack.vala"
	if (v_object) {
#line 1 "../src/Core/CharStack.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_CHAR_STACK));
#line 1 "../src/Core/CharStack.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 1 "../src/Core/CharStack.vala"
		value->data[0].v_pointer = v_object;
#line 428 "CharStack.c"
	} else {
#line 1 "../src/Core/CharStack.vala"
		value->data[0].v_pointer = NULL;
#line 432 "CharStack.c"
	}
#line 1 "../src/Core/CharStack.vala"
	if (old) {
#line 1 "../src/Core/CharStack.vala"
		char_stack_unref (old);
#line 438 "CharStack.c"
	}
}

static void
char_stack_class_init (CharStackClass * klass,
                       gpointer klass_data)
{
#line 1 "../src/Core/CharStack.vala"
	char_stack_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Core/CharStack.vala"
	((CharStackClass *) klass)->finalize = char_stack_finalize;
#line 1 "../src/Core/CharStack.vala"
	g_type_class_adjust_private_offset (klass, &CharStack_private_offset);
#line 452 "CharStack.c"
}

static void
char_stack_instance_init (CharStack * self,
                          gpointer klass)
{
#line 1 "../src/Core/CharStack.vala"
	self->priv = char_stack_get_instance_private (self);
#line 1 "../src/Core/CharStack.vala"
	self->ref_count = 1;
#line 463 "CharStack.c"
}

static void
char_stack_finalize (CharStack * obj)
{
	CharStack * self;
#line 1 "../src/Core/CharStack.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_CHAR_STACK, CharStack);
#line 1 "../src/Core/CharStack.vala"
	g_signal_handlers_destroy (self);
#line 2 "../src/Core/CharStack.vala"
	self->stack = (g_free (self->stack), NULL);
#line 476 "CharStack.c"
}

static GType
char_stack_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_char_stack_init, value_char_stack_free_value, value_char_stack_copy_value, value_char_stack_peek_pointer, "p", value_char_stack_collect_value, "p", value_char_stack_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (CharStackClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) char_stack_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (CharStack), 0, (GInstanceInitFunc) char_stack_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType char_stack_type_id;
	char_stack_type_id = g_type_register_fundamental (g_type_fundamental_next (), "CharStack", &g_define_type_info, &g_define_type_fundamental_info, 0);
	CharStack_private_offset = g_type_add_instance_private (char_stack_type_id, sizeof (CharStackPrivate));
	return char_stack_type_id;
}

GType
char_stack_get_type (void)
{
	static volatile gsize char_stack_type_id__volatile = 0;
	if (g_once_init_enter (&char_stack_type_id__volatile)) {
		GType char_stack_type_id;
		char_stack_type_id = char_stack_get_type_once ();
		g_once_init_leave (&char_stack_type_id__volatile, char_stack_type_id);
	}
	return char_stack_type_id__volatile;
}

gpointer
char_stack_ref (gpointer instance)
{
	CharStack * self;
	self = instance;
#line 1 "../src/Core/CharStack.vala"
	g_atomic_int_inc (&self->ref_count);
#line 1 "../src/Core/CharStack.vala"
	return instance;
#line 512 "CharStack.c"
}

void
char_stack_unref (gpointer instance)
{
	CharStack * self;
	self = instance;
#line 1 "../src/Core/CharStack.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 1 "../src/Core/CharStack.vala"
		CHAR_STACK_GET_CLASS (self)->finalize (self);
#line 1 "../src/Core/CharStack.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 526 "CharStack.c"
	}
}


/* ToastView.c generated by valac 0.48.14, the Vala compiler
 * generated from ToastView.vala, do not modify */

/* -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-*/
/*-
 * Copyright (c) 2011-2017 elementary LLC. (https://elementary.io)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 *
 * Authored by: Lucas Baudin <xapantu@gmail.com>
 *              Jaap Broekhuizen <jaapz.b@gmail.com>
 *              Victor Eduardo <victoreduardm@gmal.com>
 *              Tom Beckmann <tom@elementary.io>
 *              Corentin NoÃ«l <corentin@elementary.io>
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include "granite.h"
#include <glib.h>
#include <glib/gi18n-lib.h>

#define TYPE_TOAST_VIEW (toast_view_get_type ())
#define TOAST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TOAST_VIEW, ToastView))
#define TOAST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TOAST_VIEW, ToastViewClass))
#define IS_TOAST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TOAST_VIEW))
#define IS_TOAST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TOAST_VIEW))
#define TOAST_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TOAST_VIEW, ToastViewClass))

typedef struct _ToastView ToastView;
typedef struct _ToastViewClass ToastViewClass;
typedef struct _ToastViewPrivate ToastViewPrivate;
enum  {
	TOAST_VIEW_0_PROPERTY,
	TOAST_VIEW_NUM_PROPERTIES
};
static GParamSpec* toast_view_properties[TOAST_VIEW_NUM_PROPERTIES];
typedef struct _Block15Data Block15Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _ToastView {
	GtkOverlay parent_instance;
	ToastViewPrivate * priv;
};

struct _ToastViewClass {
	GtkOverlayClass parent_class;
};

struct _Block15Data {
	int _ref_count_;
	ToastView* self;
	GraniteWidgetsToast* toast;
	GtkGrid* grid;
};

static gpointer toast_view_parent_class = NULL;

GType toast_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ToastView, g_object_unref)
ToastView* toast_view_new (void);
ToastView* toast_view_construct (GType object_type);
static GObject * toast_view_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties);
static Block15Data* block15_data_ref (Block15Data* _data15_);
static void block15_data_unref (void * _userdata_);
static void _toast_view___lambda25_ (Block15Data* _data15_);
static void __toast_view___lambda25__gtk_button_clicked (GtkButton* _sender,
                                                  gpointer self);
static void _toast_view___lambda26_ (Block15Data* _data15_);
static void __toast_view___lambda26__granite_widgets_toast_default_action (GraniteWidgetsToast* _sender,
                                                                    gpointer self);
static GType toast_view_get_type_once (void);

ToastView*
toast_view_construct (GType object_type)
{
	ToastView * self = NULL;
#line 27 "../demo/Views/ToastView.vala"
	self = (ToastView*) g_object_new (object_type, NULL);
#line 27 "../demo/Views/ToastView.vala"
	return self;
#line 98 "ToastView.c"
}

ToastView*
toast_view_new (void)
{
#line 27 "../demo/Views/ToastView.vala"
	return toast_view_construct (TYPE_TOAST_VIEW);
#line 106 "ToastView.c"
}

static Block15Data*
block15_data_ref (Block15Data* _data15_)
{
#line 28 "../demo/Views/ToastView.vala"
	g_atomic_int_inc (&_data15_->_ref_count_);
#line 28 "../demo/Views/ToastView.vala"
	return _data15_;
#line 116 "ToastView.c"
}

static void
block15_data_unref (void * _userdata_)
{
	Block15Data* _data15_;
	_data15_ = (Block15Data*) _userdata_;
#line 28 "../demo/Views/ToastView.vala"
	if (g_atomic_int_dec_and_test (&_data15_->_ref_count_)) {
#line 126 "ToastView.c"
		ToastView* self;
#line 28 "../demo/Views/ToastView.vala"
		self = _data15_->self;
#line 28 "../demo/Views/ToastView.vala"
		_g_object_unref0 (_data15_->grid);
#line 28 "../demo/Views/ToastView.vala"
		_g_object_unref0 (_data15_->toast);
#line 28 "../demo/Views/ToastView.vala"
		_g_object_unref0 (self);
#line 28 "../demo/Views/ToastView.vala"
		g_slice_free (Block15Data, _data15_);
#line 138 "ToastView.c"
	}
}

static void
_toast_view___lambda25_ (Block15Data* _data15_)
{
	ToastView* self;
	GraniteWidgetsToast* _tmp0_;
#line 45 "../demo/Views/ToastView.vala"
	self = _data15_->self;
#line 46 "../demo/Views/ToastView.vala"
	_tmp0_ = _data15_->toast;
#line 46 "../demo/Views/ToastView.vala"
	granite_widgets_toast_send_notification (_tmp0_);
#line 153 "ToastView.c"
}

static void
__toast_view___lambda25__gtk_button_clicked (GtkButton* _sender,
                                             gpointer self)
{
#line 45 "../demo/Views/ToastView.vala"
	_toast_view___lambda25_ (self);
#line 162 "ToastView.c"
}

static void
_toast_view___lambda26_ (Block15Data* _data15_)
{
	ToastView* self;
	GtkLabel* label = NULL;
	GtkLabel* _tmp0_;
	GraniteWidgetsToast* _tmp1_;
	GraniteWidgetsToast* _tmp2_;
	GtkGrid* _tmp3_;
	GtkLabel* _tmp4_;
	GtkGrid* _tmp5_;
#line 49 "../demo/Views/ToastView.vala"
	self = _data15_->self;
#line 50 "../demo/Views/ToastView.vala"
	_tmp0_ = (GtkLabel*) gtk_label_new (_ ("Did The Thing"));
#line 50 "../demo/Views/ToastView.vala"
	g_object_ref_sink (_tmp0_);
#line 50 "../demo/Views/ToastView.vala"
	label = _tmp0_;
#line 51 "../demo/Views/ToastView.vala"
	_tmp1_ = _data15_->toast;
#line 51 "../demo/Views/ToastView.vala"
	granite_widgets_toast_set_title (_tmp1_, _ ("Already did the thing"));
#line 52 "../demo/Views/ToastView.vala"
	_tmp2_ = _data15_->toast;
#line 52 "../demo/Views/ToastView.vala"
	granite_widgets_toast_set_default_action (_tmp2_, NULL);
#line 53 "../demo/Views/ToastView.vala"
	_tmp3_ = _data15_->grid;
#line 53 "../demo/Views/ToastView.vala"
	_tmp4_ = label;
#line 53 "../demo/Views/ToastView.vala"
	gtk_container_add ((GtkContainer*) _tmp3_, (GtkWidget*) _tmp4_);
#line 54 "../demo/Views/ToastView.vala"
	_tmp5_ = _data15_->grid;
#line 54 "../demo/Views/ToastView.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp5_);
#line 49 "../demo/Views/ToastView.vala"
	_g_object_unref0 (label);
#line 204 "ToastView.c"
}

static void
__toast_view___lambda26__granite_widgets_toast_default_action (GraniteWidgetsToast* _sender,
                                                               gpointer self)
{
#line 49 "../demo/Views/ToastView.vala"
	_toast_view___lambda26_ (self);
#line 213 "ToastView.c"
}

static GObject *
toast_view_constructor (GType type,
                        guint n_construct_properties,
                        GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ToastView * self;
	Block15Data* _data15_;
	GraniteWidgetsToast* _tmp0_;
	GraniteWidgetsToast* _tmp1_;
	GtkButton* button = NULL;
	GtkButton* _tmp2_;
	GtkGrid* _tmp3_;
	GtkGrid* _tmp4_;
	GtkGrid* _tmp5_;
	GtkGrid* _tmp6_;
	GtkGrid* _tmp7_;
	GtkGrid* _tmp8_;
	GtkGrid* _tmp9_;
	GtkButton* _tmp10_;
	GtkGrid* _tmp11_;
	GraniteWidgetsToast* _tmp12_;
	GtkButton* _tmp13_;
	GraniteWidgetsToast* _tmp14_;
#line 28 "../demo/Views/ToastView.vala"
	parent_class = G_OBJECT_CLASS (toast_view_parent_class);
#line 28 "../demo/Views/ToastView.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 28 "../demo/Views/ToastView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TOAST_VIEW, ToastView);
#line 28 "../demo/Views/ToastView.vala"
	_data15_ = g_slice_new0 (Block15Data);
#line 28 "../demo/Views/ToastView.vala"
	_data15_->_ref_count_ = 1;
#line 28 "../demo/Views/ToastView.vala"
	_data15_->self = g_object_ref (self);
#line 29 "../demo/Views/ToastView.vala"
	_tmp0_ = granite_widgets_toast_new (_ ("Button was pressed!"));
#line 29 "../demo/Views/ToastView.vala"
	g_object_ref_sink (_tmp0_);
#line 29 "../demo/Views/ToastView.vala"
	_data15_->toast = _tmp0_;
#line 30 "../demo/Views/ToastView.vala"
	_tmp1_ = _data15_->toast;
#line 30 "../demo/Views/ToastView.vala"
	granite_widgets_toast_set_default_action (_tmp1_, _ ("Do Things"));
#line 32 "../demo/Views/ToastView.vala"
	_tmp2_ = (GtkButton*) gtk_button_new_with_label (_ ("Press Me"));
#line 32 "../demo/Views/ToastView.vala"
	g_object_ref_sink (_tmp2_);
#line 32 "../demo/Views/ToastView.vala"
	button = _tmp2_;
#line 34 "../demo/Views/ToastView.vala"
	_tmp3_ = (GtkGrid*) gtk_grid_new ();
#line 34 "../demo/Views/ToastView.vala"
	g_object_ref_sink (_tmp3_);
#line 34 "../demo/Views/ToastView.vala"
	_data15_->grid = _tmp3_;
#line 35 "../demo/Views/ToastView.vala"
	_tmp4_ = _data15_->grid;
#line 35 "../demo/Views/ToastView.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp4_, GTK_ORIENTATION_VERTICAL);
#line 36 "../demo/Views/ToastView.vala"
	_tmp5_ = _data15_->grid;
#line 36 "../demo/Views/ToastView.vala"
	g_object_set ((GtkWidget*) _tmp5_, "margin", 24, NULL);
#line 37 "../demo/Views/ToastView.vala"
	_tmp6_ = _data15_->grid;
#line 37 "../demo/Views/ToastView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp6_, GTK_ALIGN_CENTER);
#line 38 "../demo/Views/ToastView.vala"
	_tmp7_ = _data15_->grid;
#line 38 "../demo/Views/ToastView.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp7_, GTK_ALIGN_CENTER);
#line 39 "../demo/Views/ToastView.vala"
	_tmp8_ = _data15_->grid;
#line 39 "../demo/Views/ToastView.vala"
	gtk_grid_set_row_spacing (_tmp8_, 6);
#line 40 "../demo/Views/ToastView.vala"
	_tmp9_ = _data15_->grid;
#line 40 "../demo/Views/ToastView.vala"
	_tmp10_ = button;
#line 40 "../demo/Views/ToastView.vala"
	gtk_container_add ((GtkContainer*) _tmp9_, (GtkWidget*) _tmp10_);
#line 42 "../demo/Views/ToastView.vala"
	_tmp11_ = _data15_->grid;
#line 42 "../demo/Views/ToastView.vala"
	gtk_overlay_add_overlay ((GtkOverlay*) self, (GtkWidget*) _tmp11_);
#line 43 "../demo/Views/ToastView.vala"
	_tmp12_ = _data15_->toast;
#line 43 "../demo/Views/ToastView.vala"
	gtk_overlay_add_overlay ((GtkOverlay*) self, (GtkWidget*) _tmp12_);
#line 45 "../demo/Views/ToastView.vala"
	_tmp13_ = button;
#line 45 "../demo/Views/ToastView.vala"
	g_signal_connect_data (_tmp13_, "clicked", (GCallback) __toast_view___lambda25__gtk_button_clicked, block15_data_ref (_data15_), (GClosureNotify) block15_data_unref, 0);
#line 49 "../demo/Views/ToastView.vala"
	_tmp14_ = _data15_->toast;
#line 49 "../demo/Views/ToastView.vala"
	g_signal_connect_data (_tmp14_, "default-action", (GCallback) __toast_view___lambda26__granite_widgets_toast_default_action, block15_data_ref (_data15_), (GClosureNotify) block15_data_unref, 0);
#line 28 "../demo/Views/ToastView.vala"
	_g_object_unref0 (button);
#line 28 "../demo/Views/ToastView.vala"
	block15_data_unref (_data15_);
#line 28 "../demo/Views/ToastView.vala"
	_data15_ = NULL;
#line 28 "../demo/Views/ToastView.vala"
	return obj;
#line 325 "ToastView.c"
}

static void
toast_view_class_init (ToastViewClass * klass,
                       gpointer klass_data)
{
#line 27 "../demo/Views/ToastView.vala"
	toast_view_parent_class = g_type_class_peek_parent (klass);
#line 27 "../demo/Views/ToastView.vala"
	G_OBJECT_CLASS (klass)->constructor = toast_view_constructor;
#line 336 "ToastView.c"
}

static void
toast_view_instance_init (ToastView * self,
                          gpointer klass)
{
}

static GType
toast_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ToastViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) toast_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ToastView), 0, (GInstanceInitFunc) toast_view_instance_init, NULL };
	GType toast_view_type_id;
	toast_view_type_id = g_type_register_static (gtk_overlay_get_type (), "ToastView", &g_define_type_info, 0);
	return toast_view_type_id;
}

GType
toast_view_get_type (void)
{
	static volatile gsize toast_view_type_id__volatile = 0;
	if (g_once_init_enter (&toast_view_type_id__volatile)) {
		GType toast_view_type_id;
		toast_view_type_id = toast_view_get_type_once ();
		g_once_init_leave (&toast_view_type_id__volatile, toast_view_type_id);
	}
	return toast_view_type_id__volatile;
}


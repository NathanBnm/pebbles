/* EvaluationResult.c generated by valac 0.48.14, the Vala compiler
 * generated from EvaluationResult.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 *              Saunak Biswas  <saunakbis97@gmail.com>
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_EVALUATION_RESULT (pebbles_evaluation_result_get_type ())
#define PEBBLES_EVALUATION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_EVALUATION_RESULT, PebblesEvaluationResult))
#define PEBBLES_EVALUATION_RESULT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_EVALUATION_RESULT, PebblesEvaluationResultClass))
#define PEBBLES_IS_EVALUATION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_EVALUATION_RESULT))
#define PEBBLES_IS_EVALUATION_RESULT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_EVALUATION_RESULT))
#define PEBBLES_EVALUATION_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_EVALUATION_RESULT, PebblesEvaluationResultClass))

typedef struct _PebblesEvaluationResult PebblesEvaluationResult;
typedef struct _PebblesEvaluationResultClass PebblesEvaluationResultClass;
typedef struct _PebblesEvaluationResultPrivate PebblesEvaluationResultPrivate;
typedef enum  {
	PEBBLES_GLOBAL_ANGLE_UNIT_DEG = 0,
	PEBBLES_GLOBAL_ANGLE_UNIT_RAD = 1,
	PEBBLES_GLOBAL_ANGLE_UNIT_GRAD = 2
} PebblesGlobalAngleUnit;

#define PEBBLES_TYPE_GLOBAL_ANGLE_UNIT (pebbles_global_angle_unit_get_type ())
typedef enum  {
	PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_NONE,
	PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_INT,
	PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_DER
} PebblesEvaluationResultCalculusResultMode;

#define PEBBLES_EVALUATION_RESULT_TYPE_CALCULUS_RESULT_MODE (pebbles_evaluation_result_calculus_result_mode_get_type ())
typedef enum  {
	PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_SCIF,
	PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_CALC,
	PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_PROG
} PebblesEvaluationResultResultSource;

#define PEBBLES_EVALUATION_RESULT_TYPE_RESULT_SOURCE (pebbles_evaluation_result_result_source_get_type ())

#define PEBBLES_PROGRAMMER_CALCULATOR_TYPE_TOKEN (pebbles_programmer_calculator_token_get_type ())
typedef struct _PebblesProgrammerCalculatorToken PebblesProgrammerCalculatorToken;
typedef enum  {
	PEBBLES_PROGRAMMER_CALCULATOR_TOKEN_TYPE_OPERATOR,
	PEBBLES_PROGRAMMER_CALCULATOR_TOKEN_TYPE_OPERAND,
	PEBBLES_PROGRAMMER_CALCULATOR_TOKEN_TYPE_PARENTHESIS
} PebblesProgrammerCalculatorTokenType;

#define PEBBLES_PROGRAMMER_CALCULATOR_TYPE_TOKEN_TYPE (pebbles_programmer_calculator_token_type_get_type ())
typedef enum  {
	PEBBLES_NUMBER_SYSTEM_BINARY,
	PEBBLES_NUMBER_SYSTEM_OCTAL,
	PEBBLES_NUMBER_SYSTEM_DECIMAL,
	PEBBLES_NUMBER_SYSTEM_HEXADECIMAL
} PebblesNumberSystem;

#define PEBBLES_TYPE_NUMBER_SYSTEM (pebbles_number_system_get_type ())
typedef enum  {
	PEBBLES_GLOBAL_WORD_LENGTH_QWD = 0,
	PEBBLES_GLOBAL_WORD_LENGTH_DWD = 1,
	PEBBLES_GLOBAL_WORD_LENGTH_WRD = 2,
	PEBBLES_GLOBAL_WORD_LENGTH_BYT = 3
} PebblesGlobalWordLength;

#define PEBBLES_TYPE_GLOBAL_WORD_LENGTH (pebbles_global_word_length_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _PebblesParamSpecEvaluationResult PebblesParamSpecEvaluationResult;

struct _PebblesEvaluationResult {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesEvaluationResultPrivate * priv;
};

struct _PebblesEvaluationResultClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesEvaluationResult *self);
};

struct _PebblesProgrammerCalculatorToken {
	gchar* token;
	PebblesProgrammerCalculatorTokenType type;
	PebblesNumberSystem number_system;
};

struct _PebblesEvaluationResultPrivate {
	gchar* _problem_expression;
	gchar* _result;
	PebblesGlobalAngleUnit _angle_mode;
	PebblesEvaluationResultCalculusResultMode _calc_mode;
	gdouble _int_limit_a;
	gdouble _int_limit_b;
	gdouble _derivative_point;
	PebblesEvaluationResultResultSource _result_source;
	PebblesProgrammerCalculatorToken* _problem_expression_prog;
	gint _problem_expression_prog_length1;
	gint __problem_expression_prog_size_;
	gboolean* _prog_output;
	gint _prog_output_length1;
	gint __prog_output_size_;
	PebblesGlobalWordLength _word_length;
};

struct _PebblesParamSpecEvaluationResult {
	GParamSpec parent_instance;
};

static gint PebblesEvaluationResult_private_offset;
static gpointer pebbles_evaluation_result_parent_class = NULL;

gpointer pebbles_evaluation_result_ref (gpointer instance);
void pebbles_evaluation_result_unref (gpointer instance);
GParamSpec* pebbles_param_spec_evaluation_result (const gchar* name,
                                                  const gchar* nick,
                                                  const gchar* blurb,
                                                  GType object_type,
                                                  GParamFlags flags);
void pebbles_value_set_evaluation_result (GValue* value,
                                          gpointer v_object);
void pebbles_value_take_evaluation_result (GValue* value,
                                           gpointer v_object);
gpointer pebbles_value_get_evaluation_result (const GValue* value);
GType pebbles_evaluation_result_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesEvaluationResult, pebbles_evaluation_result_unref)
GType pebbles_global_angle_unit_get_type (void) G_GNUC_CONST;
GType pebbles_evaluation_result_calculus_result_mode_get_type (void) G_GNUC_CONST;
GType pebbles_evaluation_result_result_source_get_type (void) G_GNUC_CONST;
GType pebbles_programmer_calculator_token_get_type (void) G_GNUC_CONST;
GType pebbles_programmer_calculator_token_type_get_type (void) G_GNUC_CONST;
GType pebbles_number_system_get_type (void) G_GNUC_CONST;
PebblesProgrammerCalculatorToken* pebbles_programmer_calculator_token_dup (const PebblesProgrammerCalculatorToken* self);
void pebbles_programmer_calculator_token_free (PebblesProgrammerCalculatorToken* self);
void pebbles_programmer_calculator_token_copy (const PebblesProgrammerCalculatorToken* self,
                                               PebblesProgrammerCalculatorToken* dest);
void pebbles_programmer_calculator_token_destroy (PebblesProgrammerCalculatorToken* self);
GType pebbles_global_word_length_get_type (void) G_GNUC_CONST;
static void _vala_PebblesProgrammerCalculatorToken_array_free (PebblesProgrammerCalculatorToken * array,
                                                        gint array_length);
PebblesEvaluationResult* pebbles_evaluation_result_new (const gchar* problem_expression,
                                                        const gchar* _result_,
                                                        PebblesGlobalAngleUnit* angle_mode,
                                                        PebblesEvaluationResultCalculusResultMode* calc_mode,
                                                        gdouble* int_limit_a,
                                                        gdouble* int_limit_b,
                                                        gdouble* derivative_point,
                                                        PebblesEvaluationResultResultSource* result_source,
                                                        PebblesProgrammerCalculatorToken* problem_expression_prog,
                                                        gint problem_expression_prog_length1,
                                                        gboolean* prog_output,
                                                        gint prog_output_length1,
                                                        PebblesGlobalWordLength* word_length);
PebblesEvaluationResult* pebbles_evaluation_result_construct (GType object_type,
                                                              const gchar* problem_expression,
                                                              const gchar* _result_,
                                                              PebblesGlobalAngleUnit* angle_mode,
                                                              PebblesEvaluationResultCalculusResultMode* calc_mode,
                                                              gdouble* int_limit_a,
                                                              gdouble* int_limit_b,
                                                              gdouble* derivative_point,
                                                              PebblesEvaluationResultResultSource* result_source,
                                                              PebblesProgrammerCalculatorToken* problem_expression_prog,
                                                              gint problem_expression_prog_length1,
                                                              gboolean* prog_output,
                                                              gint prog_output_length1,
                                                              PebblesGlobalWordLength* word_length);
static PebblesProgrammerCalculatorToken* _vala_array_dup14 (PebblesProgrammerCalculatorToken* self,
                                                     gint length);
static gboolean* _vala_array_dup15 (gboolean* self,
                             gint length);
const gchar* pebbles_evaluation_result_get_problem_expression (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_problem_expression (PebblesEvaluationResult* self,
                                                       const gchar* value);
const gchar* pebbles_evaluation_result_get_result (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_result (PebblesEvaluationResult* self,
                                           const gchar* value);
PebblesGlobalAngleUnit pebbles_evaluation_result_get_angle_mode (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_angle_mode (PebblesEvaluationResult* self,
                                               PebblesGlobalAngleUnit value);
PebblesEvaluationResultCalculusResultMode pebbles_evaluation_result_get_calc_mode (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_calc_mode (PebblesEvaluationResult* self,
                                              PebblesEvaluationResultCalculusResultMode value);
gdouble pebbles_evaluation_result_get_int_limit_a (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_int_limit_a (PebblesEvaluationResult* self,
                                                gdouble value);
gdouble pebbles_evaluation_result_get_int_limit_b (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_int_limit_b (PebblesEvaluationResult* self,
                                                gdouble value);
gdouble pebbles_evaluation_result_get_derivative_point (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_derivative_point (PebblesEvaluationResult* self,
                                                     gdouble value);
PebblesEvaluationResultResultSource pebbles_evaluation_result_get_result_source (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_result_source (PebblesEvaluationResult* self,
                                                  PebblesEvaluationResultResultSource value);
PebblesProgrammerCalculatorToken* pebbles_evaluation_result_get_problem_expression_prog (PebblesEvaluationResult* self,
                                                                                         gint* result_length1);
void pebbles_evaluation_result_set_problem_expression_prog (PebblesEvaluationResult* self,
                                                            PebblesProgrammerCalculatorToken* value,
                                                            gint value_length1);
static PebblesProgrammerCalculatorToken* _vala_array_dup16 (PebblesProgrammerCalculatorToken* self,
                                                     gint length);
gboolean* pebbles_evaluation_result_get_prog_output (PebblesEvaluationResult* self,
                                                     gint* result_length1);
void pebbles_evaluation_result_set_prog_output (PebblesEvaluationResult* self,
                                                gboolean* value,
                                                gint value_length1);
static gboolean* _vala_array_dup17 (gboolean* self,
                             gint length);
PebblesGlobalWordLength pebbles_evaluation_result_get_word_length (PebblesEvaluationResult* self);
void pebbles_evaluation_result_set_word_length (PebblesEvaluationResult* self,
                                                PebblesGlobalWordLength value);
static void pebbles_evaluation_result_finalize (PebblesEvaluationResult * obj);
static GType pebbles_evaluation_result_get_type_once (void);

static inline gpointer
pebbles_evaluation_result_get_instance_private (PebblesEvaluationResult* self)
{
	return G_STRUCT_MEMBER_P (self, PebblesEvaluationResult_private_offset);
}

static GType
pebbles_evaluation_result_result_source_get_type_once (void)
{
	static const GEnumValue values[] = {{PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_SCIF, "PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_SCIF", "scif"}, {PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_CALC, "PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_CALC", "calc"}, {PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_PROG, "PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_PROG", "prog"}, {0, NULL, NULL}};
	GType pebbles_evaluation_result_result_source_type_id;
	pebbles_evaluation_result_result_source_type_id = g_enum_register_static ("PebblesEvaluationResultResultSource", values);
	return pebbles_evaluation_result_result_source_type_id;
}

GType
pebbles_evaluation_result_result_source_get_type (void)
{
	static volatile gsize pebbles_evaluation_result_result_source_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_evaluation_result_result_source_type_id__volatile)) {
		GType pebbles_evaluation_result_result_source_type_id;
		pebbles_evaluation_result_result_source_type_id = pebbles_evaluation_result_result_source_get_type_once ();
		g_once_init_leave (&pebbles_evaluation_result_result_source_type_id__volatile, pebbles_evaluation_result_result_source_type_id);
	}
	return pebbles_evaluation_result_result_source_type_id__volatile;
}

static GType
pebbles_evaluation_result_calculus_result_mode_get_type_once (void)
{
	static const GEnumValue values[] = {{PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_NONE, "PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_NONE", "none"}, {PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_INT, "PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_INT", "int"}, {PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_DER, "PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_DER", "der"}, {0, NULL, NULL}};
	GType pebbles_evaluation_result_calculus_result_mode_type_id;
	pebbles_evaluation_result_calculus_result_mode_type_id = g_enum_register_static ("PebblesEvaluationResultCalculusResultMode", values);
	return pebbles_evaluation_result_calculus_result_mode_type_id;
}

GType
pebbles_evaluation_result_calculus_result_mode_get_type (void)
{
	static volatile gsize pebbles_evaluation_result_calculus_result_mode_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_evaluation_result_calculus_result_mode_type_id__volatile)) {
		GType pebbles_evaluation_result_calculus_result_mode_type_id;
		pebbles_evaluation_result_calculus_result_mode_type_id = pebbles_evaluation_result_calculus_result_mode_get_type_once ();
		g_once_init_leave (&pebbles_evaluation_result_calculus_result_mode_type_id__volatile, pebbles_evaluation_result_calculus_result_mode_type_id);
	}
	return pebbles_evaluation_result_calculus_result_mode_type_id__volatile;
}

static void
_vala_PebblesProgrammerCalculatorToken_array_free (PebblesProgrammerCalculatorToken * array,
                                                   gint array_length)
{
#line 32 "../src/Core/EvaluationResult.vala"
	if (array != NULL) {
#line 293 "EvaluationResult.c"
		gint i;
#line 32 "../src/Core/EvaluationResult.vala"
		for (i = 0; i < array_length; i = i + 1) {
#line 32 "../src/Core/EvaluationResult.vala"
			pebbles_programmer_calculator_token_destroy (&array[i]);
#line 299 "EvaluationResult.c"
		}
	}
#line 32 "../src/Core/EvaluationResult.vala"
	g_free (array);
#line 304 "EvaluationResult.c"
}

static PebblesProgrammerCalculatorToken*
_vala_array_dup14 (PebblesProgrammerCalculatorToken* self,
                   gint length)
{
#line 186 "../src/Core/EvaluationResult.vala"
	if (length > 0) {
#line 313 "EvaluationResult.c"
		PebblesProgrammerCalculatorToken* result;
		gint i;
#line 186 "../src/Core/EvaluationResult.vala"
		result = g_new0 (PebblesProgrammerCalculatorToken, length);
#line 186 "../src/Core/EvaluationResult.vala"
		for (i = 0; i < length; i++) {
#line 320 "EvaluationResult.c"
			PebblesProgrammerCalculatorToken _tmp0_;
			PebblesProgrammerCalculatorToken _tmp1_ = {0};
#line 186 "../src/Core/EvaluationResult.vala"
			_tmp0_ = self[i];
#line 186 "../src/Core/EvaluationResult.vala"
			pebbles_programmer_calculator_token_copy (&_tmp0_, &_tmp1_);
#line 186 "../src/Core/EvaluationResult.vala"
			result[i] = _tmp1_;
#line 329 "EvaluationResult.c"
		}
#line 186 "../src/Core/EvaluationResult.vala"
		return result;
#line 333 "EvaluationResult.c"
	}
#line 186 "../src/Core/EvaluationResult.vala"
	return NULL;
#line 337 "EvaluationResult.c"
}

static gboolean*
_vala_array_dup15 (gboolean* self,
                   gint length)
{
#line 190 "../src/Core/EvaluationResult.vala"
	if (length > 0) {
#line 190 "../src/Core/EvaluationResult.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 348 "EvaluationResult.c"
	}
#line 190 "../src/Core/EvaluationResult.vala"
	return NULL;
#line 352 "EvaluationResult.c"
}

PebblesEvaluationResult*
pebbles_evaluation_result_construct (GType object_type,
                                     const gchar* problem_expression,
                                     const gchar* _result_,
                                     PebblesGlobalAngleUnit* angle_mode,
                                     PebblesEvaluationResultCalculusResultMode* calc_mode,
                                     gdouble* int_limit_a,
                                     gdouble* int_limit_b,
                                     gdouble* derivative_point,
                                     PebblesEvaluationResultResultSource* result_source,
                                     PebblesProgrammerCalculatorToken* problem_expression_prog,
                                     gint problem_expression_prog_length1,
                                     gboolean* prog_output,
                                     gint prog_output_length1,
                                     PebblesGlobalWordLength* word_length)
{
	PebblesEvaluationResult* self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 147 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (problem_expression != NULL, NULL);
#line 147 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (_result_ != NULL, NULL);
#line 147 "../src/Core/EvaluationResult.vala"
	self = (PebblesEvaluationResult*) g_type_create_instance (object_type);
#line 158 "../src/Core/EvaluationResult.vala"
	_tmp0_ = g_strdup (problem_expression);
#line 158 "../src/Core/EvaluationResult.vala"
	_g_free0 (self->priv->_problem_expression);
#line 158 "../src/Core/EvaluationResult.vala"
	self->priv->_problem_expression = _tmp0_;
#line 159 "../src/Core/EvaluationResult.vala"
	_tmp1_ = g_strdup (_result_);
#line 159 "../src/Core/EvaluationResult.vala"
	_g_free0 (self->priv->_result);
#line 159 "../src/Core/EvaluationResult.vala"
	self->priv->_result = _tmp1_;
#line 161 "../src/Core/EvaluationResult.vala"
	if (angle_mode != NULL) {
#line 162 "../src/Core/EvaluationResult.vala"
		self->priv->_angle_mode = *angle_mode;
#line 396 "EvaluationResult.c"
	}
#line 165 "../src/Core/EvaluationResult.vala"
	if (calc_mode != NULL) {
#line 166 "../src/Core/EvaluationResult.vala"
		self->priv->_calc_mode = *calc_mode;
#line 402 "EvaluationResult.c"
	}
#line 169 "../src/Core/EvaluationResult.vala"
	if (int_limit_a != NULL) {
#line 170 "../src/Core/EvaluationResult.vala"
		self->priv->_int_limit_a = *int_limit_a;
#line 408 "EvaluationResult.c"
	}
#line 173 "../src/Core/EvaluationResult.vala"
	if (int_limit_b != NULL) {
#line 174 "../src/Core/EvaluationResult.vala"
		self->priv->_int_limit_b = *int_limit_b;
#line 414 "EvaluationResult.c"
	}
#line 177 "../src/Core/EvaluationResult.vala"
	if (derivative_point != NULL) {
#line 178 "../src/Core/EvaluationResult.vala"
		self->priv->_derivative_point = *derivative_point;
#line 420 "EvaluationResult.c"
	}
#line 181 "../src/Core/EvaluationResult.vala"
	if (result_source != NULL) {
#line 182 "../src/Core/EvaluationResult.vala"
		self->priv->_result_source = *result_source;
#line 426 "EvaluationResult.c"
	}
#line 185 "../src/Core/EvaluationResult.vala"
	if (problem_expression_prog != NULL) {
#line 430 "EvaluationResult.c"
		PebblesProgrammerCalculatorToken* _tmp2_;
		gint _tmp2__length1;
#line 186 "../src/Core/EvaluationResult.vala"
		_tmp2_ = (problem_expression_prog != NULL) ? _vala_array_dup14 (problem_expression_prog, problem_expression_prog_length1) : ((gpointer) problem_expression_prog);
#line 186 "../src/Core/EvaluationResult.vala"
		_tmp2__length1 = problem_expression_prog_length1;
#line 186 "../src/Core/EvaluationResult.vala"
		self->priv->_problem_expression_prog = (_vala_PebblesProgrammerCalculatorToken_array_free (self->priv->_problem_expression_prog, self->priv->_problem_expression_prog_length1), NULL);
#line 186 "../src/Core/EvaluationResult.vala"
		self->priv->_problem_expression_prog = _tmp2_;
#line 186 "../src/Core/EvaluationResult.vala"
		self->priv->_problem_expression_prog_length1 = _tmp2__length1;
#line 186 "../src/Core/EvaluationResult.vala"
		self->priv->__problem_expression_prog_size_ = self->priv->_problem_expression_prog_length1;
#line 445 "EvaluationResult.c"
	}
#line 189 "../src/Core/EvaluationResult.vala"
	if (prog_output != NULL) {
#line 449 "EvaluationResult.c"
		gboolean* _tmp3_;
		gint _tmp3__length1;
#line 190 "../src/Core/EvaluationResult.vala"
		_tmp3_ = (prog_output != NULL) ? _vala_array_dup15 (prog_output, prog_output_length1) : ((gpointer) prog_output);
#line 190 "../src/Core/EvaluationResult.vala"
		_tmp3__length1 = prog_output_length1;
#line 190 "../src/Core/EvaluationResult.vala"
		self->priv->_prog_output = (g_free (self->priv->_prog_output), NULL);
#line 190 "../src/Core/EvaluationResult.vala"
		self->priv->_prog_output = _tmp3_;
#line 190 "../src/Core/EvaluationResult.vala"
		self->priv->_prog_output_length1 = _tmp3__length1;
#line 190 "../src/Core/EvaluationResult.vala"
		self->priv->__prog_output_size_ = self->priv->_prog_output_length1;
#line 464 "EvaluationResult.c"
	}
#line 193 "../src/Core/EvaluationResult.vala"
	self->priv->_word_length = *word_length;
#line 147 "../src/Core/EvaluationResult.vala"
	return self;
#line 470 "EvaluationResult.c"
}

PebblesEvaluationResult*
pebbles_evaluation_result_new (const gchar* problem_expression,
                               const gchar* _result_,
                               PebblesGlobalAngleUnit* angle_mode,
                               PebblesEvaluationResultCalculusResultMode* calc_mode,
                               gdouble* int_limit_a,
                               gdouble* int_limit_b,
                               gdouble* derivative_point,
                               PebblesEvaluationResultResultSource* result_source,
                               PebblesProgrammerCalculatorToken* problem_expression_prog,
                               gint problem_expression_prog_length1,
                               gboolean* prog_output,
                               gint prog_output_length1,
                               PebblesGlobalWordLength* word_length)
{
#line 147 "../src/Core/EvaluationResult.vala"
	return pebbles_evaluation_result_construct (PEBBLES_TYPE_EVALUATION_RESULT, problem_expression, _result_, angle_mode, calc_mode, int_limit_a, int_limit_b, derivative_point, result_source, problem_expression_prog, problem_expression_prog_length1, prog_output, prog_output_length1, word_length);
#line 490 "EvaluationResult.c"
}

const gchar*
pebbles_evaluation_result_get_problem_expression (PebblesEvaluationResult* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 49 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 50 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_problem_expression;
#line 50 "../src/Core/EvaluationResult.vala"
	result = _tmp0_;
#line 50 "../src/Core/EvaluationResult.vala"
	return result;
#line 506 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_problem_expression (PebblesEvaluationResult* self,
                                                  const gchar* value)
{
	gchar* _tmp0_;
#line 52 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 53 "../src/Core/EvaluationResult.vala"
	_tmp0_ = g_strdup (value);
#line 53 "../src/Core/EvaluationResult.vala"
	_g_free0 (self->priv->_problem_expression);
#line 53 "../src/Core/EvaluationResult.vala"
	self->priv->_problem_expression = _tmp0_;
#line 522 "EvaluationResult.c"
}

const gchar*
pebbles_evaluation_result_get_result (PebblesEvaluationResult* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 58 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 59 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_result;
#line 59 "../src/Core/EvaluationResult.vala"
	result = _tmp0_;
#line 59 "../src/Core/EvaluationResult.vala"
	return result;
#line 538 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_result (PebblesEvaluationResult* self,
                                      const gchar* value)
{
	gchar* _tmp0_;
#line 61 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 62 "../src/Core/EvaluationResult.vala"
	_tmp0_ = g_strdup (value);
#line 62 "../src/Core/EvaluationResult.vala"
	_g_free0 (self->priv->_result);
#line 62 "../src/Core/EvaluationResult.vala"
	self->priv->_result = _tmp0_;
#line 554 "EvaluationResult.c"
}

PebblesGlobalAngleUnit
pebbles_evaluation_result_get_angle_mode (PebblesEvaluationResult* self)
{
	PebblesGlobalAngleUnit result;
	PebblesGlobalAngleUnit _tmp0_;
#line 67 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 68 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_angle_mode;
#line 68 "../src/Core/EvaluationResult.vala"
	result = _tmp0_;
#line 68 "../src/Core/EvaluationResult.vala"
	return result;
#line 570 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_angle_mode (PebblesEvaluationResult* self,
                                          PebblesGlobalAngleUnit value)
{
#line 70 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 71 "../src/Core/EvaluationResult.vala"
	self->priv->_angle_mode = value;
#line 581 "EvaluationResult.c"
}

PebblesEvaluationResultCalculusResultMode
pebbles_evaluation_result_get_calc_mode (PebblesEvaluationResult* self)
{
	PebblesEvaluationResultCalculusResultMode result;
	PebblesEvaluationResultCalculusResultMode _tmp0_;
#line 76 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 77 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_calc_mode;
#line 77 "../src/Core/EvaluationResult.vala"
	result = _tmp0_;
#line 77 "../src/Core/EvaluationResult.vala"
	return result;
#line 597 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_calc_mode (PebblesEvaluationResult* self,
                                         PebblesEvaluationResultCalculusResultMode value)
{
#line 79 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 80 "../src/Core/EvaluationResult.vala"
	self->priv->_calc_mode = value;
#line 608 "EvaluationResult.c"
}

gdouble
pebbles_evaluation_result_get_int_limit_a (PebblesEvaluationResult* self)
{
	gdouble result;
#line 85 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 86 "../src/Core/EvaluationResult.vala"
	result = self->priv->_int_limit_a;
#line 86 "../src/Core/EvaluationResult.vala"
	return result;
#line 621 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_int_limit_a (PebblesEvaluationResult* self,
                                           gdouble value)
{
#line 88 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 89 "../src/Core/EvaluationResult.vala"
	self->priv->_int_limit_a = value;
#line 632 "EvaluationResult.c"
}

gdouble
pebbles_evaluation_result_get_int_limit_b (PebblesEvaluationResult* self)
{
	gdouble result;
#line 94 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 95 "../src/Core/EvaluationResult.vala"
	result = self->priv->_int_limit_b;
#line 95 "../src/Core/EvaluationResult.vala"
	return result;
#line 645 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_int_limit_b (PebblesEvaluationResult* self,
                                           gdouble value)
{
#line 97 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 98 "../src/Core/EvaluationResult.vala"
	self->priv->_int_limit_b = value;
#line 656 "EvaluationResult.c"
}

gdouble
pebbles_evaluation_result_get_derivative_point (PebblesEvaluationResult* self)
{
	gdouble result;
#line 103 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 104 "../src/Core/EvaluationResult.vala"
	result = self->priv->_derivative_point;
#line 104 "../src/Core/EvaluationResult.vala"
	return result;
#line 669 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_derivative_point (PebblesEvaluationResult* self,
                                                gdouble value)
{
#line 106 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 107 "../src/Core/EvaluationResult.vala"
	self->priv->_derivative_point = value;
#line 680 "EvaluationResult.c"
}

PebblesEvaluationResultResultSource
pebbles_evaluation_result_get_result_source (PebblesEvaluationResult* self)
{
	PebblesEvaluationResultResultSource result;
	PebblesEvaluationResultResultSource _tmp0_;
#line 112 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 113 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_result_source;
#line 113 "../src/Core/EvaluationResult.vala"
	result = _tmp0_;
#line 113 "../src/Core/EvaluationResult.vala"
	return result;
#line 696 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_result_source (PebblesEvaluationResult* self,
                                             PebblesEvaluationResultResultSource value)
{
#line 115 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 116 "../src/Core/EvaluationResult.vala"
	self->priv->_result_source = value;
#line 707 "EvaluationResult.c"
}

PebblesProgrammerCalculatorToken*
pebbles_evaluation_result_get_problem_expression_prog (PebblesEvaluationResult* self,
                                                       gint* result_length1)
{
	PebblesProgrammerCalculatorToken* result;
	PebblesProgrammerCalculatorToken* _tmp0_;
	gint _tmp0__length1;
	PebblesProgrammerCalculatorToken* _tmp1_;
	gint _tmp1__length1;
#line 121 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 122 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_problem_expression_prog;
#line 122 "../src/Core/EvaluationResult.vala"
	_tmp0__length1 = self->priv->_problem_expression_prog_length1;
#line 122 "../src/Core/EvaluationResult.vala"
	_tmp1_ = _tmp0_;
#line 122 "../src/Core/EvaluationResult.vala"
	_tmp1__length1 = _tmp0__length1;
#line 122 "../src/Core/EvaluationResult.vala"
	if (result_length1) {
#line 122 "../src/Core/EvaluationResult.vala"
		*result_length1 = _tmp1__length1;
#line 733 "EvaluationResult.c"
	}
#line 122 "../src/Core/EvaluationResult.vala"
	result = _tmp1_;
#line 122 "../src/Core/EvaluationResult.vala"
	return result;
#line 739 "EvaluationResult.c"
}

static PebblesProgrammerCalculatorToken*
_vala_array_dup16 (PebblesProgrammerCalculatorToken* self,
                   gint length)
{
#line 125 "../src/Core/EvaluationResult.vala"
	if (length > 0) {
#line 748 "EvaluationResult.c"
		PebblesProgrammerCalculatorToken* result;
		gint i;
#line 125 "../src/Core/EvaluationResult.vala"
		result = g_new0 (PebblesProgrammerCalculatorToken, length);
#line 125 "../src/Core/EvaluationResult.vala"
		for (i = 0; i < length; i++) {
#line 755 "EvaluationResult.c"
			PebblesProgrammerCalculatorToken _tmp0_;
			PebblesProgrammerCalculatorToken _tmp1_ = {0};
#line 125 "../src/Core/EvaluationResult.vala"
			_tmp0_ = self[i];
#line 125 "../src/Core/EvaluationResult.vala"
			pebbles_programmer_calculator_token_copy (&_tmp0_, &_tmp1_);
#line 125 "../src/Core/EvaluationResult.vala"
			result[i] = _tmp1_;
#line 764 "EvaluationResult.c"
		}
#line 125 "../src/Core/EvaluationResult.vala"
		return result;
#line 768 "EvaluationResult.c"
	}
#line 125 "../src/Core/EvaluationResult.vala"
	return NULL;
#line 772 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_problem_expression_prog (PebblesEvaluationResult* self,
                                                       PebblesProgrammerCalculatorToken* value,
                                                       gint value_length1)
{
	PebblesProgrammerCalculatorToken* _tmp0_;
	gint _tmp0__length1;
#line 124 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 125 "../src/Core/EvaluationResult.vala"
	_tmp0_ = (value != NULL) ? _vala_array_dup16 (value, value_length1) : ((gpointer) value);
#line 125 "../src/Core/EvaluationResult.vala"
	_tmp0__length1 = value_length1;
#line 125 "../src/Core/EvaluationResult.vala"
	self->priv->_problem_expression_prog = (_vala_PebblesProgrammerCalculatorToken_array_free (self->priv->_problem_expression_prog, self->priv->_problem_expression_prog_length1), NULL);
#line 125 "../src/Core/EvaluationResult.vala"
	self->priv->_problem_expression_prog = _tmp0_;
#line 125 "../src/Core/EvaluationResult.vala"
	self->priv->_problem_expression_prog_length1 = _tmp0__length1;
#line 125 "../src/Core/EvaluationResult.vala"
	self->priv->__problem_expression_prog_size_ = self->priv->_problem_expression_prog_length1;
#line 796 "EvaluationResult.c"
}

gboolean*
pebbles_evaluation_result_get_prog_output (PebblesEvaluationResult* self,
                                           gint* result_length1)
{
	gboolean* result;
	gboolean* _tmp0_;
	gint _tmp0__length1;
	gboolean* _tmp1_;
	gint _tmp1__length1;
#line 130 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 131 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_prog_output;
#line 131 "../src/Core/EvaluationResult.vala"
	_tmp0__length1 = self->priv->_prog_output_length1;
#line 131 "../src/Core/EvaluationResult.vala"
	_tmp1_ = _tmp0_;
#line 131 "../src/Core/EvaluationResult.vala"
	_tmp1__length1 = _tmp0__length1;
#line 131 "../src/Core/EvaluationResult.vala"
	if (result_length1) {
#line 131 "../src/Core/EvaluationResult.vala"
		*result_length1 = _tmp1__length1;
#line 822 "EvaluationResult.c"
	}
#line 131 "../src/Core/EvaluationResult.vala"
	result = _tmp1_;
#line 131 "../src/Core/EvaluationResult.vala"
	return result;
#line 828 "EvaluationResult.c"
}

static gboolean*
_vala_array_dup17 (gboolean* self,
                   gint length)
{
#line 134 "../src/Core/EvaluationResult.vala"
	if (length > 0) {
#line 134 "../src/Core/EvaluationResult.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 839 "EvaluationResult.c"
	}
#line 134 "../src/Core/EvaluationResult.vala"
	return NULL;
#line 843 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_prog_output (PebblesEvaluationResult* self,
                                           gboolean* value,
                                           gint value_length1)
{
	gboolean* _tmp0_;
	gint _tmp0__length1;
#line 133 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 134 "../src/Core/EvaluationResult.vala"
	_tmp0_ = (value != NULL) ? _vala_array_dup17 (value, value_length1) : ((gpointer) value);
#line 134 "../src/Core/EvaluationResult.vala"
	_tmp0__length1 = value_length1;
#line 134 "../src/Core/EvaluationResult.vala"
	self->priv->_prog_output = (g_free (self->priv->_prog_output), NULL);
#line 134 "../src/Core/EvaluationResult.vala"
	self->priv->_prog_output = _tmp0_;
#line 134 "../src/Core/EvaluationResult.vala"
	self->priv->_prog_output_length1 = _tmp0__length1;
#line 134 "../src/Core/EvaluationResult.vala"
	self->priv->__prog_output_size_ = self->priv->_prog_output_length1;
#line 867 "EvaluationResult.c"
}

PebblesGlobalWordLength
pebbles_evaluation_result_get_word_length (PebblesEvaluationResult* self)
{
	PebblesGlobalWordLength result;
	PebblesGlobalWordLength _tmp0_;
#line 139 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 140 "../src/Core/EvaluationResult.vala"
	_tmp0_ = self->priv->_word_length;
#line 140 "../src/Core/EvaluationResult.vala"
	result = _tmp0_;
#line 140 "../src/Core/EvaluationResult.vala"
	return result;
#line 883 "EvaluationResult.c"
}

void
pebbles_evaluation_result_set_word_length (PebblesEvaluationResult* self,
                                           PebblesGlobalWordLength value)
{
#line 142 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (self != NULL);
#line 143 "../src/Core/EvaluationResult.vala"
	self->priv->_word_length = value;
#line 894 "EvaluationResult.c"
}

static void
pebbles_value_evaluation_result_init (GValue* value)
{
#line 23 "../src/Core/EvaluationResult.vala"
	value->data[0].v_pointer = NULL;
#line 902 "EvaluationResult.c"
}

static void
pebbles_value_evaluation_result_free_value (GValue* value)
{
#line 23 "../src/Core/EvaluationResult.vala"
	if (value->data[0].v_pointer) {
#line 23 "../src/Core/EvaluationResult.vala"
		pebbles_evaluation_result_unref (value->data[0].v_pointer);
#line 912 "EvaluationResult.c"
	}
}

static void
pebbles_value_evaluation_result_copy_value (const GValue* src_value,
                                            GValue* dest_value)
{
#line 23 "../src/Core/EvaluationResult.vala"
	if (src_value->data[0].v_pointer) {
#line 23 "../src/Core/EvaluationResult.vala"
		dest_value->data[0].v_pointer = pebbles_evaluation_result_ref (src_value->data[0].v_pointer);
#line 924 "EvaluationResult.c"
	} else {
#line 23 "../src/Core/EvaluationResult.vala"
		dest_value->data[0].v_pointer = NULL;
#line 928 "EvaluationResult.c"
	}
}

static gpointer
pebbles_value_evaluation_result_peek_pointer (const GValue* value)
{
#line 23 "../src/Core/EvaluationResult.vala"
	return value->data[0].v_pointer;
#line 937 "EvaluationResult.c"
}

static gchar*
pebbles_value_evaluation_result_collect_value (GValue* value,
                                               guint n_collect_values,
                                               GTypeCValue* collect_values,
                                               guint collect_flags)
{
#line 23 "../src/Core/EvaluationResult.vala"
	if (collect_values[0].v_pointer) {
#line 948 "EvaluationResult.c"
		PebblesEvaluationResult * object;
		object = collect_values[0].v_pointer;
#line 23 "../src/Core/EvaluationResult.vala"
		if (object->parent_instance.g_class == NULL) {
#line 23 "../src/Core/EvaluationResult.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 955 "EvaluationResult.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 23 "../src/Core/EvaluationResult.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 959 "EvaluationResult.c"
		}
#line 23 "../src/Core/EvaluationResult.vala"
		value->data[0].v_pointer = pebbles_evaluation_result_ref (object);
#line 963 "EvaluationResult.c"
	} else {
#line 23 "../src/Core/EvaluationResult.vala"
		value->data[0].v_pointer = NULL;
#line 967 "EvaluationResult.c"
	}
#line 23 "../src/Core/EvaluationResult.vala"
	return NULL;
#line 971 "EvaluationResult.c"
}

static gchar*
pebbles_value_evaluation_result_lcopy_value (const GValue* value,
                                             guint n_collect_values,
                                             GTypeCValue* collect_values,
                                             guint collect_flags)
{
	PebblesEvaluationResult ** object_p;
	object_p = collect_values[0].v_pointer;
#line 23 "../src/Core/EvaluationResult.vala"
	if (!object_p) {
#line 23 "../src/Core/EvaluationResult.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 986 "EvaluationResult.c"
	}
#line 23 "../src/Core/EvaluationResult.vala"
	if (!value->data[0].v_pointer) {
#line 23 "../src/Core/EvaluationResult.vala"
		*object_p = NULL;
#line 992 "EvaluationResult.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 23 "../src/Core/EvaluationResult.vala"
		*object_p = value->data[0].v_pointer;
#line 996 "EvaluationResult.c"
	} else {
#line 23 "../src/Core/EvaluationResult.vala"
		*object_p = pebbles_evaluation_result_ref (value->data[0].v_pointer);
#line 1000 "EvaluationResult.c"
	}
#line 23 "../src/Core/EvaluationResult.vala"
	return NULL;
#line 1004 "EvaluationResult.c"
}

GParamSpec*
pebbles_param_spec_evaluation_result (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags)
{
	PebblesParamSpecEvaluationResult* spec;
#line 23 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_EVALUATION_RESULT), NULL);
#line 23 "../src/Core/EvaluationResult.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 23 "../src/Core/EvaluationResult.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 23 "../src/Core/EvaluationResult.vala"
	return G_PARAM_SPEC (spec);
#line 1023 "EvaluationResult.c"
}

gpointer
pebbles_value_get_evaluation_result (const GValue* value)
{
#line 23 "../src/Core/EvaluationResult.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_EVALUATION_RESULT), NULL);
#line 23 "../src/Core/EvaluationResult.vala"
	return value->data[0].v_pointer;
#line 1033 "EvaluationResult.c"
}

void
pebbles_value_set_evaluation_result (GValue* value,
                                     gpointer v_object)
{
	PebblesEvaluationResult * old;
#line 23 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_EVALUATION_RESULT));
#line 23 "../src/Core/EvaluationResult.vala"
	old = value->data[0].v_pointer;
#line 23 "../src/Core/EvaluationResult.vala"
	if (v_object) {
#line 23 "../src/Core/EvaluationResult.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_EVALUATION_RESULT));
#line 23 "../src/Core/EvaluationResult.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../src/Core/EvaluationResult.vala"
		value->data[0].v_pointer = v_object;
#line 23 "../src/Core/EvaluationResult.vala"
		pebbles_evaluation_result_ref (value->data[0].v_pointer);
#line 1055 "EvaluationResult.c"
	} else {
#line 23 "../src/Core/EvaluationResult.vala"
		value->data[0].v_pointer = NULL;
#line 1059 "EvaluationResult.c"
	}
#line 23 "../src/Core/EvaluationResult.vala"
	if (old) {
#line 23 "../src/Core/EvaluationResult.vala"
		pebbles_evaluation_result_unref (old);
#line 1065 "EvaluationResult.c"
	}
}

void
pebbles_value_take_evaluation_result (GValue* value,
                                      gpointer v_object)
{
	PebblesEvaluationResult * old;
#line 23 "../src/Core/EvaluationResult.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_EVALUATION_RESULT));
#line 23 "../src/Core/EvaluationResult.vala"
	old = value->data[0].v_pointer;
#line 23 "../src/Core/EvaluationResult.vala"
	if (v_object) {
#line 23 "../src/Core/EvaluationResult.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_EVALUATION_RESULT));
#line 23 "../src/Core/EvaluationResult.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../src/Core/EvaluationResult.vala"
		value->data[0].v_pointer = v_object;
#line 1086 "EvaluationResult.c"
	} else {
#line 23 "../src/Core/EvaluationResult.vala"
		value->data[0].v_pointer = NULL;
#line 1090 "EvaluationResult.c"
	}
#line 23 "../src/Core/EvaluationResult.vala"
	if (old) {
#line 23 "../src/Core/EvaluationResult.vala"
		pebbles_evaluation_result_unref (old);
#line 1096 "EvaluationResult.c"
	}
}

static void
pebbles_evaluation_result_class_init (PebblesEvaluationResultClass * klass,
                                      gpointer klass_data)
{
#line 23 "../src/Core/EvaluationResult.vala"
	pebbles_evaluation_result_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Core/EvaluationResult.vala"
	((PebblesEvaluationResultClass *) klass)->finalize = pebbles_evaluation_result_finalize;
#line 23 "../src/Core/EvaluationResult.vala"
	g_type_class_adjust_private_offset (klass, &PebblesEvaluationResult_private_offset);
#line 1110 "EvaluationResult.c"
}

static void
pebbles_evaluation_result_instance_init (PebblesEvaluationResult * self,
                                         gpointer klass)
{
#line 23 "../src/Core/EvaluationResult.vala"
	self->priv = pebbles_evaluation_result_get_instance_private (self);
#line 23 "../src/Core/EvaluationResult.vala"
	self->ref_count = 1;
#line 1121 "EvaluationResult.c"
}

static void
pebbles_evaluation_result_finalize (PebblesEvaluationResult * obj)
{
	PebblesEvaluationResult * self;
#line 23 "../src/Core/EvaluationResult.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_EVALUATION_RESULT, PebblesEvaluationResult);
#line 23 "../src/Core/EvaluationResult.vala"
	g_signal_handlers_destroy (self);
#line 24 "../src/Core/EvaluationResult.vala"
	_g_free0 (self->priv->_problem_expression);
#line 25 "../src/Core/EvaluationResult.vala"
	_g_free0 (self->priv->_result);
#line 32 "../src/Core/EvaluationResult.vala"
	self->priv->_problem_expression_prog = (_vala_PebblesProgrammerCalculatorToken_array_free (self->priv->_problem_expression_prog, self->priv->_problem_expression_prog_length1), NULL);
#line 33 "../src/Core/EvaluationResult.vala"
	self->priv->_prog_output = (g_free (self->priv->_prog_output), NULL);
#line 1140 "EvaluationResult.c"
}

static GType
pebbles_evaluation_result_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_evaluation_result_init, pebbles_value_evaluation_result_free_value, pebbles_value_evaluation_result_copy_value, pebbles_value_evaluation_result_peek_pointer, "p", pebbles_value_evaluation_result_collect_value, "p", pebbles_value_evaluation_result_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesEvaluationResultClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_evaluation_result_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesEvaluationResult), 0, (GInstanceInitFunc) pebbles_evaluation_result_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_evaluation_result_type_id;
	pebbles_evaluation_result_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesEvaluationResult", &g_define_type_info, &g_define_type_fundamental_info, 0);
	PebblesEvaluationResult_private_offset = g_type_add_instance_private (pebbles_evaluation_result_type_id, sizeof (PebblesEvaluationResultPrivate));
	return pebbles_evaluation_result_type_id;
}

GType
pebbles_evaluation_result_get_type (void)
{
	static volatile gsize pebbles_evaluation_result_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_evaluation_result_type_id__volatile)) {
		GType pebbles_evaluation_result_type_id;
		pebbles_evaluation_result_type_id = pebbles_evaluation_result_get_type_once ();
		g_once_init_leave (&pebbles_evaluation_result_type_id__volatile, pebbles_evaluation_result_type_id);
	}
	return pebbles_evaluation_result_type_id__volatile;
}

gpointer
pebbles_evaluation_result_ref (gpointer instance)
{
	PebblesEvaluationResult * self;
	self = instance;
#line 23 "../src/Core/EvaluationResult.vala"
	g_atomic_int_inc (&self->ref_count);
#line 23 "../src/Core/EvaluationResult.vala"
	return instance;
#line 1176 "EvaluationResult.c"
}

void
pebbles_evaluation_result_unref (gpointer instance)
{
	PebblesEvaluationResult * self;
	self = instance;
#line 23 "../src/Core/EvaluationResult.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 23 "../src/Core/EvaluationResult.vala"
		PEBBLES_EVALUATION_RESULT_GET_CLASS (self)->finalize (self);
#line 23 "../src/Core/EvaluationResult.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1190 "EvaluationResult.c"
	}
}


/* libhandy-1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Hdy", gir_namespace = "Handy", gir_version = "1", lower_case_cprefix = "hdy_")]
namespace Hdy {
	[CCode (cheader_filename = "handy.h", type_id = "hdy_action_row_get_type ()")]
	public class ActionRow : Hdy.PreferencesRow, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.6")]
		public ActionRow ();
		public virtual void activate ();
		[Version (since = "0.0.6")]
		public void add_prefix (Gtk.Widget widget);
		[Version (since = "0.0.7")]
		public unowned Gtk.Widget? get_activatable_widget ();
		[Version (since = "0.0.6")]
		public unowned string get_icon_name ();
		[Version (since = "0.0.6")]
		public unowned string? get_subtitle ();
		[Version (since = "1.2")]
		public int get_subtitle_lines ();
		[Version (since = "1.2")]
		public int get_title_lines ();
		[Version (since = "0.0.6")]
		public bool get_use_underline ();
		[Version (since = "0.0.7")]
		public void set_activatable_widget (Gtk.Widget? widget);
		[Version (since = "0.0.6")]
		public void set_icon_name (string icon_name);
		[Version (since = "0.0.6")]
		public void set_subtitle (string? subtitle);
		[Version (since = "1.2")]
		public void set_subtitle_lines (int subtitle_lines);
		[Version (since = "1.2")]
		public void set_title_lines (int title_lines);
		[Version (since = "0.0.6")]
		public void set_use_underline (bool use_underline);
		[Version (since = "0.0.7")]
		public Gtk.Widget activatable_widget { get; set; }
		[Version (since = "0.0.6")]
		public string icon_name { get; set; }
		[Version (since = "0.0.6")]
		public string subtitle { get; set; }
		[Version (since = "1.2")]
		public int subtitle_lines { get; set; }
		[Version (since = "1.2")]
		public int title_lines { get; set; }
		[Version (since = "0.0.6")]
		public bool use_underline { get; set; }
		[Version (since = "1.0")]
		public signal void activated ();
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_application_window_get_type ()")]
	public class ApplicationWindow : Gtk.ApplicationWindow, Atk.Implementor, GLib.ActionGroup, GLib.ActionMap, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public ApplicationWindow ();
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_avatar_get_type ()")]
	public class Avatar : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Avatar (int size, string? text, bool show_initials);
		[Version (since = "1.2")]
		public Gdk.Pixbuf draw_to_pixbuf (int size, int scale_factor);
		[Version (since = "1.2")]
		public async Gdk.Pixbuf draw_to_pixbuf_async (int size, int scale_factor, GLib.Cancellable? cancellable);
		[Version (since = "1.0")]
		public unowned string? get_icon_name ();
		[Version (since = "1.2")]
		public unowned GLib.LoadableIcon? get_loadable_icon ();
		public bool get_show_initials ();
		public int get_size ();
		public unowned string? get_text ();
		[Version (since = "1.0")]
		public void set_icon_name (string? icon_name);
		[Version (deprecated = true, deprecated_since = "1.2")]
		public void set_image_load_func (owned Hdy.AvatarImageLoadFunc? load_image);
		[Version (since = "1.2")]
		public void set_loadable_icon (GLib.LoadableIcon? icon);
		public void set_show_initials (bool show_initials);
		public void set_size (int size);
		public void set_text (string? text);
		[Version (since = "1.0")]
		public string icon_name { get; set; }
		[Version (since = "1.2")]
		public GLib.LoadableIcon loadable_icon { get; set; }
		public bool show_initials { get; set; }
		public int size { get; set; }
		public string text { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_carousel_get_type ()")]
	public class Carousel : Gtk.EventBox, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Hdy.Swipeable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Carousel ();
		[Version (since = "1.2")]
		public bool get_allow_long_swipes ();
		[Version (since = "1.0")]
		public bool get_allow_mouse_drag ();
		[Version (since = "1.0")]
		public uint get_animation_duration ();
		[Version (since = "1.0")]
		public bool get_interactive ();
		[Version (since = "1.0")]
		public uint get_n_pages ();
		[Version (since = "1.0")]
		public double get_position ();
		[Version (since = "1.0")]
		public uint get_reveal_duration ();
		[Version (since = "1.0")]
		public uint get_spacing ();
		[Version (since = "1.0")]
		public void insert (Gtk.Widget child, int position);
		[Version (since = "1.0")]
		public void prepend (Gtk.Widget child);
		[Version (since = "1.0")]
		public void reorder (Gtk.Widget child, int position);
		[Version (since = "1.0")]
		public void scroll_to (Gtk.Widget widget);
		[Version (since = "1.0")]
		public void scroll_to_full (Gtk.Widget widget, int64 duration);
		[Version (since = "1.2")]
		public void set_allow_long_swipes (bool allow_long_swipes);
		[Version (since = "1.0")]
		public void set_allow_mouse_drag (bool allow_mouse_drag);
		[Version (since = "1.0")]
		public void set_animation_duration (uint duration);
		[Version (since = "1.0")]
		public void set_interactive (bool interactive);
		[Version (since = "1.0")]
		public void set_reveal_duration (uint reveal_duration);
		[Version (since = "1.0")]
		public void set_spacing (uint spacing);
		[Version (since = "1.2")]
		public bool allow_long_swipes { get; set; }
		[Version (since = "1.0")]
		public bool allow_mouse_drag { get; set; }
		[Version (since = "1.0")]
		public uint animation_duration { get; set; }
		[Version (since = "1.0")]
		public bool interactive { get; set; }
		[Version (since = "1.0")]
		public uint n_pages { get; }
		[Version (since = "1.0")]
		public double position { get; }
		[Version (since = "1.0")]
		public uint reveal_duration { get; set; }
		[Version (since = "1.0")]
		public uint spacing { get; set; }
		[Version (since = "1.0")]
		public signal void page_changed (uint index);
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_carousel_indicator_dots_get_type ()")]
	public class CarouselIndicatorDots : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public CarouselIndicatorDots ();
		[Version (since = "1.0")]
		public unowned Hdy.Carousel? get_carousel ();
		[Version (since = "1.0")]
		public void set_carousel (Hdy.Carousel? carousel);
		[Version (since = "1.0")]
		public Hdy.Carousel carousel { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_carousel_indicator_lines_get_type ()")]
	public class CarouselIndicatorLines : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public CarouselIndicatorLines ();
		[Version (since = "1.0")]
		public unowned Hdy.Carousel? get_carousel ();
		[Version (since = "1.0")]
		public void set_carousel (Hdy.Carousel? carousel);
		[Version (since = "1.0")]
		public Hdy.Carousel carousel { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_clamp_get_type ()")]
	public class Clamp : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Clamp ();
		[Version (since = "1.0")]
		public int get_maximum_size ();
		[Version (since = "1.0")]
		public int get_tightening_threshold ();
		[Version (since = "1.0")]
		public void set_maximum_size (int maximum_size);
		[Version (since = "1.0")]
		public void set_tightening_threshold (int tightening_threshold);
		[Version (since = "1.0")]
		public int maximum_size { get; set; }
		[Version (since = "1.0")]
		public int tightening_threshold { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_combo_row_get_type ()")]
	public class ComboRow : Hdy.ActionRow, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.6")]
		public ComboRow ();
		[Version (since = "0.0.6")]
		public void bind_model (GLib.ListModel? model, Gtk.ListBoxCreateWidgetFunc? create_list_widget_func, owned Gtk.ListBoxCreateWidgetFunc? create_current_widget_func);
		[Version (since = "0.0.6")]
		public void bind_name_model (GLib.ListModel? model, owned Hdy.ComboRowGetNameFunc? get_name_func);
		[Version (since = "0.0.6")]
		public unowned GLib.ListModel? get_model ();
		[Version (since = "0.0.7")]
		public int get_selected_index ();
		[Version (since = "0.0.10")]
		public bool get_use_subtitle ();
		[Version (since = "0.0.6")]
		public void set_for_enum (GLib.Type enum_type, owned Hdy.ComboRowGetEnumValueNameFunc? get_name_func);
		[Version (since = "0.0.10")]
		public void set_get_name_func (owned Hdy.ComboRowGetNameFunc? get_name_func);
		[Version (since = "0.0.7")]
		public void set_selected_index (int selected_index);
		[Version (since = "0.0.10")]
		public void set_use_subtitle (bool use_subtitle);
		[Version (since = "0.0.7")]
		public int selected_index { get; set; }
		[Version (since = "0.0.10")]
		public bool use_subtitle { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_deck_get_type ()")]
	public class Deck : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Hdy.Swipeable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Deck ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_adjacent_child (Hdy.NavigationDirection direction);
		[Version (since = "1.0")]
		public bool get_can_swipe_back ();
		[Version (since = "1.0")]
		public bool get_can_swipe_forward ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child_by_name (string name);
		[Version (since = "1.0")]
		public bool get_homogeneous (Gtk.Orientation orientation);
		[Version (since = "1.0")]
		public bool get_interpolate_size ();
		[Version (since = "1.0")]
		public uint get_transition_duration ();
		[Version (since = "1.0")]
		public bool get_transition_running ();
		[Version (since = "1.0")]
		public Hdy.DeckTransitionType get_transition_type ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget get_visible_child ();
		[Version (since = "1.0")]
		public unowned string get_visible_child_name ();
		[Version (since = "1.2")]
		public void insert_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		[Version (since = "1.0")]
		public bool navigate (Hdy.NavigationDirection direction);
		[Version (since = "1.2")]
		public void prepend (Gtk.Widget child);
		[Version (since = "1.2")]
		public void reorder_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		[Version (since = "1.0")]
		public void set_can_swipe_back (bool can_swipe_back);
		[Version (since = "1.0")]
		public void set_can_swipe_forward (bool can_swipe_forward);
		[Version (since = "1.0")]
		public void set_homogeneous (Gtk.Orientation orientation, bool homogeneous);
		[Version (since = "1.0")]
		public void set_interpolate_size (bool interpolate_size);
		[Version (since = "1.0")]
		public void set_transition_duration (uint duration);
		[Version (since = "1.0")]
		public void set_transition_type (Hdy.DeckTransitionType transition);
		[Version (since = "1.0")]
		public void set_visible_child (Gtk.Widget visible_child);
		[Version (since = "1.0")]
		public void set_visible_child_name (string name);
		[Version (since = "1.0")]
		public bool can_swipe_back { get; set; }
		[Version (since = "1.0")]
		public bool can_swipe_forward { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.0")]
		public bool hhomogeneous { get; set; }
		[Version (since = "1.0")]
		public bool interpolate_size { get; set; }
		[Version (since = "1.0")]
		public uint transition_duration { get; set; }
		[Version (since = "1.0")]
		public bool transition_running { get; }
		[Version (since = "1.0")]
		public Hdy.DeckTransitionType transition_type { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.0")]
		public bool vhomogeneous { get; set; }
		[Version (since = "1.0")]
		public Gtk.Widget visible_child { get; set; }
		[Version (since = "1.0")]
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_enum_value_object_get_type ()")]
	public class EnumValueObject : GLib.Object {
		[CCode (has_construct_function = false)]
		public EnumValueObject (GLib.EnumValue enum_value);
		public unowned string get_name ();
		public unowned string get_nick ();
		public int get_value ();
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_expander_row_get_type ()")]
	public class ExpanderRow : Hdy.PreferencesRow, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.6")]
		public ExpanderRow ();
		[Version (since = "1.0")]
		public void add_action (Gtk.Widget widget);
		[Version (since = "1.0")]
		public void add_prefix (Gtk.Widget widget);
		[Version (since = "0.0.6")]
		public bool get_enable_expansion ();
		public bool get_expanded ();
		[Version (since = "1.0")]
		public unowned string get_icon_name ();
		[Version (since = "0.0.6")]
		public bool get_show_enable_switch ();
		[Version (since = "1.0")]
		public unowned string? get_subtitle ();
		[Version (since = "1.0")]
		public bool get_use_underline ();
		[Version (since = "0.0.6")]
		public void set_enable_expansion (bool enable_expansion);
		public void set_expanded (bool expanded);
		[Version (since = "1.0")]
		public void set_icon_name (string icon_name);
		[Version (since = "0.0.6")]
		public void set_show_enable_switch (bool show_enable_switch);
		[Version (since = "1.0")]
		public void set_subtitle (string? subtitle);
		[Version (since = "1.0")]
		public void set_use_underline (bool use_underline);
		public bool enable_expansion { get; set; }
		public bool expanded { get; set; }
		[Version (since = "1.0")]
		public string icon_name { get; set; }
		public bool show_enable_switch { get; set; }
		[Version (since = "1.0")]
		public string subtitle { get; set; }
		[Version (since = "1.0")]
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_flap_get_type ()")]
	public class Flap : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Hdy.Swipeable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.2")]
		public Flap ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget? get_content ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget? get_flap ();
		[Version (since = "1.2")]
		public Gtk.PackType get_flap_position ();
		[Version (since = "1.2")]
		public uint get_fold_duration ();
		[Version (since = "1.2")]
		public Hdy.FlapFoldPolicy get_fold_policy ();
		[Version (since = "1.2")]
		public bool get_folded ();
		[Version (since = "1.2")]
		public bool get_locked ();
		[Version (since = "1.2")]
		public bool get_modal ();
		[Version (since = "1.2")]
		public uint get_reveal_duration ();
		[Version (since = "1.2")]
		public bool get_reveal_flap ();
		[Version (since = "1.2")]
		public double get_reveal_progress ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget? get_separator ();
		[Version (since = "1.2")]
		public bool get_swipe_to_close ();
		[Version (since = "1.2")]
		public bool get_swipe_to_open ();
		[Version (since = "1.2")]
		public Hdy.FlapTransitionType get_transition_type ();
		[Version (since = "1.2")]
		public void set_content (Gtk.Widget? content);
		[Version (since = "1.2")]
		public void set_flap (Gtk.Widget? flap);
		[Version (since = "1.2")]
		public void set_flap_position (Gtk.PackType position);
		[Version (since = "1.2")]
		public void set_fold_duration (uint duration);
		[Version (since = "1.2")]
		public void set_fold_policy (Hdy.FlapFoldPolicy policy);
		[Version (since = "1.2")]
		public void set_locked (bool locked);
		[Version (since = "1.2")]
		public void set_modal (bool modal);
		[Version (since = "1.2")]
		public void set_reveal_duration (uint duration);
		[Version (since = "1.2")]
		public void set_reveal_flap (bool reveal_flap);
		[Version (since = "1.2")]
		public void set_separator (Gtk.Widget? separator);
		[Version (since = "1.2")]
		public void set_swipe_to_close (bool swipe_to_close);
		[Version (since = "1.2")]
		public void set_swipe_to_open (bool swipe_to_open);
		[Version (since = "1.2")]
		public void set_transition_type (Hdy.FlapTransitionType transition_type);
		[Version (since = "1.2")]
		public Gtk.Widget content { get; set; }
		[Version (since = "1.2")]
		public Gtk.Widget flap { get; set; }
		[Version (since = "1.2")]
		public Gtk.PackType flap_position { get; set; }
		[Version (since = "1.2")]
		public uint fold_duration { get; set; }
		[Version (since = "1.2")]
		public Hdy.FlapFoldPolicy fold_policy { get; set; }
		[Version (since = "1.2")]
		public bool folded { get; }
		[Version (since = "1.2")]
		public bool locked { get; set; }
		[Version (since = "1.2")]
		public bool modal { get; set; }
		[Version (since = "1.2")]
		public uint reveal_duration { get; set; }
		[Version (since = "1.2")]
		public bool reveal_flap { get; set; }
		[Version (since = "1.2")]
		public double reveal_progress { get; }
		[Version (since = "1.2")]
		public Gtk.Widget separator { get; set; }
		[Version (since = "1.2")]
		public bool swipe_to_close { get; set; }
		[Version (since = "1.2")]
		public bool swipe_to_open { get; set; }
		[Version (since = "1.2")]
		public Hdy.FlapTransitionType transition_type { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_header_bar_get_type ()")]
	public class HeaderBar : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.10")]
		public HeaderBar ();
		[Version (since = "0.0.10")]
		public Hdy.CenteringPolicy get_centering_policy ();
		[Version (since = "0.0.10")]
		public unowned Gtk.Widget? get_custom_title ();
		[Version (since = "0.0.10")]
		public unowned string get_decoration_layout ();
		[Version (since = "0.0.10")]
		public bool get_has_subtitle ();
		[Version (since = "0.0.10")]
		public bool get_interpolate_size ();
		[Version (since = "0.0.10")]
		public bool get_show_close_button ();
		[Version (since = "0.0.10")]
		public unowned string? get_subtitle ();
		[Version (since = "0.0.10")]
		public unowned string? get_title ();
		[Version (since = "0.0.10")]
		public uint get_transition_duration ();
		[Version (since = "0.0.10")]
		public bool get_transition_running ();
		[Version (since = "0.0.10")]
		public void pack_end (Gtk.Widget child);
		[Version (since = "0.0.10")]
		public void pack_start (Gtk.Widget child);
		[Version (since = "0.0.10")]
		public void set_centering_policy (Hdy.CenteringPolicy centering_policy);
		[Version (since = "0.0.10")]
		public void set_custom_title (Gtk.Widget? title_widget);
		[Version (since = "0.0.10")]
		public void set_decoration_layout (string? layout);
		[Version (since = "0.0.10")]
		public void set_has_subtitle (bool setting);
		[Version (since = "0.0.10")]
		public void set_interpolate_size (bool interpolate_size);
		[Version (since = "0.0.10")]
		public void set_show_close_button (bool setting);
		[Version (since = "0.0.10")]
		public void set_subtitle (string? subtitle);
		[Version (since = "0.0.10")]
		public void set_title (string? title);
		[Version (since = "0.0.10")]
		public void set_transition_duration (uint duration);
		public Hdy.CenteringPolicy centering_policy { get; set; }
		public Gtk.Widget custom_title { get; set; }
		[Version (since = "0.0.10")]
		public string decoration_layout { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.0.10")]
		public bool decoration_layout_set { get; set; }
		[Version (since = "0.0.10")]
		public bool has_subtitle { get; set; }
		public bool interpolate_size { get; set; }
		[Version (since = "0.0.10")]
		public bool show_close_button { get; set; }
		[NoAccessorMethod]
		public int spacing { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
		public uint transition_duration { get; set; }
		public bool transition_running { get; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_header_group_get_type ()")]
	public class HeaderGroup : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public HeaderGroup ();
		[Version (since = "1.0")]
		public void add_gtk_header_bar (Gtk.HeaderBar header_bar);
		[Version (since = "1.0")]
		public void add_header_bar (Hdy.HeaderBar header_bar);
		[Version (since = "1.0")]
		public void add_header_group (Hdy.HeaderGroup header_group);
		[Version (since = "1.0")]
		public unowned GLib.SList<Hdy.HeaderGroupChild> get_children ();
		[Version (since = "1.0")]
		public bool get_decorate_all ();
		[Version (since = "1.0")]
		public void remove_child (Hdy.HeaderGroupChild child);
		[Version (since = "1.0")]
		public void remove_gtk_header_bar (Gtk.HeaderBar header_bar);
		[Version (since = "1.0")]
		public void remove_header_bar (Hdy.HeaderBar header_bar);
		[Version (since = "1.0")]
		public void remove_header_group (Hdy.HeaderGroup header_group);
		[Version (since = "1.0")]
		public void set_decorate_all (bool decorate_all);
		[Version (since = "1.0")]
		public bool decorate_all { get; set; }
		[Version (since = "1.0")]
		public signal void update_decoration_layouts ();
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_header_group_child_get_type ()")]
	public class HeaderGroupChild : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HeaderGroupChild ();
		[Version (since = "1.0")]
		public Hdy.HeaderGroupChildType get_child_type ();
		[Version (since = "1.0")]
		public unowned Gtk.HeaderBar get_gtk_header_bar ();
		[Version (since = "1.0")]
		public unowned Hdy.HeaderBar get_header_bar ();
		[Version (since = "1.0")]
		public unowned Hdy.HeaderGroup get_header_group ();
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_keypad_get_type ()")]
	public class Keypad : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.12")]
		public Keypad (bool symbols_visible, bool letters_visible);
		[Version (since = "1.0")]
		public uint get_column_spacing ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_end_action ();
		[Version (since = "1.0")]
		public unowned Gtk.Entry get_entry ();
		[Version (since = "1.0")]
		public bool get_letters_visible ();
		[Version (since = "1.0")]
		public uint get_row_spacing ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_start_action ();
		[Version (since = "1.0")]
		public bool get_symbols_visible ();
		[Version (since = "1.0")]
		public void set_column_spacing (uint spacing);
		[Version (since = "1.0")]
		public void set_end_action (Gtk.Widget? end_action);
		[Version (since = "0.0.12")]
		public void set_entry (Gtk.Entry? entry);
		[Version (since = "1.0")]
		public void set_letters_visible (bool letters_visible);
		[Version (since = "1.0")]
		public void set_row_spacing (uint spacing);
		[Version (since = "1.0")]
		public void set_start_action (Gtk.Widget? start_action);
		[Version (since = "1.0")]
		public void set_symbols_visible (bool symbols_visible);
		[Version (since = "1.0")]
		public uint column_spacing { get; set; }
		[Version (since = "1.0")]
		public Gtk.Widget end_action { get; set; }
		[Version (since = "1.0")]
		public Gtk.Entry entry { get; set; }
		[Version (since = "1.0")]
		public bool letters_visible { get; set; }
		[Version (since = "1.0")]
		public uint row_spacing { get; set; }
		[Version (since = "1.0")]
		public Gtk.Widget start_action { get; set; }
		[Version (since = "1.0")]
		public bool symbols_visible { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_leaflet_get_type ()")]
	public class Leaflet : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Hdy.Swipeable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Leaflet ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_adjacent_child (Hdy.NavigationDirection direction);
		[Version (since = "0.0.12")]
		public bool get_can_swipe_back ();
		[Version (since = "0.0.12")]
		public bool get_can_swipe_forward ();
		[Version (since = "1.0")]
		public unowned Gtk.Widget? get_child_by_name (string name);
		public uint get_child_transition_duration ();
		public bool get_child_transition_running ();
		public bool get_folded ();
		public bool get_homogeneous (bool folded, Gtk.Orientation orientation);
		public bool get_interpolate_size ();
		public uint get_mode_transition_duration ();
		[Version (since = "0.0.12")]
		public Hdy.LeafletTransitionType get_transition_type ();
		public unowned Gtk.Widget get_visible_child ();
		public unowned string get_visible_child_name ();
		[Version (since = "1.2")]
		public void insert_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		[Version (since = "1.0")]
		public bool navigate (Hdy.NavigationDirection direction);
		[Version (since = "1.2")]
		public void prepend (Gtk.Widget child);
		[Version (since = "1.2")]
		public void reorder_child_after (Gtk.Widget child, Gtk.Widget? sibling);
		[Version (since = "0.0.12")]
		public void set_can_swipe_back (bool can_swipe_back);
		[Version (since = "0.0.12")]
		public void set_can_swipe_forward (bool can_swipe_forward);
		public void set_child_transition_duration (uint duration);
		public void set_homogeneous (bool folded, Gtk.Orientation orientation, bool homogeneous);
		public void set_interpolate_size (bool interpolate_size);
		public void set_mode_transition_duration (uint duration);
		[Version (since = "0.0.12")]
		public void set_transition_type (Hdy.LeafletTransitionType transition);
		public void set_visible_child (Gtk.Widget visible_child);
		public void set_visible_child_name (string name);
		[Version (since = "0.0.12")]
		public bool can_swipe_back { get; set; }
		[Version (since = "0.0.12")]
		public bool can_swipe_forward { get; set; }
		public uint child_transition_duration { get; set; }
		public bool child_transition_running { get; }
		public bool folded { get; }
		[NoAccessorMethod]
		public bool hhomogeneous_folded { get; set; }
		[NoAccessorMethod]
		public bool hhomogeneous_unfolded { get; set; }
		public bool interpolate_size { get; set; }
		public uint mode_transition_duration { get; set; }
		[Version (since = "0.0.12")]
		public Hdy.LeafletTransitionType transition_type { get; set; }
		[NoAccessorMethod]
		public bool vhomogeneous_folded { get; set; }
		[NoAccessorMethod]
		public bool vhomogeneous_unfolded { get; set; }
		public Gtk.Widget visible_child { get; set; }
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_preferences_group_get_type ()")]
	public class PreferencesGroup : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.10")]
		public PreferencesGroup ();
		[Version (since = "0.0.10")]
		public unowned string get_description ();
		[Version (since = "0.0.10")]
		public unowned string get_title ();
		[Version (since = "0.0.10")]
		public void set_description (string description);
		[Version (since = "0.0.10")]
		public void set_title (string title);
		[Version (since = "0.0.10")]
		public string description { get; set; }
		[Version (since = "0.0.10")]
		public string title { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_preferences_page_get_type ()")]
	public class PreferencesPage : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.10")]
		public PreferencesPage ();
		[Version (since = "0.0.10")]
		public unowned string? get_icon_name ();
		[Version (since = "0.0.10")]
		public unowned string? get_title ();
		[Version (since = "0.0.10")]
		public void set_icon_name (string? icon_name);
		[Version (since = "0.0.10")]
		public void set_title (string? title);
		[Version (since = "0.0.10")]
		public string icon_name { get; set; }
		[Version (since = "0.0.10")]
		public string title { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_preferences_row_get_type ()")]
	public class PreferencesRow : Gtk.ListBoxRow, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.10")]
		public PreferencesRow ();
		[Version (since = "0.0.10")]
		public unowned string? get_title ();
		[Version (since = "0.0.10")]
		public bool get_use_underline ();
		[Version (since = "0.0.10")]
		public void set_title (string? title);
		[Version (since = "0.0.10")]
		public void set_use_underline (bool use_underline);
		[Version (since = "0.0.10")]
		public string title { get; set; }
		[Version (since = "0.0.10")]
		public bool use_underline { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_preferences_window_get_type ()")]
	public class PreferencesWindow : Hdy.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.10")]
		public PreferencesWindow ();
		[Version (since = "1.0")]
		public void close_subpage ();
		[Version (since = "1.0")]
		public bool get_can_swipe_back ();
		[Version (since = "1.0")]
		public bool get_search_enabled ();
		[Version (since = "1.0")]
		public void present_subpage (Gtk.Widget subpage);
		[Version (since = "1.0")]
		public void set_can_swipe_back (bool can_swipe_back);
		[Version (since = "1.0")]
		public void set_search_enabled (bool search_enabled);
		[Version (since = "1.0")]
		public bool can_swipe_back { get; set; }
		[Version (since = "1.0")]
		public bool search_enabled { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_search_bar_get_type ()")]
	public class SearchBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.6")]
		public SearchBar ();
		[Version (since = "0.0.6")]
		public void connect_entry (Gtk.Entry entry);
		[Version (since = "0.0.6")]
		public bool get_search_mode ();
		[Version (since = "0.0.6")]
		public bool get_show_close_button ();
		[Version (since = "0.0.6")]
		public bool handle_event (Gdk.Event event);
		[Version (since = "0.0.6")]
		public void set_search_mode (bool search_mode);
		[Version (since = "0.0.6")]
		public void set_show_close_button (bool visible);
		[NoAccessorMethod]
		public bool search_mode_enabled { get; set; }
		public bool show_close_button { get; set construct; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_squeezer_get_type ()")]
	public class Squeezer : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Squeezer ();
		public bool get_child_enabled (Gtk.Widget child);
		[Version (since = "0.0.10")]
		public bool get_homogeneous ();
		[Version (since = "0.0.10")]
		public bool get_interpolate_size ();
		public uint get_transition_duration ();
		public bool get_transition_running ();
		public Hdy.SqueezerTransitionType get_transition_type ();
		public unowned Gtk.Widget? get_visible_child ();
		[Version (since = "1.0")]
		public float get_xalign ();
		[Version (since = "1.0")]
		public float get_yalign ();
		public void set_child_enabled (Gtk.Widget child, bool enabled);
		[Version (since = "0.0.10")]
		public void set_homogeneous (bool homogeneous);
		[Version (since = "0.0.10")]
		public void set_interpolate_size (bool interpolate_size);
		public void set_transition_duration (uint duration);
		public void set_transition_type (Hdy.SqueezerTransitionType transition);
		[Version (since = "1.0")]
		public void set_xalign (float xalign);
		[Version (since = "1.0")]
		public void set_yalign (float yalign);
		public bool homogeneous { get; set; }
		public bool interpolate_size { get; set; }
		public uint transition_duration { get; set; }
		public bool transition_running { get; }
		public Hdy.SqueezerTransitionType transition_type { get; set; }
		public Gtk.Widget visible_child { get; }
		[Version (since = "1.0")]
		public float xalign { get; set; }
		[Version (since = "1.0")]
		public float yalign { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_status_page_get_type ()")]
	public class StatusPage : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.2")]
		public StatusPage ();
		[Version (since = "1.2")]
		public unowned string? get_description ();
		[Version (since = "1.2")]
		public unowned string? get_icon_name ();
		[Version (since = "1.2")]
		public unowned string? get_title ();
		[Version (since = "1.2")]
		public void set_description (string? description);
		[Version (since = "1.2")]
		public void set_icon_name (string? icon_name);
		[Version (since = "1.2")]
		public void set_title (string? title);
		[Version (since = "1.2")]
		public string description { get; set; }
		[Version (since = "1.2")]
		public string icon_name { get; set; }
		[Version (since = "1.2")]
		public string title { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_swipe_group_get_type ()")]
	public class SwipeGroup : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "0.0.12")]
		public SwipeGroup ();
		[Version (since = "0.0.12")]
		public void add_swipeable (Hdy.Swipeable swipeable);
		[Version (since = "0.0.12")]
		public unowned GLib.SList<Hdy.Swipeable> get_swipeables ();
		[Version (since = "0.0.12")]
		public void remove_swipeable (Hdy.Swipeable swipeable);
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_swipe_tracker_get_type ()")]
	public class SwipeTracker : GLib.Object, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public SwipeTracker (Hdy.Swipeable swipeable);
		[Version (since = "1.2")]
		public bool get_allow_long_swipes ();
		[Version (since = "1.0")]
		public bool get_allow_mouse_drag ();
		[Version (since = "1.0")]
		public bool get_enabled ();
		[Version (since = "1.0")]
		public bool get_reversed ();
		[Version (since = "1.0")]
		public unowned Hdy.Swipeable get_swipeable ();
		[Version (since = "1.2")]
		public void set_allow_long_swipes (bool allow_long_swipes);
		[Version (since = "1.0")]
		public void set_allow_mouse_drag (bool allow_mouse_drag);
		[Version (since = "1.0")]
		public void set_enabled (bool enabled);
		[Version (since = "1.0")]
		public void set_reversed (bool reversed);
		[Version (since = "1.0")]
		public void shift_position (double delta);
		[Version (since = "1.2")]
		public bool allow_long_swipes { get; set; }
		[Version (since = "1.0")]
		public bool allow_mouse_drag { get; set; }
		[Version (since = "1.0")]
		public bool enabled { get; set; }
		[Version (since = "1.0")]
		public bool reversed { get; set; }
		[Version (since = "1.0")]
		public Hdy.Swipeable swipeable { get; construct; }
		[Version (since = "1.0")]
		public signal void begin_swipe (Hdy.NavigationDirection direction, bool direct);
		[Version (since = "1.0")]
		public signal void end_swipe (int64 duration, double to);
		[Version (since = "1.0")]
		public signal void update_swipe (double progress);
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_tab_bar_get_type ()")]
	public class TabBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.2")]
		public TabBar ();
		[Version (since = "1.2")]
		public bool get_autohide ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget? get_end_action_widget ();
		[Version (since = "1.2")]
		public bool get_expand_tabs ();
		[Version (since = "1.2")]
		public unowned Gtk.TargetList? get_extra_drag_dest_targets ();
		[Version (since = "1.2")]
		public bool get_inverted ();
		[Version (since = "1.2")]
		public bool get_is_overflowing ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget? get_start_action_widget ();
		[Version (since = "1.2")]
		public bool get_tabs_revealed ();
		[Version (since = "1.2")]
		public unowned Hdy.TabView? get_view ();
		[Version (since = "1.2")]
		public void set_autohide (bool autohide);
		[Version (since = "1.2")]
		public void set_end_action_widget (Gtk.Widget? widget);
		[Version (since = "1.2")]
		public void set_expand_tabs (bool expand_tabs);
		[Version (since = "1.2")]
		public void set_extra_drag_dest_targets (Gtk.TargetList? extra_drag_dest_targets);
		[Version (since = "1.2")]
		public void set_inverted (bool inverted);
		[Version (since = "1.2")]
		public void set_start_action_widget (Gtk.Widget? widget);
		[Version (since = "1.2")]
		public void set_view (Hdy.TabView? view);
		[Version (since = "1.2")]
		public bool autohide { get; set; }
		[Version (since = "1.2")]
		public Gtk.Widget end_action_widget { get; set; }
		[Version (since = "1.2")]
		public bool expand_tabs { get; set; }
		[Version (since = "1.2")]
		public Gtk.TargetList extra_drag_dest_targets { get; set; }
		[Version (since = "1.2")]
		public bool inverted { get; set; }
		[Version (since = "1.2")]
		public bool is_overflowing { get; }
		[Version (since = "1.2")]
		public Gtk.Widget start_action_widget { get; set; }
		[Version (since = "1.2")]
		public bool tabs_revealed { get; }
		[Version (since = "1.2")]
		public Hdy.TabView view { get; set; }
		[Version (since = "1.2")]
		public signal void extra_drag_data_received (Hdy.TabPage page, Gdk.DragContext context, Gtk.SelectionData data, uint info, uint time);
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_tab_page_get_type ()")]
	public class TabPage : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TabPage ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget get_child ();
		[Version (since = "1.2")]
		public unowned GLib.Icon? get_icon ();
		[Version (since = "1.2")]
		public bool get_indicator_activatable ();
		[Version (since = "1.2")]
		public unowned GLib.Icon? get_indicator_icon ();
		[Version (since = "1.2")]
		public bool get_loading ();
		[Version (since = "1.2")]
		public bool get_needs_attention ();
		[Version (since = "1.2")]
		public unowned Hdy.TabPage? get_parent ();
		[Version (since = "1.2")]
		public bool get_pinned ();
		[Version (since = "1.2")]
		public bool get_selected ();
		[Version (since = "1.2")]
		public unowned string? get_title ();
		[Version (since = "1.2")]
		public unowned string? get_tooltip ();
		[Version (since = "1.2")]
		public void set_icon (GLib.Icon? icon);
		[Version (since = "1.2")]
		public void set_indicator_activatable (bool activatable);
		[Version (since = "1.2")]
		public void set_indicator_icon (GLib.Icon? indicator_icon);
		[Version (since = "1.2")]
		public void set_loading (bool loading);
		[Version (since = "1.2")]
		public void set_needs_attention (bool needs_attention);
		[Version (since = "1.2")]
		public void set_title (string? title);
		[Version (since = "1.2")]
		public void set_tooltip (string? tooltip);
		[Version (since = "1.2")]
		public Gtk.Widget child { get; construct; }
		[Version (since = "1.2")]
		public GLib.Icon icon { get; set; }
		[Version (since = "1.2")]
		public bool indicator_activatable { get; set; }
		[Version (since = "1.2")]
		public GLib.Icon indicator_icon { get; set; }
		[Version (since = "1.2")]
		public bool loading { get; set; }
		[Version (since = "1.2")]
		public bool needs_attention { get; set; }
		[Version (since = "1.2")]
		public Hdy.TabPage parent { get; construct; }
		[Version (since = "1.2")]
		public bool pinned { get; }
		[Version (since = "1.2")]
		public bool selected { get; }
		[Version (since = "1.2")]
		public string title { get; set; }
		[Version (since = "1.2")]
		public string tooltip { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_tab_view_get_type ()")]
	public class TabView : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.2")]
		public TabView ();
		[Version (since = "1.2")]
		public unowned Hdy.TabPage add_page (Gtk.Widget child, Hdy.TabPage? parent);
		[Version (since = "1.2")]
		public unowned Hdy.TabPage append (Gtk.Widget child);
		[Version (since = "1.2")]
		public unowned Hdy.TabPage append_pinned (Gtk.Widget child);
		[Version (since = "1.2")]
		public void close_other_pages (Hdy.TabPage page);
		[Version (since = "1.2")]
		public void close_page_finish (Hdy.TabPage page, bool confirm);
		[Version (since = "1.2")]
		public void close_pages_after (Hdy.TabPage page);
		[Version (since = "1.2")]
		public void close_pages_before (Hdy.TabPage page);
		[Version (since = "1.2")]
		public unowned GLib.Icon get_default_icon ();
		[Version (since = "1.2")]
		public bool get_is_transferring_page ();
		[Version (since = "1.2")]
		public unowned GLib.MenuModel? get_menu_model ();
		[Version (since = "1.2")]
		public int get_n_pages ();
		[Version (since = "1.2")]
		public int get_n_pinned_pages ();
		[Version (since = "1.2")]
		public unowned Hdy.TabPage get_nth_page (int position);
		[Version (since = "1.2")]
		public unowned Hdy.TabPage get_page (Gtk.Widget child);
		[Version (since = "1.2")]
		public int get_page_position (Hdy.TabPage page);
		[Version (since = "1.2")]
		public unowned GLib.ListModel get_pages ();
		[Version (since = "1.2")]
		public unowned Hdy.TabPage? get_selected_page ();
		[Version (since = "1.2")]
		public unowned Gtk.Widget? get_shortcut_widget ();
		[Version (since = "1.2")]
		public unowned Hdy.TabPage insert (Gtk.Widget child, int position);
		[Version (since = "1.2")]
		public unowned Hdy.TabPage insert_pinned (Gtk.Widget child, int position);
		[Version (since = "1.2")]
		public unowned Hdy.TabPage prepend (Gtk.Widget child);
		[Version (since = "1.2")]
		public unowned Hdy.TabPage prepend_pinned (Gtk.Widget child);
		[Version (since = "1.2")]
		public bool reorder_backward (Hdy.TabPage page);
		[Version (since = "1.2")]
		public bool reorder_first (Hdy.TabPage page);
		[Version (since = "1.2")]
		public bool reorder_forward (Hdy.TabPage page);
		[Version (since = "1.2")]
		public bool reorder_last (Hdy.TabPage page);
		[Version (since = "1.2")]
		public bool reorder_page (Hdy.TabPage page, int position);
		[Version (since = "1.2")]
		public bool select_next_page ();
		[Version (since = "1.2")]
		public bool select_previous_page ();
		[Version (since = "1.2")]
		public void set_default_icon (GLib.Icon default_icon);
		[Version (since = "1.2")]
		public void set_menu_model (GLib.MenuModel? menu_model);
		[Version (since = "1.2")]
		public void set_page_pinned (Hdy.TabPage page, bool pinned);
		[Version (since = "1.2")]
		public void set_selected_page (Hdy.TabPage selected_page);
		[Version (since = "1.2")]
		public void set_shortcut_widget (Gtk.Widget? widget);
		[Version (since = "1.2")]
		public void transfer_page (Hdy.TabPage page, Hdy.TabView other_view, int position);
		[Version (since = "1.2")]
		public GLib.Icon default_icon { get; set; }
		[Version (since = "1.2")]
		public bool is_transferring_page { get; }
		[Version (since = "1.2")]
		public GLib.MenuModel menu_model { get; set; }
		[Version (since = "1.2")]
		public int n_pages { get; }
		[Version (since = "1.2")]
		public int n_pinned_pages { get; }
		[Version (since = "1.2")]
		public Hdy.TabPage selected_page { get; set; }
		[Version (since = "1.2")]
		public Gtk.Widget shortcut_widget { get; set; }
		[HasEmitter]
		[Version (since = "1.2")]
		public signal bool close_page (Hdy.TabPage page);
		[Version (since = "1.2")]
		public signal unowned Hdy.TabView? create_window ();
		[Version (since = "1.2")]
		public signal void indicator_activated (Hdy.TabPage page);
		[Version (since = "1.2")]
		public signal void page_attached (Hdy.TabPage page, int position);
		[Version (since = "1.2")]
		public signal void page_detached (Hdy.TabPage page, int position);
		[Version (since = "1.2")]
		public signal void page_reordered (Hdy.TabPage page, int position);
		[Version (since = "1.2")]
		public signal void setup_menu (Hdy.TabPage page);
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_title_bar_get_type ()")]
	public class TitleBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TitleBar ();
		public bool get_selection_mode ();
		public void set_selection_mode (bool selection_mode);
		public bool selection_mode { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_value_object_get_type ()")]
	public class ValueObject : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "0.0.8")]
		public ValueObject (GLib.Value value);
		[Version (since = "0.0.8")]
		public void copy_value (GLib.Value dest);
		[Version (since = "0.0.8")]
		public string dup_string ();
		[Version (since = "0.0.8")]
		public unowned string get_string ();
		[Version (since = "0.0.8")]
		public unowned GLib.Value? get_value ();
		public GLib.Value value { get; construct; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_view_switcher_get_type ()")]
	public class ViewSwitcher : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.10")]
		public ViewSwitcher ();
		[Version (since = "0.0.10")]
		public Pango.EllipsizeMode get_narrow_ellipsize ();
		[Version (since = "0.0.10")]
		public Hdy.ViewSwitcherPolicy get_policy ();
		[Version (since = "0.0.10")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "0.0.10")]
		public void set_narrow_ellipsize (Pango.EllipsizeMode mode);
		[Version (since = "0.0.10")]
		public void set_policy (Hdy.ViewSwitcherPolicy policy);
		[Version (since = "0.0.10")]
		public void set_stack (Gtk.Stack? stack);
		[Version (since = "0.0.10")]
		public Pango.EllipsizeMode narrow_ellipsize { get; set; }
		[Version (since = "0.0.10")]
		public Hdy.ViewSwitcherPolicy policy { get; set; }
		[Version (since = "0.0.10")]
		public Gtk.Stack stack { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_view_switcher_bar_get_type ()")]
	public class ViewSwitcherBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "0.0.10")]
		public ViewSwitcherBar ();
		[Version (since = "0.0.10")]
		public Hdy.ViewSwitcherPolicy get_policy ();
		[Version (since = "0.0.10")]
		public bool get_reveal ();
		[Version (since = "0.0.10")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "0.0.10")]
		public void set_policy (Hdy.ViewSwitcherPolicy policy);
		[Version (since = "0.0.10")]
		public void set_reveal (bool reveal);
		[Version (since = "0.0.10")]
		public void set_stack (Gtk.Stack? stack);
		[Version (since = "0.0.10")]
		public Hdy.ViewSwitcherPolicy policy { get; set; }
		[Version (since = "0.0.10")]
		public bool reveal { get; set; }
		[Version (since = "0.0.10")]
		public Gtk.Stack stack { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_view_switcher_title_get_type ()")]
	public class ViewSwitcherTitle : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public ViewSwitcherTitle ();
		[Version (since = "1.0")]
		public Hdy.ViewSwitcherPolicy get_policy ();
		[Version (since = "1.0")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "1.0")]
		public unowned string? get_subtitle ();
		[Version (since = "1.0")]
		public unowned string? get_title ();
		[Version (since = "1.0")]
		public bool get_title_visible ();
		[Version (since = "1.0")]
		public bool get_view_switcher_enabled ();
		[Version (since = "1.0")]
		public void set_policy (Hdy.ViewSwitcherPolicy policy);
		[Version (since = "1.0")]
		public void set_stack (Gtk.Stack? stack);
		[Version (since = "1.0")]
		public void set_subtitle (string? subtitle);
		[Version (since = "1.0")]
		public void set_title (string? title);
		[Version (since = "1.0")]
		public void set_view_switcher_enabled (bool enabled);
		[Version (since = "1.0")]
		public Hdy.ViewSwitcherPolicy policy { get; set; }
		[Version (since = "1.0")]
		public Gtk.Stack stack { get; set; }
		[Version (since = "1.0")]
		public string subtitle { get; set; }
		[Version (since = "1.0")]
		public string title { get; set; }
		[Version (since = "1.0")]
		public bool title_visible { get; }
		[Version (since = "1.0")]
		public bool view_switcher_enabled { get; set; }
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_window_get_type ()")]
	public class Window : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public Window ();
	}
	[CCode (cheader_filename = "handy.h", type_id = "hdy_window_handle_get_type ()")]
	public class WindowHandle : Gtk.EventBox, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "1.0")]
		public WindowHandle ();
	}
	[CCode (cheader_filename = "handy.h", type_cname = "HdySwipeableInterface", type_id = "hdy_swipeable_get_type ()")]
	public interface Swipeable : Gtk.Widget {
		[Version (since = "1.0")]
		public void emit_child_switched (uint index, int64 duration);
		[Version (since = "1.0")]
		public abstract double get_cancel_progress ();
		[Version (since = "1.0")]
		public abstract double get_distance ();
		[Version (since = "1.0")]
		public abstract double get_progress ();
		[CCode (array_length_pos = 0.1)]
		[Version (since = "1.0")]
		public abstract double[] get_snap_points ();
		[Version (since = "1.0")]
		public abstract Gdk.Rectangle get_swipe_area (Hdy.NavigationDirection navigation_direction, bool is_drag);
		[Version (since = "1.0")]
		public abstract unowned Hdy.SwipeTracker get_swipe_tracker ();
		[Version (since = "1.0")]
		public abstract void switch_child (uint index, int64 duration);
		[Version (since = "1.0")]
		public signal void child_switched (uint index, int64 duration);
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_CENTERING_POLICY_", type_id = "hdy_centering_policy_get_type ()")]
	public enum CenteringPolicy {
		LOOSE,
		STRICT
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_DECK_TRANSITION_TYPE_", type_id = "hdy_deck_transition_type_get_type ()")]
	[Version (since = "1.0")]
	public enum DeckTransitionType {
		OVER,
		UNDER,
		SLIDE
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_FLAP_FOLD_POLICY_", type_id = "hdy_flap_fold_policy_get_type ()")]
	[Version (since = "1.2")]
	public enum FlapFoldPolicy {
		NEVER,
		ALWAYS,
		AUTO
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_FLAP_TRANSITION_TYPE_", type_id = "hdy_flap_transition_type_get_type ()")]
	[Version (since = "1.2")]
	public enum FlapTransitionType {
		OVER,
		UNDER,
		SLIDE
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_HEADER_GROUP_CHILD_TYPE_", type_id = "hdy_header_group_child_type_get_type ()")]
	[Version (since = "1.0")]
	public enum HeaderGroupChildType {
		HEADER_BAR,
		GTK_HEADER_BAR,
		HEADER_GROUP
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_LEAFLET_TRANSITION_TYPE_", type_id = "hdy_leaflet_transition_type_get_type ()")]
	[Version (since = "0.0.12")]
	public enum LeafletTransitionType {
		OVER,
		UNDER,
		SLIDE
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_NAVIGATION_DIRECTION_", type_id = "hdy_navigation_direction_get_type ()")]
	[Version (since = "1.0")]
	public enum NavigationDirection {
		BACK,
		FORWARD
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_SQUEEZER_TRANSITION_TYPE_", type_id = "hdy_squeezer_transition_type_get_type ()")]
	public enum SqueezerTransitionType {
		NONE,
		CROSSFADE
	}
	[CCode (cheader_filename = "handy.h", cprefix = "HDY_VIEW_SWITCHER_POLICY_", type_id = "hdy_view_switcher_policy_get_type ()")]
	public enum ViewSwitcherPolicy {
		AUTO,
		NARROW,
		WIDE
	}
	[CCode (cheader_filename = "handy.h", instance_pos = 1.9)]
	[Version (deprecated = true, deprecated_since = "1.2")]
	public delegate Gdk.Pixbuf? AvatarImageLoadFunc (int size);
	[CCode (cheader_filename = "handy.h", instance_pos = 1.9)]
	public delegate string ComboRowGetEnumValueNameFunc (Hdy.EnumValueObject value);
	[CCode (cheader_filename = "handy.h", instance_pos = 1.9)]
	public delegate string ComboRowGetNameFunc (GLib.Object item);
	[CCode (cheader_filename = "handy.h")]
	[Version (since = "0.0.11")]
	public static double ease_out_cubic (double t);
	[CCode (cheader_filename = "handy.h")]
	[Version (since = "0.0.6")]
	public static string enum_value_row_name (Hdy.EnumValueObject value, void* user_data);
	[CCode (cheader_filename = "handy.h")]
	[Version (since = "0.0.11")]
	public static bool get_enable_animations (Gtk.Widget widget);
	[CCode (cheader_filename = "handy.h")]
	public static void init ();
}

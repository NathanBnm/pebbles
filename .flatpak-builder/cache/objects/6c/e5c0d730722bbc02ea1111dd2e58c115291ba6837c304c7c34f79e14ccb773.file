/* OverlayBarView.c generated by valac 0.48.14, the Vala compiler
 * generated from OverlayBarView.vala, do not modify */

/* -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-*/
/*-
 * Copyright (c) 2017 elementary LLC. (https://elementary.io)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include "granite.h"

#define TYPE_OVERLAY_BAR_VIEW (overlay_bar_view_get_type ())
#define OVERLAY_BAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_OVERLAY_BAR_VIEW, OverlayBarView))
#define OVERLAY_BAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_OVERLAY_BAR_VIEW, OverlayBarViewClass))
#define IS_OVERLAY_BAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_OVERLAY_BAR_VIEW))
#define IS_OVERLAY_BAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_OVERLAY_BAR_VIEW))
#define OVERLAY_BAR_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_OVERLAY_BAR_VIEW, OverlayBarViewClass))

typedef struct _OverlayBarView OverlayBarView;
typedef struct _OverlayBarViewClass OverlayBarViewClass;
typedef struct _OverlayBarViewPrivate OverlayBarViewPrivate;
enum  {
	OVERLAY_BAR_VIEW_0_PROPERTY,
	OVERLAY_BAR_VIEW_NUM_PROPERTIES
};
static GParamSpec* overlay_bar_view_properties[OVERLAY_BAR_VIEW_NUM_PROPERTIES];
typedef struct _Block10Data Block10Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _OverlayBarView {
	GtkOverlay parent_instance;
	OverlayBarViewPrivate * priv;
};

struct _OverlayBarViewClass {
	GtkOverlayClass parent_class;
};

struct _Block10Data {
	int _ref_count_;
	OverlayBarView* self;
	GtkToggleButton* button;
	GraniteWidgetsOverlayBar* overlaybar;
};

static gpointer overlay_bar_view_parent_class = NULL;

GType overlay_bar_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OverlayBarView, g_object_unref)
OverlayBarView* overlay_bar_view_new (void);
OverlayBarView* overlay_bar_view_construct (GType object_type);
static GObject * overlay_bar_view_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties);
static Block10Data* block10_data_ref (Block10Data* _data10_);
static void block10_data_unref (void * _userdata_);
static void _overlay_bar_view___lambda12_ (Block10Data* _data10_);
static void __overlay_bar_view___lambda12__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                               gpointer self);
static GType overlay_bar_view_get_type_once (void);

OverlayBarView*
overlay_bar_view_construct (GType object_type)
{
	OverlayBarView * self = NULL;
#line 21 "../demo/Views/OverlayBarView.vala"
	self = (OverlayBarView*) g_object_new (object_type, NULL);
#line 21 "../demo/Views/OverlayBarView.vala"
	return self;
#line 87 "OverlayBarView.c"
}

OverlayBarView*
overlay_bar_view_new (void)
{
#line 21 "../demo/Views/OverlayBarView.vala"
	return overlay_bar_view_construct (TYPE_OVERLAY_BAR_VIEW);
#line 95 "OverlayBarView.c"
}

static Block10Data*
block10_data_ref (Block10Data* _data10_)
{
#line 22 "../demo/Views/OverlayBarView.vala"
	g_atomic_int_inc (&_data10_->_ref_count_);
#line 22 "../demo/Views/OverlayBarView.vala"
	return _data10_;
#line 105 "OverlayBarView.c"
}

static void
block10_data_unref (void * _userdata_)
{
	Block10Data* _data10_;
	_data10_ = (Block10Data*) _userdata_;
#line 22 "../demo/Views/OverlayBarView.vala"
	if (g_atomic_int_dec_and_test (&_data10_->_ref_count_)) {
#line 115 "OverlayBarView.c"
		OverlayBarView* self;
#line 22 "../demo/Views/OverlayBarView.vala"
		self = _data10_->self;
#line 22 "../demo/Views/OverlayBarView.vala"
		_g_object_unref0 (_data10_->overlaybar);
#line 22 "../demo/Views/OverlayBarView.vala"
		_g_object_unref0 (_data10_->button);
#line 22 "../demo/Views/OverlayBarView.vala"
		_g_object_unref0 (self);
#line 22 "../demo/Views/OverlayBarView.vala"
		g_slice_free (Block10Data, _data10_);
#line 127 "OverlayBarView.c"
	}
}

static void
_overlay_bar_view___lambda12_ (Block10Data* _data10_)
{
	OverlayBarView* self;
	GraniteWidgetsOverlayBar* _tmp0_;
	GtkToggleButton* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
#line 36 "../demo/Views/OverlayBarView.vala"
	self = _data10_->self;
#line 37 "../demo/Views/OverlayBarView.vala"
	_tmp0_ = _data10_->overlaybar;
#line 37 "../demo/Views/OverlayBarView.vala"
	_tmp1_ = _data10_->button;
#line 37 "../demo/Views/OverlayBarView.vala"
	_tmp2_ = gtk_toggle_button_get_active (_tmp1_);
#line 37 "../demo/Views/OverlayBarView.vala"
	_tmp3_ = _tmp2_;
#line 37 "../demo/Views/OverlayBarView.vala"
	granite_widgets_overlay_bar_set_active (_tmp0_, _tmp3_);
#line 151 "OverlayBarView.c"
}

static void
__overlay_bar_view___lambda12__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                          gpointer self)
{
#line 36 "../demo/Views/OverlayBarView.vala"
	_overlay_bar_view___lambda12_ (self);
#line 160 "OverlayBarView.c"
}

static GObject *
overlay_bar_view_constructor (GType type,
                              guint n_construct_properties,
                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	OverlayBarView * self;
	Block10Data* _data10_;
	GtkToggleButton* _tmp0_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp1_;
	GtkGrid* _tmp2_;
	GtkGrid* _tmp3_;
	GtkGrid* _tmp4_;
	GtkToggleButton* _tmp5_;
	GraniteWidgetsOverlayBar* _tmp6_;
	GraniteWidgetsOverlayBar* _tmp7_;
	GtkGrid* _tmp8_;
	GtkToggleButton* _tmp9_;
#line 22 "../demo/Views/OverlayBarView.vala"
	parent_class = G_OBJECT_CLASS (overlay_bar_view_parent_class);
#line 22 "../demo/Views/OverlayBarView.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 22 "../demo/Views/OverlayBarView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_OVERLAY_BAR_VIEW, OverlayBarView);
#line 22 "../demo/Views/OverlayBarView.vala"
	_data10_ = g_slice_new0 (Block10Data);
#line 22 "../demo/Views/OverlayBarView.vala"
	_data10_->_ref_count_ = 1;
#line 22 "../demo/Views/OverlayBarView.vala"
	_data10_->self = g_object_ref (self);
#line 23 "../demo/Views/OverlayBarView.vala"
	_tmp0_ = (GtkToggleButton*) gtk_toggle_button_new_with_label ("Show Spinner");
#line 23 "../demo/Views/OverlayBarView.vala"
	g_object_ref_sink (_tmp0_);
#line 23 "../demo/Views/OverlayBarView.vala"
	_data10_->button = _tmp0_;
#line 26 "../demo/Views/OverlayBarView.vala"
	_tmp1_ = (GtkGrid*) gtk_grid_new ();
#line 26 "../demo/Views/OverlayBarView.vala"
	g_object_ref_sink (_tmp1_);
#line 26 "../demo/Views/OverlayBarView.vala"
	grid = _tmp1_;
#line 27 "../demo/Views/OverlayBarView.vala"
	_tmp2_ = grid;
#line 27 "../demo/Views/OverlayBarView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 28 "../demo/Views/OverlayBarView.vala"
	_tmp3_ = grid;
#line 28 "../demo/Views/OverlayBarView.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp3_, GTK_ALIGN_CENTER);
#line 29 "../demo/Views/OverlayBarView.vala"
	_tmp4_ = grid;
#line 29 "../demo/Views/OverlayBarView.vala"
	_tmp5_ = _data10_->button;
#line 29 "../demo/Views/OverlayBarView.vala"
	gtk_container_add ((GtkContainer*) _tmp4_, (GtkWidget*) _tmp5_);
#line 31 "../demo/Views/OverlayBarView.vala"
	_tmp6_ = granite_widgets_overlay_bar_new ((GtkOverlay*) self);
#line 31 "../demo/Views/OverlayBarView.vala"
	g_object_ref_sink (_tmp6_);
#line 31 "../demo/Views/OverlayBarView.vala"
	_data10_->overlaybar = _tmp6_;
#line 32 "../demo/Views/OverlayBarView.vala"
	_tmp7_ = _data10_->overlaybar;
#line 32 "../demo/Views/OverlayBarView.vala"
	granite_widgets_overlay_bar_set_label (_tmp7_, "Hover the OverlayBar to change its position");
#line 34 "../demo/Views/OverlayBarView.vala"
	_tmp8_ = grid;
#line 34 "../demo/Views/OverlayBarView.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp8_);
#line 36 "../demo/Views/OverlayBarView.vala"
	_tmp9_ = _data10_->button;
#line 36 "../demo/Views/OverlayBarView.vala"
	g_signal_connect_data (_tmp9_, "toggled", (GCallback) __overlay_bar_view___lambda12__gtk_toggle_button_toggled, block10_data_ref (_data10_), (GClosureNotify) block10_data_unref, 0);
#line 22 "../demo/Views/OverlayBarView.vala"
	_g_object_unref0 (grid);
#line 22 "../demo/Views/OverlayBarView.vala"
	block10_data_unref (_data10_);
#line 22 "../demo/Views/OverlayBarView.vala"
	_data10_ = NULL;
#line 22 "../demo/Views/OverlayBarView.vala"
	return obj;
#line 247 "OverlayBarView.c"
}

static void
overlay_bar_view_class_init (OverlayBarViewClass * klass,
                             gpointer klass_data)
{
#line 21 "../demo/Views/OverlayBarView.vala"
	overlay_bar_view_parent_class = g_type_class_peek_parent (klass);
#line 21 "../demo/Views/OverlayBarView.vala"
	G_OBJECT_CLASS (klass)->constructor = overlay_bar_view_constructor;
#line 258 "OverlayBarView.c"
}

static void
overlay_bar_view_instance_init (OverlayBarView * self,
                                gpointer klass)
{
}

static GType
overlay_bar_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (OverlayBarViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) overlay_bar_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (OverlayBarView), 0, (GInstanceInitFunc) overlay_bar_view_instance_init, NULL };
	GType overlay_bar_view_type_id;
	overlay_bar_view_type_id = g_type_register_static (gtk_overlay_get_type (), "OverlayBarView", &g_define_type_info, 0);
	return overlay_bar_view_type_id;
}

GType
overlay_bar_view_get_type (void)
{
	static volatile gsize overlay_bar_view_type_id__volatile = 0;
	if (g_once_init_enter (&overlay_bar_view_type_id__volatile)) {
		GType overlay_bar_view_type_id;
		overlay_bar_view_type_id = overlay_bar_view_get_type_once ();
		g_once_init_leave (&overlay_bar_view_type_id__volatile, overlay_bar_view_type_id);
	}
	return overlay_bar_view_type_id__volatile;
}


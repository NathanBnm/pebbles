/* CollapsiblePaned.c generated by valac 0.48.14, the Vala compiler
 * generated from CollapsiblePaned.vala, do not modify */

/*
 *  Copyright (C) 2011-2013 Mathijs Henquet
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <gtk/gtk.h>
#include <glib.h>
#include <gdk/gdk.h>

typedef enum  {
	GRANITE_COLLAPSE_MODE_NONE = 0,
	GRANITE_COLLAPSE_MODE_LEFT = 1,
	GRANITE_COLLAPSE_MODE_TOP = 1,
	GRANITE_COLLAPSE_MODE_FIRST = 1,
	GRANITE_COLLAPSE_MODE_RIGHT = 2,
	GRANITE_COLLAPSE_MODE_BOTTOM = 2,
	GRANITE_COLLAPSE_MODE_LAST = 2
} GraniteCollapseMode;

#define GRANITE_TYPE_COLLAPSE_MODE (granite_collapse_mode_get_type ())

#define GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED (granite_widgets_collapsible_paned_get_type ())
#define GRANITE_WIDGETS_COLLAPSIBLE_PANED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, GraniteWidgetsCollapsiblePaned))
#define GRANITE_WIDGETS_COLLAPSIBLE_PANED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, GraniteWidgetsCollapsiblePanedClass))
#define GRANITE_WIDGETS_IS_COLLAPSIBLE_PANED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED))
#define GRANITE_WIDGETS_IS_COLLAPSIBLE_PANED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED))
#define GRANITE_WIDGETS_COLLAPSIBLE_PANED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, GraniteWidgetsCollapsiblePanedClass))

typedef struct _GraniteWidgetsCollapsiblePaned GraniteWidgetsCollapsiblePaned;
typedef struct _GraniteWidgetsCollapsiblePanedClass GraniteWidgetsCollapsiblePanedClass;
typedef struct _GraniteWidgetsCollapsiblePanedPrivate GraniteWidgetsCollapsiblePanedPrivate;
enum  {
	GRANITE_WIDGETS_COLLAPSIBLE_PANED_0_PROPERTY,
	GRANITE_WIDGETS_COLLAPSIBLE_PANED_COLLAPSE_MODE_PROPERTY,
	GRANITE_WIDGETS_COLLAPSIBLE_PANED_NUM_PROPERTIES
};
static GParamSpec* granite_widgets_collapsible_paned_properties[GRANITE_WIDGETS_COLLAPSIBLE_PANED_NUM_PROPERTIES];

struct _GraniteWidgetsCollapsiblePaned {
	GtkPaned parent_instance;
	GraniteWidgetsCollapsiblePanedPrivate * priv;
};

struct _GraniteWidgetsCollapsiblePanedClass {
	GtkPanedClass parent_class;
};

struct _GraniteWidgetsCollapsiblePanedPrivate {
	GraniteCollapseMode _collapse_mode;
	gint saved_state;
	guint last_click_time;
};

static gint GraniteWidgetsCollapsiblePaned_private_offset;
static gpointer granite_widgets_collapsible_paned_parent_class = NULL;

GType granite_collapse_mode_get_type (void) G_GNUC_CONST;
GType granite_widgets_collapsible_paned_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsCollapsiblePaned, g_object_unref)
GraniteCollapseMode granite_widgets_collapsible_paned_get_collapse_mode (GraniteWidgetsCollapsiblePaned* self);
void granite_widgets_collapsible_paned_set_collapse_mode (GraniteWidgetsCollapsiblePaned* self,
                                                          GraniteCollapseMode value);
GraniteWidgetsCollapsiblePaned* granite_widgets_collapsible_paned_new (GtkOrientation orientation);
GraniteWidgetsCollapsiblePaned* granite_widgets_collapsible_paned_construct (GType object_type,
                                                                             GtkOrientation orientation);
static gboolean granite_widgets_collapsible_paned_detect_toggle (GraniteWidgetsCollapsiblePaned* self,
                                                          GdkEventButton* event);
static GObject * granite_widgets_collapsible_paned_constructor (GType type,
                                                         guint n_construct_properties,
                                                         GObjectConstructParam * construct_properties);
static gboolean _granite_widgets_collapsible_paned_detect_toggle_gtk_widget_button_press_event (GtkWidget* _sender,
                                                                                         GdkEventButton* event,
                                                                                         gpointer self);
static void granite_widgets_collapsible_paned_finalize (GObject * obj);
static GType granite_widgets_collapsible_paned_get_type_once (void);
static void _vala_granite_widgets_collapsible_paned_get_property (GObject * object,
                                                           guint property_id,
                                                           GValue * value,
                                                           GParamSpec * pspec);
static void _vala_granite_widgets_collapsible_paned_set_property (GObject * object,
                                                           guint property_id,
                                                           const GValue * value,
                                                           GParamSpec * pspec);

static GType
granite_collapse_mode_get_type_once (void)
{
	static const GEnumValue values[] = {{GRANITE_COLLAPSE_MODE_NONE, "GRANITE_COLLAPSE_MODE_NONE", "none"}, {GRANITE_COLLAPSE_MODE_LEFT, "GRANITE_COLLAPSE_MODE_LEFT", "left"}, {GRANITE_COLLAPSE_MODE_TOP, "GRANITE_COLLAPSE_MODE_TOP", "top"}, {GRANITE_COLLAPSE_MODE_FIRST, "GRANITE_COLLAPSE_MODE_FIRST", "first"}, {GRANITE_COLLAPSE_MODE_RIGHT, "GRANITE_COLLAPSE_MODE_RIGHT", "right"}, {GRANITE_COLLAPSE_MODE_BOTTOM, "GRANITE_COLLAPSE_MODE_BOTTOM", "bottom"}, {GRANITE_COLLAPSE_MODE_LAST, "GRANITE_COLLAPSE_MODE_LAST", "last"}, {0, NULL, NULL}};
	GType granite_collapse_mode_type_id;
	granite_collapse_mode_type_id = g_enum_register_static ("GraniteCollapseMode", values);
	return granite_collapse_mode_type_id;
}

GType
granite_collapse_mode_get_type (void)
{
	static volatile gsize granite_collapse_mode_type_id__volatile = 0;
	if (g_once_init_enter (&granite_collapse_mode_type_id__volatile)) {
		GType granite_collapse_mode_type_id;
		granite_collapse_mode_type_id = granite_collapse_mode_get_type_once ();
		g_once_init_leave (&granite_collapse_mode_type_id__volatile, granite_collapse_mode_type_id);
	}
	return granite_collapse_mode_type_id__volatile;
}

static inline gpointer
granite_widgets_collapsible_paned_get_instance_private (GraniteWidgetsCollapsiblePaned* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteWidgetsCollapsiblePaned_private_offset);
}

GraniteCollapseMode
granite_widgets_collapsible_paned_get_collapse_mode (GraniteWidgetsCollapsiblePaned* self)
{
	GraniteCollapseMode result;
	GraniteCollapseMode _tmp0_;
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	_tmp0_ = self->priv->_collapse_mode;
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	result = _tmp0_;
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	return result;
#line 144 "CollapsiblePaned.c"
}

void
granite_widgets_collapsible_paned_set_collapse_mode (GraniteWidgetsCollapsiblePaned* self,
                                                     GraniteCollapseMode value)
{
	GraniteCollapseMode old_value;
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	g_return_if_fail (self != NULL);
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	old_value = granite_widgets_collapsible_paned_get_collapse_mode (self);
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	if (old_value != value) {
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
		self->priv->_collapse_mode = value;
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_widgets_collapsible_paned_properties[GRANITE_WIDGETS_COLLAPSIBLE_PANED_COLLAPSE_MODE_PROPERTY]);
#line 162 "CollapsiblePaned.c"
	}
}

GraniteWidgetsCollapsiblePaned*
granite_widgets_collapsible_paned_construct (GType object_type,
                                             GtkOrientation orientation)
{
	GraniteWidgetsCollapsiblePaned * self = NULL;
#line 45 "../lib/Widgets/CollapsiblePaned.vala"
	self = (GraniteWidgetsCollapsiblePaned*) g_object_new (object_type, NULL);
#line 46 "../lib/Widgets/CollapsiblePaned.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) self, orientation);
#line 45 "../lib/Widgets/CollapsiblePaned.vala"
	return self;
#line 177 "CollapsiblePaned.c"
}

GraniteWidgetsCollapsiblePaned*
granite_widgets_collapsible_paned_new (GtkOrientation orientation)
{
#line 45 "../lib/Widgets/CollapsiblePaned.vala"
	return granite_widgets_collapsible_paned_construct (GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, orientation);
#line 185 "CollapsiblePaned.c"
}

static gboolean
granite_widgets_collapsible_paned_detect_toggle (GraniteWidgetsCollapsiblePaned* self,
                                                 GdkEventButton* event)
{
	GraniteCollapseMode _tmp0_;
	gboolean _tmp1_ = FALSE;
	GtkSettings* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	gboolean _tmp6_ = FALSE;
	GdkEventType _tmp7_;
	gboolean result = FALSE;
#line 53 "../lib/Widgets/CollapsiblePaned.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 53 "../lib/Widgets/CollapsiblePaned.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 54 "../lib/Widgets/CollapsiblePaned.vala"
	_tmp0_ = self->priv->_collapse_mode;
#line 54 "../lib/Widgets/CollapsiblePaned.vala"
	if (_tmp0_ == GRANITE_COLLAPSE_MODE_NONE) {
#line 55 "../lib/Widgets/CollapsiblePaned.vala"
		result = FALSE;
#line 55 "../lib/Widgets/CollapsiblePaned.vala"
		return result;
#line 212 "CollapsiblePaned.c"
	}
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
	_tmp2_ = gtk_settings_get_default ();
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
	g_object_get (_tmp2_, "gtk-double-click-time", &_tmp3_, NULL);
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
	_tmp4_ = _tmp3_;
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
	if (event->time < ((guint32) (self->priv->last_click_time + _tmp4_))) {
#line 222 "CollapsiblePaned.c"
		GdkEventType _tmp5_;
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp5_ = event->type;
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp1_ = _tmp5_ != GDK_2BUTTON_PRESS;
#line 228 "CollapsiblePaned.c"
	} else {
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp1_ = FALSE;
#line 232 "CollapsiblePaned.c"
	}
#line 57 "../lib/Widgets/CollapsiblePaned.vala"
	if (_tmp1_) {
#line 58 "../lib/Widgets/CollapsiblePaned.vala"
		result = TRUE;
#line 58 "../lib/Widgets/CollapsiblePaned.vala"
		return result;
#line 240 "CollapsiblePaned.c"
	}
#line 60 "../lib/Widgets/CollapsiblePaned.vala"
	_tmp7_ = event->type;
#line 60 "../lib/Widgets/CollapsiblePaned.vala"
	if (_tmp7_ == GDK_2BUTTON_PRESS) {
#line 246 "CollapsiblePaned.c"
		GdkWindow* _tmp8_;
		GdkWindow* _tmp9_;
#line 60 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp8_ = event->window;
#line 60 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp9_ = gtk_paned_get_handle_window ((GtkPaned*) self);
#line 60 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp6_ = _tmp8_ == _tmp9_;
#line 255 "CollapsiblePaned.c"
	} else {
#line 60 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp6_ = FALSE;
#line 259 "CollapsiblePaned.c"
	}
#line 60 "../lib/Widgets/CollapsiblePaned.vala"
	if (_tmp6_) {
#line 263 "CollapsiblePaned.c"
		gboolean _tmp10_ = FALSE;
		gint current_position = 0;
		GraniteCollapseMode _tmp11_;
		gint requested_position = 0;
		GraniteCollapseMode _tmp14_;
#line 61 "../lib/Widgets/CollapsiblePaned.vala"
		g_signal_emit_by_name ((GtkPaned*) self, "accept-position", &_tmp10_);
#line 63 "../lib/Widgets/CollapsiblePaned.vala"
		current_position = gtk_paned_get_position ((GtkPaned*) self);
#line 65 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp11_ = self->priv->_collapse_mode;
#line 65 "../lib/Widgets/CollapsiblePaned.vala"
		if (_tmp11_ == GRANITE_COLLAPSE_MODE_LAST) {
#line 277 "CollapsiblePaned.c"
			gint _tmp12_;
			gint _tmp13_;
#line 66 "../lib/Widgets/CollapsiblePaned.vala"
			g_object_get ((GtkPaned*) self, "max-position", &_tmp12_, NULL);
#line 66 "../lib/Widgets/CollapsiblePaned.vala"
			_tmp13_ = _tmp12_;
#line 66 "../lib/Widgets/CollapsiblePaned.vala"
			current_position = _tmp13_ - current_position;
#line 286 "CollapsiblePaned.c"
		}
#line 69 "../lib/Widgets/CollapsiblePaned.vala"
		if (current_position == 0) {
#line 70 "../lib/Widgets/CollapsiblePaned.vala"
			g_debug ("CollapsiblePaned.vala:70: [CollapsablePaned] expand");
#line 72 "../lib/Widgets/CollapsiblePaned.vala"
			requested_position = self->priv->saved_state;
#line 294 "CollapsiblePaned.c"
		} else {
#line 74 "../lib/Widgets/CollapsiblePaned.vala"
			self->priv->saved_state = current_position;
#line 75 "../lib/Widgets/CollapsiblePaned.vala"
			g_debug ("CollapsiblePaned.vala:75: [CollapsablePaned] shrink");
#line 77 "../lib/Widgets/CollapsiblePaned.vala"
			requested_position = 0;
#line 302 "CollapsiblePaned.c"
		}
#line 80 "../lib/Widgets/CollapsiblePaned.vala"
		_tmp14_ = self->priv->_collapse_mode;
#line 80 "../lib/Widgets/CollapsiblePaned.vala"
		if (_tmp14_ == GRANITE_COLLAPSE_MODE_LAST) {
#line 308 "CollapsiblePaned.c"
			gint _tmp15_;
			gint _tmp16_;
#line 81 "../lib/Widgets/CollapsiblePaned.vala"
			g_object_get ((GtkPaned*) self, "max-position", &_tmp15_, NULL);
#line 81 "../lib/Widgets/CollapsiblePaned.vala"
			_tmp16_ = _tmp15_;
#line 81 "../lib/Widgets/CollapsiblePaned.vala"
			requested_position = _tmp16_ - requested_position;
#line 317 "CollapsiblePaned.c"
		}
#line 83 "../lib/Widgets/CollapsiblePaned.vala"
		gtk_paned_set_position ((GtkPaned*) self, requested_position);
#line 85 "../lib/Widgets/CollapsiblePaned.vala"
		result = TRUE;
#line 85 "../lib/Widgets/CollapsiblePaned.vala"
		return result;
#line 325 "CollapsiblePaned.c"
	}
#line 88 "../lib/Widgets/CollapsiblePaned.vala"
	self->priv->last_click_time = (guint) event->time;
#line 90 "../lib/Widgets/CollapsiblePaned.vala"
	result = FALSE;
#line 90 "../lib/Widgets/CollapsiblePaned.vala"
	return result;
#line 333 "CollapsiblePaned.c"
}

static gboolean
_granite_widgets_collapsible_paned_detect_toggle_gtk_widget_button_press_event (GtkWidget* _sender,
                                                                                GdkEventButton* event,
                                                                                gpointer self)
{
	gboolean result;
	result = granite_widgets_collapsible_paned_detect_toggle ((GraniteWidgetsCollapsiblePaned*) self, event);
#line 50 "../lib/Widgets/CollapsiblePaned.vala"
	return result;
#line 345 "CollapsiblePaned.c"
}

static GObject *
granite_widgets_collapsible_paned_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteWidgetsCollapsiblePaned * self;
#line 49 "../lib/Widgets/CollapsiblePaned.vala"
	parent_class = G_OBJECT_CLASS (granite_widgets_collapsible_paned_parent_class);
#line 49 "../lib/Widgets/CollapsiblePaned.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 49 "../lib/Widgets/CollapsiblePaned.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, GraniteWidgetsCollapsiblePaned);
#line 50 "../lib/Widgets/CollapsiblePaned.vala"
	g_signal_connect_object ((GtkWidget*) self, "button-press-event", (GCallback) _granite_widgets_collapsible_paned_detect_toggle_gtk_widget_button_press_event, self, 0);
#line 49 "../lib/Widgets/CollapsiblePaned.vala"
	return obj;
#line 366 "CollapsiblePaned.c"
}

static void
granite_widgets_collapsible_paned_class_init (GraniteWidgetsCollapsiblePanedClass * klass,
                                              gpointer klass_data)
{
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	granite_widgets_collapsible_paned_parent_class = g_type_class_peek_parent (klass);
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	g_type_class_adjust_private_offset (klass, &GraniteWidgetsCollapsiblePaned_private_offset);
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_widgets_collapsible_paned_get_property;
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_widgets_collapsible_paned_set_property;
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_widgets_collapsible_paned_constructor;
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_widgets_collapsible_paned_finalize;
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_COLLAPSIBLE_PANED_COLLAPSE_MODE_PROPERTY, granite_widgets_collapsible_paned_properties[GRANITE_WIDGETS_COLLAPSIBLE_PANED_COLLAPSE_MODE_PROPERTY] = g_param_spec_enum ("collapse-mode", "collapse-mode", "collapse-mode", GRANITE_TYPE_COLLAPSE_MODE, GRANITE_COLLAPSE_MODE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 387 "CollapsiblePaned.c"
}

static void
granite_widgets_collapsible_paned_instance_init (GraniteWidgetsCollapsiblePaned * self,
                                                 gpointer klass)
{
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	self->priv = granite_widgets_collapsible_paned_get_instance_private (self);
#line 38 "../lib/Widgets/CollapsiblePaned.vala"
	self->priv->_collapse_mode = GRANITE_COLLAPSE_MODE_NONE;
#line 42 "../lib/Widgets/CollapsiblePaned.vala"
	self->priv->saved_state = 10;
#line 43 "../lib/Widgets/CollapsiblePaned.vala"
	self->priv->last_click_time = (guint) 0;
#line 402 "CollapsiblePaned.c"
}

static void
granite_widgets_collapsible_paned_finalize (GObject * obj)
{
	GraniteWidgetsCollapsiblePaned * self;
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, GraniteWidgetsCollapsiblePaned);
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	G_OBJECT_CLASS (granite_widgets_collapsible_paned_parent_class)->finalize (obj);
#line 413 "CollapsiblePaned.c"
}

/**
     * A paned that can be easily collapsed by double-clicking over the pane separator.
     * If it was previously collapsed, it is expanded, and vice-versa.
     */
static GType
granite_widgets_collapsible_paned_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteWidgetsCollapsiblePanedClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_widgets_collapsible_paned_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteWidgetsCollapsiblePaned), 0, (GInstanceInitFunc) granite_widgets_collapsible_paned_instance_init, NULL };
	GType granite_widgets_collapsible_paned_type_id;
	granite_widgets_collapsible_paned_type_id = g_type_register_static (gtk_paned_get_type (), "GraniteWidgetsCollapsiblePaned", &g_define_type_info, 0);
	GraniteWidgetsCollapsiblePaned_private_offset = g_type_add_instance_private (granite_widgets_collapsible_paned_type_id, sizeof (GraniteWidgetsCollapsiblePanedPrivate));
	return granite_widgets_collapsible_paned_type_id;
}

GType
granite_widgets_collapsible_paned_get_type (void)
{
	static volatile gsize granite_widgets_collapsible_paned_type_id__volatile = 0;
	if (g_once_init_enter (&granite_widgets_collapsible_paned_type_id__volatile)) {
		GType granite_widgets_collapsible_paned_type_id;
		granite_widgets_collapsible_paned_type_id = granite_widgets_collapsible_paned_get_type_once ();
		g_once_init_leave (&granite_widgets_collapsible_paned_type_id__volatile, granite_widgets_collapsible_paned_type_id);
	}
	return granite_widgets_collapsible_paned_type_id__volatile;
}

static void
_vala_granite_widgets_collapsible_paned_get_property (GObject * object,
                                                      guint property_id,
                                                      GValue * value,
                                                      GParamSpec * pspec)
{
	GraniteWidgetsCollapsiblePaned * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, GraniteWidgetsCollapsiblePaned);
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	switch (property_id) {
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		case GRANITE_WIDGETS_COLLAPSIBLE_PANED_COLLAPSE_MODE_PROPERTY:
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		g_value_set_enum (value, granite_widgets_collapsible_paned_get_collapse_mode (self));
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		break;
#line 458 "CollapsiblePaned.c"
		default:
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		break;
#line 464 "CollapsiblePaned.c"
	}
}

static void
_vala_granite_widgets_collapsible_paned_set_property (GObject * object,
                                                      guint property_id,
                                                      const GValue * value,
                                                      GParamSpec * pspec)
{
	GraniteWidgetsCollapsiblePaned * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_COLLAPSIBLE_PANED, GraniteWidgetsCollapsiblePaned);
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
	switch (property_id) {
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		case GRANITE_WIDGETS_COLLAPSIBLE_PANED_COLLAPSE_MODE_PROPERTY:
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		granite_widgets_collapsible_paned_set_collapse_mode (self, g_value_get_enum (value));
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		break;
#line 484 "CollapsiblePaned.c"
		default:
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 37 "../lib/Widgets/CollapsiblePaned.vala"
		break;
#line 490 "CollapsiblePaned.c"
	}
}


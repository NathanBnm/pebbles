/* Utilities.c generated by valac 0.48.14, the Vala compiler
 * generated from Utilities.vala, do not modify */

/*
 *  Copyright 2019 elementary, Inc. (https://elementary.io)
 *            2011-2013 Maxwell Barvian <maxwell@elementaryos.org>,
 *            Robert Dyer
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <cairo-gobject.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <gdk-pixbuf/gdk-pixbuf.h>

#define GRANITE_DRAWING_TYPE_UTILITIES (granite_drawing_utilities_get_type ())
#define GRANITE_DRAWING_UTILITIES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_DRAWING_TYPE_UTILITIES, GraniteDrawingUtilities))
#define GRANITE_DRAWING_UTILITIES_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_DRAWING_TYPE_UTILITIES, GraniteDrawingUtilitiesClass))
#define GRANITE_DRAWING_IS_UTILITIES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_DRAWING_TYPE_UTILITIES))
#define GRANITE_DRAWING_IS_UTILITIES_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_DRAWING_TYPE_UTILITIES))
#define GRANITE_DRAWING_UTILITIES_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_DRAWING_TYPE_UTILITIES, GraniteDrawingUtilitiesClass))

typedef struct _GraniteDrawingUtilities GraniteDrawingUtilities;
typedef struct _GraniteDrawingUtilitiesClass GraniteDrawingUtilitiesClass;
typedef struct _GraniteDrawingUtilitiesPrivate GraniteDrawingUtilitiesPrivate;
enum  {
	GRANITE_DRAWING_UTILITIES_0_PROPERTY,
	GRANITE_DRAWING_UTILITIES_NUM_PROPERTIES
};
static GParamSpec* granite_drawing_utilities_properties[GRANITE_DRAWING_UTILITIES_NUM_PROPERTIES];

#define GRANITE_DRAWING_TYPE_COLOR (granite_drawing_color_get_type ())
#define GRANITE_DRAWING_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_DRAWING_TYPE_COLOR, GraniteDrawingColor))
#define GRANITE_DRAWING_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_DRAWING_TYPE_COLOR, GraniteDrawingColorClass))
#define GRANITE_DRAWING_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_DRAWING_TYPE_COLOR))
#define GRANITE_DRAWING_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_DRAWING_TYPE_COLOR))
#define GRANITE_DRAWING_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_DRAWING_TYPE_COLOR, GraniteDrawingColorClass))

typedef struct _GraniteDrawingColor GraniteDrawingColor;
typedef struct _GraniteDrawingColorClass GraniteDrawingColorClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _GraniteDrawingUtilities {
	GObject parent_instance;
	GraniteDrawingUtilitiesPrivate * priv;
};

struct _GraniteDrawingUtilitiesClass {
	GObjectClass parent_class;
};

static gpointer granite_drawing_utilities_parent_class = NULL;

GType granite_drawing_utilities_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteDrawingUtilities, g_object_unref)
void granite_drawing_utilities_cairo_rounded_rectangle (cairo_t* cr,
                                                        gdouble x,
                                                        gdouble y,
                                                        gdouble width,
                                                        gdouble height,
                                                        gdouble radius);
GType granite_drawing_color_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteDrawingColor, g_object_unref)
GraniteDrawingColor* granite_drawing_utilities_average_color (GdkPixbuf* source);
GraniteDrawingColor* granite_drawing_color_new (gdouble R,
                                                gdouble G,
                                                gdouble B,
                                                gdouble A);
GraniteDrawingColor* granite_drawing_color_construct (GType object_type,
                                                      gdouble R,
                                                      gdouble G,
                                                      gdouble B,
                                                      gdouble A);
GraniteDrawingColor* granite_drawing_color_set_val (GraniteDrawingColor* self,
                                                    gdouble val);
GraniteDrawingColor* granite_drawing_color_multiply_sat (GraniteDrawingColor* self,
                                                         gdouble amount);
GraniteDrawingUtilities* granite_drawing_utilities_new (void);
GraniteDrawingUtilities* granite_drawing_utilities_construct (GType object_type);
static GType granite_drawing_utilities_get_type_once (void);

/**
     * Adds a closed sub-path rounded rectangle of the given size and border radius to the current path
     * at position (x, y) in user-space coordinates.
     *
     * @param cr a {@link Cairo.Context}
     * @param x the X coordinate of the top left corner of the rounded rectangle
     * @param y the Y coordinate to the top left corner of the rounded rectangle
     * @param width the width of the rounded rectangle
     * @param height the height of the rounded rectangle
     * @param radius the border radius of the rounded rectangle
     */
void
granite_drawing_utilities_cairo_rounded_rectangle (cairo_t* cr,
                                                   gdouble x,
                                                   gdouble y,
                                                   gdouble width,
                                                   gdouble height,
                                                   gdouble radius)
{
#line 38 "../lib/Drawing/Utilities.vala"
	g_return_if_fail (cr != NULL);
#line 46 "../lib/Drawing/Utilities.vala"
	cairo_move_to (cr, x + radius, y);
#line 47 "../lib/Drawing/Utilities.vala"
	cairo_arc (cr, (x + width) - radius, y + radius, radius, G_PI * 1.5, G_PI * 2);
#line 48 "../lib/Drawing/Utilities.vala"
	cairo_arc (cr, (x + width) - radius, (y + height) - radius, radius, (gdouble) 0, G_PI * 0.5);
#line 49 "../lib/Drawing/Utilities.vala"
	cairo_arc (cr, x + radius, (y + height) - radius, radius, G_PI * 0.5, G_PI);
#line 50 "../lib/Drawing/Utilities.vala"
	cairo_arc (cr, x + radius, y + radius, radius, G_PI, G_PI * 1.5);
#line 51 "../lib/Drawing/Utilities.vala"
	cairo_close_path (cr);
#line 132 "Utilities.c"
}

/**
     * Averages the colors in the {@link Gdk.Pixbuf} and returns it.
     *
     * @param source the {@link Gdk.Pixbuf}
     *
     * @return the {@link Granite.Drawing.Color} containing the averaged color
     */
GraniteDrawingColor*
granite_drawing_utilities_average_color (GdkPixbuf* source)
{
	gdouble r_total = 0.0;
	gdouble g_total = 0.0;
	gdouble b_total = 0.0;
	guint8* data_ptr = NULL;
	guint8* _tmp0_;
	gdouble pixels = 0.0;
	gint _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	GraniteDrawingColor* _tmp19_;
	GraniteDrawingColor* _tmp20_;
	GraniteDrawingColor* _tmp21_;
	GraniteDrawingColor* _tmp22_;
	GraniteDrawingColor* _tmp23_;
	GraniteDrawingColor* _tmp24_;
	GraniteDrawingColor* result = NULL;
#line 61 "../lib/Drawing/Utilities.vala"
	g_return_val_if_fail (source != NULL, NULL);
#line 62 "../lib/Drawing/Utilities.vala"
	r_total = 0.0;
#line 63 "../lib/Drawing/Utilities.vala"
	g_total = 0.0;
#line 64 "../lib/Drawing/Utilities.vala"
	b_total = 0.0;
#line 66 "../lib/Drawing/Utilities.vala"
	_tmp0_ = gdk_pixbuf_get_pixels (source);
#line 66 "../lib/Drawing/Utilities.vala"
	data_ptr = _tmp0_;
#line 67 "../lib/Drawing/Utilities.vala"
	_tmp1_ = gdk_pixbuf_get_height (source);
#line 67 "../lib/Drawing/Utilities.vala"
	_tmp2_ = _tmp1_;
#line 67 "../lib/Drawing/Utilities.vala"
	_tmp3_ = gdk_pixbuf_get_rowstride (source);
#line 67 "../lib/Drawing/Utilities.vala"
	_tmp4_ = _tmp3_;
#line 67 "../lib/Drawing/Utilities.vala"
	_tmp5_ = gdk_pixbuf_get_n_channels (source);
#line 67 "../lib/Drawing/Utilities.vala"
	_tmp6_ = _tmp5_;
#line 67 "../lib/Drawing/Utilities.vala"
	pixels = (gdouble) ((_tmp2_ * _tmp4_) / _tmp6_);
#line 190 "Utilities.c"
	{
		gint i = 0;
#line 69 "../lib/Drawing/Utilities.vala"
		i = 0;
#line 195 "Utilities.c"
		{
			gboolean _tmp7_ = FALSE;
#line 69 "../lib/Drawing/Utilities.vala"
			_tmp7_ = TRUE;
#line 69 "../lib/Drawing/Utilities.vala"
			while (TRUE) {
#line 202 "Utilities.c"
				guint8 r = 0U;
				guint8* _tmp9_;
				guint8 _tmp10_;
				guint8 g = 0U;
				guint8* _tmp11_;
				guint8 _tmp12_;
				guint8 b = 0U;
				guint8* _tmp13_;
				guint8 _tmp14_;
				guint8 max = 0U;
				guint8 min = 0U;
				gdouble delta = 0.0;
				gdouble _tmp15_ = 0.0;
				gdouble sat = 0.0;
				gdouble score = 0.0;
				guint8* _tmp16_;
				gint _tmp17_;
				gint _tmp18_;
#line 69 "../lib/Drawing/Utilities.vala"
				if (!_tmp7_) {
#line 223 "Utilities.c"
					gint _tmp8_;
#line 69 "../lib/Drawing/Utilities.vala"
					_tmp8_ = i;
#line 69 "../lib/Drawing/Utilities.vala"
					i = _tmp8_ + 1;
#line 229 "Utilities.c"
				}
#line 69 "../lib/Drawing/Utilities.vala"
				_tmp7_ = FALSE;
#line 69 "../lib/Drawing/Utilities.vala"
				if (!(((gdouble) i) < pixels)) {
#line 69 "../lib/Drawing/Utilities.vala"
					break;
#line 237 "Utilities.c"
				}
#line 70 "../lib/Drawing/Utilities.vala"
				_tmp9_ = data_ptr;
#line 70 "../lib/Drawing/Utilities.vala"
				_tmp10_ = _tmp9_[0];
#line 70 "../lib/Drawing/Utilities.vala"
				r = _tmp10_;
#line 71 "../lib/Drawing/Utilities.vala"
				_tmp11_ = data_ptr;
#line 71 "../lib/Drawing/Utilities.vala"
				_tmp12_ = _tmp11_[1];
#line 71 "../lib/Drawing/Utilities.vala"
				g = _tmp12_;
#line 72 "../lib/Drawing/Utilities.vala"
				_tmp13_ = data_ptr;
#line 72 "../lib/Drawing/Utilities.vala"
				_tmp14_ = _tmp13_[2];
#line 72 "../lib/Drawing/Utilities.vala"
				b = _tmp14_;
#line 74 "../lib/Drawing/Utilities.vala"
				max = (guint8) MAX ((gdouble) r, MAX ((gdouble) g, (gdouble) b));
#line 75 "../lib/Drawing/Utilities.vala"
				min = (guint8) MIN ((gdouble) r, MIN ((gdouble) g, (gdouble) b));
#line 76 "../lib/Drawing/Utilities.vala"
				delta = (gdouble) (max - min);
#line 78 "../lib/Drawing/Utilities.vala"
				if (delta == ((gdouble) 0)) {
#line 78 "../lib/Drawing/Utilities.vala"
					_tmp15_ = 0.0;
#line 267 "Utilities.c"
				} else {
#line 78 "../lib/Drawing/Utilities.vala"
					_tmp15_ = delta / max;
#line 271 "Utilities.c"
				}
#line 78 "../lib/Drawing/Utilities.vala"
				sat = _tmp15_;
#line 79 "../lib/Drawing/Utilities.vala"
				score = 0.2 + (0.8 * sat);
#line 81 "../lib/Drawing/Utilities.vala"
				r_total += r * score;
#line 82 "../lib/Drawing/Utilities.vala"
				g_total += g * score;
#line 83 "../lib/Drawing/Utilities.vala"
				b_total += b * score;
#line 85 "../lib/Drawing/Utilities.vala"
				_tmp16_ = data_ptr;
#line 85 "../lib/Drawing/Utilities.vala"
				_tmp17_ = gdk_pixbuf_get_n_channels (source);
#line 85 "../lib/Drawing/Utilities.vala"
				_tmp18_ = _tmp17_;
#line 85 "../lib/Drawing/Utilities.vala"
				data_ptr = _tmp16_ + _tmp18_;
#line 291 "Utilities.c"
			}
		}
	}
#line 88 "../lib/Drawing/Utilities.vala"
	_tmp19_ = granite_drawing_color_new ((r_total / G_MAXUINT8) / pixels, (g_total / G_MAXUINT8) / pixels, (b_total / G_MAXUINT8) / pixels, (gdouble) 1);
#line 88 "../lib/Drawing/Utilities.vala"
	_tmp20_ = _tmp19_;
#line 88 "../lib/Drawing/Utilities.vala"
	_tmp21_ = granite_drawing_color_set_val (_tmp20_, 0.8);
#line 88 "../lib/Drawing/Utilities.vala"
	_tmp22_ = _tmp21_;
#line 88 "../lib/Drawing/Utilities.vala"
	_tmp23_ = granite_drawing_color_multiply_sat (_tmp22_, 1.15);
#line 88 "../lib/Drawing/Utilities.vala"
	_tmp24_ = _tmp23_;
#line 88 "../lib/Drawing/Utilities.vala"
	_g_object_unref0 (_tmp22_);
#line 88 "../lib/Drawing/Utilities.vala"
	_g_object_unref0 (_tmp20_);
#line 88 "../lib/Drawing/Utilities.vala"
	result = _tmp24_;
#line 88 "../lib/Drawing/Utilities.vala"
	return result;
#line 315 "Utilities.c"
}

GraniteDrawingUtilities*
granite_drawing_utilities_construct (GType object_type)
{
	GraniteDrawingUtilities * self = NULL;
#line 25 "../lib/Drawing/Utilities.vala"
	self = (GraniteDrawingUtilities*) g_object_new (object_type, NULL);
#line 25 "../lib/Drawing/Utilities.vala"
	return self;
#line 326 "Utilities.c"
}

GraniteDrawingUtilities*
granite_drawing_utilities_new (void)
{
#line 25 "../lib/Drawing/Utilities.vala"
	return granite_drawing_utilities_construct (GRANITE_DRAWING_TYPE_UTILITIES);
#line 334 "Utilities.c"
}

static void
granite_drawing_utilities_class_init (GraniteDrawingUtilitiesClass * klass,
                                      gpointer klass_data)
{
#line 25 "../lib/Drawing/Utilities.vala"
	granite_drawing_utilities_parent_class = g_type_class_peek_parent (klass);
#line 343 "Utilities.c"
}

static void
granite_drawing_utilities_instance_init (GraniteDrawingUtilities * self,
                                         gpointer klass)
{
}

/**
 * A utility class for frequently-performed drawing operations.
 */
static GType
granite_drawing_utilities_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteDrawingUtilitiesClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_drawing_utilities_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteDrawingUtilities), 0, (GInstanceInitFunc) granite_drawing_utilities_instance_init, NULL };
	GType granite_drawing_utilities_type_id;
	granite_drawing_utilities_type_id = g_type_register_static (G_TYPE_OBJECT, "GraniteDrawingUtilities", &g_define_type_info, 0);
	return granite_drawing_utilities_type_id;
}

GType
granite_drawing_utilities_get_type (void)
{
	static volatile gsize granite_drawing_utilities_type_id__volatile = 0;
	if (g_once_init_enter (&granite_drawing_utilities_type_id__volatile)) {
		GType granite_drawing_utilities_type_id;
		granite_drawing_utilities_type_id = granite_drawing_utilities_get_type_once ();
		g_once_init_leave (&granite_drawing_utilities_type_id__volatile, granite_drawing_utilities_type_id);
	}
	return granite_drawing_utilities_type_id__volatile;
}


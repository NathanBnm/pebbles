/* CSSView.c generated by valac 0.48.14, the Vala compiler
 * generated from CSSView.vala, do not modify */

/*-
 * Copyright 2017â€“2020 elementary, Inc. (https://elementary.io)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include "granite.h"
#include <float.h>
#include <math.h>

#define TYPE_CSS_VIEW (css_view_get_type ())
#define CSS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CSS_VIEW, CSSView))
#define CSS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CSS_VIEW, CSSViewClass))
#define IS_CSS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CSS_VIEW))
#define IS_CSS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CSS_VIEW))
#define CSS_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CSS_VIEW, CSSViewClass))

typedef struct _CSSView CSSView;
typedef struct _CSSViewClass CSSViewClass;
typedef struct _CSSViewPrivate CSSViewPrivate;
enum  {
	CSS_VIEW_0_PROPERTY,
	CSS_VIEW_WINDOW_PROPERTY,
	CSS_VIEW_NUM_PROPERTIES
};
static GParamSpec* css_view_properties[CSS_VIEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block5Data Block5Data;

struct _CSSView {
	GtkGrid parent_instance;
	CSSViewPrivate * priv;
};

struct _CSSViewClass {
	GtkGridClass parent_class;
};

struct _CSSViewPrivate {
	GtkWindow* _window;
};

struct _Block5Data {
	int _ref_count_;
	CSSView* self;
	GtkColorButton* primary_color_button;
};

static gint CSSView_private_offset;
static gpointer css_view_parent_class = NULL;

GType css_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (CSSView, g_object_unref)
GtkWindow* css_view_get_window (CSSView* self);
static void css_view_set_window (CSSView* self,
                          GtkWindow* value);
CSSView* css_view_new (GtkWindow* window);
CSSView* css_view_construct (GType object_type,
                             GtkWindow* window);
static GObject * css_view_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties);
static Block5Data* block5_data_ref (Block5Data* _data5_);
static void block5_data_unref (void * _userdata_);
static void _css_view___lambda5_ (Block5Data* _data5_);
static void __css_view___lambda5__gtk_color_button_color_set (GtkColorButton* _sender,
                                                       gpointer self);
static void css_view_finalize (GObject * obj);
static GType css_view_get_type_once (void);
static void _vala_css_view_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec);
static void _vala_css_view_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec);

static inline gpointer
css_view_get_instance_private (CSSView* self)
{
	return G_STRUCT_MEMBER_P (self, CSSView_private_offset);
}

GtkWindow*
css_view_get_window (CSSView* self)
{
	GtkWindow* result;
	GtkWindow* _tmp0_;
#line 21 "../demo/Views/CSSView.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 21 "../demo/Views/CSSView.vala"
	_tmp0_ = self->priv->_window;
#line 21 "../demo/Views/CSSView.vala"
	result = _tmp0_;
#line 21 "../demo/Views/CSSView.vala"
	return result;
#line 118 "CSSView.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 21 "../demo/Views/CSSView.vala"
	return self ? g_object_ref (self) : NULL;
#line 126 "CSSView.c"
}

static void
css_view_set_window (CSSView* self,
                     GtkWindow* value)
{
	GtkWindow* old_value;
#line 21 "../demo/Views/CSSView.vala"
	g_return_if_fail (self != NULL);
#line 21 "../demo/Views/CSSView.vala"
	old_value = css_view_get_window (self);
#line 21 "../demo/Views/CSSView.vala"
	if (old_value != value) {
#line 140 "CSSView.c"
		GtkWindow* _tmp0_;
#line 21 "../demo/Views/CSSView.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 21 "../demo/Views/CSSView.vala"
		_g_object_unref0 (self->priv->_window);
#line 21 "../demo/Views/CSSView.vala"
		self->priv->_window = _tmp0_;
#line 21 "../demo/Views/CSSView.vala"
		g_object_notify_by_pspec ((GObject *) self, css_view_properties[CSS_VIEW_WINDOW_PROPERTY]);
#line 150 "CSSView.c"
	}
}

CSSView*
css_view_construct (GType object_type,
                    GtkWindow* window)
{
	CSSView * self = NULL;
#line 23 "../demo/Views/CSSView.vala"
	g_return_val_if_fail (window != NULL, NULL);
#line 24 "../demo/Views/CSSView.vala"
	self = (CSSView*) g_object_new (object_type, "halign", GTK_ALIGN_CENTER, "margin", 24, "valign", GTK_ALIGN_CENTER, "window", window, NULL);
#line 23 "../demo/Views/CSSView.vala"
	return self;
#line 165 "CSSView.c"
}

CSSView*
css_view_new (GtkWindow* window)
{
#line 23 "../demo/Views/CSSView.vala"
	return css_view_construct (TYPE_CSS_VIEW, window);
#line 173 "CSSView.c"
}

static Block5Data*
block5_data_ref (Block5Data* _data5_)
{
#line 32 "../demo/Views/CSSView.vala"
	g_atomic_int_inc (&_data5_->_ref_count_);
#line 32 "../demo/Views/CSSView.vala"
	return _data5_;
#line 183 "CSSView.c"
}

static void
block5_data_unref (void * _userdata_)
{
	Block5Data* _data5_;
	_data5_ = (Block5Data*) _userdata_;
#line 32 "../demo/Views/CSSView.vala"
	if (g_atomic_int_dec_and_test (&_data5_->_ref_count_)) {
#line 193 "CSSView.c"
		CSSView* self;
#line 32 "../demo/Views/CSSView.vala"
		self = _data5_->self;
#line 32 "../demo/Views/CSSView.vala"
		_g_object_unref0 (_data5_->primary_color_button);
#line 32 "../demo/Views/CSSView.vala"
		_g_object_unref0 (self);
#line 32 "../demo/Views/CSSView.vala"
		g_slice_free (Block5Data, _data5_);
#line 203 "CSSView.c"
	}
}

static void
_css_view___lambda5_ (Block5Data* _data5_)
{
	CSSView* self;
	GtkWindow* _tmp0_;
	GtkColorButton* _tmp1_;
	GdkRGBA _tmp2_ = {0};
	GdkRGBA _tmp3_;
	GtkCssProvider* _tmp4_;
	GtkCssProvider* _tmp5_;
#line 168 "../demo/Views/CSSView.vala"
	self = _data5_->self;
#line 169 "../demo/Views/CSSView.vala"
	_tmp0_ = self->priv->_window;
#line 169 "../demo/Views/CSSView.vala"
	_tmp1_ = _data5_->primary_color_button;
#line 169 "../demo/Views/CSSView.vala"
	gtk_color_chooser_get_rgba ((GtkColorChooser*) _tmp1_, &_tmp2_);
#line 169 "../demo/Views/CSSView.vala"
	_tmp3_ = _tmp2_;
#line 169 "../demo/Views/CSSView.vala"
	_tmp4_ = granite_widgets_utils_set_color_primary ((GtkWidget*) _tmp0_, &_tmp3_, GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 169 "../demo/Views/CSSView.vala"
	_tmp5_ = _tmp4_;
#line 169 "../demo/Views/CSSView.vala"
	_g_object_unref0 (_tmp5_);
#line 233 "CSSView.c"
}

static void
__css_view___lambda5__gtk_color_button_color_set (GtkColorButton* _sender,
                                                  gpointer self)
{
#line 168 "../demo/Views/CSSView.vala"
	_css_view___lambda5_ (self);
#line 242 "CSSView.c"
}

static GObject *
css_view_constructor (GType type,
                      guint n_construct_properties,
                      GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	CSSView * self;
	Block5Data* _data5_;
	GtkLabel* header1 = NULL;
	GtkLabel* _tmp0_ = NULL;
	GtkLabel* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkLabel* header2 = NULL;
	GtkLabel* _tmp3_;
	GtkLabel* _tmp4_;
	GtkStyleContext* _tmp5_;
	GtkLabel* header3 = NULL;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkLabel* header4 = NULL;
	GtkLabel* _tmp9_ = NULL;
	GtkLabel* _tmp10_;
	GtkStyleContext* _tmp11_;
	GtkLabel* card_label = NULL;
	GtkLabel* _tmp12_ = NULL;
	GtkGrid* card = NULL;
	GtkGrid* _tmp13_ = NULL;
	GtkStyleContext* card_context = NULL;
	GtkGrid* _tmp14_;
	GtkStyleContext* _tmp15_;
	GtkStyleContext* _tmp16_;
	GtkStyleContext* _tmp17_;
	GtkGrid* _tmp18_;
	GtkLabel* _tmp19_;
	GtkGrid* _tmp20_;
	GtkLabel* _tmp21_;
	GtkGrid* _tmp22_;
	GtkLabel* _tmp23_;
	GtkGrid* _tmp24_;
	GtkLabel* _tmp25_;
	GtkLabel* checker_label = NULL;
	GtkLabel* _tmp26_ = NULL;
	GtkImage* checker_image = NULL;
	GtkImage* _tmp27_ = NULL;
	GtkGrid* checker_grid = NULL;
	GtkGrid* _tmp28_;
	GtkGrid* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkGrid* _tmp31_;
	GtkImage* _tmp32_;
	GtkLabel* terminal_label = NULL;
	GtkLabel* _tmp33_ = NULL;
	GtkTextView* terminal = NULL;
	GtkTextView* _tmp34_ = NULL;
	GtkTextView* _tmp35_;
	GtkTextBuffer* _tmp36_;
	GtkTextBuffer* _tmp37_;
	GtkTextView* _tmp38_;
	GtkStyleContext* _tmp39_;
	GtkLabel* back_button_label = NULL;
	GtkLabel* _tmp40_ = NULL;
	GtkButton* back_button = NULL;
	GtkButton* _tmp41_ = NULL;
	GtkButton* _tmp42_;
	GtkStyleContext* _tmp43_;
	GtkLabel* warmth_label = NULL;
	GtkLabel* _tmp44_ = NULL;
	GtkScale* warmth_scale = NULL;
	GtkScale* _tmp45_ = NULL;
	GtkScale* _tmp46_;
	GtkScale* _tmp47_;
	GtkStyleContext* _tmp48_;
	GtkLabel* temperature_label = NULL;
	GtkLabel* _tmp49_ = NULL;
	GtkScale* temperature_scale = NULL;
	GtkScale* _tmp50_ = NULL;
	GtkScale* _tmp51_;
	GtkScale* _tmp52_;
	GtkStyleContext* _tmp53_;
	GtkLabel* primary_color_label = NULL;
	GtkLabel* _tmp54_ = NULL;
	GdkRGBA _tmp55_ = {0};
	GtkColorButton* _tmp56_;
	GtkLabel* accent_color_label = NULL;
	GtkLabel* _tmp57_ = NULL;
	GtkImage* accent_color_icon = NULL;
	GtkImage* _tmp58_;
	GtkImage* _tmp59_;
	GtkStyleContext* _tmp60_;
	GtkLabel* accent_color_string = NULL;
	GtkLabel* _tmp61_;
	GtkLabel* _tmp62_;
	GtkStyleContext* _tmp63_;
	GtkGrid* accent_color_grid = NULL;
	GtkGrid* _tmp64_ = NULL;
	GtkGrid* _tmp65_;
	GtkImage* _tmp66_;
	GtkGrid* _tmp67_;
	GtkLabel* _tmp68_;
	GtkLabel* _tmp69_;
	GtkGrid* _tmp70_;
	GtkLabel* _tmp71_;
	GtkGrid* _tmp72_;
	GtkLabel* _tmp73_;
	GtkTextView* _tmp74_;
	GtkLabel* _tmp75_;
	GtkButton* _tmp76_;
	GtkLabel* _tmp77_;
	GtkScale* _tmp78_;
	GtkLabel* _tmp79_;
	GtkScale* _tmp80_;
	GtkLabel* _tmp81_;
	GtkColorButton* _tmp82_;
	GtkLabel* _tmp83_;
	GtkGrid* _tmp84_;
	GtkColorButton* _tmp85_;
#line 32 "../demo/Views/CSSView.vala"
	parent_class = G_OBJECT_CLASS (css_view_parent_class);
#line 32 "../demo/Views/CSSView.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 32 "../demo/Views/CSSView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_CSS_VIEW, CSSView);
#line 32 "../demo/Views/CSSView.vala"
	_data5_ = g_slice_new0 (Block5Data);
#line 32 "../demo/Views/CSSView.vala"
	_data5_->_ref_count_ = 1;
#line 32 "../demo/Views/CSSView.vala"
	_data5_->self = g_object_ref (self);
#line 33 "../demo/Views/CSSView.vala"
	_tmp0_ = (GtkLabel*) gtk_label_new ("\"h1\" Style Class");
#line 33 "../demo/Views/CSSView.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp0_, 24);
#line 33 "../demo/Views/CSSView.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp0_, 24);
#line 33 "../demo/Views/CSSView.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp0_, 12);
#line 33 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp0_);
#line 33 "../demo/Views/CSSView.vala"
	header1 = _tmp0_;
#line 38 "../demo/Views/CSSView.vala"
	_tmp1_ = header1;
#line 38 "../demo/Views/CSSView.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 38 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp2_, GRANITE_STYLE_CLASS_H1_LABEL);
#line 40 "../demo/Views/CSSView.vala"
	_tmp3_ = (GtkLabel*) gtk_label_new ("\"h2\" Style Class");
#line 40 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp3_);
#line 40 "../demo/Views/CSSView.vala"
	header2 = _tmp3_;
#line 41 "../demo/Views/CSSView.vala"
	_tmp4_ = header2;
#line 41 "../demo/Views/CSSView.vala"
	_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 41 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp5_, GRANITE_STYLE_CLASS_H2_LABEL);
#line 43 "../demo/Views/CSSView.vala"
	_tmp6_ = (GtkLabel*) gtk_label_new ("\"h3\" Style Class");
#line 43 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp6_);
#line 43 "../demo/Views/CSSView.vala"
	header3 = _tmp6_;
#line 44 "../demo/Views/CSSView.vala"
	_tmp7_ = header3;
#line 44 "../demo/Views/CSSView.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 44 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp8_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 46 "../demo/Views/CSSView.vala"
	_tmp9_ = (GtkLabel*) gtk_label_new ("\"h4\" Style Class");
#line 46 "../demo/Views/CSSView.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp9_, 12);
#line 46 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp9_);
#line 46 "../demo/Views/CSSView.vala"
	header4 = _tmp9_;
#line 49 "../demo/Views/CSSView.vala"
	_tmp10_ = header4;
#line 49 "../demo/Views/CSSView.vala"
	_tmp11_ = gtk_widget_get_style_context ((GtkWidget*) _tmp10_);
#line 49 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp11_, GRANITE_STYLE_CLASS_H4_LABEL);
#line 51 "../demo/Views/CSSView.vala"
	_tmp12_ = (GtkLabel*) gtk_label_new ("\"card\" with \"rounded\" style class:");
#line 51 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_END);
#line 51 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp12_);
#line 51 "../demo/Views/CSSView.vala"
	card_label = _tmp12_;
#line 55 "../demo/Views/CSSView.vala"
	_tmp13_ = (GtkGrid*) gtk_grid_new ();
#line 55 "../demo/Views/CSSView.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp13_, GTK_ORIENTATION_VERTICAL);
#line 55 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp13_);
#line 55 "../demo/Views/CSSView.vala"
	card = _tmp13_;
#line 59 "../demo/Views/CSSView.vala"
	_tmp14_ = card;
#line 59 "../demo/Views/CSSView.vala"
	_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
#line 59 "../demo/Views/CSSView.vala"
	card_context = _tmp15_;
#line 60 "../demo/Views/CSSView.vala"
	_tmp16_ = card_context;
#line 60 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp16_, GRANITE_STYLE_CLASS_CARD);
#line 61 "../demo/Views/CSSView.vala"
	_tmp17_ = card_context;
#line 61 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp17_, GRANITE_STYLE_CLASS_ROUNDED);
#line 63 "../demo/Views/CSSView.vala"
	_tmp18_ = card;
#line 63 "../demo/Views/CSSView.vala"
	_tmp19_ = header1;
#line 63 "../demo/Views/CSSView.vala"
	gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp19_);
#line 64 "../demo/Views/CSSView.vala"
	_tmp20_ = card;
#line 64 "../demo/Views/CSSView.vala"
	_tmp21_ = header2;
#line 64 "../demo/Views/CSSView.vala"
	gtk_container_add ((GtkContainer*) _tmp20_, (GtkWidget*) _tmp21_);
#line 65 "../demo/Views/CSSView.vala"
	_tmp22_ = card;
#line 65 "../demo/Views/CSSView.vala"
	_tmp23_ = header3;
#line 65 "../demo/Views/CSSView.vala"
	gtk_container_add ((GtkContainer*) _tmp22_, (GtkWidget*) _tmp23_);
#line 66 "../demo/Views/CSSView.vala"
	_tmp24_ = card;
#line 66 "../demo/Views/CSSView.vala"
	_tmp25_ = header4;
#line 66 "../demo/Views/CSSView.vala"
	gtk_container_add ((GtkContainer*) _tmp24_, (GtkWidget*) _tmp25_);
#line 68 "../demo/Views/CSSView.vala"
	_tmp26_ = (GtkLabel*) gtk_label_new ("\"checkerboard\" style class:");
#line 68 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_END);
#line 68 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp26_);
#line 68 "../demo/Views/CSSView.vala"
	checker_label = _tmp26_;
#line 72 "../demo/Views/CSSView.vala"
	_tmp27_ = (GtkImage*) gtk_image_new_from_icon_name ("dialog-information", (GtkIconSize) GTK_ICON_SIZE_DND);
#line 72 "../demo/Views/CSSView.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp27_, TRUE);
#line 72 "../demo/Views/CSSView.vala"
	g_object_set ((GtkWidget*) _tmp27_, "margin", 6, NULL);
#line 72 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp27_);
#line 72 "../demo/Views/CSSView.vala"
	checker_image = _tmp27_;
#line 77 "../demo/Views/CSSView.vala"
	_tmp28_ = (GtkGrid*) gtk_grid_new ();
#line 77 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp28_);
#line 77 "../demo/Views/CSSView.vala"
	checker_grid = _tmp28_;
#line 78 "../demo/Views/CSSView.vala"
	_tmp29_ = checker_grid;
#line 78 "../demo/Views/CSSView.vala"
	_tmp30_ = gtk_widget_get_style_context ((GtkWidget*) _tmp29_);
#line 78 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp30_, GRANITE_STYLE_CLASS_CHECKERBOARD);
#line 79 "../demo/Views/CSSView.vala"
	_tmp31_ = checker_grid;
#line 79 "../demo/Views/CSSView.vala"
	_tmp32_ = checker_image;
#line 79 "../demo/Views/CSSView.vala"
	gtk_container_add ((GtkContainer*) _tmp31_, (GtkWidget*) _tmp32_);
#line 81 "../demo/Views/CSSView.vala"
	_tmp33_ = (GtkLabel*) gtk_label_new ("\"terminal\" style class:");
#line 81 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp33_, GTK_ALIGN_END);
#line 81 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp33_);
#line 81 "../demo/Views/CSSView.vala"
	terminal_label = _tmp33_;
#line 85 "../demo/Views/CSSView.vala"
	_tmp34_ = (GtkTextView*) gtk_text_view_new ();
#line 85 "../demo/Views/CSSView.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp34_, (guint) 12);
#line 85 "../demo/Views/CSSView.vala"
	gtk_text_view_set_pixels_below_lines (_tmp34_, 3);
#line 85 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp34_);
#line 85 "../demo/Views/CSSView.vala"
	terminal = _tmp34_;
#line 89 "../demo/Views/CSSView.vala"
	_tmp35_ = terminal;
#line 89 "../demo/Views/CSSView.vala"
	_tmp36_ = gtk_text_view_get_buffer (_tmp35_);
#line 89 "../demo/Views/CSSView.vala"
	_tmp37_ = _tmp36_;
#line 89 "../demo/Views/CSSView.vala"
	g_object_set (_tmp37_, "text", "[ 73%] Linking C executable granite-demo\n" \
"[100%] Built target granite-demo", NULL);
#line 90 "../demo/Views/CSSView.vala"
	_tmp38_ = terminal;
#line 90 "../demo/Views/CSSView.vala"
	_tmp39_ = gtk_widget_get_style_context ((GtkWidget*) _tmp38_);
#line 90 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp39_, GRANITE_STYLE_CLASS_TERMINAL);
#line 92 "../demo/Views/CSSView.vala"
	_tmp40_ = (GtkLabel*) gtk_label_new ("\"back-button\" style class:");
#line 92 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp40_, GTK_ALIGN_END);
#line 92 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp40_);
#line 92 "../demo/Views/CSSView.vala"
	back_button_label = _tmp40_;
#line 96 "../demo/Views/CSSView.vala"
	_tmp41_ = (GtkButton*) gtk_button_new_with_label ("Back Button");
#line 96 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp41_, GTK_ALIGN_START);
#line 96 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp41_);
#line 96 "../demo/Views/CSSView.vala"
	back_button = _tmp41_;
#line 99 "../demo/Views/CSSView.vala"
	_tmp42_ = back_button;
#line 99 "../demo/Views/CSSView.vala"
	_tmp43_ = gtk_widget_get_style_context ((GtkWidget*) _tmp42_);
#line 99 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp43_, GRANITE_STYLE_CLASS_BACK_BUTTON);
#line 101 "../demo/Views/CSSView.vala"
	_tmp44_ = (GtkLabel*) gtk_label_new ("\"warmth\" style class:");
#line 101 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp44_, GTK_ALIGN_END);
#line 101 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp44_);
#line 101 "../demo/Views/CSSView.vala"
	warmth_label = _tmp44_;
#line 105 "../demo/Views/CSSView.vala"
	_tmp45_ = (GtkScale*) gtk_scale_new_with_range (GTK_ORIENTATION_HORIZONTAL, (gdouble) 3500, (gdouble) 6000, (gdouble) 10);
#line 105 "../demo/Views/CSSView.vala"
	gtk_scale_set_draw_value (_tmp45_, FALSE);
#line 105 "../demo/Views/CSSView.vala"
	gtk_scale_set_has_origin (_tmp45_, FALSE);
#line 105 "../demo/Views/CSSView.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp45_, TRUE);
#line 105 "../demo/Views/CSSView.vala"
	gtk_range_set_inverted ((GtkRange*) _tmp45_, TRUE);
#line 105 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp45_);
#line 105 "../demo/Views/CSSView.vala"
	warmth_scale = _tmp45_;
#line 111 "../demo/Views/CSSView.vala"
	_tmp46_ = warmth_scale;
#line 111 "../demo/Views/CSSView.vala"
	gtk_range_set_value ((GtkRange*) _tmp46_, (gdouble) 6000);
#line 112 "../demo/Views/CSSView.vala"
	_tmp47_ = warmth_scale;
#line 112 "../demo/Views/CSSView.vala"
	_tmp48_ = gtk_widget_get_style_context ((GtkWidget*) _tmp47_);
#line 112 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp48_, GRANITE_STYLE_CLASS_WARMTH);
#line 114 "../demo/Views/CSSView.vala"
	_tmp49_ = (GtkLabel*) gtk_label_new ("\"temperature\" style class:");
#line 114 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp49_, GTK_ALIGN_END);
#line 114 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp49_);
#line 114 "../demo/Views/CSSView.vala"
	temperature_label = _tmp49_;
#line 118 "../demo/Views/CSSView.vala"
	_tmp50_ = (GtkScale*) gtk_scale_new_with_range (GTK_ORIENTATION_HORIZONTAL, (gdouble) (-16.0f), (gdouble) 16.0f, 1.0);
#line 118 "../demo/Views/CSSView.vala"
	gtk_scale_set_draw_value (_tmp50_, FALSE);
#line 118 "../demo/Views/CSSView.vala"
	gtk_scale_set_has_origin (_tmp50_, FALSE);
#line 118 "../demo/Views/CSSView.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp50_, TRUE);
#line 118 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp50_);
#line 118 "../demo/Views/CSSView.vala"
	temperature_scale = _tmp50_;
#line 123 "../demo/Views/CSSView.vala"
	_tmp51_ = temperature_scale;
#line 123 "../demo/Views/CSSView.vala"
	gtk_range_set_value ((GtkRange*) _tmp51_, (gdouble) 0);
#line 124 "../demo/Views/CSSView.vala"
	_tmp52_ = temperature_scale;
#line 124 "../demo/Views/CSSView.vala"
	_tmp53_ = gtk_widget_get_style_context ((GtkWidget*) _tmp52_);
#line 124 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp53_, GRANITE_STYLE_CLASS_TEMPERATURE);
#line 126 "../demo/Views/CSSView.vala"
	_tmp54_ = (GtkLabel*) gtk_label_new ("Set HeaderBar color:");
#line 126 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp54_, GTK_ALIGN_END);
#line 126 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp54_);
#line 126 "../demo/Views/CSSView.vala"
	primary_color_label = _tmp54_;
#line 130 "../demo/Views/CSSView.vala"
	_tmp55_.red = (gdouble) 222;
#line 130 "../demo/Views/CSSView.vala"
	_tmp55_.green = (gdouble) 222;
#line 130 "../demo/Views/CSSView.vala"
	_tmp55_.blue = (gdouble) 222;
#line 130 "../demo/Views/CSSView.vala"
	_tmp55_.alpha = (gdouble) 255;
#line 130 "../demo/Views/CSSView.vala"
	_tmp56_ = (GtkColorButton*) gtk_color_button_new_with_rgba (&_tmp55_);
#line 130 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp56_);
#line 130 "../demo/Views/CSSView.vala"
	_data5_->primary_color_button = _tmp56_;
#line 132 "../demo/Views/CSSView.vala"
	_tmp57_ = (GtkLabel*) gtk_label_new ("Accent colored labels and icons:");
#line 132 "../demo/Views/CSSView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp57_, GTK_ALIGN_END);
#line 132 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp57_);
#line 132 "../demo/Views/CSSView.vala"
	accent_color_label = _tmp57_;
#line 136 "../demo/Views/CSSView.vala"
	_tmp58_ = (GtkImage*) gtk_image_new_from_icon_name ("emoji-body-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 136 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp58_);
#line 136 "../demo/Views/CSSView.vala"
	accent_color_icon = _tmp58_;
#line 137 "../demo/Views/CSSView.vala"
	_tmp59_ = accent_color_icon;
#line 137 "../demo/Views/CSSView.vala"
	_tmp60_ = gtk_widget_get_style_context ((GtkWidget*) _tmp59_);
#line 137 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp60_, GRANITE_STYLE_CLASS_ACCENT);
#line 139 "../demo/Views/CSSView.vala"
	_tmp61_ = (GtkLabel*) gtk_label_new ("Lorem ipsum dolor sit amet");
#line 139 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp61_);
#line 139 "../demo/Views/CSSView.vala"
	accent_color_string = _tmp61_;
#line 140 "../demo/Views/CSSView.vala"
	_tmp62_ = accent_color_string;
#line 140 "../demo/Views/CSSView.vala"
	_tmp63_ = gtk_widget_get_style_context ((GtkWidget*) _tmp62_);
#line 140 "../demo/Views/CSSView.vala"
	gtk_style_context_add_class (_tmp63_, GRANITE_STYLE_CLASS_ACCENT);
#line 142 "../demo/Views/CSSView.vala"
	_tmp64_ = (GtkGrid*) gtk_grid_new ();
#line 142 "../demo/Views/CSSView.vala"
	gtk_grid_set_column_spacing (_tmp64_, 6);
#line 142 "../demo/Views/CSSView.vala"
	g_object_ref_sink (_tmp64_);
#line 142 "../demo/Views/CSSView.vala"
	accent_color_grid = _tmp64_;
#line 145 "../demo/Views/CSSView.vala"
	_tmp65_ = accent_color_grid;
#line 145 "../demo/Views/CSSView.vala"
	_tmp66_ = accent_color_icon;
#line 145 "../demo/Views/CSSView.vala"
	gtk_container_add ((GtkContainer*) _tmp65_, (GtkWidget*) _tmp66_);
#line 146 "../demo/Views/CSSView.vala"
	_tmp67_ = accent_color_grid;
#line 146 "../demo/Views/CSSView.vala"
	_tmp68_ = accent_color_string;
#line 146 "../demo/Views/CSSView.vala"
	gtk_container_add ((GtkContainer*) _tmp67_, (GtkWidget*) _tmp68_);
#line 148 "../demo/Views/CSSView.vala"
	gtk_grid_set_column_spacing ((GtkGrid*) self, 12);
#line 149 "../demo/Views/CSSView.vala"
	gtk_grid_set_row_spacing ((GtkGrid*) self, 24);
#line 151 "../demo/Views/CSSView.vala"
	_tmp69_ = card_label;
#line 151 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp69_, 0, 0, 1, 1);
#line 152 "../demo/Views/CSSView.vala"
	_tmp70_ = card;
#line 152 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp70_, 1, 0, 2, 1);
#line 153 "../demo/Views/CSSView.vala"
	_tmp71_ = checker_label;
#line 153 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp71_, 0, 1, 1, 1);
#line 154 "../demo/Views/CSSView.vala"
	_tmp72_ = checker_grid;
#line 154 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp72_, 1, 1, 2, 1);
#line 155 "../demo/Views/CSSView.vala"
	_tmp73_ = terminal_label;
#line 155 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp73_, 0, 2, 1, 1);
#line 156 "../demo/Views/CSSView.vala"
	_tmp74_ = terminal;
#line 156 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp74_, 1, 2, 2, 1);
#line 157 "../demo/Views/CSSView.vala"
	_tmp75_ = back_button_label;
#line 157 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp75_, 0, 3, 1, 1);
#line 158 "../demo/Views/CSSView.vala"
	_tmp76_ = back_button;
#line 158 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp76_, 1, 3, 2, 1);
#line 159 "../demo/Views/CSSView.vala"
	_tmp77_ = warmth_label;
#line 159 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp77_, 0, 4, 1, 1);
#line 160 "../demo/Views/CSSView.vala"
	_tmp78_ = warmth_scale;
#line 160 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp78_, 1, 4, 1, 1);
#line 161 "../demo/Views/CSSView.vala"
	_tmp79_ = temperature_label;
#line 161 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp79_, 0, 5, 1, 1);
#line 162 "../demo/Views/CSSView.vala"
	_tmp80_ = temperature_scale;
#line 162 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp80_, 1, 5, 1, 1);
#line 163 "../demo/Views/CSSView.vala"
	_tmp81_ = primary_color_label;
#line 163 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp81_, 0, 6, 1, 1);
#line 164 "../demo/Views/CSSView.vala"
	_tmp82_ = _data5_->primary_color_button;
#line 164 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp82_, 1, 6, 2, 1);
#line 165 "../demo/Views/CSSView.vala"
	_tmp83_ = accent_color_label;
#line 165 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp83_, 0, 7, 1, 1);
#line 166 "../demo/Views/CSSView.vala"
	_tmp84_ = accent_color_grid;
#line 166 "../demo/Views/CSSView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp84_, 1, 7, 1, 1);
#line 168 "../demo/Views/CSSView.vala"
	_tmp85_ = _data5_->primary_color_button;
#line 168 "../demo/Views/CSSView.vala"
	g_signal_connect_data (_tmp85_, "color-set", (GCallback) __css_view___lambda5__gtk_color_button_color_set, block5_data_ref (_data5_), (GClosureNotify) block5_data_unref, 0);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (accent_color_grid);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (accent_color_string);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (accent_color_icon);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (accent_color_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (primary_color_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (temperature_scale);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (temperature_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (warmth_scale);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (warmth_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (back_button);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (back_button_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (terminal);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (terminal_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (checker_grid);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (checker_image);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (checker_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (card);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (card_label);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (header4);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (header3);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (header2);
#line 32 "../demo/Views/CSSView.vala"
	_g_object_unref0 (header1);
#line 32 "../demo/Views/CSSView.vala"
	block5_data_unref (_data5_);
#line 32 "../demo/Views/CSSView.vala"
	_data5_ = NULL;
#line 32 "../demo/Views/CSSView.vala"
	return obj;
#line 833 "CSSView.c"
}

static void
css_view_class_init (CSSViewClass * klass,
                     gpointer klass_data)
{
#line 20 "../demo/Views/CSSView.vala"
	css_view_parent_class = g_type_class_peek_parent (klass);
#line 20 "../demo/Views/CSSView.vala"
	g_type_class_adjust_private_offset (klass, &CSSView_private_offset);
#line 20 "../demo/Views/CSSView.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_css_view_get_property;
#line 20 "../demo/Views/CSSView.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_css_view_set_property;
#line 20 "../demo/Views/CSSView.vala"
	G_OBJECT_CLASS (klass)->constructor = css_view_constructor;
#line 20 "../demo/Views/CSSView.vala"
	G_OBJECT_CLASS (klass)->finalize = css_view_finalize;
#line 20 "../demo/Views/CSSView.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), CSS_VIEW_WINDOW_PROPERTY, css_view_properties[CSS_VIEW_WINDOW_PROPERTY] = g_param_spec_object ("window", "window", "window", gtk_window_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 854 "CSSView.c"
}

static void
css_view_instance_init (CSSView * self,
                        gpointer klass)
{
#line 20 "../demo/Views/CSSView.vala"
	self->priv = css_view_get_instance_private (self);
#line 863 "CSSView.c"
}

static void
css_view_finalize (GObject * obj)
{
	CSSView * self;
#line 20 "../demo/Views/CSSView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_CSS_VIEW, CSSView);
#line 21 "../demo/Views/CSSView.vala"
	_g_object_unref0 (self->priv->_window);
#line 20 "../demo/Views/CSSView.vala"
	G_OBJECT_CLASS (css_view_parent_class)->finalize (obj);
#line 876 "CSSView.c"
}

static GType
css_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (CSSViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) css_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (CSSView), 0, (GInstanceInitFunc) css_view_instance_init, NULL };
	GType css_view_type_id;
	css_view_type_id = g_type_register_static (gtk_grid_get_type (), "CSSView", &g_define_type_info, 0);
	CSSView_private_offset = g_type_add_instance_private (css_view_type_id, sizeof (CSSViewPrivate));
	return css_view_type_id;
}

GType
css_view_get_type (void)
{
	static volatile gsize css_view_type_id__volatile = 0;
	if (g_once_init_enter (&css_view_type_id__volatile)) {
		GType css_view_type_id;
		css_view_type_id = css_view_get_type_once ();
		g_once_init_leave (&css_view_type_id__volatile, css_view_type_id);
	}
	return css_view_type_id__volatile;
}

static void
_vala_css_view_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec)
{
	CSSView * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_CSS_VIEW, CSSView);
#line 20 "../demo/Views/CSSView.vala"
	switch (property_id) {
#line 20 "../demo/Views/CSSView.vala"
		case CSS_VIEW_WINDOW_PROPERTY:
#line 20 "../demo/Views/CSSView.vala"
		g_value_set_object (value, css_view_get_window (self));
#line 20 "../demo/Views/CSSView.vala"
		break;
#line 917 "CSSView.c"
		default:
#line 20 "../demo/Views/CSSView.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 20 "../demo/Views/CSSView.vala"
		break;
#line 923 "CSSView.c"
	}
}

static void
_vala_css_view_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec)
{
	CSSView * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_CSS_VIEW, CSSView);
#line 20 "../demo/Views/CSSView.vala"
	switch (property_id) {
#line 20 "../demo/Views/CSSView.vala"
		case CSS_VIEW_WINDOW_PROPERTY:
#line 20 "../demo/Views/CSSView.vala"
		css_view_set_window (self, g_value_get_object (value));
#line 20 "../demo/Views/CSSView.vala"
		break;
#line 943 "CSSView.c"
		default:
#line 20 "../demo/Views/CSSView.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 20 "../demo/Views/CSSView.vala"
		break;
#line 949 "CSSView.c"
	}
}


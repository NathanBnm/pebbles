/* StorageView.c generated by valac 0.48.14, the Vala compiler
 * generated from StorageView.vala, do not modify */

/*
 * Copyright (c) 2011–2019 elementary, Inc. (https://elementary.io)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 *
 * Authored by: Lucas Baudin <xapantu@gmail.com>
 *              Jaap Broekhuizen <jaapz.b@gmail.com>
 *              Victor Eduardo <victoreduardm@gmal.com>
 *              Tom Beckmann <tom@elementary.io>
 *              Corentin Noël <corentin@elementary.io>
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include "granite.h"

#define TYPE_STORAGE_VIEW (storage_view_get_type ())
#define STORAGE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STORAGE_VIEW, StorageView))
#define STORAGE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_STORAGE_VIEW, StorageViewClass))
#define IS_STORAGE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STORAGE_VIEW))
#define IS_STORAGE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_STORAGE_VIEW))
#define STORAGE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STORAGE_VIEW, StorageViewClass))

typedef struct _StorageView StorageView;
typedef struct _StorageViewClass StorageViewClass;
typedef struct _StorageViewPrivate StorageViewPrivate;
enum  {
	STORAGE_VIEW_0_PROPERTY,
	STORAGE_VIEW_NUM_PROPERTIES
};
static GParamSpec* storage_view_properties[STORAGE_VIEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _StorageView {
	GtkGrid parent_instance;
	StorageViewPrivate * priv;
};

struct _StorageViewClass {
	GtkGridClass parent_class;
};

static gpointer storage_view_parent_class = NULL;

GType storage_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (StorageView, g_object_unref)
StorageView* storage_view_new (void);
StorageView* storage_view_construct (GType object_type);
static GObject * storage_view_constructor (GType type,
                                    guint n_construct_properties,
                                    GObjectConstructParam * construct_properties);
static GType storage_view_get_type_once (void);

StorageView*
storage_view_construct (GType object_type)
{
	StorageView * self = NULL;
#line 26 "../demo/Views/StorageView.vala"
	self = (StorageView*) g_object_new (object_type, NULL);
#line 26 "../demo/Views/StorageView.vala"
	return self;
#line 82 "StorageView.c"
}

StorageView*
storage_view_new (void)
{
#line 26 "../demo/Views/StorageView.vala"
	return storage_view_construct (TYPE_STORAGE_VIEW);
#line 90 "StorageView.c"
}

static GObject *
storage_view_constructor (GType type,
                          guint n_construct_properties,
                          GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	StorageView * self;
	GFile* file_root = NULL;
	GFile* _tmp0_;
	GError* _inner_error0_ = NULL;
#line 27 "../demo/Views/StorageView.vala"
	parent_class = G_OBJECT_CLASS (storage_view_parent_class);
#line 27 "../demo/Views/StorageView.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 27 "../demo/Views/StorageView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_STORAGE_VIEW, StorageView);
#line 28 "../demo/Views/StorageView.vala"
	_tmp0_ = g_file_new_for_path ("/");
#line 28 "../demo/Views/StorageView.vala"
	file_root = _tmp0_;
#line 114 "StorageView.c"
	{
		GFileInfo* info = NULL;
		GFile* _tmp1_;
		GFileInfo* _tmp2_;
		guint64 size = 0ULL;
		GFileInfo* _tmp3_;
		GraniteWidgetsStorageBar* storage = NULL;
		GraniteWidgetsStorageBar* _tmp4_;
		GraniteWidgetsStorageBar* _tmp5_;
		GraniteWidgetsStorageBar* _tmp6_;
		GraniteWidgetsStorageBar* _tmp7_;
		GraniteWidgetsStorageBar* _tmp8_;
		GraniteWidgetsStorageBar* _tmp9_;
		GraniteWidgetsStorageBar* _tmp10_;
#line 31 "../demo/Views/StorageView.vala"
		_tmp1_ = file_root;
#line 31 "../demo/Views/StorageView.vala"
		_tmp2_ = g_file_query_filesystem_info (_tmp1_, G_FILE_ATTRIBUTE_FILESYSTEM_SIZE, NULL, &_inner_error0_);
#line 31 "../demo/Views/StorageView.vala"
		info = _tmp2_;
#line 31 "../demo/Views/StorageView.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 137 "StorageView.c"
			goto __catch0_g_error;
		}
#line 33 "../demo/Views/StorageView.vala"
		_tmp3_ = info;
#line 33 "../demo/Views/StorageView.vala"
		size = g_file_info_get_attribute_uint64 (_tmp3_, G_FILE_ATTRIBUTE_FILESYSTEM_SIZE);
#line 35 "../demo/Views/StorageView.vala"
		_tmp4_ = granite_widgets_storage_bar_new_with_total_usage (size, size / 2);
#line 35 "../demo/Views/StorageView.vala"
		g_object_ref_sink (_tmp4_);
#line 35 "../demo/Views/StorageView.vala"
		storage = _tmp4_;
#line 36 "../demo/Views/StorageView.vala"
		_tmp5_ = storage;
#line 36 "../demo/Views/StorageView.vala"
		granite_widgets_storage_bar_update_block_size (_tmp5_, GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_AUDIO, size / 40);
#line 37 "../demo/Views/StorageView.vala"
		_tmp6_ = storage;
#line 37 "../demo/Views/StorageView.vala"
		granite_widgets_storage_bar_update_block_size (_tmp6_, GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_VIDEO, size / 30);
#line 38 "../demo/Views/StorageView.vala"
		_tmp7_ = storage;
#line 38 "../demo/Views/StorageView.vala"
		granite_widgets_storage_bar_update_block_size (_tmp7_, GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_APP, size / 20);
#line 39 "../demo/Views/StorageView.vala"
		_tmp8_ = storage;
#line 39 "../demo/Views/StorageView.vala"
		granite_widgets_storage_bar_update_block_size (_tmp8_, GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_PHOTO, size / 10);
#line 40 "../demo/Views/StorageView.vala"
		_tmp9_ = storage;
#line 40 "../demo/Views/StorageView.vala"
		granite_widgets_storage_bar_update_block_size (_tmp9_, GRANITE_WIDGETS_STORAGE_BAR_ITEM_DESCRIPTION_FILES, size / 5);
#line 42 "../demo/Views/StorageView.vala"
		_tmp10_ = storage;
#line 42 "../demo/Views/StorageView.vala"
		gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 30 "../demo/Views/StorageView.vala"
		_g_object_unref0 (storage);
#line 30 "../demo/Views/StorageView.vala"
		_g_object_unref0 (info);
#line 178 "StorageView.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp11_;
		const gchar* _tmp12_;
#line 30 "../demo/Views/StorageView.vala"
		e = _inner_error0_;
#line 30 "../demo/Views/StorageView.vala"
		_inner_error0_ = NULL;
#line 44 "../demo/Views/StorageView.vala"
		_tmp11_ = e;
#line 44 "../demo/Views/StorageView.vala"
		_tmp12_ = _tmp11_->message;
#line 44 "../demo/Views/StorageView.vala"
		g_critical ("StorageView.vala:44: %s", _tmp12_);
#line 30 "../demo/Views/StorageView.vala"
		_g_error_free0 (e);
#line 198 "StorageView.c"
	}
	__finally0:
#line 30 "../demo/Views/StorageView.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 30 "../demo/Views/StorageView.vala"
		_g_object_unref0 (file_root);
#line 30 "../demo/Views/StorageView.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 30 "../demo/Views/StorageView.vala"
		g_clear_error (&_inner_error0_);
#line 209 "StorageView.c"
	}
#line 27 "../demo/Views/StorageView.vala"
	_g_object_unref0 (file_root);
#line 27 "../demo/Views/StorageView.vala"
	return obj;
#line 215 "StorageView.c"
}

static void
storage_view_class_init (StorageViewClass * klass,
                         gpointer klass_data)
{
#line 26 "../demo/Views/StorageView.vala"
	storage_view_parent_class = g_type_class_peek_parent (klass);
#line 26 "../demo/Views/StorageView.vala"
	G_OBJECT_CLASS (klass)->constructor = storage_view_constructor;
#line 226 "StorageView.c"
}

static void
storage_view_instance_init (StorageView * self,
                            gpointer klass)
{
}

static GType
storage_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (StorageViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) storage_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (StorageView), 0, (GInstanceInitFunc) storage_view_instance_init, NULL };
	GType storage_view_type_id;
	storage_view_type_id = g_type_register_static (gtk_grid_get_type (), "StorageView", &g_define_type_info, 0);
	return storage_view_type_id;
}

GType
storage_view_get_type (void)
{
	static volatile gsize storage_view_type_id__volatile = 0;
	if (g_once_init_enter (&storage_view_type_id__volatile)) {
		GType storage_view_type_id;
		storage_view_type_id = storage_view_get_type_once ();
		g_once_init_leave (&storage_view_type_id__volatile, storage_view_type_id);
	}
	return storage_view_type_id__volatile;
}


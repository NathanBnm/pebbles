/* AsyncImageView.c generated by valac 0.48.14, the Vala compiler
 * generated from AsyncImageView.vala, do not modify */

/* -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-*/
/*-
 * Copyright (c) 2017 elementary LLC. (https://elementary.io)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include "granite.h"

#define TYPE_ASYNC_IMAGE_VIEW (async_image_view_get_type ())
#define ASYNC_IMAGE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ASYNC_IMAGE_VIEW, AsyncImageView))
#define ASYNC_IMAGE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ASYNC_IMAGE_VIEW, AsyncImageViewClass))
#define IS_ASYNC_IMAGE_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ASYNC_IMAGE_VIEW))
#define IS_ASYNC_IMAGE_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ASYNC_IMAGE_VIEW))
#define ASYNC_IMAGE_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ASYNC_IMAGE_VIEW, AsyncImageViewClass))

typedef struct _AsyncImageView AsyncImageView;
typedef struct _AsyncImageViewClass AsyncImageViewClass;
typedef struct _AsyncImageViewPrivate AsyncImageViewPrivate;
enum  {
	ASYNC_IMAGE_VIEW_0_PROPERTY,
	ASYNC_IMAGE_VIEW_NUM_PROPERTIES
};
static GParamSpec* async_image_view_properties[ASYNC_IMAGE_VIEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block4Data Block4Data;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _AsyncImageViewLoadIconsData AsyncImageViewLoadIconsData;

struct _AsyncImageView {
	GtkGrid parent_instance;
	AsyncImageViewPrivate * priv;
};

struct _AsyncImageViewClass {
	GtkGridClass parent_class;
};

struct _AsyncImageViewPrivate {
	GtkFlowBox* flow_box;
};

struct _Block4Data {
	int _ref_count_;
	AsyncImageView* self;
	GeeArrayList* icons;
	gpointer _async_data_;
};

struct _AsyncImageViewLoadIconsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	AsyncImageView* self;
	Block4Data* _data4_;
	GtkFlowBox* _tmp0_;
	GList* _tmp1_;
	GList* _tmp2_;
	GeeArrayList* _tmp3_;
	GtkIconTheme* icon_theme;
	GtkIconTheme* _tmp4_;
	GtkIconTheme* _tmp5_;
	GtkIconTheme* _tmp6_;
	GList* _tmp7_;
	GList* _tmp8_;
	GeeArrayList* _name_list;
	GeeArrayList* _tmp9_;
	GeeArrayList* _tmp10_;
	gint _name_size;
	GeeArrayList* _tmp11_;
	gint _tmp12_;
	gint _tmp13_;
	gint _name_index;
	gint _tmp14_;
	gint _tmp15_;
	gchar* name;
	GeeArrayList* _tmp16_;
	gpointer _tmp17_;
	GraniteAsyncImage* image;
	const gchar* _tmp18_;
	GraniteAsyncImage* _tmp19_;
	GtkFlowBox* _tmp20_;
	GraniteAsyncImage* _tmp21_;
	GtkFlowBox* _tmp22_;
};

static gint AsyncImageView_private_offset;
static gpointer async_image_view_parent_class = NULL;

GType async_image_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AsyncImageView, g_object_unref)
static void async_image_view_load_icons_data_free (gpointer _data);
static void async_image_view_load_icons (AsyncImageView* self,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
static void async_image_view_load_icons_finish (AsyncImageView* self,
                                         GAsyncResult* _res_);
static gboolean async_image_view_load_icons_co (AsyncImageViewLoadIconsData* _data_);
static Block4Data* block4_data_ref (Block4Data* _data4_);
static void block4_data_unref (void * _userdata_);
static void __lambda32_ (AsyncImageView* self,
                  GtkWidget* child);
static void ___lambda32__gfunc (gconstpointer data,
                         gpointer self);
static void __lambda33_ (Block4Data* _data4_,
                  const gchar* name);
static void ___lambda33__gfunc (gconstpointer data,
                         gpointer self);
static void _g_free0_ (gpointer var);
static inline void _g_list_free__g_free0_ (GList* self);
AsyncImageView* async_image_view_new (void);
AsyncImageView* async_image_view_construct (GType object_type);
static GObject * async_image_view_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties);
static void _async_image_view___lambda34_ (AsyncImageView* self);
static void __async_image_view___lambda34__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void async_image_view_finalize (GObject * obj);
static GType async_image_view_get_type_once (void);

static inline gpointer
async_image_view_get_instance_private (AsyncImageView* self)
{
	return G_STRUCT_MEMBER_P (self, AsyncImageView_private_offset);
}

static void
async_image_view_load_icons_data_free (gpointer _data)
{
	AsyncImageViewLoadIconsData* _data_;
	_data_ = _data;
#line 21 "../demo/Views/AsyncImageView.vala"
	_g_object_unref0 (_data_->self);
#line 21 "../demo/Views/AsyncImageView.vala"
	g_slice_free (AsyncImageViewLoadIconsData, _data_);
#line 162 "AsyncImageView.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 21 "../demo/Views/AsyncImageView.vala"
	return self ? g_object_ref (self) : NULL;
#line 170 "AsyncImageView.c"
}

static void
async_image_view_load_icons (AsyncImageView* self,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_)
{
	AsyncImageViewLoadIconsData* _data_;
	AsyncImageView* _tmp0_;
#line 21 "../demo/Views/AsyncImageView.vala"
	_data_ = g_slice_new0 (AsyncImageViewLoadIconsData);
#line 21 "../demo/Views/AsyncImageView.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
#line 21 "../demo/Views/AsyncImageView.vala"
	g_task_set_task_data (_data_->_async_result, _data_, async_image_view_load_icons_data_free);
#line 21 "../demo/Views/AsyncImageView.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 21 "../demo/Views/AsyncImageView.vala"
	_data_->self = _tmp0_;
#line 21 "../demo/Views/AsyncImageView.vala"
	async_image_view_load_icons_co (_data_);
#line 192 "AsyncImageView.c"
}

static void
async_image_view_load_icons_finish (AsyncImageView* self,
                                    GAsyncResult* _res_)
{
	AsyncImageViewLoadIconsData* _data_;
#line 21 "../demo/Views/AsyncImageView.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 202 "AsyncImageView.c"
}

static Block4Data*
block4_data_ref (Block4Data* _data4_)
{
#line 42 "../demo/Views/AsyncImageView.vala"
	g_atomic_int_inc (&_data4_->_ref_count_);
#line 42 "../demo/Views/AsyncImageView.vala"
	return _data4_;
#line 212 "AsyncImageView.c"
}

static void
block4_data_unref (void * _userdata_)
{
	Block4Data* _data4_;
	_data4_ = (Block4Data*) _userdata_;
#line 42 "../demo/Views/AsyncImageView.vala"
	if (g_atomic_int_dec_and_test (&_data4_->_ref_count_)) {
#line 222 "AsyncImageView.c"
		AsyncImageView* self;
#line 42 "../demo/Views/AsyncImageView.vala"
		self = _data4_->self;
#line 42 "../demo/Views/AsyncImageView.vala"
		_g_object_unref0 (_data4_->icons);
#line 42 "../demo/Views/AsyncImageView.vala"
		_g_object_unref0 (self);
#line 42 "../demo/Views/AsyncImageView.vala"
		g_slice_free (Block4Data, _data4_);
#line 232 "AsyncImageView.c"
	}
}

static void
__lambda32_ (AsyncImageView* self,
             GtkWidget* child)
{
#line 43 "../demo/Views/AsyncImageView.vala"
	g_return_if_fail (child != NULL);
#line 44 "../demo/Views/AsyncImageView.vala"
	gtk_widget_destroy (child);
#line 244 "AsyncImageView.c"
}

static void
___lambda32__gfunc (gconstpointer data,
                    gpointer self)
{
#line 43 "../demo/Views/AsyncImageView.vala"
	__lambda32_ ((AsyncImageView*) self, (GtkWidget*) data);
#line 253 "AsyncImageView.c"
}

static void
__lambda33_ (Block4Data* _data4_,
             const gchar* name)
{
	AsyncImageView* self;
	GeeArrayList* _tmp0_;
#line 50 "../demo/Views/AsyncImageView.vala"
	self = _data4_->self;
#line 50 "../demo/Views/AsyncImageView.vala"
	g_return_if_fail (name != NULL);
#line 51 "../demo/Views/AsyncImageView.vala"
	_tmp0_ = _data4_->icons;
#line 51 "../demo/Views/AsyncImageView.vala"
	gee_abstract_collection_add ((GeeAbstractCollection*) _tmp0_, name);
#line 270 "AsyncImageView.c"
}

static void
___lambda33__gfunc (gconstpointer data,
                    gpointer self)
{
#line 50 "../demo/Views/AsyncImageView.vala"
	__lambda33_ (self, (const gchar*) data);
#line 279 "AsyncImageView.c"
}

static void
_g_free0_ (gpointer var)
{
#line 50 "../demo/Views/AsyncImageView.vala"
	var = (g_free (var), NULL);
#line 287 "AsyncImageView.c"
}

static inline void
_g_list_free__g_free0_ (GList* self)
{
#line 50 "../demo/Views/AsyncImageView.vala"
	g_list_free_full (self, (GDestroyNotify) _g_free0_);
#line 295 "AsyncImageView.c"
}

static gboolean
async_image_view_load_icons_co (AsyncImageViewLoadIconsData* _data_)
{
#line 42 "../demo/Views/AsyncImageView.vala"
	switch (_data_->_state_) {
#line 42 "../demo/Views/AsyncImageView.vala"
		case 0:
#line 305 "AsyncImageView.c"
		goto _state_0;
		default:
#line 42 "../demo/Views/AsyncImageView.vala"
		g_assert_not_reached ();
#line 310 "AsyncImageView.c"
	}
	_state_0:
#line 42 "../demo/Views/AsyncImageView.vala"
	_data_->_data4_ = g_slice_new0 (Block4Data);
#line 42 "../demo/Views/AsyncImageView.vala"
	_data_->_data4_->_ref_count_ = 1;
#line 42 "../demo/Views/AsyncImageView.vala"
	_data_->_data4_->self = g_object_ref (_data_->self);
#line 42 "../demo/Views/AsyncImageView.vala"
	_data_->_data4_->_async_data_ = _data_;
#line 43 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp0_ = _data_->self->priv->flow_box;
#line 43 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp1_ = gtk_container_get_children ((GtkContainer*) _data_->_tmp0_);
#line 43 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp2_ = _data_->_tmp1_;
#line 43 "../demo/Views/AsyncImageView.vala"
	g_list_foreach (_data_->_tmp2_, ___lambda32__gfunc, _data_->self);
#line 43 "../demo/Views/AsyncImageView.vala"
	(_data_->_tmp2_ == NULL) ? NULL : (_data_->_tmp2_ = (g_list_free (_data_->_tmp2_), NULL));
#line 47 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp3_ = gee_array_list_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL);
#line 47 "../demo/Views/AsyncImageView.vala"
	_data_->_data4_->icons = _data_->_tmp3_;
#line 49 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp4_ = gtk_icon_theme_get_default ();
#line 49 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp5_ = _g_object_ref0 (_data_->_tmp4_);
#line 49 "../demo/Views/AsyncImageView.vala"
	_data_->icon_theme = _data_->_tmp5_;
#line 50 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp6_ = _data_->icon_theme;
#line 50 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp7_ = gtk_icon_theme_list_icons (_data_->_tmp6_, "Applications");
#line 50 "../demo/Views/AsyncImageView.vala"
	_data_->_tmp8_ = _data_->_tmp7_;
#line 50 "../demo/Views/AsyncImageView.vala"
	g_list_foreach (_data_->_tmp8_, ___lambda33__gfunc, _data_->_data4_);
#line 50 "../demo/Views/AsyncImageView.vala"
	(_data_->_tmp8_ == NULL) ? NULL : (_data_->_tmp8_ = (_g_list_free__g_free0_ (_data_->_tmp8_), NULL));
#line 351 "AsyncImageView.c"
	{
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_tmp9_ = _data_->_data4_->icons;
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_tmp10_ = _g_object_ref0 (_data_->_tmp9_);
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_name_list = _data_->_tmp10_;
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_tmp11_ = _data_->_name_list;
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_tmp12_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _data_->_tmp11_);
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_tmp13_ = _data_->_tmp12_;
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_name_size = _data_->_tmp13_;
#line 54 "../demo/Views/AsyncImageView.vala"
		_data_->_name_index = -1;
#line 54 "../demo/Views/AsyncImageView.vala"
		while (TRUE) {
#line 54 "../demo/Views/AsyncImageView.vala"
			_data_->_name_index = _data_->_name_index + 1;
#line 54 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp14_ = _data_->_name_index;
#line 54 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp15_ = _data_->_name_size;
#line 54 "../demo/Views/AsyncImageView.vala"
			if (!(_data_->_tmp14_ < _data_->_tmp15_)) {
#line 54 "../demo/Views/AsyncImageView.vala"
				break;
#line 381 "AsyncImageView.c"
			}
#line 54 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp16_ = _data_->_name_list;
#line 54 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp17_ = gee_abstract_list_get ((GeeAbstractList*) _data_->_tmp16_, _data_->_name_index);
#line 54 "../demo/Views/AsyncImageView.vala"
			_data_->name = (gchar*) _data_->_tmp17_;
#line 55 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp18_ = _data_->name;
#line 55 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp19_ = granite_async_image_new_from_icon_name_async (_data_->_tmp18_, GTK_ICON_SIZE_DIALOG, TRUE, TRUE);
#line 55 "../demo/Views/AsyncImageView.vala"
			g_object_ref_sink (_data_->_tmp19_);
#line 55 "../demo/Views/AsyncImageView.vala"
			_data_->image = _data_->_tmp19_;
#line 56 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp20_ = _data_->self->priv->flow_box;
#line 56 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp21_ = _data_->image;
#line 56 "../demo/Views/AsyncImageView.vala"
			gtk_container_add ((GtkContainer*) _data_->_tmp20_, (GtkWidget*) _data_->_tmp21_);
#line 57 "../demo/Views/AsyncImageView.vala"
			_data_->_tmp22_ = _data_->self->priv->flow_box;
#line 57 "../demo/Views/AsyncImageView.vala"
			gtk_widget_show_all ((GtkWidget*) _data_->_tmp22_);
#line 54 "../demo/Views/AsyncImageView.vala"
			_g_object_unref0 (_data_->image);
#line 54 "../demo/Views/AsyncImageView.vala"
			_g_free0 (_data_->name);
#line 411 "AsyncImageView.c"
		}
#line 54 "../demo/Views/AsyncImageView.vala"
		_g_object_unref0 (_data_->_name_list);
#line 415 "AsyncImageView.c"
	}
#line 42 "../demo/Views/AsyncImageView.vala"
	_g_object_unref0 (_data_->icon_theme);
#line 42 "../demo/Views/AsyncImageView.vala"
	block4_data_unref (_data_->_data4_);
#line 42 "../demo/Views/AsyncImageView.vala"
	_data_->_data4_ = NULL;
#line 42 "../demo/Views/AsyncImageView.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 42 "../demo/Views/AsyncImageView.vala"
	if (_data_->_state_ != 0) {
#line 42 "../demo/Views/AsyncImageView.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 42 "../demo/Views/AsyncImageView.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 431 "AsyncImageView.c"
		}
	}
#line 42 "../demo/Views/AsyncImageView.vala"
	g_object_unref (_data_->_async_result);
#line 42 "../demo/Views/AsyncImageView.vala"
	return FALSE;
#line 438 "AsyncImageView.c"
}

AsyncImageView*
async_image_view_construct (GType object_type)
{
	AsyncImageView * self = NULL;
#line 21 "../demo/Views/AsyncImageView.vala"
	self = (AsyncImageView*) g_object_new (object_type, NULL);
#line 21 "../demo/Views/AsyncImageView.vala"
	return self;
#line 449 "AsyncImageView.c"
}

AsyncImageView*
async_image_view_new (void)
{
#line 21 "../demo/Views/AsyncImageView.vala"
	return async_image_view_construct (TYPE_ASYNC_IMAGE_VIEW);
#line 457 "AsyncImageView.c"
}

static void
_async_image_view___lambda34_ (AsyncImageView* self)
{
#line 33 "../demo/Views/AsyncImageView.vala"
	async_image_view_load_icons (self, NULL, NULL);
#line 465 "AsyncImageView.c"
}

static void
__async_image_view___lambda34__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
#line 33 "../demo/Views/AsyncImageView.vala"
	_async_image_view___lambda34_ ((AsyncImageView*) self);
#line 474 "AsyncImageView.c"
}

static GObject *
async_image_view_constructor (GType type,
                              guint n_construct_properties,
                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	AsyncImageView * self;
	GtkFlowBox* _tmp0_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp1_;
	GtkScrolledWindow* _tmp2_;
	GtkScrolledWindow* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkScrolledWindow* _tmp5_;
	GtkFlowBox* _tmp6_;
	GtkButton* load_button = NULL;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkButton* _tmp9_;
	GtkButton* _tmp10_;
	GtkScrolledWindow* _tmp11_;
	GtkSeparator* _tmp12_;
	GtkSeparator* _tmp13_;
	GtkButton* _tmp14_;
#line 24 "../demo/Views/AsyncImageView.vala"
	parent_class = G_OBJECT_CLASS (async_image_view_parent_class);
#line 24 "../demo/Views/AsyncImageView.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 24 "../demo/Views/AsyncImageView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_ASYNC_IMAGE_VIEW, AsyncImageView);
#line 25 "../demo/Views/AsyncImageView.vala"
	_tmp0_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 25 "../demo/Views/AsyncImageView.vala"
	g_object_ref_sink (_tmp0_);
#line 25 "../demo/Views/AsyncImageView.vala"
	_g_object_unref0 (self->priv->flow_box);
#line 25 "../demo/Views/AsyncImageView.vala"
	self->priv->flow_box = _tmp0_;
#line 27 "../demo/Views/AsyncImageView.vala"
	_tmp1_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 27 "../demo/Views/AsyncImageView.vala"
	g_object_ref_sink (_tmp1_);
#line 27 "../demo/Views/AsyncImageView.vala"
	scrolled = _tmp1_;
#line 28 "../demo/Views/AsyncImageView.vala"
	_tmp2_ = scrolled;
#line 28 "../demo/Views/AsyncImageView.vala"
	g_object_set ((GtkWidget*) _tmp2_, "expand", TRUE, NULL);
#line 29 "../demo/Views/AsyncImageView.vala"
	_tmp3_ = scrolled;
#line 29 "../demo/Views/AsyncImageView.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 29 "../demo/Views/AsyncImageView.vala"
	gtk_style_context_add_class (_tmp4_, GTK_STYLE_CLASS_VIEW);
#line 30 "../demo/Views/AsyncImageView.vala"
	_tmp5_ = scrolled;
#line 30 "../demo/Views/AsyncImageView.vala"
	_tmp6_ = self->priv->flow_box;
#line 30 "../demo/Views/AsyncImageView.vala"
	gtk_container_add ((GtkContainer*) _tmp5_, (GtkWidget*) _tmp6_);
#line 32 "../demo/Views/AsyncImageView.vala"
	_tmp7_ = (GtkButton*) gtk_button_new_with_label ("Load Applications Icons");
#line 32 "../demo/Views/AsyncImageView.vala"
	g_object_ref_sink (_tmp7_);
#line 32 "../demo/Views/AsyncImageView.vala"
	load_button = _tmp7_;
#line 33 "../demo/Views/AsyncImageView.vala"
	_tmp8_ = load_button;
#line 33 "../demo/Views/AsyncImageView.vala"
	g_signal_connect_object (_tmp8_, "clicked", (GCallback) __async_image_view___lambda34__gtk_button_clicked, self, 0);
#line 34 "../demo/Views/AsyncImageView.vala"
	_tmp9_ = load_button;
#line 34 "../demo/Views/AsyncImageView.vala"
	g_object_set ((GtkWidget*) _tmp9_, "margin", 6, NULL);
#line 35 "../demo/Views/AsyncImageView.vala"
	_tmp10_ = load_button;
#line 35 "../demo/Views/AsyncImageView.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp10_, GTK_ALIGN_END);
#line 37 "../demo/Views/AsyncImageView.vala"
	_tmp11_ = scrolled;
#line 37 "../demo/Views/AsyncImageView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp11_, 0, 0, 1, 1);
#line 38 "../demo/Views/AsyncImageView.vala"
	_tmp12_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
#line 38 "../demo/Views/AsyncImageView.vala"
	g_object_ref_sink (_tmp12_);
#line 38 "../demo/Views/AsyncImageView.vala"
	_tmp13_ = _tmp12_;
#line 38 "../demo/Views/AsyncImageView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp13_, 0, 1, 1, 1);
#line 38 "../demo/Views/AsyncImageView.vala"
	_g_object_unref0 (_tmp13_);
#line 39 "../demo/Views/AsyncImageView.vala"
	_tmp14_ = load_button;
#line 39 "../demo/Views/AsyncImageView.vala"
	gtk_grid_attach ((GtkGrid*) self, (GtkWidget*) _tmp14_, 0, 2, 1, 1);
#line 24 "../demo/Views/AsyncImageView.vala"
	_g_object_unref0 (load_button);
#line 24 "../demo/Views/AsyncImageView.vala"
	_g_object_unref0 (scrolled);
#line 24 "../demo/Views/AsyncImageView.vala"
	return obj;
#line 580 "AsyncImageView.c"
}

static void
async_image_view_class_init (AsyncImageViewClass * klass,
                             gpointer klass_data)
{
#line 21 "../demo/Views/AsyncImageView.vala"
	async_image_view_parent_class = g_type_class_peek_parent (klass);
#line 21 "../demo/Views/AsyncImageView.vala"
	g_type_class_adjust_private_offset (klass, &AsyncImageView_private_offset);
#line 21 "../demo/Views/AsyncImageView.vala"
	G_OBJECT_CLASS (klass)->constructor = async_image_view_constructor;
#line 21 "../demo/Views/AsyncImageView.vala"
	G_OBJECT_CLASS (klass)->finalize = async_image_view_finalize;
#line 595 "AsyncImageView.c"
}

static void
async_image_view_instance_init (AsyncImageView * self,
                                gpointer klass)
{
#line 21 "../demo/Views/AsyncImageView.vala"
	self->priv = async_image_view_get_instance_private (self);
#line 604 "AsyncImageView.c"
}

static void
async_image_view_finalize (GObject * obj)
{
	AsyncImageView * self;
#line 21 "../demo/Views/AsyncImageView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_ASYNC_IMAGE_VIEW, AsyncImageView);
#line 22 "../demo/Views/AsyncImageView.vala"
	_g_object_unref0 (self->priv->flow_box);
#line 21 "../demo/Views/AsyncImageView.vala"
	G_OBJECT_CLASS (async_image_view_parent_class)->finalize (obj);
#line 617 "AsyncImageView.c"
}

static GType
async_image_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (AsyncImageViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) async_image_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (AsyncImageView), 0, (GInstanceInitFunc) async_image_view_instance_init, NULL };
	GType async_image_view_type_id;
	async_image_view_type_id = g_type_register_static (gtk_grid_get_type (), "AsyncImageView", &g_define_type_info, 0);
	AsyncImageView_private_offset = g_type_add_instance_private (async_image_view_type_id, sizeof (AsyncImageViewPrivate));
	return async_image_view_type_id;
}

GType
async_image_view_get_type (void)
{
	static volatile gsize async_image_view_type_id__volatile = 0;
	if (g_once_init_enter (&async_image_view_type_id__volatile)) {
		GType async_image_view_type_id;
		async_image_view_type_id = async_image_view_get_type_once ();
		g_once_init_leave (&async_image_view_type_id__volatile, async_image_view_type_id);
	}
	return async_image_view_type_id__volatile;
}


/* CompositedWindow.c generated by valac 0.48.14, the Vala compiler
 * generated from CompositedWindow.vala, do not modify */

/*
 *  Copyright (C) 2019 elementary, Inc. (https://elementary.io)
 *                2011-2013 Maxwell Barvian <maxwell@elementaryos.org>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gdk/gdk.h>

#define GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW (granite_widgets_composited_window_get_type ())
#define GRANITE_WIDGETS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, GraniteWidgetsCompositedWindow))
#define GRANITE_WIDGETS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, GraniteWidgetsCompositedWindowClass))
#define GRANITE_WIDGETS_IS_COMPOSITED_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW))
#define GRANITE_WIDGETS_IS_COMPOSITED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW))
#define GRANITE_WIDGETS_COMPOSITED_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, GraniteWidgetsCompositedWindowClass))

typedef struct _GraniteWidgetsCompositedWindow GraniteWidgetsCompositedWindow;
typedef struct _GraniteWidgetsCompositedWindowClass GraniteWidgetsCompositedWindowClass;
typedef struct _GraniteWidgetsCompositedWindowPrivate GraniteWidgetsCompositedWindowPrivate;
enum  {
	GRANITE_WIDGETS_COMPOSITED_WINDOW_0_PROPERTY,
	GRANITE_WIDGETS_COMPOSITED_WINDOW_NUM_PROPERTIES
};
static GParamSpec* granite_widgets_composited_window_properties[GRANITE_WIDGETS_COMPOSITED_WINDOW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _GraniteWidgetsCompositedWindow {
	GtkWindow parent_instance;
	GraniteWidgetsCompositedWindowPrivate * priv;
};

struct _GraniteWidgetsCompositedWindowClass {
	GtkWindowClass parent_class;
};

static gpointer granite_widgets_composited_window_parent_class = NULL;
static GtkBuildableIface * granite_widgets_composited_window_gtk_buildable_parent_iface = NULL;

GType granite_widgets_composited_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsCompositedWindow, g_object_unref)
#define GRANITE_WIDGETS_COMPOSITED_WINDOW_STYLESHEET ".composited { background-color: rgba (0,0,0,0); }"
GraniteWidgetsCompositedWindow* granite_widgets_composited_window_new (void);
GraniteWidgetsCompositedWindow* granite_widgets_composited_window_construct (GType object_type);
static GObject * granite_widgets_composited_window_constructor (GType type,
                                                         guint n_construct_properties,
                                                         GObjectConstructParam * construct_properties);
GtkCssProvider* granite_widgets_utils_set_theming (GtkWidget* widget,
                                                   const gchar* stylesheet,
                                                   const gchar* class_name,
                                                   gint priority) G_GNUC_DEPRECATED;
#define GRANITE_STYLE_CLASS_COMPOSITED "composited"
static GType granite_widgets_composited_window_get_type_once (void);

GraniteWidgetsCompositedWindow*
granite_widgets_composited_window_construct (GType object_type)
{
	GraniteWidgetsCompositedWindow * self = NULL;
#line 44 "../lib/Widgets/CompositedWindow.vala"
	self = (GraniteWidgetsCompositedWindow*) g_object_new (object_type, NULL);
#line 44 "../lib/Widgets/CompositedWindow.vala"
	return self;
#line 84 "CompositedWindow.c"
}

GraniteWidgetsCompositedWindow*
granite_widgets_composited_window_new (void)
{
#line 44 "../lib/Widgets/CompositedWindow.vala"
	return granite_widgets_composited_window_construct (GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW);
#line 92 "CompositedWindow.c"
}

static GObject *
granite_widgets_composited_window_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteWidgetsCompositedWindow * self;
	GdkScreen* _tmp0_;
	GdkVisual* _tmp1_;
	GtkCssProvider* _tmp2_;
	GtkCssProvider* _tmp3_;
#line 48 "../lib/Widgets/CompositedWindow.vala"
	parent_class = G_OBJECT_CLASS (granite_widgets_composited_window_parent_class);
#line 48 "../lib/Widgets/CompositedWindow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 48 "../lib/Widgets/CompositedWindow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_COMPOSITED_WINDOW, GraniteWidgetsCompositedWindow);
#line 50 "../lib/Widgets/CompositedWindow.vala"
	gtk_widget_set_app_paintable ((GtkWidget*) self, TRUE);
#line 51 "../lib/Widgets/CompositedWindow.vala"
	gtk_window_set_decorated ((GtkWindow*) self, FALSE);
#line 52 "../lib/Widgets/CompositedWindow.vala"
	gtk_window_set_resizable ((GtkWindow*) self, FALSE);
#line 54 "../lib/Widgets/CompositedWindow.vala"
	_tmp0_ = gtk_window_get_screen ((GtkWindow*) self);
#line 54 "../lib/Widgets/CompositedWindow.vala"
	_tmp1_ = gdk_screen_get_rgba_visual (_tmp0_);
#line 54 "../lib/Widgets/CompositedWindow.vala"
	gtk_widget_set_visual ((GtkWidget*) self, _tmp1_);
#line 57 "../lib/Widgets/CompositedWindow.vala"
	_tmp2_ = granite_widgets_utils_set_theming ((GtkWidget*) self, GRANITE_WIDGETS_COMPOSITED_WINDOW_STYLESHEET, GRANITE_STYLE_CLASS_COMPOSITED, GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 57 "../lib/Widgets/CompositedWindow.vala"
	_tmp3_ = _tmp2_;
#line 57 "../lib/Widgets/CompositedWindow.vala"
	_g_object_unref0 (_tmp3_);
#line 48 "../lib/Widgets/CompositedWindow.vala"
	return obj;
#line 133 "CompositedWindow.c"
}

static void
granite_widgets_composited_window_class_init (GraniteWidgetsCompositedWindowClass * klass,
                                              gpointer klass_data)
{
#line 44 "../lib/Widgets/CompositedWindow.vala"
	granite_widgets_composited_window_parent_class = g_type_class_peek_parent (klass);
#line 44 "../lib/Widgets/CompositedWindow.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_widgets_composited_window_constructor;
#line 144 "CompositedWindow.c"
}

static void
granite_widgets_composited_window_gtk_buildable_interface_init (GtkBuildableIface * iface,
                                                                gpointer iface_data)
{
#line 44 "../lib/Widgets/CompositedWindow.vala"
	granite_widgets_composited_window_gtk_buildable_parent_iface = g_type_interface_peek_parent (iface);
#line 153 "CompositedWindow.c"
}

static void
granite_widgets_composited_window_instance_init (GraniteWidgetsCompositedWindow * self,
                                                 gpointer klass)
{
}

/**
     * CompositedWindow is an invisible window without decorations or background.
     *
     * It is useful for handling different situations where the user has to
     * "pick" something or select an area on the screen, although it can be used in other scenarios too.
     * Most of the times the window will act as a surface to receive mouse / key press events from the user.
     *
     * CompositedWindow does not and will not try to set any default size. You are responsible to
     * set it's size to e.g: the window's //screen// size to have the window cover the enire //screen// area.
     *
     * Note that you should provide a way for the user to exit the window since it's invisible.
     * You can do that by connecting to {@link Gtk.Widget.key_press_event} signal and seeing if
     * e.g: the user pressed an Escape key. You should always {@link Gtk.Widget.destroy} the window after
     * it's not needed.
     *
     * Do not forget to call {@link Gtk.Widget.show_all} to actually start receiving events.
     */
static GType
granite_widgets_composited_window_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteWidgetsCompositedWindowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_widgets_composited_window_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteWidgetsCompositedWindow), 0, (GInstanceInitFunc) granite_widgets_composited_window_instance_init, NULL };
	static const GInterfaceInfo gtk_buildable_info = { (GInterfaceInitFunc) granite_widgets_composited_window_gtk_buildable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType granite_widgets_composited_window_type_id;
	granite_widgets_composited_window_type_id = g_type_register_static (gtk_window_get_type (), "GraniteWidgetsCompositedWindow", &g_define_type_info, 0);
	g_type_add_interface_static (granite_widgets_composited_window_type_id, gtk_buildable_get_type (), &gtk_buildable_info);
	return granite_widgets_composited_window_type_id;
}

GType
granite_widgets_composited_window_get_type (void)
{
	static volatile gsize granite_widgets_composited_window_type_id__volatile = 0;
	if (g_once_init_enter (&granite_widgets_composited_window_type_id__volatile)) {
		GType granite_widgets_composited_window_type_id;
		granite_widgets_composited_window_type_id = granite_widgets_composited_window_get_type_once ();
		g_once_init_leave (&granite_widgets_composited_window_type_id__volatile, granite_widgets_composited_window_type_id);
	}
	return granite_widgets_composited_window_type_id__volatile;
}


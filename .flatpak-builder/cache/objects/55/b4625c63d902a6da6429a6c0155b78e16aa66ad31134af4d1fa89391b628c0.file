/* Dialog.c generated by valac 0.48.14, the Vala compiler
 * generated from Dialog.vala, do not modify */

/*
* Copyright 2021 elementary, Inc. (https://elementary.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>

#define GRANITE_TYPE_DIALOG (granite_dialog_get_type ())
#define GRANITE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_TYPE_DIALOG, GraniteDialog))
#define GRANITE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_TYPE_DIALOG, GraniteDialogClass))
#define GRANITE_IS_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_TYPE_DIALOG))
#define GRANITE_IS_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_TYPE_DIALOG))
#define GRANITE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_TYPE_DIALOG, GraniteDialogClass))

typedef struct _GraniteDialog GraniteDialog;
typedef struct _GraniteDialogClass GraniteDialogClass;
typedef struct _GraniteDialogPrivate GraniteDialogPrivate;
enum  {
	GRANITE_DIALOG_0_PROPERTY,
	GRANITE_DIALOG_NUM_PROPERTIES
};
static GParamSpec* granite_dialog_properties[GRANITE_DIALOG_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _GraniteDialog {
	GtkDialog parent_instance;
	GraniteDialogPrivate * priv;
};

struct _GraniteDialogClass {
	GtkDialogClass parent_class;
};

static gpointer granite_dialog_parent_class = NULL;

GType granite_dialog_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteDialog, g_object_unref)
GraniteDialog* granite_dialog_new (void);
GraniteDialog* granite_dialog_construct (GType object_type);
static void granite_dialog_real_constructed (GObject* base);
static GObject * granite_dialog_constructor (GType type,
                                      guint n_construct_properties,
                                      GObjectConstructParam * construct_properties);
static GType granite_dialog_get_type_once (void);

/**
     * Constructs a new {@link Granite.Dialog}.
     */
GraniteDialog*
granite_dialog_construct (GType object_type)
{
	GraniteDialog * self = NULL;
#line 62 "../lib/Widgets/Dialog.vala"
	self = (GraniteDialog*) g_object_new (object_type, NULL);
#line 62 "../lib/Widgets/Dialog.vala"
	return self;
#line 77 "Dialog.c"
}

GraniteDialog*
granite_dialog_new (void)
{
#line 62 "../lib/Widgets/Dialog.vala"
	return granite_dialog_construct (GRANITE_TYPE_DIALOG);
#line 85 "Dialog.c"
}

static void
granite_dialog_real_constructed (GObject* base)
{
	GraniteDialog * self;
	GtkStyleContext* _tmp0_;
	GtkHeaderBar* headerbar = NULL;
	GtkHeaderBar* _tmp1_ = NULL;
	GtkStyleContext* _tmp2_;
#line 89 "../lib/Widgets/Dialog.vala"
	self = (GraniteDialog*) base;
#line 90 "../lib/Widgets/Dialog.vala"
	G_OBJECT_CLASS (granite_dialog_parent_class)->constructed ((GObject*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_dialog_get_type (), GtkDialog));
#line 92 "../lib/Widgets/Dialog.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 92 "../lib/Widgets/Dialog.vala"
	gtk_style_context_add_class (_tmp0_, "csd");
#line 94 "../lib/Widgets/Dialog.vala"
	_tmp1_ = (GtkHeaderBar*) gtk_header_bar_new ();
#line 94 "../lib/Widgets/Dialog.vala"
	gtk_header_bar_set_has_subtitle (_tmp1_, FALSE);
#line 94 "../lib/Widgets/Dialog.vala"
	g_object_ref_sink (_tmp1_);
#line 94 "../lib/Widgets/Dialog.vala"
	headerbar = _tmp1_;
#line 97 "../lib/Widgets/Dialog.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) headerbar);
#line 97 "../lib/Widgets/Dialog.vala"
	gtk_style_context_add_class (_tmp2_, "default-decoration");
#line 98 "../lib/Widgets/Dialog.vala"
	gtk_widget_show ((GtkWidget*) headerbar);
#line 100 "../lib/Widgets/Dialog.vala"
	gtk_window_set_titlebar ((GtkWindow*) self, (GtkWidget*) headerbar);
#line 89 "../lib/Widgets/Dialog.vala"
	_g_object_unref0 (headerbar);
#line 122 "Dialog.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 67 "../lib/Widgets/Dialog.vala"
	return self ? g_object_ref (self) : NULL;
#line 130 "Dialog.c"
}

static GObject *
granite_dialog_constructor (GType type,
                            guint n_construct_properties,
                            GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteDialog * self;
	GtkBox* action_area = NULL;
	GtkBox* _tmp0_;
	GtkBox* _tmp1_;
	GtkBox* content_area = NULL;
	GtkBox* _tmp2_;
	GtkBox* _tmp3_;
	GtkBox* _tmp4_;
	GtkContainer* _tmp5_;
	GtkBox* _tmp6_;
	GtkContainer* content_area_parent = NULL;
	GtkBox* _tmp7_;
	GtkContainer* _tmp8_;
	GtkContainer* _tmp9_;
	GtkContainer* _tmp10_;
	GtkBox* _tmp11_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp12_ = NULL;
	GtkGrid* _tmp13_;
	GtkBox* _tmp14_;
	GtkGrid* _tmp15_;
	GtkBox* _tmp16_;
	GtkGrid* _tmp17_;
	GtkContainer* _tmp18_;
	GtkGrid* _tmp19_;
#line 66 "../lib/Widgets/Dialog.vala"
	parent_class = G_OBJECT_CLASS (granite_dialog_parent_class);
#line 66 "../lib/Widgets/Dialog.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 66 "../lib/Widgets/Dialog.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_DIALOG, GraniteDialog);
#line 67 "../lib/Widgets/Dialog.vala"
	_tmp0_ = gtk_dialog_get_action_area ((GtkDialog*) self);
#line 67 "../lib/Widgets/Dialog.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 67 "../lib/Widgets/Dialog.vala"
	action_area = _tmp1_;
#line 68 "../lib/Widgets/Dialog.vala"
	_tmp2_ = gtk_dialog_get_content_area ((GtkDialog*) self);
#line 68 "../lib/Widgets/Dialog.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 68 "../lib/Widgets/Dialog.vala"
	content_area = _tmp3_;
#line 70 "../lib/Widgets/Dialog.vala"
	_tmp4_ = action_area;
#line 70 "../lib/Widgets/Dialog.vala"
	_tmp5_ = gtk_widget_get_parent ((GtkWidget*) _tmp4_);
#line 70 "../lib/Widgets/Dialog.vala"
	_tmp6_ = action_area;
#line 70 "../lib/Widgets/Dialog.vala"
	gtk_container_remove (_tmp5_, (GtkWidget*) _tmp6_);
#line 72 "../lib/Widgets/Dialog.vala"
	_tmp7_ = content_area;
#line 72 "../lib/Widgets/Dialog.vala"
	_tmp8_ = gtk_widget_get_parent ((GtkWidget*) _tmp7_);
#line 72 "../lib/Widgets/Dialog.vala"
	_tmp9_ = _g_object_ref0 (_tmp8_);
#line 72 "../lib/Widgets/Dialog.vala"
	content_area_parent = _tmp9_;
#line 73 "../lib/Widgets/Dialog.vala"
	_tmp10_ = content_area_parent;
#line 73 "../lib/Widgets/Dialog.vala"
	_tmp11_ = content_area;
#line 73 "../lib/Widgets/Dialog.vala"
	gtk_container_remove (_tmp10_, (GtkWidget*) _tmp11_);
#line 75 "../lib/Widgets/Dialog.vala"
	gtk_window_set_deletable ((GtkWindow*) self, FALSE);
#line 76 "../lib/Widgets/Dialog.vala"
	g_object_set ((GtkWindow*) self, "window-position", GTK_WIN_POS_CENTER_ON_PARENT, NULL);
#line 77 "../lib/Widgets/Dialog.vala"
	g_object_set ((GtkDialog*) self, "use-header-bar", (gint) FALSE, NULL);
#line 79 "../lib/Widgets/Dialog.vala"
	_tmp12_ = (GtkGrid*) gtk_grid_new ();
#line 79 "../lib/Widgets/Dialog.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp12_, GTK_ORIENTATION_VERTICAL);
#line 79 "../lib/Widgets/Dialog.vala"
	g_object_ref_sink (_tmp12_);
#line 79 "../lib/Widgets/Dialog.vala"
	grid = _tmp12_;
#line 82 "../lib/Widgets/Dialog.vala"
	_tmp13_ = grid;
#line 82 "../lib/Widgets/Dialog.vala"
	_tmp14_ = content_area;
#line 82 "../lib/Widgets/Dialog.vala"
	gtk_container_add ((GtkContainer*) _tmp13_, (GtkWidget*) _tmp14_);
#line 83 "../lib/Widgets/Dialog.vala"
	_tmp15_ = grid;
#line 83 "../lib/Widgets/Dialog.vala"
	_tmp16_ = action_area;
#line 83 "../lib/Widgets/Dialog.vala"
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
#line 84 "../lib/Widgets/Dialog.vala"
	_tmp17_ = grid;
#line 84 "../lib/Widgets/Dialog.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp17_);
#line 86 "../lib/Widgets/Dialog.vala"
	_tmp18_ = content_area_parent;
#line 86 "../lib/Widgets/Dialog.vala"
	_tmp19_ = grid;
#line 86 "../lib/Widgets/Dialog.vala"
	gtk_container_add (_tmp18_, (GtkWidget*) _tmp19_);
#line 66 "../lib/Widgets/Dialog.vala"
	_g_object_unref0 (grid);
#line 66 "../lib/Widgets/Dialog.vala"
	_g_object_unref0 (content_area_parent);
#line 66 "../lib/Widgets/Dialog.vala"
	_g_object_unref0 (content_area);
#line 66 "../lib/Widgets/Dialog.vala"
	_g_object_unref0 (action_area);
#line 66 "../lib/Widgets/Dialog.vala"
	return obj;
#line 251 "Dialog.c"
}

static void
granite_dialog_class_init (GraniteDialogClass * klass,
                           gpointer klass_data)
{
#line 58 "../lib/Widgets/Dialog.vala"
	granite_dialog_parent_class = g_type_class_peek_parent (klass);
#line 58 "../lib/Widgets/Dialog.vala"
	((GObjectClass *) klass)->constructed = (void (*) (GObject*)) granite_dialog_real_constructed;
#line 58 "../lib/Widgets/Dialog.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_dialog_constructor;
#line 264 "Dialog.c"
}

static void
granite_dialog_instance_init (GraniteDialog * self,
                              gpointer klass)
{
}

/**
* Granite.Dialog is a styled {@link Gtk.Dialog} that uses an empty title area and
* action widgets in the bottom/end position.
*
* ''Example''<<BR>>
* {{{
*   var header = new Granite.HeaderLabel ("Header");
*   var entry = new Gtk.Entry ();
*   var gtk_switch = new Gtk.Switch () {
*       halign = Gtk.Align.START
*   };
*
*   var layout = new Gtk.Grid () {
*       row_spacing = 12
*   };
*   layout.attach (header, 0, 1);
*   layout.attach (entry, 0, 2);
*   layout.attach (gtk_switch, 0, 3);
*
*   var dialog = new Granite.Dialog () {
*       transient_for = window
*   };
*   dialog.content_area.add (layout);
*   dialog.add_button ("Cancel", Gtk.ResponseType.CANCEL);
*
*   var suggested_button = dialog.add_button ("Suggested Action", Gtk.ResponseType.ACCEPT);
*   suggested_button.get_style_context ().add_class (Gtk.STYLE_CLASS_SUGGESTED_ACTION);
*
*   dialog.show_all ();
*   dialog.response.connect ((response_id) => {
*       if (response_id == Gtk.ResponseType.ACCEPT) {
*           // Do Something
*       }
*
*       dialog.destroy ();
*   });
* }}}
*/
static GType
granite_dialog_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteDialogClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_dialog_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteDialog), 0, (GInstanceInitFunc) granite_dialog_instance_init, NULL };
	GType granite_dialog_type_id;
	granite_dialog_type_id = g_type_register_static (gtk_dialog_get_type (), "GraniteDialog", &g_define_type_info, 0);
	return granite_dialog_type_id;
}

GType
granite_dialog_get_type (void)
{
	static volatile gsize granite_dialog_type_id__volatile = 0;
	if (g_once_init_enter (&granite_dialog_type_id__volatile)) {
		GType granite_dialog_type_id;
		granite_dialog_type_id = granite_dialog_get_type_once ();
		g_once_init_leave (&granite_dialog_type_id__volatile, granite_dialog_type_id);
	}
	return granite_dialog_type_id__volatile;
}


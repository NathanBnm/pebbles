/* DatePicker.c generated by valac 0.48.14, the Vala compiler
 * generated from DatePicker.vala, do not modify */

/*
 *  Copyright (C) 2019 elementary, Inc. (https://elementary.io)
 *                2011â€“2013 Maxwell Barvian <maxwell@elementaryos.org>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gdk/gdk.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <cairo-gobject.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>

#define GRANITE_WIDGETS_TYPE_DATE_PICKER (granite_widgets_date_picker_get_type ())
#define GRANITE_WIDGETS_DATE_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_DATE_PICKER, GraniteWidgetsDatePicker))
#define GRANITE_WIDGETS_DATE_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_DATE_PICKER, GraniteWidgetsDatePickerClass))
#define GRANITE_WIDGETS_IS_DATE_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_DATE_PICKER))
#define GRANITE_WIDGETS_IS_DATE_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_DATE_PICKER))
#define GRANITE_WIDGETS_DATE_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_DATE_PICKER, GraniteWidgetsDatePickerClass))

typedef struct _GraniteWidgetsDatePicker GraniteWidgetsDatePicker;
typedef struct _GraniteWidgetsDatePickerClass GraniteWidgetsDatePickerClass;
typedef struct _GraniteWidgetsDatePickerPrivate GraniteWidgetsDatePickerPrivate;
enum  {
	GRANITE_WIDGETS_DATE_PICKER_0_PROPERTY,
	GRANITE_WIDGETS_DATE_PICKER_FORMAT_PROPERTY,
	GRANITE_WIDGETS_DATE_PICKER_DATE_PROPERTY,
	GRANITE_WIDGETS_DATE_PICKER_NUM_PROPERTIES
};
static GParamSpec* granite_widgets_date_picker_properties[GRANITE_WIDGETS_DATE_PICKER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
enum  {
	GRANITE_WIDGETS_DATE_PICKER_DATE_CHANGED_SIGNAL,
	GRANITE_WIDGETS_DATE_PICKER_NUM_SIGNALS
};
static guint granite_widgets_date_picker_signals[GRANITE_WIDGETS_DATE_PICKER_NUM_SIGNALS] = {0};

struct _GraniteWidgetsDatePicker {
	GtkEntry parent_instance;
	GtkEventBox* dropdown;
	GtkCalendar* calendar;
	GraniteWidgetsDatePickerPrivate * priv;
};

struct _GraniteWidgetsDatePickerClass {
	GtkEntryClass parent_class;
	void (*position_dropdown) (GraniteWidgetsDatePicker* self, GdkRectangle* rect);
};

struct _GraniteWidgetsDatePickerPrivate {
	gchar* _format;
	GtkPopover* popover;
	GDateTime* _date;
	gboolean proc_next_day_selected;
};

static gint GraniteWidgetsDatePicker_private_offset;
static gpointer granite_widgets_date_picker_parent_class = NULL;
static GtkBuildableIface * granite_widgets_date_picker_gtk_buildable_parent_iface = NULL;

GType granite_widgets_date_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsDatePicker, g_object_unref)
void granite_widgets_date_picker_position_dropdown (GraniteWidgetsDatePicker* self,
                                                    GdkRectangle* rect);
#define GRANITE_WIDGETS_DATE_PICKER_OFFSET 15
#define GRANITE_WIDGETS_DATE_PICKER_MARGIN 6
const gchar* granite_widgets_date_picker_get_format (GraniteWidgetsDatePicker* self);
static void granite_widgets_date_picker_set_format (GraniteWidgetsDatePicker* self,
                                             const gchar* value);
GDateTime* granite_widgets_date_picker_get_date (GraniteWidgetsDatePicker* self);
void granite_widgets_date_picker_set_date (GraniteWidgetsDatePicker* self,
                                           GDateTime* value);
GraniteWidgetsDatePicker* granite_widgets_date_picker_new_with_format (const gchar* format);
GraniteWidgetsDatePicker* granite_widgets_date_picker_construct_with_format (GType object_type,
                                                                             const gchar* format);
static void granite_widgets_date_picker_on_icon_press (GraniteWidgetsDatePicker* self,
                                                GtkEntryIconPosition position);
static void granite_widgets_date_picker_real_position_dropdown (GraniteWidgetsDatePicker* self,
                                                         GdkRectangle* rect);
static void granite_widgets_date_picker_on_calendar_day_selected (GraniteWidgetsDatePicker* self);
static void granite_widgets_date_picker_hide_dropdown (GraniteWidgetsDatePicker* self);
GraniteWidgetsDatePicker* granite_widgets_date_picker_new (void);
GraniteWidgetsDatePicker* granite_widgets_date_picker_construct (GType object_type);
static GObject * granite_widgets_date_picker_constructor (GType type,
                                                   guint n_construct_properties,
                                                   GObjectConstructParam * construct_properties);
gchar* granite_date_time_get_default_date_format (gboolean with_weekday,
                                                  gboolean with_day,
                                                  gboolean with_year);
static void _granite_widgets_date_picker_on_icon_press_gtk_entry_icon_release (GtkEntry* _sender,
                                                                        GtkEntryIconPosition icon_pos,
                                                                        GdkEvent* event,
                                                                        gpointer self);
static void _granite_widgets_date_picker_on_calendar_day_selected_gtk_calendar_day_selected (GtkCalendar* _sender,
                                                                                      gpointer self);
static void _granite_widgets_date_picker___lambda18_ (GraniteWidgetsDatePicker* self);
static void __granite_widgets_date_picker___lambda18__gtk_calendar_next_month (GtkCalendar* _sender,
                                                                        gpointer self);
static void _granite_widgets_date_picker___lambda19_ (GraniteWidgetsDatePicker* self);
static void __granite_widgets_date_picker___lambda19__gtk_calendar_next_year (GtkCalendar* _sender,
                                                                       gpointer self);
static void _granite_widgets_date_picker___lambda20_ (GraniteWidgetsDatePicker* self);
static void __granite_widgets_date_picker___lambda20__gtk_calendar_prev_month (GtkCalendar* _sender,
                                                                        gpointer self);
static void _granite_widgets_date_picker___lambda21_ (GraniteWidgetsDatePicker* self);
static void __granite_widgets_date_picker___lambda21__gtk_calendar_prev_year (GtkCalendar* _sender,
                                                                       gpointer self);
static void granite_widgets_date_picker_finalize (GObject * obj);
static GType granite_widgets_date_picker_get_type_once (void);
static void _vala_granite_widgets_date_picker_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec);
static void _vala_granite_widgets_date_picker_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec);

static inline gpointer
granite_widgets_date_picker_get_instance_private (GraniteWidgetsDatePicker* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteWidgetsDatePicker_private_offset);
}

const gchar*
granite_widgets_date_picker_get_format (GraniteWidgetsDatePicker* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 39 "../lib/Widgets/DatePicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 39 "../lib/Widgets/DatePicker.vala"
	_tmp0_ = self->priv->_format;
#line 39 "../lib/Widgets/DatePicker.vala"
	result = _tmp0_;
#line 39 "../lib/Widgets/DatePicker.vala"
	return result;
#line 162 "DatePicker.c"
}

static void
granite_widgets_date_picker_set_format (GraniteWidgetsDatePicker* self,
                                        const gchar* value)
{
	gchar* old_value;
#line 39 "../lib/Widgets/DatePicker.vala"
	g_return_if_fail (self != NULL);
#line 39 "../lib/Widgets/DatePicker.vala"
	old_value = granite_widgets_date_picker_get_format (self);
#line 39 "../lib/Widgets/DatePicker.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 176 "DatePicker.c"
		gchar* _tmp0_;
#line 39 "../lib/Widgets/DatePicker.vala"
		_tmp0_ = g_strdup (value);
#line 39 "../lib/Widgets/DatePicker.vala"
		_g_free0 (self->priv->_format);
#line 39 "../lib/Widgets/DatePicker.vala"
		self->priv->_format = _tmp0_;
#line 39 "../lib/Widgets/DatePicker.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_widgets_date_picker_properties[GRANITE_WIDGETS_DATE_PICKER_FORMAT_PROPERTY]);
#line 186 "DatePicker.c"
	}
}

GDateTime*
granite_widgets_date_picker_get_date (GraniteWidgetsDatePicker* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
#line 60 "../lib/Widgets/DatePicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 60 "../lib/Widgets/DatePicker.vala"
	_tmp0_ = self->priv->_date;
#line 60 "../lib/Widgets/DatePicker.vala"
	result = _tmp0_;
#line 60 "../lib/Widgets/DatePicker.vala"
	return result;
#line 203 "DatePicker.c"
}

static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 62 "../lib/Widgets/DatePicker.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 211 "DatePicker.c"
}

void
granite_widgets_date_picker_set_date (GraniteWidgetsDatePicker* self,
                                      GDateTime* value)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GtkCalendar* _tmp5_;
	GtkCalendar* _tmp6_;
#line 61 "../lib/Widgets/DatePicker.vala"
	g_return_if_fail (self != NULL);
#line 62 "../lib/Widgets/DatePicker.vala"
	_tmp0_ = _g_date_time_ref0 (value);
#line 62 "../lib/Widgets/DatePicker.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 62 "../lib/Widgets/DatePicker.vala"
	self->priv->_date = _tmp0_;
#line 63 "../lib/Widgets/DatePicker.vala"
	_tmp1_ = self->priv->_date;
#line 63 "../lib/Widgets/DatePicker.vala"
	_tmp2_ = self->priv->_format;
#line 63 "../lib/Widgets/DatePicker.vala"
	_tmp3_ = g_date_time_format (_tmp1_, _tmp2_);
#line 63 "../lib/Widgets/DatePicker.vala"
	_tmp4_ = _tmp3_;
#line 63 "../lib/Widgets/DatePicker.vala"
	gtk_entry_set_text ((GtkEntry*) self, _tmp4_);
#line 63 "../lib/Widgets/DatePicker.vala"
	_g_free0 (_tmp4_);
#line 64 "../lib/Widgets/DatePicker.vala"
	self->priv->proc_next_day_selected = FALSE;
#line 65 "../lib/Widgets/DatePicker.vala"
	_tmp5_ = self->calendar;
#line 65 "../lib/Widgets/DatePicker.vala"
	gtk_calendar_select_month (_tmp5_, (guint) (g_date_time_get_month (value) - 1), (guint) g_date_time_get_year (value));
#line 66 "../lib/Widgets/DatePicker.vala"
	self->priv->proc_next_day_selected = FALSE;
#line 67 "../lib/Widgets/DatePicker.vala"
	_tmp6_ = self->calendar;
#line 67 "../lib/Widgets/DatePicker.vala"
	gtk_calendar_select_day (_tmp6_, (guint) g_date_time_get_day_of_month (value));
#line 68 "../lib/Widgets/DatePicker.vala"
	g_signal_emit (self, granite_widgets_date_picker_signals[GRANITE_WIDGETS_DATE_PICKER_DATE_CHANGED_SIGNAL], 0);
#line 61 "../lib/Widgets/DatePicker.vala"
	g_object_notify_by_pspec ((GObject *) self, granite_widgets_date_picker_properties[GRANITE_WIDGETS_DATE_PICKER_DATE_PROPERTY]);
#line 261 "DatePicker.c"
}

/**
         * Makes a new DatePicker
         *
         * @param format desired format of new DatePicker
         */
GraniteWidgetsDatePicker*
granite_widgets_date_picker_construct_with_format (GType object_type,
                                                   const gchar* format)
{
	GraniteWidgetsDatePicker * self = NULL;
#line 127 "../lib/Widgets/DatePicker.vala"
	g_return_val_if_fail (format != NULL, NULL);
#line 128 "../lib/Widgets/DatePicker.vala"
	self = (GraniteWidgetsDatePicker*) g_object_new (object_type, "format", format, NULL);
#line 127 "../lib/Widgets/DatePicker.vala"
	return self;
#line 280 "DatePicker.c"
}

GraniteWidgetsDatePicker*
granite_widgets_date_picker_new_with_format (const gchar* format)
{
#line 127 "../lib/Widgets/DatePicker.vala"
	return granite_widgets_date_picker_construct_with_format (GRANITE_WIDGETS_TYPE_DATE_PICKER, format);
#line 288 "DatePicker.c"
}

static void
granite_widgets_date_picker_on_icon_press (GraniteWidgetsDatePicker* self,
                                           GtkEntryIconPosition position)
{
	GdkRectangle rect = {0};
	GdkRectangle _tmp0_ = {0};
	GtkPopover* _tmp1_;
	GdkRectangle _tmp2_;
	GtkPopover* _tmp3_;
	GtkPopover* _tmp4_;
	GtkCalendar* _tmp5_;
#line 131 "../lib/Widgets/DatePicker.vala"
	g_return_if_fail (self != NULL);
#line 133 "../lib/Widgets/DatePicker.vala"
	granite_widgets_date_picker_position_dropdown (self, &_tmp0_);
#line 133 "../lib/Widgets/DatePicker.vala"
	rect = _tmp0_;
#line 134 "../lib/Widgets/DatePicker.vala"
	_tmp1_ = self->priv->popover;
#line 134 "../lib/Widgets/DatePicker.vala"
	_tmp2_ = rect;
#line 134 "../lib/Widgets/DatePicker.vala"
	g_object_set (_tmp1_, "pointing-to", &_tmp2_, NULL);
#line 135 "../lib/Widgets/DatePicker.vala"
	_tmp3_ = self->priv->popover;
#line 135 "../lib/Widgets/DatePicker.vala"
	gtk_popover_set_position (_tmp3_, GTK_POS_BOTTOM);
#line 136 "../lib/Widgets/DatePicker.vala"
	_tmp4_ = self->priv->popover;
#line 136 "../lib/Widgets/DatePicker.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp4_);
#line 137 "../lib/Widgets/DatePicker.vala"
	_tmp5_ = self->calendar;
#line 137 "../lib/Widgets/DatePicker.vala"
	gtk_widget_grab_focus ((GtkWidget*) _tmp5_);
#line 326 "DatePicker.c"
}

static void
granite_widgets_date_picker_real_position_dropdown (GraniteWidgetsDatePicker* self,
                                                    GdkRectangle* rect)
{
	GdkRectangle _vala_rect = {0};
	GtkAllocation size = {0};
	GtkAllocation _tmp0_ = {0};
	GtkAllocation _tmp1_;
	GtkAllocation _tmp2_;
#line 142 "../lib/Widgets/DatePicker.vala"
	gtk_widget_get_allocation ((GtkWidget*) self, &_tmp0_);
#line 142 "../lib/Widgets/DatePicker.vala"
	size = _tmp0_;
#line 144 "../lib/Widgets/DatePicker.vala"
	memset (&_vala_rect, 0, sizeof (GdkRectangle));
#line 145 "../lib/Widgets/DatePicker.vala"
	_tmp1_ = size;
#line 145 "../lib/Widgets/DatePicker.vala"
	_vala_rect.x = _tmp1_.width - GRANITE_WIDGETS_DATE_PICKER_OFFSET;
#line 146 "../lib/Widgets/DatePicker.vala"
	_tmp2_ = size;
#line 146 "../lib/Widgets/DatePicker.vala"
	_vala_rect.y = _tmp2_.height;
#line 140 "../lib/Widgets/DatePicker.vala"
	if (rect) {
#line 140 "../lib/Widgets/DatePicker.vala"
		*rect = _vala_rect;
#line 356 "DatePicker.c"
	}
}

void
granite_widgets_date_picker_position_dropdown (GraniteWidgetsDatePicker* self,
                                               GdkRectangle* rect)
{
#line 140 "../lib/Widgets/DatePicker.vala"
	g_return_if_fail (self != NULL);
#line 140 "../lib/Widgets/DatePicker.vala"
	GRANITE_WIDGETS_DATE_PICKER_GET_CLASS (self)->position_dropdown (self, rect);
#line 368 "DatePicker.c"
}

static void
granite_widgets_date_picker_on_calendar_day_selected (GraniteWidgetsDatePicker* self)
{
#line 149 "../lib/Widgets/DatePicker.vala"
	g_return_if_fail (self != NULL);
#line 150 "../lib/Widgets/DatePicker.vala"
	if (self->priv->proc_next_day_selected) {
#line 378 "DatePicker.c"
		GtkCalendar* _tmp0_;
		gint _tmp1_;
		gint _tmp2_;
		GtkCalendar* _tmp3_;
		gint _tmp4_;
		gint _tmp5_;
		GtkCalendar* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		GDateTime* _tmp9_;
		GDateTime* _tmp10_;
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp0_ = self->calendar;
#line 151 "../lib/Widgets/DatePicker.vala"
		g_object_get (_tmp0_, "year", &_tmp1_, NULL);
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp2_ = _tmp1_;
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp3_ = self->calendar;
#line 151 "../lib/Widgets/DatePicker.vala"
		g_object_get (_tmp3_, "month", &_tmp4_, NULL);
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp5_ = _tmp4_;
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp6_ = self->calendar;
#line 151 "../lib/Widgets/DatePicker.vala"
		g_object_get (_tmp6_, "day", &_tmp7_, NULL);
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp8_ = _tmp7_;
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp9_ = g_date_time_new_local (_tmp2_, _tmp5_ + 1, _tmp8_, 0, 0, (gdouble) 0);
#line 151 "../lib/Widgets/DatePicker.vala"
		_tmp10_ = _tmp9_;
#line 151 "../lib/Widgets/DatePicker.vala"
		granite_widgets_date_picker_set_date (self, _tmp10_);
#line 151 "../lib/Widgets/DatePicker.vala"
		_g_date_time_unref0 (_tmp10_);
#line 152 "../lib/Widgets/DatePicker.vala"
		granite_widgets_date_picker_hide_dropdown (self);
#line 418 "DatePicker.c"
	} else {
#line 154 "../lib/Widgets/DatePicker.vala"
		self->priv->proc_next_day_selected = TRUE;
#line 422 "DatePicker.c"
	}
}

static void
granite_widgets_date_picker_hide_dropdown (GraniteWidgetsDatePicker* self)
{
	GtkPopover* _tmp0_;
#line 158 "../lib/Widgets/DatePicker.vala"
	g_return_if_fail (self != NULL);
#line 159 "../lib/Widgets/DatePicker.vala"
	_tmp0_ = self->priv->popover;
#line 159 "../lib/Widgets/DatePicker.vala"
	gtk_widget_hide ((GtkWidget*) _tmp0_);
#line 436 "DatePicker.c"
}

GraniteWidgetsDatePicker*
granite_widgets_date_picker_construct (GType object_type)
{
	GraniteWidgetsDatePicker * self = NULL;
#line 26 "../lib/Widgets/DatePicker.vala"
	self = (GraniteWidgetsDatePicker*) g_object_new (object_type, NULL);
#line 26 "../lib/Widgets/DatePicker.vala"
	return self;
#line 447 "DatePicker.c"
}

GraniteWidgetsDatePicker*
granite_widgets_date_picker_new (void)
{
#line 26 "../lib/Widgets/DatePicker.vala"
	return granite_widgets_date_picker_construct (GRANITE_WIDGETS_TYPE_DATE_PICKER);
#line 455 "DatePicker.c"
}

static void
_granite_widgets_date_picker_on_icon_press_gtk_entry_icon_release (GtkEntry* _sender,
                                                                   GtkEntryIconPosition icon_pos,
                                                                   GdkEvent* event,
                                                                   gpointer self)
{
#line 95 "../lib/Widgets/DatePicker.vala"
	granite_widgets_date_picker_on_icon_press ((GraniteWidgetsDatePicker*) self, icon_pos);
#line 466 "DatePicker.c"
}

static void
_granite_widgets_date_picker_on_calendar_day_selected_gtk_calendar_day_selected (GtkCalendar* _sender,
                                                                                 gpointer self)
{
#line 96 "../lib/Widgets/DatePicker.vala"
	granite_widgets_date_picker_on_calendar_day_selected ((GraniteWidgetsDatePicker*) self);
#line 475 "DatePicker.c"
}

static void
_granite_widgets_date_picker___lambda18_ (GraniteWidgetsDatePicker* self)
{
#line 106 "../lib/Widgets/DatePicker.vala"
	self->priv->proc_next_day_selected = FALSE;
#line 483 "DatePicker.c"
}

static void
__granite_widgets_date_picker___lambda18__gtk_calendar_next_month (GtkCalendar* _sender,
                                                                   gpointer self)
{
#line 105 "../lib/Widgets/DatePicker.vala"
	_granite_widgets_date_picker___lambda18_ ((GraniteWidgetsDatePicker*) self);
#line 492 "DatePicker.c"
}

static void
_granite_widgets_date_picker___lambda19_ (GraniteWidgetsDatePicker* self)
{
#line 110 "../lib/Widgets/DatePicker.vala"
	self->priv->proc_next_day_selected = FALSE;
#line 500 "DatePicker.c"
}

static void
__granite_widgets_date_picker___lambda19__gtk_calendar_next_year (GtkCalendar* _sender,
                                                                  gpointer self)
{
#line 109 "../lib/Widgets/DatePicker.vala"
	_granite_widgets_date_picker___lambda19_ ((GraniteWidgetsDatePicker*) self);
#line 509 "DatePicker.c"
}

static void
_granite_widgets_date_picker___lambda20_ (GraniteWidgetsDatePicker* self)
{
#line 114 "../lib/Widgets/DatePicker.vala"
	self->priv->proc_next_day_selected = FALSE;
#line 517 "DatePicker.c"
}

static void
__granite_widgets_date_picker___lambda20__gtk_calendar_prev_month (GtkCalendar* _sender,
                                                                   gpointer self)
{
#line 113 "../lib/Widgets/DatePicker.vala"
	_granite_widgets_date_picker___lambda20_ ((GraniteWidgetsDatePicker*) self);
#line 526 "DatePicker.c"
}

static void
_granite_widgets_date_picker___lambda21_ (GraniteWidgetsDatePicker* self)
{
#line 118 "../lib/Widgets/DatePicker.vala"
	self->priv->proc_next_day_selected = FALSE;
#line 534 "DatePicker.c"
}

static void
__granite_widgets_date_picker___lambda21__gtk_calendar_prev_year (GtkCalendar* _sender,
                                                                  gpointer self)
{
#line 117 "../lib/Widgets/DatePicker.vala"
	_granite_widgets_date_picker___lambda21_ ((GraniteWidgetsDatePicker*) self);
#line 543 "DatePicker.c"
}

static GObject *
granite_widgets_date_picker_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteWidgetsDatePicker * self;
	const gchar* _tmp0_;
	GtkEventBox* _tmp3_;
	GtkEventBox* _tmp4_;
	GtkPopover* _tmp5_;
	GtkPopover* _tmp6_;
	GtkEventBox* _tmp7_;
	GtkCalendar* _tmp8_;
	GDateTime* _tmp9_;
	GDateTime* _tmp10_;
	GThemedIcon* _tmp11_;
	GThemedIcon* _tmp12_;
	GtkEventBox* _tmp13_;
	GtkEventBox* _tmp14_;
	GtkCalendar* _tmp15_;
	GtkCalendar* _tmp16_;
	GtkCalendar* _tmp17_;
	GtkCalendar* _tmp18_;
	GtkCalendar* _tmp19_;
	GtkCalendar* _tmp20_;
#line 75 "../lib/Widgets/DatePicker.vala"
	parent_class = G_OBJECT_CLASS (granite_widgets_date_picker_parent_class);
#line 75 "../lib/Widgets/DatePicker.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 75 "../lib/Widgets/DatePicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_DATE_PICKER, GraniteWidgetsDatePicker);
#line 76 "../lib/Widgets/DatePicker.vala"
	_tmp0_ = self->priv->_format;
#line 76 "../lib/Widgets/DatePicker.vala"
	if (_tmp0_ == NULL) {
#line 583 "DatePicker.c"
		gchar* _tmp1_;
		gchar* _tmp2_;
#line 77 "../lib/Widgets/DatePicker.vala"
		_tmp1_ = granite_date_time_get_default_date_format (FALSE, TRUE, TRUE);
#line 77 "../lib/Widgets/DatePicker.vala"
		_tmp2_ = _tmp1_;
#line 77 "../lib/Widgets/DatePicker.vala"
		granite_widgets_date_picker_set_format (self, _tmp2_);
#line 77 "../lib/Widgets/DatePicker.vala"
		_g_free0 (_tmp2_);
#line 594 "DatePicker.c"
	}
#line 79 "../lib/Widgets/DatePicker.vala"
	_tmp3_ = (GtkEventBox*) gtk_event_box_new ();
#line 79 "../lib/Widgets/DatePicker.vala"
	g_object_ref_sink (_tmp3_);
#line 79 "../lib/Widgets/DatePicker.vala"
	_g_object_unref0 (self->dropdown);
#line 79 "../lib/Widgets/DatePicker.vala"
	self->dropdown = _tmp3_;
#line 80 "../lib/Widgets/DatePicker.vala"
	_tmp4_ = self->dropdown;
#line 80 "../lib/Widgets/DatePicker.vala"
	g_object_set ((GtkWidget*) _tmp4_, "margin", GRANITE_WIDGETS_DATE_PICKER_MARGIN, NULL);
#line 81 "../lib/Widgets/DatePicker.vala"
	_tmp5_ = (GtkPopover*) gtk_popover_new ((GtkWidget*) self);
#line 81 "../lib/Widgets/DatePicker.vala"
	g_object_ref_sink (_tmp5_);
#line 81 "../lib/Widgets/DatePicker.vala"
	_g_object_unref0 (self->priv->popover);
#line 81 "../lib/Widgets/DatePicker.vala"
	self->priv->popover = _tmp5_;
#line 82 "../lib/Widgets/DatePicker.vala"
	_tmp6_ = self->priv->popover;
#line 82 "../lib/Widgets/DatePicker.vala"
	_tmp7_ = self->dropdown;
#line 82 "../lib/Widgets/DatePicker.vala"
	gtk_container_add ((GtkContainer*) _tmp6_, (GtkWidget*) _tmp7_);
#line 83 "../lib/Widgets/DatePicker.vala"
	_tmp8_ = (GtkCalendar*) gtk_calendar_new ();
#line 83 "../lib/Widgets/DatePicker.vala"
	g_object_ref_sink (_tmp8_);
#line 83 "../lib/Widgets/DatePicker.vala"
	_g_object_unref0 (self->calendar);
#line 83 "../lib/Widgets/DatePicker.vala"
	self->calendar = _tmp8_;
#line 84 "../lib/Widgets/DatePicker.vala"
	_tmp9_ = g_date_time_new_now_local ();
#line 84 "../lib/Widgets/DatePicker.vala"
	_tmp10_ = _tmp9_;
#line 84 "../lib/Widgets/DatePicker.vala"
	granite_widgets_date_picker_set_date (self, _tmp10_);
#line 84 "../lib/Widgets/DatePicker.vala"
	_g_date_time_unref0 (_tmp10_);
#line 87 "../lib/Widgets/DatePicker.vala"
	gtk_widget_set_can_focus ((GtkWidget*) self, FALSE);
#line 88 "../lib/Widgets/DatePicker.vala"
	g_object_set ((GtkEntry*) self, "editable", FALSE, NULL);
#line 89 "../lib/Widgets/DatePicker.vala"
	_tmp11_ = (GThemedIcon*) g_themed_icon_new_with_default_fallbacks ("office-calendar-symbolic");
#line 89 "../lib/Widgets/DatePicker.vala"
	_tmp12_ = _tmp11_;
#line 89 "../lib/Widgets/DatePicker.vala"
	g_object_set ((GtkEntry*) self, "secondary-icon-gicon", (GIcon*) _tmp12_, NULL);
#line 89 "../lib/Widgets/DatePicker.vala"
	_g_object_unref0 (_tmp12_);
#line 91 "../lib/Widgets/DatePicker.vala"
	_tmp13_ = self->dropdown;
#line 91 "../lib/Widgets/DatePicker.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp13_, (gint) GDK_FOCUS_CHANGE_MASK);
#line 92 "../lib/Widgets/DatePicker.vala"
	_tmp14_ = self->dropdown;
#line 92 "../lib/Widgets/DatePicker.vala"
	_tmp15_ = self->calendar;
#line 92 "../lib/Widgets/DatePicker.vala"
	gtk_container_add ((GtkContainer*) _tmp14_, (GtkWidget*) _tmp15_);
#line 95 "../lib/Widgets/DatePicker.vala"
	g_signal_connect_object ((GtkEntry*) self, "icon-release", (GCallback) _granite_widgets_date_picker_on_icon_press_gtk_entry_icon_release, self, 0);
#line 96 "../lib/Widgets/DatePicker.vala"
	_tmp16_ = self->calendar;
#line 96 "../lib/Widgets/DatePicker.vala"
	g_signal_connect_object (_tmp16_, "day-selected", (GCallback) _granite_widgets_date_picker_on_calendar_day_selected_gtk_calendar_day_selected, self, 0);
#line 105 "../lib/Widgets/DatePicker.vala"
	_tmp17_ = self->calendar;
#line 105 "../lib/Widgets/DatePicker.vala"
	g_signal_connect_object (_tmp17_, "next-month", (GCallback) __granite_widgets_date_picker___lambda18__gtk_calendar_next_month, self, 0);
#line 109 "../lib/Widgets/DatePicker.vala"
	_tmp18_ = self->calendar;
#line 109 "../lib/Widgets/DatePicker.vala"
	g_signal_connect_object (_tmp18_, "next-year", (GCallback) __granite_widgets_date_picker___lambda19__gtk_calendar_next_year, self, 0);
#line 113 "../lib/Widgets/DatePicker.vala"
	_tmp19_ = self->calendar;
#line 113 "../lib/Widgets/DatePicker.vala"
	g_signal_connect_object (_tmp19_, "prev-month", (GCallback) __granite_widgets_date_picker___lambda20__gtk_calendar_prev_month, self, 0);
#line 117 "../lib/Widgets/DatePicker.vala"
	_tmp20_ = self->calendar;
#line 117 "../lib/Widgets/DatePicker.vala"
	g_signal_connect_object (_tmp20_, "prev-year", (GCallback) __granite_widgets_date_picker___lambda21__gtk_calendar_prev_year, self, 0);
#line 75 "../lib/Widgets/DatePicker.vala"
	return obj;
#line 684 "DatePicker.c"
}

static void
granite_widgets_date_picker_class_init (GraniteWidgetsDatePickerClass * klass,
                                        gpointer klass_data)
{
#line 26 "../lib/Widgets/DatePicker.vala"
	granite_widgets_date_picker_parent_class = g_type_class_peek_parent (klass);
#line 26 "../lib/Widgets/DatePicker.vala"
	g_type_class_adjust_private_offset (klass, &GraniteWidgetsDatePicker_private_offset);
#line 26 "../lib/Widgets/DatePicker.vala"
	((GraniteWidgetsDatePickerClass *) klass)->position_dropdown = (void (*) (GraniteWidgetsDatePicker*, GdkRectangle*)) granite_widgets_date_picker_real_position_dropdown;
#line 26 "../lib/Widgets/DatePicker.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_widgets_date_picker_get_property;
#line 26 "../lib/Widgets/DatePicker.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_widgets_date_picker_set_property;
#line 26 "../lib/Widgets/DatePicker.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_widgets_date_picker_constructor;
#line 26 "../lib/Widgets/DatePicker.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_widgets_date_picker_finalize;
#line 705 "DatePicker.c"
	/**
	         * Desired format of DatePicker
	         */
#line 26 "../lib/Widgets/DatePicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_DATE_PICKER_FORMAT_PROPERTY, granite_widgets_date_picker_properties[GRANITE_WIDGETS_DATE_PICKER_FORMAT_PROPERTY] = g_param_spec_string ("format", "format", "format", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 711 "DatePicker.c"
	/**
	         * Current Date
	         */
#line 26 "../lib/Widgets/DatePicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_DATE_PICKER_DATE_PROPERTY, granite_widgets_date_picker_properties[GRANITE_WIDGETS_DATE_PICKER_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 717 "DatePicker.c"
	/**
	         * Sent when the date got changed
	         */
#line 26 "../lib/Widgets/DatePicker.vala"
	granite_widgets_date_picker_signals[GRANITE_WIDGETS_DATE_PICKER_DATE_CHANGED_SIGNAL] = g_signal_new ("date-changed", GRANITE_WIDGETS_TYPE_DATE_PICKER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 723 "DatePicker.c"
}

static void
granite_widgets_date_picker_gtk_buildable_interface_init (GtkBuildableIface * iface,
                                                          gpointer iface_data)
{
#line 26 "../lib/Widgets/DatePicker.vala"
	granite_widgets_date_picker_gtk_buildable_parent_iface = g_type_interface_peek_parent (iface);
#line 732 "DatePicker.c"
}

static void
granite_widgets_date_picker_instance_init (GraniteWidgetsDatePicker * self,
                                           gpointer klass)
{
#line 26 "../lib/Widgets/DatePicker.vala"
	self->priv = granite_widgets_date_picker_get_instance_private (self);
#line 54 "../lib/Widgets/DatePicker.vala"
	self->priv->proc_next_day_selected = TRUE;
#line 743 "DatePicker.c"
}

static void
granite_widgets_date_picker_finalize (GObject * obj)
{
	GraniteWidgetsDatePicker * self;
#line 26 "../lib/Widgets/DatePicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_DATE_PICKER, GraniteWidgetsDatePicker);
#line 39 "../lib/Widgets/DatePicker.vala"
	_g_free0 (self->priv->_format);
#line 44 "../lib/Widgets/DatePicker.vala"
	_g_object_unref0 (self->dropdown);
#line 48 "../lib/Widgets/DatePicker.vala"
	_g_object_unref0 (self->calendar);
#line 50 "../lib/Widgets/DatePicker.vala"
	_g_object_unref0 (self->priv->popover);
#line 52 "../lib/Widgets/DatePicker.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 26 "../lib/Widgets/DatePicker.vala"
	G_OBJECT_CLASS (granite_widgets_date_picker_parent_class)->finalize (obj);
#line 764 "DatePicker.c"
}

/**
     * This class allows users to pick dates from a calendar.
     */
static GType
granite_widgets_date_picker_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteWidgetsDatePickerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_widgets_date_picker_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteWidgetsDatePicker), 0, (GInstanceInitFunc) granite_widgets_date_picker_instance_init, NULL };
	static const GInterfaceInfo gtk_buildable_info = { (GInterfaceInitFunc) granite_widgets_date_picker_gtk_buildable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType granite_widgets_date_picker_type_id;
	granite_widgets_date_picker_type_id = g_type_register_static (gtk_entry_get_type (), "GraniteWidgetsDatePicker", &g_define_type_info, 0);
	g_type_add_interface_static (granite_widgets_date_picker_type_id, gtk_buildable_get_type (), &gtk_buildable_info);
	GraniteWidgetsDatePicker_private_offset = g_type_add_instance_private (granite_widgets_date_picker_type_id, sizeof (GraniteWidgetsDatePickerPrivate));
	return granite_widgets_date_picker_type_id;
}

GType
granite_widgets_date_picker_get_type (void)
{
	static volatile gsize granite_widgets_date_picker_type_id__volatile = 0;
	if (g_once_init_enter (&granite_widgets_date_picker_type_id__volatile)) {
		GType granite_widgets_date_picker_type_id;
		granite_widgets_date_picker_type_id = granite_widgets_date_picker_get_type_once ();
		g_once_init_leave (&granite_widgets_date_picker_type_id__volatile, granite_widgets_date_picker_type_id);
	}
	return granite_widgets_date_picker_type_id__volatile;
}

static void
_vala_granite_widgets_date_picker_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec)
{
	GraniteWidgetsDatePicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_DATE_PICKER, GraniteWidgetsDatePicker);
#line 26 "../lib/Widgets/DatePicker.vala"
	switch (property_id) {
#line 26 "../lib/Widgets/DatePicker.vala"
		case GRANITE_WIDGETS_DATE_PICKER_FORMAT_PROPERTY:
#line 26 "../lib/Widgets/DatePicker.vala"
		g_value_set_string (value, granite_widgets_date_picker_get_format (self));
#line 26 "../lib/Widgets/DatePicker.vala"
		break;
#line 26 "../lib/Widgets/DatePicker.vala"
		case GRANITE_WIDGETS_DATE_PICKER_DATE_PROPERTY:
#line 26 "../lib/Widgets/DatePicker.vala"
		g_value_set_boxed (value, granite_widgets_date_picker_get_date (self));
#line 26 "../lib/Widgets/DatePicker.vala"
		break;
#line 816 "DatePicker.c"
		default:
#line 26 "../lib/Widgets/DatePicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 26 "../lib/Widgets/DatePicker.vala"
		break;
#line 822 "DatePicker.c"
	}
}

static void
_vala_granite_widgets_date_picker_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec)
{
	GraniteWidgetsDatePicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_DATE_PICKER, GraniteWidgetsDatePicker);
#line 26 "../lib/Widgets/DatePicker.vala"
	switch (property_id) {
#line 26 "../lib/Widgets/DatePicker.vala"
		case GRANITE_WIDGETS_DATE_PICKER_FORMAT_PROPERTY:
#line 26 "../lib/Widgets/DatePicker.vala"
		granite_widgets_date_picker_set_format (self, g_value_get_string (value));
#line 26 "../lib/Widgets/DatePicker.vala"
		break;
#line 26 "../lib/Widgets/DatePicker.vala"
		case GRANITE_WIDGETS_DATE_PICKER_DATE_PROPERTY:
#line 26 "../lib/Widgets/DatePicker.vala"
		granite_widgets_date_picker_set_date (self, g_value_get_boxed (value));
#line 26 "../lib/Widgets/DatePicker.vala"
		break;
#line 848 "DatePicker.c"
		default:
#line 26 "../lib/Widgets/DatePicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 26 "../lib/Widgets/DatePicker.vala"
		break;
#line 854 "DatePicker.c"
	}
}


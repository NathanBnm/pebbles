/* Settings.c generated by valac 0.48.14, the Vala compiler
 * generated from Settings.vala, do not modify */

/*
 *  Copyright (C) 2011-2013 Robert Dyer,
 *                          Rico Tzschichholz <ricotz@ubuntu.com>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gio/gio.h>
#include <float.h>
#include <math.h>

#define GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE (granite_services_settings_serializable_get_type ())
#define GRANITE_SERVICES_SETTINGS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE, GraniteServicesSettingsSerializable))
#define GRANITE_SERVICES_IS_SETTINGS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE))
#define GRANITE_SERVICES_SETTINGS_SERIALIZABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE, GraniteServicesSettingsSerializableIface))

typedef struct _GraniteServicesSettingsSerializable GraniteServicesSettingsSerializable;
typedef struct _GraniteServicesSettingsSerializableIface GraniteServicesSettingsSerializableIface;

#define GRANITE_SERVICES_TYPE_SETTINGS (granite_services_settings_get_type ())
#define GRANITE_SERVICES_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_TYPE_SETTINGS, GraniteServicesSettings))
#define GRANITE_SERVICES_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_SERVICES_TYPE_SETTINGS, GraniteServicesSettingsClass))
#define GRANITE_SERVICES_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_TYPE_SETTINGS))
#define GRANITE_SERVICES_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_SERVICES_TYPE_SETTINGS))
#define GRANITE_SERVICES_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_SERVICES_TYPE_SETTINGS, GraniteServicesSettingsClass))

typedef struct _GraniteServicesSettings GraniteServicesSettings;
typedef struct _GraniteServicesSettingsClass GraniteServicesSettingsClass;
typedef struct _GraniteServicesSettingsPrivate GraniteServicesSettingsPrivate;
enum  {
	GRANITE_SERVICES_SETTINGS_0_PROPERTY,
	GRANITE_SERVICES_SETTINGS_SCHEMA_PROPERTY,
	GRANITE_SERVICES_SETTINGS_NUM_PROPERTIES
};
static GParamSpec* granite_services_settings_properties[GRANITE_SERVICES_SETTINGS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_param_spec_unref0(var) ((var == NULL) ? NULL : (var = (g_param_spec_unref (var), NULL)))
#define _g_type_class_unref0(var) ((var == NULL) ? NULL : (var = (g_type_class_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
enum  {
	GRANITE_SERVICES_SETTINGS_CHANGED_SIGNAL,
	GRANITE_SERVICES_SETTINGS_NUM_SIGNALS
};
static guint granite_services_settings_signals[GRANITE_SERVICES_SETTINGS_NUM_SIGNALS] = {0};

struct _GraniteServicesSettingsSerializableIface {
	GTypeInterface parent_iface;
	gchar* (*settings_serialize) (GraniteServicesSettingsSerializable* self);
	void (*settings_deserialize) (GraniteServicesSettingsSerializable* self, const gchar* s);
};

struct _GraniteServicesSettings {
	GObject parent_instance;
	GraniteServicesSettingsPrivate * priv;
};

struct _GraniteServicesSettingsClass {
	GObjectClass parent_class;
	void (*verify) (GraniteServicesSettings* self, const gchar* key);
};

struct _GraniteServicesSettingsPrivate {
	gboolean saving_key;
	GSettings* _schema;
};

static gint GraniteServicesSettings_private_offset;
static gpointer granite_services_settings_parent_class = NULL;

GType granite_services_settings_serializable_get_type (void) G_GNUC_CONST;
gchar* granite_services_settings_serializable_settings_serialize (GraniteServicesSettingsSerializable* self);
void granite_services_settings_serializable_settings_deserialize (GraniteServicesSettingsSerializable* self,
                                                                  const gchar* s);
static GType granite_services_settings_serializable_get_type_once (void);
GType granite_services_settings_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteServicesSettings, g_object_unref)
void granite_services_settings_verify (GraniteServicesSettings* self,
                                       const gchar* key);
static void granite_services_settings_stop_monitor (GraniteServicesSettings* self);
GSettings* granite_services_settings_get_schema (GraniteServicesSettings* self);
static void granite_services_settings_set_schema (GraniteServicesSettings* self,
                                           GSettings* value);
GraniteServicesSettings* granite_services_settings_construct (GType object_type,
                                                              const gchar* schema);
GraniteServicesSettings* granite_services_settings_construct_with_backend (GType object_type,
                                                                           const gchar* schema,
                                                                           GSettingsBackend* backend);
GraniteServicesSettings* granite_services_settings_construct_with_backend_and_path (GType object_type,
                                                                                    const gchar* schema,
                                                                                    GSettingsBackend* backend,
                                                                                    const gchar* path);
GraniteServicesSettings* granite_services_settings_construct_with_path (GType object_type,
                                                                        const gchar* schema,
                                                                        const gchar* path);
static void granite_services_settings_load_key (GraniteServicesSettings* self,
                                         const gchar* key);
static void _granite_services_settings_load_key_g_settings_changed (GSettings* _sender,
                                                             const gchar* key,
                                                             gpointer self);
static void granite_services_settings_start_monitor (GraniteServicesSettings* self);
static void granite_services_settings_handle_notify (GraniteServicesSettings* self,
                                              GObject* sender,
                                              GParamSpec* property);
static void _granite_services_settings_handle_notify_g_object_notify (GObject* _sender,
                                                               GParamSpec* pspec,
                                                               gpointer self);
static void granite_services_settings_call_verify (GraniteServicesSettings* self,
                                            const gchar* key);
static void granite_services_settings_save_key (GraniteServicesSettings* self,
                                         const gchar* key);
static void granite_services_settings_handle_verify_notify (GraniteServicesSettings* self,
                                                     GObject* sender,
                                                     GParamSpec* property);
static void _granite_services_settings_handle_verify_notify_g_object_notify (GObject* _sender,
                                                                      GParamSpec* pspec,
                                                                      gpointer self);
static void granite_services_settings_real_verify (GraniteServicesSettings* self,
                                            const gchar* key);
static GObject * granite_services_settings_constructor (GType type,
                                                 guint n_construct_properties,
                                                 GObjectConstructParam * construct_properties);
static void granite_services_settings_finalize (GObject * obj);
static GType granite_services_settings_get_type_once (void);
static void _vala_granite_services_settings_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_granite_services_settings_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

/**
         * Serializes the object into a string representation.
         *
         * @return the string representation of the object
         */
gchar*
granite_services_settings_serializable_settings_serialize (GraniteServicesSettingsSerializable* self)
{
#line 34 "../lib/Services/Settings.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 34 "../lib/Services/Settings.vala"
	return GRANITE_SERVICES_SETTINGS_SERIALIZABLE_GET_INTERFACE (self)->settings_serialize (self);
#line 174 "Settings.c"
}

/**
         * Un-serializes the object from a string representation.
         *
         * @param s the string representation of the object
         */
void
granite_services_settings_serializable_settings_deserialize (GraniteServicesSettingsSerializable* self,
                                                             const gchar* s)
{
#line 41 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 41 "../lib/Services/Settings.vala"
	GRANITE_SERVICES_SETTINGS_SERIALIZABLE_GET_INTERFACE (self)->settings_deserialize (self, s);
#line 190 "Settings.c"
}

static void
granite_services_settings_serializable_default_init (GraniteServicesSettingsSerializableIface * iface,
                                                     gpointer iface_data)
{
}

/**
     * This interface is used by objects that need to be serialized in a Settings.
     * The object must have a string representation and provide these methods to
     * translate between the string and object representations.
     */
static GType
granite_services_settings_serializable_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteServicesSettingsSerializableIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_services_settings_serializable_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType granite_services_settings_serializable_type_id;
	granite_services_settings_serializable_type_id = g_type_register_static (G_TYPE_INTERFACE, "GraniteServicesSettingsSerializable", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (granite_services_settings_serializable_type_id, G_TYPE_OBJECT);
	return granite_services_settings_serializable_type_id;
}

GType
granite_services_settings_serializable_get_type (void)
{
	static volatile gsize granite_services_settings_serializable_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_settings_serializable_type_id__volatile)) {
		GType granite_services_settings_serializable_type_id;
		granite_services_settings_serializable_type_id = granite_services_settings_serializable_get_type_once ();
		g_once_init_leave (&granite_services_settings_serializable_type_id__volatile, granite_services_settings_serializable_type_id);
	}
	return granite_services_settings_serializable_type_id__volatile;
}

static inline gpointer
granite_services_settings_get_instance_private (GraniteServicesSettings* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteServicesSettings_private_offset);
}

GSettings*
granite_services_settings_get_schema (GraniteServicesSettings* self)
{
	GSettings* result;
	GSettings* _tmp0_;
#line 114 "../lib/Services/Settings.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 114 "../lib/Services/Settings.vala"
	_tmp0_ = self->priv->_schema;
#line 114 "../lib/Services/Settings.vala"
	result = _tmp0_;
#line 114 "../lib/Services/Settings.vala"
	return result;
#line 245 "Settings.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 114 "../lib/Services/Settings.vala"
	return self ? g_object_ref (self) : NULL;
#line 253 "Settings.c"
}

static void
granite_services_settings_set_schema (GraniteServicesSettings* self,
                                      GSettings* value)
{
	GSettings* old_value;
#line 114 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 114 "../lib/Services/Settings.vala"
	old_value = granite_services_settings_get_schema (self);
#line 114 "../lib/Services/Settings.vala"
	if (old_value != value) {
#line 267 "Settings.c"
		GSettings* _tmp0_;
#line 114 "../lib/Services/Settings.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 114 "../lib/Services/Settings.vala"
		_g_object_unref0 (self->priv->_schema);
#line 114 "../lib/Services/Settings.vala"
		self->priv->_schema = _tmp0_;
#line 114 "../lib/Services/Settings.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_services_settings_properties[GRANITE_SERVICES_SETTINGS_SCHEMA_PROPERTY]);
#line 277 "Settings.c"
	}
}

/**
         * Creates a new {@link Granite.Services.Settings} object for the supplied schema.
         *
         * @param schema the name of the schema to interact with
         */
GraniteServicesSettings*
granite_services_settings_construct (GType object_type,
                                     const gchar* schema)
{
	GraniteServicesSettings * self = NULL;
	GSettings* _tmp0_;
	GSettings* _tmp1_;
#line 121 "../lib/Services/Settings.vala"
	g_return_val_if_fail (schema != NULL, NULL);
#line 122 "../lib/Services/Settings.vala"
	_tmp0_ = g_settings_new (schema);
#line 122 "../lib/Services/Settings.vala"
	_tmp1_ = _tmp0_;
#line 122 "../lib/Services/Settings.vala"
	self = (GraniteServicesSettings*) g_object_new (object_type, "schema", _tmp1_, NULL);
#line 122 "../lib/Services/Settings.vala"
	_g_object_unref0 (_tmp1_);
#line 121 "../lib/Services/Settings.vala"
	return self;
#line 305 "Settings.c"
}

/**
         * Creates a new {@link Granite.Services.Settings} object for the supplied schema and {@link GLib.SettingsBackend}.
         *
         * @param schema the name of the schema to interact with
         * @param backend the desired backend to use
         */
GraniteServicesSettings*
granite_services_settings_construct_with_backend (GType object_type,
                                                  const gchar* schema,
                                                  GSettingsBackend* backend)
{
	GraniteServicesSettings * self = NULL;
	GSettings* _tmp0_;
	GSettings* _tmp1_;
#line 131 "../lib/Services/Settings.vala"
	g_return_val_if_fail (schema != NULL, NULL);
#line 131 "../lib/Services/Settings.vala"
	g_return_val_if_fail (backend != NULL, NULL);
#line 132 "../lib/Services/Settings.vala"
	_tmp0_ = g_settings_new_with_backend (schema, backend);
#line 132 "../lib/Services/Settings.vala"
	_tmp1_ = _tmp0_;
#line 132 "../lib/Services/Settings.vala"
	self = (GraniteServicesSettings*) g_object_new (object_type, "schema", _tmp1_, NULL);
#line 132 "../lib/Services/Settings.vala"
	_g_object_unref0 (_tmp1_);
#line 131 "../lib/Services/Settings.vala"
	return self;
#line 336 "Settings.c"
}

/**
         * Creates a new {@link Granite.Services.Settings} object for the supplied schema, {@link GLib.SettingsBackend}, and path.
         *
         *
         * @param schema the name of the schema to interact with
         * @param backend the desired backend to use
         * @param path the path to use
         */
GraniteServicesSettings*
granite_services_settings_construct_with_backend_and_path (GType object_type,
                                                           const gchar* schema,
                                                           GSettingsBackend* backend,
                                                           const gchar* path)
{
	GraniteServicesSettings * self = NULL;
	GSettings* _tmp0_;
	GSettings* _tmp1_;
#line 143 "../lib/Services/Settings.vala"
	g_return_val_if_fail (schema != NULL, NULL);
#line 143 "../lib/Services/Settings.vala"
	g_return_val_if_fail (backend != NULL, NULL);
#line 143 "../lib/Services/Settings.vala"
	g_return_val_if_fail (path != NULL, NULL);
#line 144 "../lib/Services/Settings.vala"
	_tmp0_ = g_settings_new_with_backend_and_path (schema, backend, path);
#line 144 "../lib/Services/Settings.vala"
	_tmp1_ = _tmp0_;
#line 144 "../lib/Services/Settings.vala"
	self = (GraniteServicesSettings*) g_object_new (object_type, "schema", _tmp1_, NULL);
#line 144 "../lib/Services/Settings.vala"
	_g_object_unref0 (_tmp1_);
#line 143 "../lib/Services/Settings.vala"
	return self;
#line 372 "Settings.c"
}

/**
         * Creates a new {@link Granite.Services.Settings} object for the supplied schema, and path.
         *
         * You only need to do this if you want to directly create a settings object with a schema that
         * doesn't have a specified path of its own. That's quite rare.
         *
         * It is a programmer error to call this function for a schema that has an explicitly specified path.
         *
         * @param schema the name of the schema to interact with
         * @param path the path to use
         */
GraniteServicesSettings*
granite_services_settings_construct_with_path (GType object_type,
                                               const gchar* schema,
                                               const gchar* path)
{
	GraniteServicesSettings * self = NULL;
	GSettings* _tmp0_;
	GSettings* _tmp1_;
#line 158 "../lib/Services/Settings.vala"
	g_return_val_if_fail (schema != NULL, NULL);
#line 158 "../lib/Services/Settings.vala"
	g_return_val_if_fail (path != NULL, NULL);
#line 159 "../lib/Services/Settings.vala"
	_tmp0_ = g_settings_new_with_path (schema, path);
#line 159 "../lib/Services/Settings.vala"
	_tmp1_ = _tmp0_;
#line 159 "../lib/Services/Settings.vala"
	self = (GraniteServicesSettings*) g_object_new (object_type, "schema", _tmp1_, NULL);
#line 159 "../lib/Services/Settings.vala"
	_g_object_unref0 (_tmp1_);
#line 158 "../lib/Services/Settings.vala"
	return self;
#line 408 "Settings.c"
}

static void
_granite_services_settings_load_key_g_settings_changed (GSettings* _sender,
                                                        const gchar* key,
                                                        gpointer self)
{
#line 180 "../lib/Services/Settings.vala"
	granite_services_settings_load_key ((GraniteServicesSettings*) self, key);
#line 418 "Settings.c"
}

static void
granite_services_settings_stop_monitor (GraniteServicesSettings* self)
{
	GSettings* _tmp0_;
	guint _tmp1_;
#line 178 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 180 "../lib/Services/Settings.vala"
	_tmp0_ = self->priv->_schema;
#line 180 "../lib/Services/Settings.vala"
	g_signal_parse_name ("changed", g_settings_get_type (), &_tmp1_, NULL, FALSE);
#line 180 "../lib/Services/Settings.vala"
	g_signal_handlers_disconnect_matched (_tmp0_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp1_, 0, NULL, (GCallback) _granite_services_settings_load_key_g_settings_changed, self);
#line 434 "Settings.c"
}

static void
granite_services_settings_start_monitor (GraniteServicesSettings* self)
{
	GSettings* _tmp0_;
#line 183 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 185 "../lib/Services/Settings.vala"
	_tmp0_ = self->priv->_schema;
#line 185 "../lib/Services/Settings.vala"
	g_signal_connect_object (_tmp0_, "changed", (GCallback) _granite_services_settings_load_key_g_settings_changed, self, 0);
#line 447 "Settings.c"
}

static void
_granite_services_settings_handle_notify_g_object_notify (GObject* _sender,
                                                          GParamSpec* pspec,
                                                          gpointer self)
{
#line 190 "../lib/Services/Settings.vala"
	granite_services_settings_handle_notify ((GraniteServicesSettings*) self, _sender, pspec);
#line 457 "Settings.c"
}

static void
granite_services_settings_handle_notify (GraniteServicesSettings* self,
                                         GObject* sender,
                                         GParamSpec* property)
{
	guint _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 188 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 188 "../lib/Services/Settings.vala"
	g_return_if_fail (sender != NULL);
#line 188 "../lib/Services/Settings.vala"
	g_return_if_fail (property != NULL);
#line 190 "../lib/Services/Settings.vala"
	g_signal_parse_name ("notify", G_TYPE_OBJECT, &_tmp0_, NULL, FALSE);
#line 190 "../lib/Services/Settings.vala"
	g_signal_handlers_disconnect_matched ((GObject*) self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, 0, NULL, (GCallback) _granite_services_settings_handle_notify_g_object_notify, self);
#line 191 "../lib/Services/Settings.vala"
	_tmp1_ = property->name;
#line 191 "../lib/Services/Settings.vala"
	granite_services_settings_call_verify (self, _tmp1_);
#line 192 "../lib/Services/Settings.vala"
	g_signal_connect_object ((GObject*) self, "notify", (GCallback) _granite_services_settings_handle_notify_g_object_notify, self, 0);
#line 194 "../lib/Services/Settings.vala"
	_tmp2_ = property->name;
#line 194 "../lib/Services/Settings.vala"
	granite_services_settings_save_key (self, _tmp2_);
#line 488 "Settings.c"
}

static void
granite_services_settings_handle_verify_notify (GraniteServicesSettings* self,
                                                GObject* sender,
                                                GParamSpec* property)
{
	const gchar* _tmp0_;
	GSettings* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
#line 197 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 197 "../lib/Services/Settings.vala"
	g_return_if_fail (sender != NULL);
#line 197 "../lib/Services/Settings.vala"
	g_return_if_fail (property != NULL);
#line 199 "../lib/Services/Settings.vala"
	_tmp0_ = property->name;
#line 199 "../lib/Services/Settings.vala"
	_tmp1_ = self->priv->_schema;
#line 199 "../lib/Services/Settings.vala"
	g_object_get (_tmp1_, "schema-id", &_tmp2_, NULL);
#line 199 "../lib/Services/Settings.vala"
	_tmp3_ = _tmp2_;
#line 199 "../lib/Services/Settings.vala"
	_tmp4_ = _tmp3_;
#line 199 "../lib/Services/Settings.vala"
	g_warning ("Settings.vala:199: Key '%s' failed verification in schema '%s', changi" \
"ng value", _tmp0_, _tmp4_);
#line 199 "../lib/Services/Settings.vala"
	_g_free0 (_tmp4_);
#line 521 "Settings.c"
}

static void
_granite_services_settings_handle_verify_notify_g_object_notify (GObject* _sender,
                                                                 GParamSpec* pspec,
                                                                 gpointer self)
{
#line 204 "../lib/Services/Settings.vala"
	granite_services_settings_handle_verify_notify ((GraniteServicesSettings*) self, _sender, pspec);
#line 531 "Settings.c"
}

static void
granite_services_settings_call_verify (GraniteServicesSettings* self,
                                       const gchar* key)
{
	guint _tmp0_;
#line 202 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 202 "../lib/Services/Settings.vala"
	g_return_if_fail (key != NULL);
#line 204 "../lib/Services/Settings.vala"
	g_signal_connect_object ((GObject*) self, "notify", (GCallback) _granite_services_settings_handle_verify_notify_g_object_notify, self, 0);
#line 205 "../lib/Services/Settings.vala"
	granite_services_settings_verify (self, key);
#line 206 "../lib/Services/Settings.vala"
	g_signal_emit (self, granite_services_settings_signals[GRANITE_SERVICES_SETTINGS_CHANGED_SIGNAL], g_quark_from_string (key));
#line 207 "../lib/Services/Settings.vala"
	g_signal_parse_name ("notify", G_TYPE_OBJECT, &_tmp0_, NULL, FALSE);
#line 207 "../lib/Services/Settings.vala"
	g_signal_handlers_disconnect_matched ((GObject*) self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, 0, NULL, (GCallback) _granite_services_settings_handle_verify_notify_g_object_notify, self);
#line 553 "Settings.c"
}

/**
         * Verify the given key, changing the property if necessary. Refer to the example given for the class.
         *
         * @param key the key in question
         */
static void
granite_services_settings_real_verify (GraniteServicesSettings* self,
                                       const gchar* key)
{
#line 215 "../lib/Services/Settings.vala"
	g_return_if_fail (key != NULL);
#line 567 "Settings.c"
}

void
granite_services_settings_verify (GraniteServicesSettings* self,
                                  const gchar* key)
{
#line 215 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 215 "../lib/Services/Settings.vala"
	GRANITE_SERVICES_SETTINGS_GET_CLASS (self)->verify (self, key);
#line 578 "Settings.c"
}

static gpointer
_g_param_spec_ref0 (gpointer self)
{
#line 225 "../lib/Services/Settings.vala"
	return self ? g_param_spec_ref (self) : NULL;
#line 586 "Settings.c"
}

static void
granite_services_settings_load_key (GraniteServicesSettings* self,
                                    const gchar* key)
{
	GObjectClass* obj_class = NULL;
	GTypeClass* _tmp0_;
	GParamSpec* prop = NULL;
	GObjectClass* _tmp1_;
	GParamSpec* _tmp2_;
	GParamSpec* _tmp3_;
	GParamSpec* _tmp4_;
	guint _tmp5_;
	GType type = 0UL;
	GParamSpec* _tmp6_;
	GValue val = {0};
	GValue _tmp7_ = {0};
	GParamSpec* _tmp8_;
	const gchar* _tmp9_;
	GParamSpec* _tmp10_;
#line 220 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 220 "../lib/Services/Settings.vala"
	g_return_if_fail (key != NULL);
#line 221 "../lib/Services/Settings.vala"
	if (g_strcmp0 (key, "schema") == 0) {
#line 222 "../lib/Services/Settings.vala"
		return;
#line 616 "Settings.c"
	}
#line 224 "../lib/Services/Settings.vala"
	_tmp0_ = g_type_class_ref (G_TYPE_FROM_INSTANCE ((GObject*) self));
#line 224 "../lib/Services/Settings.vala"
	obj_class = (GObjectClass*) _tmp0_;
#line 225 "../lib/Services/Settings.vala"
	_tmp1_ = obj_class;
#line 225 "../lib/Services/Settings.vala"
	_tmp2_ = g_object_class_find_property (_tmp1_, key);
#line 225 "../lib/Services/Settings.vala"
	_tmp3_ = _g_param_spec_ref0 (_tmp2_);
#line 225 "../lib/Services/Settings.vala"
	prop = _tmp3_;
#line 229 "../lib/Services/Settings.vala"
	_tmp4_ = prop;
#line 229 "../lib/Services/Settings.vala"
	if (_tmp4_ == NULL) {
#line 230 "../lib/Services/Settings.vala"
		_g_param_spec_unref0 (prop);
#line 230 "../lib/Services/Settings.vala"
		_g_type_class_unref0 (obj_class);
#line 230 "../lib/Services/Settings.vala"
		return;
#line 640 "Settings.c"
	}
#line 232 "../lib/Services/Settings.vala"
	g_signal_parse_name ("notify", G_TYPE_OBJECT, &_tmp5_, NULL, FALSE);
#line 232 "../lib/Services/Settings.vala"
	g_signal_handlers_disconnect_matched ((GObject*) self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp5_, 0, NULL, (GCallback) _granite_services_settings_handle_notify_g_object_notify, self);
#line 234 "../lib/Services/Settings.vala"
	_tmp6_ = prop;
#line 234 "../lib/Services/Settings.vala"
	type = _tmp6_->value_type;
#line 235 "../lib/Services/Settings.vala"
	g_value_init (&_tmp7_, type);
#line 235 "../lib/Services/Settings.vala"
	val = _tmp7_;
#line 236 "../lib/Services/Settings.vala"
	_tmp8_ = prop;
#line 236 "../lib/Services/Settings.vala"
	_tmp9_ = _tmp8_->name;
#line 236 "../lib/Services/Settings.vala"
	g_object_get_property ((GObject*) self, _tmp9_, &val);
#line 238 "../lib/Services/Settings.vala"
	_tmp10_ = prop;
#line 238 "../lib/Services/Settings.vala"
	if (G_VALUE_TYPE (&val) == _tmp10_->value_type) {
#line 241 "../lib/Services/Settings.vala"
		if (type == G_TYPE_INT) {
#line 666 "Settings.c"
			GParamSpec* _tmp11_;
			const gchar* _tmp12_;
			GSettings* _tmp13_;
			GValue _tmp14_ = {0};
#line 242 "../lib/Services/Settings.vala"
			_tmp11_ = prop;
#line 242 "../lib/Services/Settings.vala"
			_tmp12_ = _tmp11_->name;
#line 242 "../lib/Services/Settings.vala"
			_tmp13_ = self->priv->_schema;
#line 242 "../lib/Services/Settings.vala"
			g_value_init (&_tmp14_, G_TYPE_INT);
#line 242 "../lib/Services/Settings.vala"
			g_value_set_int (&_tmp14_, g_settings_get_int (_tmp13_, key));
#line 242 "../lib/Services/Settings.vala"
			g_object_set_property ((GObject*) self, _tmp12_, &_tmp14_);
#line 242 "../lib/Services/Settings.vala"
			G_IS_VALUE (&_tmp14_) ? (g_value_unset (&_tmp14_), NULL) : NULL;
#line 685 "Settings.c"
		} else {
#line 243 "../lib/Services/Settings.vala"
			if (type == G_TYPE_UINT) {
#line 689 "Settings.c"
				GParamSpec* _tmp15_;
				const gchar* _tmp16_;
				GSettings* _tmp17_;
				GValue _tmp18_ = {0};
#line 244 "../lib/Services/Settings.vala"
				_tmp15_ = prop;
#line 244 "../lib/Services/Settings.vala"
				_tmp16_ = _tmp15_->name;
#line 244 "../lib/Services/Settings.vala"
				_tmp17_ = self->priv->_schema;
#line 244 "../lib/Services/Settings.vala"
				g_value_init (&_tmp18_, G_TYPE_UINT);
#line 244 "../lib/Services/Settings.vala"
				g_value_set_uint (&_tmp18_, g_settings_get_uint (_tmp17_, key));
#line 244 "../lib/Services/Settings.vala"
				g_object_set_property ((GObject*) self, _tmp16_, &_tmp18_);
#line 244 "../lib/Services/Settings.vala"
				G_IS_VALUE (&_tmp18_) ? (g_value_unset (&_tmp18_), NULL) : NULL;
#line 708 "Settings.c"
			} else {
#line 245 "../lib/Services/Settings.vala"
				if (type == G_TYPE_DOUBLE) {
#line 712 "Settings.c"
					GParamSpec* _tmp19_;
					const gchar* _tmp20_;
					GSettings* _tmp21_;
					GValue _tmp22_ = {0};
#line 246 "../lib/Services/Settings.vala"
					_tmp19_ = prop;
#line 246 "../lib/Services/Settings.vala"
					_tmp20_ = _tmp19_->name;
#line 246 "../lib/Services/Settings.vala"
					_tmp21_ = self->priv->_schema;
#line 246 "../lib/Services/Settings.vala"
					g_value_init (&_tmp22_, G_TYPE_DOUBLE);
#line 246 "../lib/Services/Settings.vala"
					g_value_set_double (&_tmp22_, g_settings_get_double (_tmp21_, key));
#line 246 "../lib/Services/Settings.vala"
					g_object_set_property ((GObject*) self, _tmp20_, &_tmp22_);
#line 246 "../lib/Services/Settings.vala"
					G_IS_VALUE (&_tmp22_) ? (g_value_unset (&_tmp22_), NULL) : NULL;
#line 731 "Settings.c"
				} else {
#line 247 "../lib/Services/Settings.vala"
					if (type == G_TYPE_STRING) {
#line 735 "Settings.c"
						GParamSpec* _tmp23_;
						const gchar* _tmp24_;
						GSettings* _tmp25_;
						gchar* _tmp26_;
						GValue _tmp27_ = {0};
#line 248 "../lib/Services/Settings.vala"
						_tmp23_ = prop;
#line 248 "../lib/Services/Settings.vala"
						_tmp24_ = _tmp23_->name;
#line 248 "../lib/Services/Settings.vala"
						_tmp25_ = self->priv->_schema;
#line 248 "../lib/Services/Settings.vala"
						_tmp26_ = g_settings_get_string (_tmp25_, key);
#line 248 "../lib/Services/Settings.vala"
						g_value_init (&_tmp27_, G_TYPE_STRING);
#line 248 "../lib/Services/Settings.vala"
						g_value_take_string (&_tmp27_, _tmp26_);
#line 248 "../lib/Services/Settings.vala"
						g_object_set_property ((GObject*) self, _tmp24_, &_tmp27_);
#line 248 "../lib/Services/Settings.vala"
						G_IS_VALUE (&_tmp27_) ? (g_value_unset (&_tmp27_), NULL) : NULL;
#line 757 "Settings.c"
					} else {
#line 249 "../lib/Services/Settings.vala"
						if (type == G_TYPE_STRV) {
#line 761 "Settings.c"
							GParamSpec* _tmp28_;
							const gchar* _tmp29_;
							GSettings* _tmp30_;
							gchar** _tmp31_;
							gchar** _tmp32_;
							GValue _tmp33_ = {0};
#line 250 "../lib/Services/Settings.vala"
							_tmp28_ = prop;
#line 250 "../lib/Services/Settings.vala"
							_tmp29_ = _tmp28_->name;
#line 250 "../lib/Services/Settings.vala"
							_tmp30_ = self->priv->_schema;
#line 250 "../lib/Services/Settings.vala"
							_tmp32_ = _tmp31_ = g_settings_get_strv (_tmp30_, key);
#line 250 "../lib/Services/Settings.vala"
							g_value_init (&_tmp33_, G_TYPE_STRV);
#line 250 "../lib/Services/Settings.vala"
							g_value_take_boxed (&_tmp33_, _tmp32_);
#line 250 "../lib/Services/Settings.vala"
							g_object_set_property ((GObject*) self, _tmp29_, &_tmp33_);
#line 250 "../lib/Services/Settings.vala"
							G_IS_VALUE (&_tmp33_) ? (g_value_unset (&_tmp33_), NULL) : NULL;
#line 784 "Settings.c"
						} else {
#line 251 "../lib/Services/Settings.vala"
							if (type == G_TYPE_BOOLEAN) {
#line 788 "Settings.c"
								GParamSpec* _tmp34_;
								const gchar* _tmp35_;
								GSettings* _tmp36_;
								GValue _tmp37_ = {0};
#line 252 "../lib/Services/Settings.vala"
								_tmp34_ = prop;
#line 252 "../lib/Services/Settings.vala"
								_tmp35_ = _tmp34_->name;
#line 252 "../lib/Services/Settings.vala"
								_tmp36_ = self->priv->_schema;
#line 252 "../lib/Services/Settings.vala"
								g_value_init (&_tmp37_, G_TYPE_BOOLEAN);
#line 252 "../lib/Services/Settings.vala"
								g_value_set_boolean (&_tmp37_, g_settings_get_boolean (_tmp36_, key));
#line 252 "../lib/Services/Settings.vala"
								g_object_set_property ((GObject*) self, _tmp35_, &_tmp37_);
#line 252 "../lib/Services/Settings.vala"
								G_IS_VALUE (&_tmp37_) ? (g_value_unset (&_tmp37_), NULL) : NULL;
#line 807 "Settings.c"
							} else {
#line 253 "../lib/Services/Settings.vala"
								if (type == G_TYPE_INT64) {
#line 811 "Settings.c"
									GParamSpec* _tmp38_;
									const gchar* _tmp39_;
									GSettings* _tmp40_;
									GVariant* _tmp41_;
									GVariant* _tmp42_;
									GValue _tmp43_ = {0};
#line 254 "../lib/Services/Settings.vala"
									_tmp38_ = prop;
#line 254 "../lib/Services/Settings.vala"
									_tmp39_ = _tmp38_->name;
#line 254 "../lib/Services/Settings.vala"
									_tmp40_ = self->priv->_schema;
#line 254 "../lib/Services/Settings.vala"
									_tmp41_ = g_settings_get_value (_tmp40_, key);
#line 254 "../lib/Services/Settings.vala"
									_tmp42_ = _tmp41_;
#line 254 "../lib/Services/Settings.vala"
									g_value_init (&_tmp43_, G_TYPE_INT64);
#line 254 "../lib/Services/Settings.vala"
									g_value_set_int64 (&_tmp43_, g_variant_get_int64 (_tmp42_));
#line 254 "../lib/Services/Settings.vala"
									g_object_set_property ((GObject*) self, _tmp39_, &_tmp43_);
#line 254 "../lib/Services/Settings.vala"
									G_IS_VALUE (&_tmp43_) ? (g_value_unset (&_tmp43_), NULL) : NULL;
#line 254 "../lib/Services/Settings.vala"
									_g_variant_unref0 (_tmp42_);
#line 838 "Settings.c"
								} else {
#line 255 "../lib/Services/Settings.vala"
									if (type == G_TYPE_UINT64) {
#line 842 "Settings.c"
										GParamSpec* _tmp44_;
										const gchar* _tmp45_;
										GSettings* _tmp46_;
										GVariant* _tmp47_;
										GVariant* _tmp48_;
										GValue _tmp49_ = {0};
#line 256 "../lib/Services/Settings.vala"
										_tmp44_ = prop;
#line 256 "../lib/Services/Settings.vala"
										_tmp45_ = _tmp44_->name;
#line 256 "../lib/Services/Settings.vala"
										_tmp46_ = self->priv->_schema;
#line 256 "../lib/Services/Settings.vala"
										_tmp47_ = g_settings_get_value (_tmp46_, key);
#line 256 "../lib/Services/Settings.vala"
										_tmp48_ = _tmp47_;
#line 256 "../lib/Services/Settings.vala"
										g_value_init (&_tmp49_, G_TYPE_UINT64);
#line 256 "../lib/Services/Settings.vala"
										g_value_set_uint64 (&_tmp49_, g_variant_get_uint64 (_tmp48_));
#line 256 "../lib/Services/Settings.vala"
										g_object_set_property ((GObject*) self, _tmp45_, &_tmp49_);
#line 256 "../lib/Services/Settings.vala"
										G_IS_VALUE (&_tmp49_) ? (g_value_unset (&_tmp49_), NULL) : NULL;
#line 256 "../lib/Services/Settings.vala"
										_g_variant_unref0 (_tmp48_);
#line 869 "Settings.c"
									} else {
#line 257 "../lib/Services/Settings.vala"
										if (G_TYPE_IS_ENUM (type)) {
#line 873 "Settings.c"
											GParamSpec* _tmp50_;
											const gchar* _tmp51_;
											GSettings* _tmp52_;
											GValue _tmp53_ = {0};
#line 258 "../lib/Services/Settings.vala"
											_tmp50_ = prop;
#line 258 "../lib/Services/Settings.vala"
											_tmp51_ = _tmp50_->name;
#line 258 "../lib/Services/Settings.vala"
											_tmp52_ = self->priv->_schema;
#line 258 "../lib/Services/Settings.vala"
											g_value_init (&_tmp53_, G_TYPE_INT);
#line 258 "../lib/Services/Settings.vala"
											g_value_set_int (&_tmp53_, g_settings_get_enum (_tmp52_, key));
#line 258 "../lib/Services/Settings.vala"
											g_object_set_property ((GObject*) self, _tmp51_, &_tmp53_);
#line 258 "../lib/Services/Settings.vala"
											G_IS_VALUE (&_tmp53_) ? (g_value_unset (&_tmp53_), NULL) : NULL;
#line 892 "Settings.c"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	} else {
#line 259 "../lib/Services/Settings.vala"
		if (g_type_is_a (type, GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE)) {
#line 905 "Settings.c"
			GObject* _tmp54_;
			GSettings* _tmp55_;
			gchar* _tmp56_;
			gchar* _tmp57_;
#line 260 "../lib/Services/Settings.vala"
			g_object_get_property ((GObject*) self, key, &val);
#line 261 "../lib/Services/Settings.vala"
			_tmp54_ = g_value_get_object (&val);
#line 261 "../lib/Services/Settings.vala"
			_tmp55_ = self->priv->_schema;
#line 261 "../lib/Services/Settings.vala"
			_tmp56_ = g_settings_get_string (_tmp55_, key);
#line 261 "../lib/Services/Settings.vala"
			_tmp57_ = _tmp56_;
#line 261 "../lib/Services/Settings.vala"
			granite_services_settings_serializable_settings_deserialize (GRANITE_SERVICES_IS_SETTINGS_SERIALIZABLE (_tmp54_) ? ((GraniteServicesSettingsSerializable*) _tmp54_) : NULL, _tmp57_);
#line 261 "../lib/Services/Settings.vala"
			_g_free0 (_tmp57_);
#line 262 "../lib/Services/Settings.vala"
			g_signal_connect_object ((GObject*) self, "notify", (GCallback) _granite_services_settings_handle_notify_g_object_notify, self, 0);
#line 263 "../lib/Services/Settings.vala"
			G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
#line 263 "../lib/Services/Settings.vala"
			_g_param_spec_unref0 (prop);
#line 263 "../lib/Services/Settings.vala"
			_g_type_class_unref0 (obj_class);
#line 263 "../lib/Services/Settings.vala"
			return;
#line 934 "Settings.c"
		} else {
			const gchar* _tmp58_;
			GSettings* _tmp59_;
			gchar* _tmp60_;
			gchar* _tmp61_;
			gchar* _tmp62_;
#line 265 "../lib/Services/Settings.vala"
			_tmp58_ = g_type_name (type);
#line 265 "../lib/Services/Settings.vala"
			_tmp59_ = self->priv->_schema;
#line 265 "../lib/Services/Settings.vala"
			g_object_get (_tmp59_, "schema-id", &_tmp60_, NULL);
#line 265 "../lib/Services/Settings.vala"
			_tmp61_ = _tmp60_;
#line 265 "../lib/Services/Settings.vala"
			_tmp62_ = _tmp61_;
#line 265 "../lib/Services/Settings.vala"
			g_debug ("Settings.vala:265: Unsupported settings type '%s' for key '%s' in sche" \
"ma '%s'", _tmp58_, key, _tmp62_);
#line 265 "../lib/Services/Settings.vala"
			_g_free0 (_tmp62_);
#line 271 "../lib/Services/Settings.vala"
			g_signal_connect_object ((GObject*) self, "notify", (GCallback) _granite_services_settings_handle_notify_g_object_notify, self, 0);
#line 272 "../lib/Services/Settings.vala"
			G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
#line 272 "../lib/Services/Settings.vala"
			_g_param_spec_unref0 (prop);
#line 272 "../lib/Services/Settings.vala"
			_g_type_class_unref0 (obj_class);
#line 272 "../lib/Services/Settings.vala"
			return;
#line 965 "Settings.c"
		}
	}
#line 275 "../lib/Services/Settings.vala"
	granite_services_settings_call_verify (self, key);
#line 277 "../lib/Services/Settings.vala"
	g_signal_connect_object ((GObject*) self, "notify", (GCallback) _granite_services_settings_handle_notify_g_object_notify, self, 0);
#line 220 "../lib/Services/Settings.vala"
	G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
#line 220 "../lib/Services/Settings.vala"
	_g_param_spec_unref0 (prop);
#line 220 "../lib/Services/Settings.vala"
	_g_type_class_unref0 (obj_class);
#line 978 "Settings.c"
}

static void
granite_services_settings_save_key (GraniteServicesSettings* self,
                                    const gchar* key)
{
	gboolean _tmp0_ = FALSE;
	GObjectClass* obj_class = NULL;
	GTypeClass* _tmp1_;
	GParamSpec* prop = NULL;
	GObjectClass* _tmp2_;
	GParamSpec* _tmp3_;
	GParamSpec* _tmp4_;
	GParamSpec* _tmp5_;
	gboolean success = FALSE;
	guint _tmp6_;
	GType type = 0UL;
	GParamSpec* _tmp7_;
	GValue val = {0};
	GValue _tmp8_ = {0};
	GParamSpec* _tmp9_;
	const gchar* _tmp10_;
	GParamSpec* _tmp11_;
#line 280 "../lib/Services/Settings.vala"
	g_return_if_fail (self != NULL);
#line 280 "../lib/Services/Settings.vala"
	g_return_if_fail (key != NULL);
#line 281 "../lib/Services/Settings.vala"
	if (g_strcmp0 (key, "schema") == 0) {
#line 281 "../lib/Services/Settings.vala"
		_tmp0_ = TRUE;
#line 1010 "Settings.c"
	} else {
#line 281 "../lib/Services/Settings.vala"
		_tmp0_ = self->priv->saving_key;
#line 1014 "Settings.c"
	}
#line 281 "../lib/Services/Settings.vala"
	if (_tmp0_) {
#line 282 "../lib/Services/Settings.vala"
		return;
#line 1020 "Settings.c"
	}
#line 285 "../lib/Services/Settings.vala"
	_tmp1_ = g_type_class_ref (G_TYPE_FROM_INSTANCE ((GObject*) self));
#line 285 "../lib/Services/Settings.vala"
	obj_class = (GObjectClass*) _tmp1_;
#line 286 "../lib/Services/Settings.vala"
	_tmp2_ = obj_class;
#line 286 "../lib/Services/Settings.vala"
	_tmp3_ = g_object_class_find_property (_tmp2_, key);
#line 286 "../lib/Services/Settings.vala"
	_tmp4_ = _g_param_spec_ref0 (_tmp3_);
#line 286 "../lib/Services/Settings.vala"
	prop = _tmp4_;
#line 289 "../lib/Services/Settings.vala"
	_tmp5_ = prop;
#line 289 "../lib/Services/Settings.vala"
	if (_tmp5_ == NULL) {
#line 290 "../lib/Services/Settings.vala"
		_g_param_spec_unref0 (prop);
#line 290 "../lib/Services/Settings.vala"
		_g_type_class_unref0 (obj_class);
#line 290 "../lib/Services/Settings.vala"
		return;
#line 1044 "Settings.c"
	}
#line 293 "../lib/Services/Settings.vala"
	success = TRUE;
#line 295 "../lib/Services/Settings.vala"
	self->priv->saving_key = TRUE;
#line 296 "../lib/Services/Settings.vala"
	g_signal_parse_name ("notify", G_TYPE_OBJECT, &_tmp6_, NULL, FALSE);
#line 296 "../lib/Services/Settings.vala"
	g_signal_handlers_disconnect_matched ((GObject*) self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp6_, 0, NULL, (GCallback) _granite_services_settings_handle_notify_g_object_notify, self);
#line 298 "../lib/Services/Settings.vala"
	_tmp7_ = prop;
#line 298 "../lib/Services/Settings.vala"
	type = _tmp7_->value_type;
#line 299 "../lib/Services/Settings.vala"
	g_value_init (&_tmp8_, type);
#line 299 "../lib/Services/Settings.vala"
	val = _tmp8_;
#line 300 "../lib/Services/Settings.vala"
	_tmp9_ = prop;
#line 300 "../lib/Services/Settings.vala"
	_tmp10_ = _tmp9_->name;
#line 300 "../lib/Services/Settings.vala"
	g_object_get_property ((GObject*) self, _tmp10_, &val);
#line 302 "../lib/Services/Settings.vala"
	_tmp11_ = prop;
#line 302 "../lib/Services/Settings.vala"
	if (G_VALUE_TYPE (&val) == _tmp11_->value_type) {
#line 303 "../lib/Services/Settings.vala"
		if (type == G_TYPE_INT) {
#line 1074 "Settings.c"
			GSettings* _tmp12_;
#line 304 "../lib/Services/Settings.vala"
			_tmp12_ = self->priv->_schema;
#line 304 "../lib/Services/Settings.vala"
			if (g_value_get_int (&val) != g_settings_get_int (_tmp12_, key)) {
#line 1080 "Settings.c"
				GSettings* _tmp13_;
#line 305 "../lib/Services/Settings.vala"
				_tmp13_ = self->priv->_schema;
#line 305 "../lib/Services/Settings.vala"
				success = g_settings_set_int (_tmp13_, key, g_value_get_int (&val));
#line 1086 "Settings.c"
			}
		} else {
#line 307 "../lib/Services/Settings.vala"
			if (type == G_TYPE_UINT) {
#line 1091 "Settings.c"
				GSettings* _tmp14_;
#line 308 "../lib/Services/Settings.vala"
				_tmp14_ = self->priv->_schema;
#line 308 "../lib/Services/Settings.vala"
				if (g_value_get_uint (&val) != g_settings_get_uint (_tmp14_, key)) {
#line 1097 "Settings.c"
					GSettings* _tmp15_;
#line 309 "../lib/Services/Settings.vala"
					_tmp15_ = self->priv->_schema;
#line 309 "../lib/Services/Settings.vala"
					success = g_settings_set_uint (_tmp15_, key, g_value_get_uint (&val));
#line 1103 "Settings.c"
				}
			} else {
#line 311 "../lib/Services/Settings.vala"
				if (type == G_TYPE_INT64) {
#line 1108 "Settings.c"
					GSettings* _tmp16_;
					GVariant* _tmp17_;
					GVariant* _tmp18_;
					gboolean _tmp19_;
#line 312 "../lib/Services/Settings.vala"
					_tmp16_ = self->priv->_schema;
#line 312 "../lib/Services/Settings.vala"
					_tmp17_ = g_settings_get_value (_tmp16_, key);
#line 312 "../lib/Services/Settings.vala"
					_tmp18_ = _tmp17_;
#line 312 "../lib/Services/Settings.vala"
					_tmp19_ = g_value_get_int64 (&val) != g_variant_get_int64 (_tmp18_);
#line 312 "../lib/Services/Settings.vala"
					_g_variant_unref0 (_tmp18_);
#line 312 "../lib/Services/Settings.vala"
					if (_tmp19_) {
#line 1125 "Settings.c"
						GSettings* _tmp20_;
						GVariant* _tmp21_;
						GVariant* _tmp22_;
#line 313 "../lib/Services/Settings.vala"
						_tmp20_ = self->priv->_schema;
#line 313 "../lib/Services/Settings.vala"
						_tmp21_ = g_variant_new_int64 (g_value_get_int64 (&val));
#line 313 "../lib/Services/Settings.vala"
						g_variant_ref_sink (_tmp21_);
#line 313 "../lib/Services/Settings.vala"
						_tmp22_ = _tmp21_;
#line 313 "../lib/Services/Settings.vala"
						success = g_settings_set_value (_tmp20_, key, _tmp22_);
#line 313 "../lib/Services/Settings.vala"
						_g_variant_unref0 (_tmp22_);
#line 1141 "Settings.c"
					}
				} else {
#line 315 "../lib/Services/Settings.vala"
					if (type == G_TYPE_UINT64) {
#line 1146 "Settings.c"
						GSettings* _tmp23_;
						GVariant* _tmp24_;
						GVariant* _tmp25_;
						gboolean _tmp26_;
#line 316 "../lib/Services/Settings.vala"
						_tmp23_ = self->priv->_schema;
#line 316 "../lib/Services/Settings.vala"
						_tmp24_ = g_settings_get_value (_tmp23_, key);
#line 316 "../lib/Services/Settings.vala"
						_tmp25_ = _tmp24_;
#line 316 "../lib/Services/Settings.vala"
						_tmp26_ = g_value_get_uint64 (&val) != g_variant_get_uint64 (_tmp25_);
#line 316 "../lib/Services/Settings.vala"
						_g_variant_unref0 (_tmp25_);
#line 316 "../lib/Services/Settings.vala"
						if (_tmp26_) {
#line 1163 "Settings.c"
							GSettings* _tmp27_;
							GVariant* _tmp28_;
							GVariant* _tmp29_;
#line 317 "../lib/Services/Settings.vala"
							_tmp27_ = self->priv->_schema;
#line 317 "../lib/Services/Settings.vala"
							_tmp28_ = g_variant_new_uint64 (g_value_get_uint64 (&val));
#line 317 "../lib/Services/Settings.vala"
							g_variant_ref_sink (_tmp28_);
#line 317 "../lib/Services/Settings.vala"
							_tmp29_ = _tmp28_;
#line 317 "../lib/Services/Settings.vala"
							success = g_settings_set_value (_tmp27_, key, _tmp29_);
#line 317 "../lib/Services/Settings.vala"
							_g_variant_unref0 (_tmp29_);
#line 1179 "Settings.c"
						}
					} else {
#line 319 "../lib/Services/Settings.vala"
						if (type == G_TYPE_DOUBLE) {
#line 1184 "Settings.c"
							GSettings* _tmp30_;
#line 320 "../lib/Services/Settings.vala"
							_tmp30_ = self->priv->_schema;
#line 320 "../lib/Services/Settings.vala"
							if (g_value_get_double (&val) != g_settings_get_double (_tmp30_, key)) {
#line 1190 "Settings.c"
								GSettings* _tmp31_;
#line 321 "../lib/Services/Settings.vala"
								_tmp31_ = self->priv->_schema;
#line 321 "../lib/Services/Settings.vala"
								success = g_settings_set_double (_tmp31_, key, g_value_get_double (&val));
#line 1196 "Settings.c"
							}
						} else {
#line 323 "../lib/Services/Settings.vala"
							if (type == G_TYPE_STRING) {
#line 1201 "Settings.c"
								const gchar* _tmp32_;
								GSettings* _tmp33_;
								gchar* _tmp34_;
								gchar* _tmp35_;
								gboolean _tmp36_;
#line 324 "../lib/Services/Settings.vala"
								_tmp32_ = g_value_get_string (&val);
#line 324 "../lib/Services/Settings.vala"
								_tmp33_ = self->priv->_schema;
#line 324 "../lib/Services/Settings.vala"
								_tmp34_ = g_settings_get_string (_tmp33_, key);
#line 324 "../lib/Services/Settings.vala"
								_tmp35_ = _tmp34_;
#line 324 "../lib/Services/Settings.vala"
								_tmp36_ = g_strcmp0 (_tmp32_, _tmp35_) != 0;
#line 324 "../lib/Services/Settings.vala"
								_g_free0 (_tmp35_);
#line 324 "../lib/Services/Settings.vala"
								if (_tmp36_) {
#line 1221 "Settings.c"
									GSettings* _tmp37_;
									const gchar* _tmp38_;
#line 325 "../lib/Services/Settings.vala"
									_tmp37_ = self->priv->_schema;
#line 325 "../lib/Services/Settings.vala"
									_tmp38_ = g_value_get_string (&val);
#line 325 "../lib/Services/Settings.vala"
									success = g_settings_set_string (_tmp37_, key, _tmp38_);
#line 1230 "Settings.c"
								}
							} else {
#line 327 "../lib/Services/Settings.vala"
								if (type == G_TYPE_STRV) {
#line 1235 "Settings.c"
									gchar** strings = NULL;
									gint strings_length1;
									gint _strings_size_;
									gchar** _tmp39_;
									gint _tmp39__length1;
									GSettings* _tmp40_;
									gchar** _tmp41_;
									gchar** _tmp42_;
									gchar** _tmp43_;
									gint _tmp43__length1;
									gboolean _tmp44_;
#line 328 "../lib/Services/Settings.vala"
									strings = NULL;
#line 328 "../lib/Services/Settings.vala"
									strings_length1 = 0;
#line 328 "../lib/Services/Settings.vala"
									_strings_size_ = strings_length1;
#line 329 "../lib/Services/Settings.vala"
									g_object_get ((GObject*) self, key, &strings, NULL);
#line 330 "../lib/Services/Settings.vala"
									_tmp39_ = strings;
#line 330 "../lib/Services/Settings.vala"
									_tmp39__length1 = strings_length1;
#line 330 "../lib/Services/Settings.vala"
									_tmp40_ = self->priv->_schema;
#line 330 "../lib/Services/Settings.vala"
									_tmp42_ = _tmp41_ = g_settings_get_strv (_tmp40_, key);
#line 330 "../lib/Services/Settings.vala"
									_tmp43_ = _tmp42_;
#line 330 "../lib/Services/Settings.vala"
									_tmp43__length1 = _vala_array_length (_tmp41_);
#line 330 "../lib/Services/Settings.vala"
									_tmp44_ = _tmp39_ != _tmp43_;
#line 330 "../lib/Services/Settings.vala"
									_tmp43_ = (_vala_array_free (_tmp43_, _tmp43__length1, (GDestroyNotify) g_free), NULL);
#line 330 "../lib/Services/Settings.vala"
									if (_tmp44_) {
#line 1273 "Settings.c"
										GSettings* _tmp45_;
										gchar** _tmp46_;
										gint _tmp46__length1;
#line 331 "../lib/Services/Settings.vala"
										_tmp45_ = self->priv->_schema;
#line 331 "../lib/Services/Settings.vala"
										_tmp46_ = strings;
#line 331 "../lib/Services/Settings.vala"
										_tmp46__length1 = strings_length1;
#line 331 "../lib/Services/Settings.vala"
										success = g_settings_set_strv (_tmp45_, key, _tmp46_);
#line 1285 "Settings.c"
									}
#line 327 "../lib/Services/Settings.vala"
									strings = (_vala_array_free (strings, strings_length1, (GDestroyNotify) g_free), NULL);
#line 1289 "Settings.c"
								} else {
#line 333 "../lib/Services/Settings.vala"
									if (type == G_TYPE_BOOLEAN) {
#line 1293 "Settings.c"
										GSettings* _tmp47_;
#line 334 "../lib/Services/Settings.vala"
										_tmp47_ = self->priv->_schema;
#line 334 "../lib/Services/Settings.vala"
										if (g_value_get_boolean (&val) != g_settings_get_boolean (_tmp47_, key)) {
#line 1299 "Settings.c"
											GSettings* _tmp48_;
#line 335 "../lib/Services/Settings.vala"
											_tmp48_ = self->priv->_schema;
#line 335 "../lib/Services/Settings.vala"
											success = g_settings_set_boolean (_tmp48_, key, g_value_get_boolean (&val));
#line 1305 "Settings.c"
										}
									} else {
#line 337 "../lib/Services/Settings.vala"
										if (G_TYPE_IS_ENUM (type)) {
#line 1310 "Settings.c"
											GSettings* _tmp49_;
#line 338 "../lib/Services/Settings.vala"
											_tmp49_ = self->priv->_schema;
#line 338 "../lib/Services/Settings.vala"
											if (g_value_get_enum (&val) != g_settings_get_enum (_tmp49_, key)) {
#line 1316 "Settings.c"
												GSettings* _tmp50_;
#line 339 "../lib/Services/Settings.vala"
												_tmp50_ = self->priv->_schema;
#line 339 "../lib/Services/Settings.vala"
												success = g_settings_set_enum (_tmp50_, key, g_value_get_enum (&val));
#line 1322 "Settings.c"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	} else {
#line 342 "../lib/Services/Settings.vala"
		if (g_type_is_a (type, GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE)) {
#line 1336 "Settings.c"
			GSettings* _tmp51_;
			GObject* _tmp52_;
			gchar* _tmp53_;
			gchar* _tmp54_;
#line 343 "../lib/Services/Settings.vala"
			_tmp51_ = self->priv->_schema;
#line 343 "../lib/Services/Settings.vala"
			_tmp52_ = g_value_get_object (&val);
#line 343 "../lib/Services/Settings.vala"
			_tmp53_ = granite_services_settings_serializable_settings_serialize (GRANITE_SERVICES_IS_SETTINGS_SERIALIZABLE (_tmp52_) ? ((GraniteServicesSettingsSerializable*) _tmp52_) : NULL);
#line 343 "../lib/Services/Settings.vala"
			_tmp54_ = _tmp53_;
#line 343 "../lib/Services/Settings.vala"
			success = g_settings_set_string (_tmp51_, key, _tmp54_);
#line 343 "../lib/Services/Settings.vala"
			_g_free0 (_tmp54_);
#line 1353 "Settings.c"
		} else {
			const gchar* _tmp55_;
			GSettings* _tmp56_;
			gchar* _tmp57_;
			gchar* _tmp58_;
			gchar* _tmp59_;
#line 345 "../lib/Services/Settings.vala"
			_tmp55_ = g_type_name (type);
#line 345 "../lib/Services/Settings.vala"
			_tmp56_ = self->priv->_schema;
#line 345 "../lib/Services/Settings.vala"
			g_object_get (_tmp56_, "schema-id", &_tmp57_, NULL);
#line 345 "../lib/Services/Settings.vala"
			_tmp58_ = _tmp57_;
#line 345 "../lib/Services/Settings.vala"
			_tmp59_ = _tmp58_;
#line 345 "../lib/Services/Settings.vala"
			g_debug ("Settings.vala:345: Unsupported settings type '%s' for key '%s' in sche" \
"ma '%s'", _tmp55_, key, _tmp59_);
#line 345 "../lib/Services/Settings.vala"
			_g_free0 (_tmp59_);
#line 1374 "Settings.c"
		}
	}
#line 353 "../lib/Services/Settings.vala"
	if (!success) {
#line 354 "../lib/Services/Settings.vala"
		g_warning ("Settings.vala:354: Key '%s' could not be written to.", key);
#line 1381 "Settings.c"
	}
#line 357 "../lib/Services/Settings.vala"
	g_signal_connect_object ((GObject*) self, "notify", (GCallback) _granite_services_settings_handle_notify_g_object_notify, self, 0);
#line 358 "../lib/Services/Settings.vala"
	self->priv->saving_key = FALSE;
#line 280 "../lib/Services/Settings.vala"
	G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
#line 280 "../lib/Services/Settings.vala"
	_g_param_spec_unref0 (prop);
#line 280 "../lib/Services/Settings.vala"
	_g_type_class_unref0 (obj_class);
#line 1393 "Settings.c"
}

static GObject *
granite_services_settings_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteServicesSettings * self;
	GSettings* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GObjectClass* obj_class = NULL;
	GTypeClass* _tmp4_;
	GParamSpec** properties = NULL;
	GObjectClass* _tmp5_;
	guint _tmp6_ = 0;
	GParamSpec** _tmp7_;
	gint properties_length1;
	gint _properties_size_;
	GParamSpec** _tmp8_;
	gint _tmp8__length1;
#line 162 "../lib/Services/Settings.vala"
	parent_class = G_OBJECT_CLASS (granite_services_settings_parent_class);
#line 162 "../lib/Services/Settings.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 162 "../lib/Services/Settings.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_SERVICES_TYPE_SETTINGS, GraniteServicesSettings);
#line 164 "../lib/Services/Settings.vala"
	_tmp0_ = self->priv->_schema;
#line 164 "../lib/Services/Settings.vala"
	g_object_get (_tmp0_, "schema-id", &_tmp1_, NULL);
#line 164 "../lib/Services/Settings.vala"
	_tmp2_ = _tmp1_;
#line 164 "../lib/Services/Settings.vala"
	_tmp3_ = _tmp2_;
#line 164 "../lib/Services/Settings.vala"
	g_debug ("Settings.vala:164: Loading settings from schema '%s'", _tmp3_);
#line 164 "../lib/Services/Settings.vala"
	_g_free0 (_tmp3_);
#line 166 "../lib/Services/Settings.vala"
	_tmp4_ = g_type_class_ref (G_TYPE_FROM_INSTANCE ((GObject*) self));
#line 166 "../lib/Services/Settings.vala"
	obj_class = (GObjectClass*) _tmp4_;
#line 167 "../lib/Services/Settings.vala"
	_tmp5_ = obj_class;
#line 167 "../lib/Services/Settings.vala"
	_tmp7_ = g_object_class_list_properties (_tmp5_, &_tmp6_);
#line 167 "../lib/Services/Settings.vala"
	properties = _tmp7_;
#line 167 "../lib/Services/Settings.vala"
	properties_length1 = _tmp6_;
#line 167 "../lib/Services/Settings.vala"
	_properties_size_ = properties_length1;
#line 168 "../lib/Services/Settings.vala"
	_tmp8_ = properties;
#line 168 "../lib/Services/Settings.vala"
	_tmp8__length1 = properties_length1;
#line 1454 "Settings.c"
	{
		GParamSpec** prop_collection = NULL;
		gint prop_collection_length1 = 0;
		gint _prop_collection_size_ = 0;
		gint prop_it = 0;
#line 168 "../lib/Services/Settings.vala"
		prop_collection = _tmp8_;
#line 168 "../lib/Services/Settings.vala"
		prop_collection_length1 = _tmp8__length1;
#line 168 "../lib/Services/Settings.vala"
		for (prop_it = 0; prop_it < prop_collection_length1; prop_it = prop_it + 1) {
#line 1466 "Settings.c"
			GParamSpec* prop = NULL;
#line 168 "../lib/Services/Settings.vala"
			prop = prop_collection[prop_it];
#line 1470 "Settings.c"
			{
				GParamSpec* _tmp9_;
				const gchar* _tmp10_;
#line 169 "../lib/Services/Settings.vala"
				_tmp9_ = prop;
#line 169 "../lib/Services/Settings.vala"
				_tmp10_ = _tmp9_->name;
#line 169 "../lib/Services/Settings.vala"
				granite_services_settings_load_key (self, _tmp10_);
#line 1480 "Settings.c"
			}
		}
	}
#line 171 "../lib/Services/Settings.vala"
	granite_services_settings_start_monitor (self);
#line 162 "../lib/Services/Settings.vala"
	properties = (g_free (properties), NULL);
#line 162 "../lib/Services/Settings.vala"
	_g_type_class_unref0 (obj_class);
#line 162 "../lib/Services/Settings.vala"
	return obj;
#line 1492 "Settings.c"
}

static void
granite_services_settings_class_init (GraniteServicesSettingsClass * klass,
                                      gpointer klass_data)
{
#line 95 "../lib/Services/Settings.vala"
	granite_services_settings_parent_class = g_type_class_peek_parent (klass);
#line 95 "../lib/Services/Settings.vala"
	g_type_class_adjust_private_offset (klass, &GraniteServicesSettings_private_offset);
#line 95 "../lib/Services/Settings.vala"
	((GraniteServicesSettingsClass *) klass)->verify = (void (*) (GraniteServicesSettings*, const gchar*)) granite_services_settings_real_verify;
#line 95 "../lib/Services/Settings.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_services_settings_get_property;
#line 95 "../lib/Services/Settings.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_services_settings_set_property;
#line 95 "../lib/Services/Settings.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_services_settings_constructor;
#line 95 "../lib/Services/Settings.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_services_settings_finalize;
#line 95 "../lib/Services/Settings.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_SERVICES_SETTINGS_SCHEMA_PROPERTY, granite_services_settings_properties[GRANITE_SERVICES_SETTINGS_SCHEMA_PROPERTY] = g_param_spec_object ("schema", "schema", "schema", g_settings_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1515 "Settings.c"
	/**
	         * This signal is to be used in place of the standard {@link GLib.Object.notify} signal.
	         *
	         * This signal ''only'' emits after a property's value was verified.
	         *
	         * Note that in the case where a property was set to an invalid value,
	         * (and thus, sanitized to a valid value), the {@link GLib.Object.notify} signal will emit
	         * twice: once with the invalid value and once with the sanitized value.
	         */
#line 95 "../lib/Services/Settings.vala"
	granite_services_settings_signals[GRANITE_SERVICES_SETTINGS_CHANGED_SIGNAL] = g_signal_new ("changed", GRANITE_SERVICES_TYPE_SETTINGS, G_SIGNAL_RUN_FIRST | G_SIGNAL_DETAILED | G_SIGNAL_NO_RECURSE | G_SIGNAL_ACTION | G_SIGNAL_NO_HOOKS, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1527 "Settings.c"
}

static void
granite_services_settings_instance_init (GraniteServicesSettings * self,
                                         gpointer klass)
{
#line 95 "../lib/Services/Settings.vala"
	self->priv = granite_services_settings_get_instance_private (self);
#line 1536 "Settings.c"
}

static void
granite_services_settings_finalize (GObject * obj)
{
	GraniteServicesSettings * self;
#line 95 "../lib/Services/Settings.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_SERVICES_TYPE_SETTINGS, GraniteServicesSettings);
#line 175 "../lib/Services/Settings.vala"
	granite_services_settings_stop_monitor (self);
#line 114 "../lib/Services/Settings.vala"
	_g_object_unref0 (self->priv->_schema);
#line 95 "../lib/Services/Settings.vala"
	G_OBJECT_CLASS (granite_services_settings_parent_class)->finalize (obj);
#line 1551 "Settings.c"
}

/**
     * Class for interacting with an internal {@link GLib.Settings} using native Vala properties.
     * Clients of this class should not connect to the {@link GLib.Object.notify} signal.
     * Instead, they should connect to the {@link Granite.Services.Settings.changed} signal.
     *
     * For example, if a developer wanted to interact with desktop.Wallpaper's (http:/www.launchpad.net/pantheon-wallpaper) schema,
     * this is what his/her subclass might look like:
     *
     * {{{
     *    public class WallpaperSettings : Granite.Services.Settings {
     *
     *        public PictureMode picture_mode { get; set; }
     *
     *        public string picture_path { get; set; }
     *
     *        public string background_color { get; set; }
     *
     *        public WallpaperSettings () {
     *            base ("desktop.Wallpaper");
     *        }
     *
     *        protected override void verify (string key) {
     *
     *            switch (key) {
     *
     *                case "background-color":
     *                    Gdk.Color bg;
     *                    if (!Gdk.Color.parse (background_color, out bg))
     *                        background_color = "#000000";
     *                    break;
     *            }
     *        }
     *
     *    }
     * }}}
     *
     * Keep in mind that the developer must define his/her enums to match the schema's.
     *
     * The following is a simplified explanation of how this library works:
*
     *  1. Any subclass looks at all properties it contains, and loads their initial values from the keys they represent.
     *     Because Vala properties are stored as GLib properties, the string representation of a property replaces underscores with
     *     hyphens (i.e. property_name becomes "property-name"). This is how this library knows which keys to load from. If the key
     *     does not exist, it will result in a fatal error.
     *  1. When a property of the subclass changes, the library will first verify the data before emitting a changed signal. If necessary,
     *     the library will change the value of the property while verifying.
     *     This is why developers should only act upon emissions of the changed () signal and never the native {@link GLib.Object.notify} signal.
     *  1. When the corresponding key of one of the properties of the subclass changes, it will also verify the data and change it, if necessary,
     *     before loading it into as the corresponding property's value.
     */
static GType
granite_services_settings_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteServicesSettingsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_services_settings_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteServicesSettings), 0, (GInstanceInitFunc) granite_services_settings_instance_init, NULL };
	GType granite_services_settings_type_id;
	granite_services_settings_type_id = g_type_register_static (G_TYPE_OBJECT, "GraniteServicesSettings", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
	GraniteServicesSettings_private_offset = g_type_add_instance_private (granite_services_settings_type_id, sizeof (GraniteServicesSettingsPrivate));
	return granite_services_settings_type_id;
}

GType
granite_services_settings_get_type (void)
{
	static volatile gsize granite_services_settings_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_settings_type_id__volatile)) {
		GType granite_services_settings_type_id;
		granite_services_settings_type_id = granite_services_settings_get_type_once ();
		g_once_init_leave (&granite_services_settings_type_id__volatile, granite_services_settings_type_id);
	}
	return granite_services_settings_type_id__volatile;
}

static void
_vala_granite_services_settings_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	GraniteServicesSettings * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_SERVICES_TYPE_SETTINGS, GraniteServicesSettings);
#line 95 "../lib/Services/Settings.vala"
	switch (property_id) {
#line 95 "../lib/Services/Settings.vala"
		case GRANITE_SERVICES_SETTINGS_SCHEMA_PROPERTY:
#line 95 "../lib/Services/Settings.vala"
		g_value_set_object (value, granite_services_settings_get_schema (self));
#line 95 "../lib/Services/Settings.vala"
		break;
#line 1642 "Settings.c"
		default:
#line 95 "../lib/Services/Settings.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 95 "../lib/Services/Settings.vala"
		break;
#line 1648 "Settings.c"
	}
}

static void
_vala_granite_services_settings_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	GraniteServicesSettings * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_SERVICES_TYPE_SETTINGS, GraniteServicesSettings);
#line 95 "../lib/Services/Settings.vala"
	switch (property_id) {
#line 95 "../lib/Services/Settings.vala"
		case GRANITE_SERVICES_SETTINGS_SCHEMA_PROPERTY:
#line 95 "../lib/Services/Settings.vala"
		granite_services_settings_set_schema (self, g_value_get_object (value));
#line 95 "../lib/Services/Settings.vala"
		break;
#line 1668 "Settings.c"
		default:
#line 95 "../lib/Services/Settings.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 95 "../lib/Services/Settings.vala"
		break;
#line 1674 "Settings.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


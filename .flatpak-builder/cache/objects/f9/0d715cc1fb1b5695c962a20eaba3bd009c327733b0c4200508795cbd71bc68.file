/* DateTime.c generated by valac 0.48.14, the Vala compiler
 * generated from DateTime.vala, do not modify */

/*
 *  Copyright (C) 2012-2017 Granite Developers
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <math.h>
#include <float.h>
#include <gio/gio.h>

#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

gchar* granite_date_time_get_default_time_format (gboolean is_12h,
                                                  gboolean with_second);
gchar* granite_date_time_get_relative_datetime (GDateTime* date_time);
gboolean granite_date_time_is_same_day (GDateTime* day1,
                                        GDateTime* day2);
#define GRANITE_GETTEXT_PACKAGE "granite"
G_GNUC_INTERNAL gboolean granite_date_time_is_clock_format_12h (void);
gchar* granite_date_time_get_default_date_format (gboolean with_weekday,
                                                  gboolean with_day,
                                                  gboolean with_year);
gchar* granite_date_time_seconds_to_time (gint seconds);

/**
     * Gets a default translated time format.
     * The function constructs a new string interpreting the //is_12h// and //with_second// parameters
     * so that it can be used with formatting functions like {@link GLib.DateTime.format}.
     *
     * The returned string is formatted and translated. This function is mostly used to display
     * the time in various user interfaces like the time displayed in the top panel.
     *
     * @param is_12h if the returned string should be formatted in 12h format
     * @param with_second if the returned string should include seconds
     *
     * @return the formatted and located time string.
     */
gchar*
granite_date_time_get_default_time_format (gboolean is_12h,
                                           gboolean with_second)
{
	gchar* result = NULL;
#line 39 "../lib/DateTime.vala"
	if (is_12h == TRUE) {
#line 40 "../lib/DateTime.vala"
		if (with_second == TRUE) {
#line 70 "DateTime.c"
			gchar* _tmp0_;
#line 42 "../lib/DateTime.vala"
			_tmp0_ = g_strdup (_ ("%-l:%M:%S %p"));
#line 42 "../lib/DateTime.vala"
			result = _tmp0_;
#line 42 "../lib/DateTime.vala"
			return result;
#line 78 "DateTime.c"
		} else {
			gchar* _tmp1_;
#line 45 "../lib/DateTime.vala"
			_tmp1_ = g_strdup (_ ("%-l:%M %p"));
#line 45 "../lib/DateTime.vala"
			result = _tmp1_;
#line 45 "../lib/DateTime.vala"
			return result;
#line 87 "DateTime.c"
		}
	} else {
#line 48 "../lib/DateTime.vala"
		if (with_second == TRUE) {
#line 92 "DateTime.c"
			gchar* _tmp2_;
#line 50 "../lib/DateTime.vala"
			_tmp2_ = g_strdup (_ ("%H:%M:%S"));
#line 50 "../lib/DateTime.vala"
			result = _tmp2_;
#line 50 "../lib/DateTime.vala"
			return result;
#line 100 "DateTime.c"
		} else {
			gchar* _tmp3_;
#line 53 "../lib/DateTime.vala"
			_tmp3_ = g_strdup (_ ("%H:%M"));
#line 53 "../lib/DateTime.vala"
			result = _tmp3_;
#line 53 "../lib/DateTime.vala"
			return result;
#line 109 "DateTime.c"
		}
	}
}

/**
     * Compares a {@link GLib.DateTime} to {@link GLib.DateTime.now_local} and returns a location, relative date and
     * time string. Results appear as natural-language strings like "Now", "5m ago", "Yesterday"
     *
     * @param date_time a {@link GLib.DateTime} to compare against {@link GLib.DateTime.now_local}
     *
     * @return a localized, relative date and time string
     */
gchar*
granite_date_time_get_relative_datetime (GDateTime* date_time)
{
	GDateTime* now = NULL;
	GDateTime* _tmp0_;
	GTimeSpan diff = 0LL;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	gchar* result = NULL;
#line 66 "../lib/DateTime.vala"
	g_return_val_if_fail (date_time != NULL, NULL);
#line 67 "../lib/DateTime.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 67 "../lib/DateTime.vala"
	now = _tmp0_;
#line 68 "../lib/DateTime.vala"
	_tmp1_ = now;
#line 68 "../lib/DateTime.vala"
	diff = g_date_time_difference (_tmp1_, date_time);
#line 70 "../lib/DateTime.vala"
	_tmp2_ = now;
#line 70 "../lib/DateTime.vala"
	if (granite_date_time_is_same_day (date_time, _tmp2_)) {
#line 145 "DateTime.c"
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
#line 71 "../lib/DateTime.vala"
		if (diff > ((GTimeSpan) 0)) {
#line 72 "../lib/DateTime.vala"
			if (diff < G_TIME_SPAN_MINUTE) {
#line 154 "DateTime.c"
				gchar* _tmp3_;
#line 73 "../lib/DateTime.vala"
				_tmp3_ = g_strdup (_ ("Now"));
#line 73 "../lib/DateTime.vala"
				result = _tmp3_;
#line 73 "../lib/DateTime.vala"
				_g_date_time_unref0 (now);
#line 73 "../lib/DateTime.vala"
				return result;
#line 164 "DateTime.c"
			} else {
#line 74 "../lib/DateTime.vala"
				if (diff < G_TIME_SPAN_HOUR) {
#line 168 "DateTime.c"
					GTimeSpan minutes = 0LL;
					gchar* _tmp4_;
#line 75 "../lib/DateTime.vala"
					minutes = diff / G_TIME_SPAN_MINUTE;
#line 76 "../lib/DateTime.vala"
					_tmp4_ = g_strdup_printf (g_dngettext (GRANITE_GETTEXT_PACKAGE, "%dm ago", "%dm ago", (gulong) minutes), (gint) minutes);
#line 76 "../lib/DateTime.vala"
					result = _tmp4_;
#line 76 "../lib/DateTime.vala"
					_g_date_time_unref0 (now);
#line 76 "../lib/DateTime.vala"
					return result;
#line 181 "DateTime.c"
				} else {
#line 77 "../lib/DateTime.vala"
					if (diff < (12 * G_TIME_SPAN_HOUR)) {
#line 185 "DateTime.c"
						gint rounded = 0;
						gchar* _tmp5_;
#line 78 "../lib/DateTime.vala"
						rounded = (gint) round (((gdouble) diff) / G_TIME_SPAN_HOUR);
#line 79 "../lib/DateTime.vala"
						_tmp5_ = g_strdup_printf (g_dngettext (GRANITE_GETTEXT_PACKAGE, "%dh ago", "%dh ago", (gulong) rounded), rounded);
#line 79 "../lib/DateTime.vala"
						result = _tmp5_;
#line 79 "../lib/DateTime.vala"
						_g_date_time_unref0 (now);
#line 79 "../lib/DateTime.vala"
						return result;
#line 198 "DateTime.c"
					}
				}
			}
		} else {
#line 82 "../lib/DateTime.vala"
			diff = -1 * diff;
#line 83 "../lib/DateTime.vala"
			if (diff < G_TIME_SPAN_HOUR) {
#line 207 "DateTime.c"
				GTimeSpan minutes = 0LL;
				gchar* _tmp6_;
#line 84 "../lib/DateTime.vala"
				minutes = diff / G_TIME_SPAN_MINUTE;
#line 85 "../lib/DateTime.vala"
				_tmp6_ = g_strdup_printf (g_dngettext (GRANITE_GETTEXT_PACKAGE, "in %dm", "in %dm", (gulong) minutes), (gint) minutes);
#line 85 "../lib/DateTime.vala"
				result = _tmp6_;
#line 85 "../lib/DateTime.vala"
				_g_date_time_unref0 (now);
#line 85 "../lib/DateTime.vala"
				return result;
#line 220 "DateTime.c"
			} else {
#line 86 "../lib/DateTime.vala"
				if (diff < (12 * G_TIME_SPAN_HOUR)) {
#line 224 "DateTime.c"
					gint rounded = 0;
					gchar* _tmp7_;
#line 87 "../lib/DateTime.vala"
					rounded = (gint) round (((gdouble) diff) / G_TIME_SPAN_HOUR);
#line 88 "../lib/DateTime.vala"
					_tmp7_ = g_strdup_printf (g_dngettext (GRANITE_GETTEXT_PACKAGE, "in %dh", "in %dh", (gulong) rounded), rounded);
#line 88 "../lib/DateTime.vala"
					result = _tmp7_;
#line 88 "../lib/DateTime.vala"
					_g_date_time_unref0 (now);
#line 88 "../lib/DateTime.vala"
					return result;
#line 237 "DateTime.c"
				}
			}
		}
#line 92 "../lib/DateTime.vala"
		_tmp8_ = granite_date_time_get_default_time_format (granite_date_time_is_clock_format_12h (), FALSE);
#line 92 "../lib/DateTime.vala"
		_tmp9_ = _tmp8_;
#line 92 "../lib/DateTime.vala"
		_tmp10_ = g_date_time_format (date_time, _tmp9_);
#line 92 "../lib/DateTime.vala"
		_tmp11_ = _tmp10_;
#line 92 "../lib/DateTime.vala"
		_g_free0 (_tmp9_);
#line 92 "../lib/DateTime.vala"
		result = _tmp11_;
#line 92 "../lib/DateTime.vala"
		_g_date_time_unref0 (now);
#line 92 "../lib/DateTime.vala"
		return result;
#line 257 "DateTime.c"
	} else {
		GDateTime* _tmp12_;
		GDateTime* _tmp13_;
		GDateTime* _tmp14_;
		gboolean _tmp15_;
#line 93 "../lib/DateTime.vala"
		_tmp12_ = g_date_time_add_days (date_time, 1);
#line 93 "../lib/DateTime.vala"
		_tmp13_ = _tmp12_;
#line 93 "../lib/DateTime.vala"
		_tmp14_ = now;
#line 93 "../lib/DateTime.vala"
		_tmp15_ = granite_date_time_is_same_day (_tmp13_, _tmp14_);
#line 93 "../lib/DateTime.vala"
		_g_date_time_unref0 (_tmp13_);
#line 93 "../lib/DateTime.vala"
		if (_tmp15_) {
#line 275 "DateTime.c"
			gchar* _tmp16_;
#line 94 "../lib/DateTime.vala"
			_tmp16_ = g_strdup (_ ("Yesterday"));
#line 94 "../lib/DateTime.vala"
			result = _tmp16_;
#line 94 "../lib/DateTime.vala"
			_g_date_time_unref0 (now);
#line 94 "../lib/DateTime.vala"
			return result;
#line 285 "DateTime.c"
		} else {
			GDateTime* _tmp17_;
			GDateTime* _tmp18_;
			GDateTime* _tmp19_;
			gboolean _tmp20_;
#line 95 "../lib/DateTime.vala"
			_tmp17_ = g_date_time_add_days (date_time, -1);
#line 95 "../lib/DateTime.vala"
			_tmp18_ = _tmp17_;
#line 95 "../lib/DateTime.vala"
			_tmp19_ = now;
#line 95 "../lib/DateTime.vala"
			_tmp20_ = granite_date_time_is_same_day (_tmp18_, _tmp19_);
#line 95 "../lib/DateTime.vala"
			_g_date_time_unref0 (_tmp18_);
#line 95 "../lib/DateTime.vala"
			if (_tmp20_) {
#line 303 "DateTime.c"
				gchar* _tmp21_;
#line 96 "../lib/DateTime.vala"
				_tmp21_ = g_strdup (_ ("Tomorrow"));
#line 96 "../lib/DateTime.vala"
				result = _tmp21_;
#line 96 "../lib/DateTime.vala"
				_g_date_time_unref0 (now);
#line 96 "../lib/DateTime.vala"
				return result;
#line 313 "DateTime.c"
			} else {
				gboolean _tmp22_ = FALSE;
#line 97 "../lib/DateTime.vala"
				if (diff < (6 * G_TIME_SPAN_DAY)) {
#line 97 "../lib/DateTime.vala"
					_tmp22_ = diff > (-6 * G_TIME_SPAN_DAY);
#line 320 "DateTime.c"
				} else {
#line 97 "../lib/DateTime.vala"
					_tmp22_ = FALSE;
#line 324 "DateTime.c"
				}
#line 97 "../lib/DateTime.vala"
				if (_tmp22_) {
#line 328 "DateTime.c"
					gchar* _tmp23_;
					gchar* _tmp24_;
					gchar* _tmp25_;
					gchar* _tmp26_;
#line 98 "../lib/DateTime.vala"
					_tmp23_ = granite_date_time_get_default_date_format (TRUE, FALSE, FALSE);
#line 98 "../lib/DateTime.vala"
					_tmp24_ = _tmp23_;
#line 98 "../lib/DateTime.vala"
					_tmp25_ = g_date_time_format (date_time, _tmp24_);
#line 98 "../lib/DateTime.vala"
					_tmp26_ = _tmp25_;
#line 98 "../lib/DateTime.vala"
					_g_free0 (_tmp24_);
#line 98 "../lib/DateTime.vala"
					result = _tmp26_;
#line 98 "../lib/DateTime.vala"
					_g_date_time_unref0 (now);
#line 98 "../lib/DateTime.vala"
					return result;
#line 349 "DateTime.c"
				} else {
					GDateTime* _tmp27_;
#line 99 "../lib/DateTime.vala"
					_tmp27_ = now;
#line 99 "../lib/DateTime.vala"
					if (g_date_time_get_year (date_time) == g_date_time_get_year (_tmp27_)) {
#line 356 "DateTime.c"
						gchar* _tmp28_;
						gchar* _tmp29_;
						gchar* _tmp30_;
						gchar* _tmp31_;
#line 100 "../lib/DateTime.vala"
						_tmp28_ = granite_date_time_get_default_date_format (FALSE, TRUE, FALSE);
#line 100 "../lib/DateTime.vala"
						_tmp29_ = _tmp28_;
#line 100 "../lib/DateTime.vala"
						_tmp30_ = g_date_time_format (date_time, _tmp29_);
#line 100 "../lib/DateTime.vala"
						_tmp31_ = _tmp30_;
#line 100 "../lib/DateTime.vala"
						_g_free0 (_tmp29_);
#line 100 "../lib/DateTime.vala"
						result = _tmp31_;
#line 100 "../lib/DateTime.vala"
						_g_date_time_unref0 (now);
#line 100 "../lib/DateTime.vala"
						return result;
#line 377 "DateTime.c"
					} else {
						gchar* _tmp32_;
#line 102 "../lib/DateTime.vala"
						_tmp32_ = g_date_time_format (date_time, "%x");
#line 102 "../lib/DateTime.vala"
						result = _tmp32_;
#line 102 "../lib/DateTime.vala"
						_g_date_time_unref0 (now);
#line 102 "../lib/DateTime.vala"
						return result;
#line 388 "DateTime.c"
					}
				}
			}
		}
	}
#line 66 "../lib/DateTime.vala"
	_g_date_time_unref0 (now);
#line 396 "DateTime.c"
}

/**
     * Gets the //clock-format// key from //org.gnome.desktop.interface// schema
     * and determines if the clock format is 12h based
     *
     * @return true if the clock format is 12h based, false otherwise.
     */
static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gchar* _tmp0_;
	gboolean result = FALSE;
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1531 "glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1531 "glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1531 "glib-2.0.vapi"
	return result;
#line 421 "DateTime.c"
}

G_GNUC_INTERNAL gboolean
granite_date_time_is_clock_format_12h (void)
{
	GSettings* h24_settings = NULL;
	GSettings* _tmp0_;
	gchar* format = NULL;
	gchar* _tmp1_;
	gboolean result = FALSE;
#line 113 "../lib/DateTime.vala"
	_tmp0_ = g_settings_new ("org.gnome.desktop.interface");
#line 113 "../lib/DateTime.vala"
	h24_settings = _tmp0_;
#line 114 "../lib/DateTime.vala"
	_tmp1_ = g_settings_get_string (h24_settings, "clock-format");
#line 114 "../lib/DateTime.vala"
	format = _tmp1_;
#line 115 "../lib/DateTime.vala"
	result = string_contains (format, "12h");
#line 115 "../lib/DateTime.vala"
	_g_free0 (format);
#line 115 "../lib/DateTime.vala"
	_g_object_unref0 (h24_settings);
#line 115 "../lib/DateTime.vala"
	return result;
#line 448 "DateTime.c"
}

/**
     * Compare two {@link GLib.DateTime} and return true if they occur on the same day of the same year
     *
     * @param day1 a {@link GLib.DateTime} to compare against day2
     * @param day2 a {@link GLib.DateTime} to compare against day1
     *
     * @return true if day1 and day2 occur on the same day of the same year. False otherwise
     */
gboolean
granite_date_time_is_same_day (GDateTime* day1,
                               GDateTime* day2)
{
	gboolean _tmp0_ = FALSE;
	gboolean result = FALSE;
#line 126 "../lib/DateTime.vala"
	g_return_val_if_fail (day1 != NULL, FALSE);
#line 126 "../lib/DateTime.vala"
	g_return_val_if_fail (day2 != NULL, FALSE);
#line 127 "../lib/DateTime.vala"
	if (g_date_time_get_day_of_year (day1) == g_date_time_get_day_of_year (day2)) {
#line 127 "../lib/DateTime.vala"
		_tmp0_ = g_date_time_get_year (day1) == g_date_time_get_year (day2);
#line 473 "DateTime.c"
	} else {
#line 127 "../lib/DateTime.vala"
		_tmp0_ = FALSE;
#line 477 "DateTime.c"
	}
#line 127 "../lib/DateTime.vala"
	result = _tmp0_;
#line 127 "../lib/DateTime.vala"
	return result;
#line 483 "DateTime.c"
}

/**
     * Gets the default translated date format.
     * The function constructs a new string interpreting the //with_weekday//, //with_day// and //with_year// parameters
     * so that it can be used with formatting functions like {@link GLib.DateTime.format}.
     *
     * As the {@link Granite.DateTime.get_default_time_format}, the returned string is formatted, translated and is also mostly used to display
     * the date in various user interfaces like the date displayed in the top panel.
     *
     * @param with_weekday if the returned string should contain the abbreviated weekday name
     * @param with_day if the returned string should contain contain the day of the month as a decimal number (range 1 to 31)
     * @param with_year if the returned string should contain the year as a decimal number including the century
     *
     * @return returns the formatted and located date string. If for some reason, the function could not determine the format to use,
     *         an empty string will be returned.
     */
gchar*
granite_date_time_get_default_date_format (gboolean with_weekday,
                                           gboolean with_day,
                                           gboolean with_year)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gchar* _tmp24_;
	gchar* result = NULL;
#line 146 "../lib/DateTime.vala"
	if (with_weekday == TRUE) {
#line 146 "../lib/DateTime.vala"
		_tmp1_ = with_day == TRUE;
#line 514 "DateTime.c"
	} else {
#line 146 "../lib/DateTime.vala"
		_tmp1_ = FALSE;
#line 518 "DateTime.c"
	}
#line 146 "../lib/DateTime.vala"
	if (_tmp1_) {
#line 146 "../lib/DateTime.vala"
		_tmp0_ = with_year == TRUE;
#line 524 "DateTime.c"
	} else {
#line 146 "../lib/DateTime.vala"
		_tmp0_ = FALSE;
#line 528 "DateTime.c"
	}
#line 146 "../lib/DateTime.vala"
	if (_tmp0_) {
#line 532 "DateTime.c"
		gchar* _tmp2_;
#line 148 "../lib/DateTime.vala"
		_tmp2_ = g_strdup (_ ("%a, %b %e, %Y"));
#line 148 "../lib/DateTime.vala"
		result = _tmp2_;
#line 148 "../lib/DateTime.vala"
		return result;
#line 540 "DateTime.c"
	} else {
		gboolean _tmp3_ = FALSE;
		gboolean _tmp4_ = FALSE;
#line 149 "../lib/DateTime.vala"
		if (with_weekday == FALSE) {
#line 149 "../lib/DateTime.vala"
			_tmp4_ = with_day == TRUE;
#line 548 "DateTime.c"
		} else {
#line 149 "../lib/DateTime.vala"
			_tmp4_ = FALSE;
#line 552 "DateTime.c"
		}
#line 149 "../lib/DateTime.vala"
		if (_tmp4_) {
#line 149 "../lib/DateTime.vala"
			_tmp3_ = with_year == TRUE;
#line 558 "DateTime.c"
		} else {
#line 149 "../lib/DateTime.vala"
			_tmp3_ = FALSE;
#line 562 "DateTime.c"
		}
#line 149 "../lib/DateTime.vala"
		if (_tmp3_) {
#line 566 "DateTime.c"
			gchar* _tmp5_;
#line 151 "../lib/DateTime.vala"
			_tmp5_ = g_strdup (_ ("%b %e %Y"));
#line 151 "../lib/DateTime.vala"
			result = _tmp5_;
#line 151 "../lib/DateTime.vala"
			return result;
#line 574 "DateTime.c"
		} else {
			gboolean _tmp6_ = FALSE;
			gboolean _tmp7_ = FALSE;
#line 152 "../lib/DateTime.vala"
			if (with_weekday == FALSE) {
#line 152 "../lib/DateTime.vala"
				_tmp7_ = with_day == FALSE;
#line 582 "DateTime.c"
			} else {
#line 152 "../lib/DateTime.vala"
				_tmp7_ = FALSE;
#line 586 "DateTime.c"
			}
#line 152 "../lib/DateTime.vala"
			if (_tmp7_) {
#line 152 "../lib/DateTime.vala"
				_tmp6_ = with_year == TRUE;
#line 592 "DateTime.c"
			} else {
#line 152 "../lib/DateTime.vala"
				_tmp6_ = FALSE;
#line 596 "DateTime.c"
			}
#line 152 "../lib/DateTime.vala"
			if (_tmp6_) {
#line 600 "DateTime.c"
				gchar* _tmp8_;
#line 154 "../lib/DateTime.vala"
				_tmp8_ = g_strdup (_ ("%Y"));
#line 154 "../lib/DateTime.vala"
				result = _tmp8_;
#line 154 "../lib/DateTime.vala"
				return result;
#line 608 "DateTime.c"
			} else {
				gboolean _tmp9_ = FALSE;
				gboolean _tmp10_ = FALSE;
#line 155 "../lib/DateTime.vala"
				if (with_weekday == FALSE) {
#line 155 "../lib/DateTime.vala"
					_tmp10_ = with_day == TRUE;
#line 616 "DateTime.c"
				} else {
#line 155 "../lib/DateTime.vala"
					_tmp10_ = FALSE;
#line 620 "DateTime.c"
				}
#line 155 "../lib/DateTime.vala"
				if (_tmp10_) {
#line 155 "../lib/DateTime.vala"
					_tmp9_ = with_year == FALSE;
#line 626 "DateTime.c"
				} else {
#line 155 "../lib/DateTime.vala"
					_tmp9_ = FALSE;
#line 630 "DateTime.c"
				}
#line 155 "../lib/DateTime.vala"
				if (_tmp9_) {
#line 634 "DateTime.c"
					gchar* _tmp11_;
#line 157 "../lib/DateTime.vala"
					_tmp11_ = g_strdup (_ ("%b %e"));
#line 157 "../lib/DateTime.vala"
					result = _tmp11_;
#line 157 "../lib/DateTime.vala"
					return result;
#line 642 "DateTime.c"
				} else {
					gboolean _tmp12_ = FALSE;
					gboolean _tmp13_ = FALSE;
#line 158 "../lib/DateTime.vala"
					if (with_weekday == TRUE) {
#line 158 "../lib/DateTime.vala"
						_tmp13_ = with_day == FALSE;
#line 650 "DateTime.c"
					} else {
#line 158 "../lib/DateTime.vala"
						_tmp13_ = FALSE;
#line 654 "DateTime.c"
					}
#line 158 "../lib/DateTime.vala"
					if (_tmp13_) {
#line 158 "../lib/DateTime.vala"
						_tmp12_ = with_year == TRUE;
#line 660 "DateTime.c"
					} else {
#line 158 "../lib/DateTime.vala"
						_tmp12_ = FALSE;
#line 664 "DateTime.c"
					}
#line 158 "../lib/DateTime.vala"
					if (_tmp12_) {
#line 668 "DateTime.c"
						gchar* _tmp14_;
#line 160 "../lib/DateTime.vala"
						_tmp14_ = g_strdup (_ ("%a %Y"));
#line 160 "../lib/DateTime.vala"
						result = _tmp14_;
#line 160 "../lib/DateTime.vala"
						return result;
#line 676 "DateTime.c"
					} else {
						gboolean _tmp15_ = FALSE;
						gboolean _tmp16_ = FALSE;
#line 161 "../lib/DateTime.vala"
						if (with_weekday == TRUE) {
#line 161 "../lib/DateTime.vala"
							_tmp16_ = with_day == FALSE;
#line 684 "DateTime.c"
						} else {
#line 161 "../lib/DateTime.vala"
							_tmp16_ = FALSE;
#line 688 "DateTime.c"
						}
#line 161 "../lib/DateTime.vala"
						if (_tmp16_) {
#line 161 "../lib/DateTime.vala"
							_tmp15_ = with_year == FALSE;
#line 694 "DateTime.c"
						} else {
#line 161 "../lib/DateTime.vala"
							_tmp15_ = FALSE;
#line 698 "DateTime.c"
						}
#line 161 "../lib/DateTime.vala"
						if (_tmp15_) {
#line 702 "DateTime.c"
							gchar* _tmp17_;
#line 163 "../lib/DateTime.vala"
							_tmp17_ = g_strdup (_ ("%a"));
#line 163 "../lib/DateTime.vala"
							result = _tmp17_;
#line 163 "../lib/DateTime.vala"
							return result;
#line 710 "DateTime.c"
						} else {
							gboolean _tmp18_ = FALSE;
							gboolean _tmp19_ = FALSE;
#line 164 "../lib/DateTime.vala"
							if (with_weekday == TRUE) {
#line 164 "../lib/DateTime.vala"
								_tmp19_ = with_day == TRUE;
#line 718 "DateTime.c"
							} else {
#line 164 "../lib/DateTime.vala"
								_tmp19_ = FALSE;
#line 722 "DateTime.c"
							}
#line 164 "../lib/DateTime.vala"
							if (_tmp19_) {
#line 164 "../lib/DateTime.vala"
								_tmp18_ = with_year == FALSE;
#line 728 "DateTime.c"
							} else {
#line 164 "../lib/DateTime.vala"
								_tmp18_ = FALSE;
#line 732 "DateTime.c"
							}
#line 164 "../lib/DateTime.vala"
							if (_tmp18_) {
#line 736 "DateTime.c"
								gchar* _tmp20_;
#line 166 "../lib/DateTime.vala"
								_tmp20_ = g_strdup (_ ("%a, %b %e"));
#line 166 "../lib/DateTime.vala"
								result = _tmp20_;
#line 166 "../lib/DateTime.vala"
								return result;
#line 744 "DateTime.c"
							} else {
								gboolean _tmp21_ = FALSE;
								gboolean _tmp22_ = FALSE;
#line 167 "../lib/DateTime.vala"
								if (with_weekday == FALSE) {
#line 167 "../lib/DateTime.vala"
									_tmp22_ = with_day == FALSE;
#line 752 "DateTime.c"
								} else {
#line 167 "../lib/DateTime.vala"
									_tmp22_ = FALSE;
#line 756 "DateTime.c"
								}
#line 167 "../lib/DateTime.vala"
								if (_tmp22_) {
#line 167 "../lib/DateTime.vala"
									_tmp21_ = with_year == FALSE;
#line 762 "DateTime.c"
								} else {
#line 167 "../lib/DateTime.vala"
									_tmp21_ = FALSE;
#line 766 "DateTime.c"
								}
#line 167 "../lib/DateTime.vala"
								if (_tmp21_) {
#line 770 "DateTime.c"
									gchar* _tmp23_;
#line 169 "../lib/DateTime.vala"
									_tmp23_ = g_strdup (_ ("%b"));
#line 169 "../lib/DateTime.vala"
									result = _tmp23_;
#line 169 "../lib/DateTime.vala"
									return result;
#line 778 "DateTime.c"
								}
							}
						}
					}
				}
			}
		}
	}
#line 172 "../lib/DateTime.vala"
	_tmp24_ = g_strdup ("");
#line 172 "../lib/DateTime.vala"
	result = _tmp24_;
#line 172 "../lib/DateTime.vala"
	return result;
#line 793 "DateTime.c"
}

/**
     * Converts seconds into the ISO 8601 standard date format for minutes (e.g. 100s to 01:40).
     * Output of negative seconds is prepended with minus character.
     *
     * @param seconds the number of seconds to convert into ISO 8601
     *
     * @return returns an ISO 8601 formatted string
     */
gchar*
granite_date_time_seconds_to_time (gint seconds)
{
	gint sign = 0;
	gint hours = 0;
	gint min = 0;
	gint sec = 0;
	gchar* result = NULL;
#line 184 "../lib/DateTime.vala"
	sign = 1;
#line 185 "../lib/DateTime.vala"
	if (seconds < 0) {
#line 186 "../lib/DateTime.vala"
		seconds = -seconds;
#line 187 "../lib/DateTime.vala"
		sign = -1;
#line 820 "DateTime.c"
	}
#line 190 "../lib/DateTime.vala"
	hours = seconds / 3600;
#line 191 "../lib/DateTime.vala"
	min = (seconds % 3600) / 60;
#line 192 "../lib/DateTime.vala"
	sec = seconds % 60;
#line 194 "../lib/DateTime.vala"
	if (hours > 0) {
#line 830 "DateTime.c"
		gchar* _tmp0_;
#line 195 "../lib/DateTime.vala"
		_tmp0_ = g_strdup_printf ("%d:%02d:%02d", sign * hours, min, sec);
#line 195 "../lib/DateTime.vala"
		result = _tmp0_;
#line 195 "../lib/DateTime.vala"
		return result;
#line 838 "DateTime.c"
	} else {
		gchar* _tmp1_;
#line 197 "../lib/DateTime.vala"
		_tmp1_ = g_strdup_printf ("%02d:%02d", sign * min, sec);
#line 197 "../lib/DateTime.vala"
		result = _tmp1_;
#line 197 "../lib/DateTime.vala"
		return result;
#line 847 "DateTime.c"
	}
}


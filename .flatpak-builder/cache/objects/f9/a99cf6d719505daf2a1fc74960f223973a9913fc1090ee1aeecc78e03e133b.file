/* CellRendererExpander.c generated by valac 0.48.14, the Vala compiler
 * generated from CellRendererExpander.vala, do not modify */

/*
 *  Copyright (C) 2012â€“2019 elementary, Inc. (https://elementary.io)
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <cairo-gobject.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>

#define GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER (granite_widgets_cell_renderer_expander_get_type ())
#define GRANITE_WIDGETS_CELL_RENDERER_EXPANDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER, GraniteWidgetsCellRendererExpander))
#define GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER, GraniteWidgetsCellRendererExpanderClass))
#define GRANITE_WIDGETS_IS_CELL_RENDERER_EXPANDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER))
#define GRANITE_WIDGETS_IS_CELL_RENDERER_EXPANDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER))
#define GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER, GraniteWidgetsCellRendererExpanderClass))

typedef struct _GraniteWidgetsCellRendererExpander GraniteWidgetsCellRendererExpander;
typedef struct _GraniteWidgetsCellRendererExpanderClass GraniteWidgetsCellRendererExpanderClass;
typedef struct _GraniteWidgetsCellRendererExpanderPrivate GraniteWidgetsCellRendererExpanderPrivate;
enum  {
	GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_0_PROPERTY,
	GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_IS_CATEGORY_EXPANDER_PROPERTY,
	GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_NUM_PROPERTIES
};
static GParamSpec* granite_widgets_cell_renderer_expander_properties[GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_NUM_PROPERTIES];

struct _GraniteWidgetsCellRendererExpander {
	GtkCellRenderer parent_instance;
	GraniteWidgetsCellRendererExpanderPrivate * priv;
};

struct _GraniteWidgetsCellRendererExpanderClass {
	GtkCellRendererClass parent_class;
	gint (*get_arrow_size) (GraniteWidgetsCellRendererExpander* self, GtkWidget* widget);
};

struct _GraniteWidgetsCellRendererExpanderPrivate {
	gboolean _is_category_expander;
};

static gint GraniteWidgetsCellRendererExpander_private_offset;
static gpointer granite_widgets_cell_renderer_expander_parent_class = NULL;

GType granite_widgets_cell_renderer_expander_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsCellRendererExpander, g_object_unref)
gint granite_widgets_cell_renderer_expander_get_arrow_size (GraniteWidgetsCellRendererExpander* self,
                                                            GtkWidget* widget);
gboolean granite_widgets_cell_renderer_expander_get_is_category_expander (GraniteWidgetsCellRendererExpander* self);
void granite_widgets_cell_renderer_expander_set_is_category_expander (GraniteWidgetsCellRendererExpander* self,
                                                                      gboolean value);
GraniteWidgetsCellRendererExpander* granite_widgets_cell_renderer_expander_new (void);
GraniteWidgetsCellRendererExpander* granite_widgets_cell_renderer_expander_construct (GType object_type);
static GtkSizeRequestMode granite_widgets_cell_renderer_expander_real_get_request_mode (GtkCellRenderer* base);
static void granite_widgets_cell_renderer_expander_real_get_preferred_width (GtkCellRenderer* base,
                                                                      GtkWidget* widget,
                                                                      gint* minimum_size,
                                                                      gint* natural_size);
static GtkStyleContext* granite_widgets_cell_renderer_expander_apply_style_changes (GraniteWidgetsCellRendererExpander* self,
                                                                             GtkWidget* widget);
static void granite_widgets_cell_renderer_expander_revert_style_changes (GraniteWidgetsCellRendererExpander* self,
                                                                  GtkWidget* widget);
static void granite_widgets_cell_renderer_expander_real_get_preferred_height_for_width (GtkCellRenderer* base,
                                                                                 GtkWidget* widget,
                                                                                 gint width,
                                                                                 gint* minimum_height,
                                                                                 gint* natural_height);
static gint granite_widgets_cell_renderer_expander_real_get_arrow_size (GraniteWidgetsCellRendererExpander* self,
                                                                 GtkWidget* widget);
static void granite_widgets_cell_renderer_expander_real_render (GtkCellRenderer* base,
                                                         cairo_t* context,
                                                         GtkWidget* widget,
                                                         GdkRectangle* bg_area,
                                                         GdkRectangle* cell_area,
                                                         GtkCellRendererState flags);
#define GRANITE_STYLE_CLASS_CATEGORY_EXPANDER "category-expander"
static void granite_widgets_cell_renderer_expander_finalize (GObject * obj);
static GType granite_widgets_cell_renderer_expander_get_type_once (void);
static void _vala_granite_widgets_cell_renderer_expander_get_property (GObject * object,
                                                                guint property_id,
                                                                GValue * value,
                                                                GParamSpec * pspec);
static void _vala_granite_widgets_cell_renderer_expander_set_property (GObject * object,
                                                                guint property_id,
                                                                const GValue * value,
                                                                GParamSpec * pspec);

static inline gpointer
granite_widgets_cell_renderer_expander_get_instance_private (GraniteWidgetsCellRendererExpander* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteWidgetsCellRendererExpander_private_offset);
}

gboolean
granite_widgets_cell_renderer_expander_get_is_category_expander (GraniteWidgetsCellRendererExpander* self)
{
	gboolean result;
#line 30 "../lib/Widgets/CellRendererExpander.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 30 "../lib/Widgets/CellRendererExpander.vala"
	result = self->priv->_is_category_expander;
#line 30 "../lib/Widgets/CellRendererExpander.vala"
	return result;
#line 127 "CellRendererExpander.c"
}

void
granite_widgets_cell_renderer_expander_set_is_category_expander (GraniteWidgetsCellRendererExpander* self,
                                                                 gboolean value)
{
	gboolean old_value;
#line 30 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (self != NULL);
#line 30 "../lib/Widgets/CellRendererExpander.vala"
	old_value = granite_widgets_cell_renderer_expander_get_is_category_expander (self);
#line 30 "../lib/Widgets/CellRendererExpander.vala"
	if (old_value != value) {
#line 30 "../lib/Widgets/CellRendererExpander.vala"
		self->priv->_is_category_expander = value;
#line 30 "../lib/Widgets/CellRendererExpander.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_widgets_cell_renderer_expander_properties[GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_IS_CATEGORY_EXPANDER_PROPERTY]);
#line 145 "CellRendererExpander.c"
	}
}

GraniteWidgetsCellRendererExpander*
granite_widgets_cell_renderer_expander_construct (GType object_type)
{
	GraniteWidgetsCellRendererExpander * self = NULL;
#line 32 "../lib/Widgets/CellRendererExpander.vala"
	self = (GraniteWidgetsCellRendererExpander*) g_object_new (object_type, NULL);
#line 32 "../lib/Widgets/CellRendererExpander.vala"
	return self;
#line 157 "CellRendererExpander.c"
}

GraniteWidgetsCellRendererExpander*
granite_widgets_cell_renderer_expander_new (void)
{
#line 32 "../lib/Widgets/CellRendererExpander.vala"
	return granite_widgets_cell_renderer_expander_construct (GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER);
#line 165 "CellRendererExpander.c"
}

static GtkSizeRequestMode
granite_widgets_cell_renderer_expander_real_get_request_mode (GtkCellRenderer* base)
{
	GraniteWidgetsCellRendererExpander * self;
	GtkSizeRequestMode result = 0;
#line 35 "../lib/Widgets/CellRendererExpander.vala"
	self = (GraniteWidgetsCellRendererExpander*) base;
#line 36 "../lib/Widgets/CellRendererExpander.vala"
	result = GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH;
#line 36 "../lib/Widgets/CellRendererExpander.vala"
	return result;
#line 179 "CellRendererExpander.c"
}

static void
granite_widgets_cell_renderer_expander_real_get_preferred_width (GtkCellRenderer* base,
                                                                 GtkWidget* widget,
                                                                 gint* minimum_size,
                                                                 gint* natural_size)
{
	GraniteWidgetsCellRendererExpander * self;
	gint _vala_minimum_size = 0;
	gint _vala_natural_size = 0;
	guint _tmp0_;
	guint _tmp1_;
#line 39 "../lib/Widgets/CellRendererExpander.vala"
	self = (GraniteWidgetsCellRendererExpander*) base;
#line 39 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (widget != NULL);
#line 44 "../lib/Widgets/CellRendererExpander.vala"
	granite_widgets_cell_renderer_expander_apply_style_changes (self, widget);
#line 45 "../lib/Widgets/CellRendererExpander.vala"
	g_object_get ((GtkCellRenderer*) self, "xpad", &_tmp0_, NULL);
#line 45 "../lib/Widgets/CellRendererExpander.vala"
	_tmp1_ = _tmp0_;
#line 45 "../lib/Widgets/CellRendererExpander.vala"
	_vala_natural_size = granite_widgets_cell_renderer_expander_get_arrow_size (self, widget) + (2 * ((gint) _tmp1_));
#line 45 "../lib/Widgets/CellRendererExpander.vala"
	_vala_minimum_size = _vala_natural_size;
#line 46 "../lib/Widgets/CellRendererExpander.vala"
	granite_widgets_cell_renderer_expander_revert_style_changes (self, widget);
#line 39 "../lib/Widgets/CellRendererExpander.vala"
	if (minimum_size) {
#line 39 "../lib/Widgets/CellRendererExpander.vala"
		*minimum_size = _vala_minimum_size;
#line 213 "CellRendererExpander.c"
	}
#line 39 "../lib/Widgets/CellRendererExpander.vala"
	if (natural_size) {
#line 39 "../lib/Widgets/CellRendererExpander.vala"
		*natural_size = _vala_natural_size;
#line 219 "CellRendererExpander.c"
	}
}

static void
granite_widgets_cell_renderer_expander_real_get_preferred_height_for_width (GtkCellRenderer* base,
                                                                            GtkWidget* widget,
                                                                            gint width,
                                                                            gint* minimum_height,
                                                                            gint* natural_height)
{
	GraniteWidgetsCellRendererExpander * self;
	gint _vala_minimum_height = 0;
	gint _vala_natural_height = 0;
	guint _tmp0_;
	guint _tmp1_;
#line 49 "../lib/Widgets/CellRendererExpander.vala"
	self = (GraniteWidgetsCellRendererExpander*) base;
#line 49 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (widget != NULL);
#line 54 "../lib/Widgets/CellRendererExpander.vala"
	granite_widgets_cell_renderer_expander_apply_style_changes (self, widget);
#line 55 "../lib/Widgets/CellRendererExpander.vala"
	g_object_get ((GtkCellRenderer*) self, "ypad", &_tmp0_, NULL);
#line 55 "../lib/Widgets/CellRendererExpander.vala"
	_tmp1_ = _tmp0_;
#line 55 "../lib/Widgets/CellRendererExpander.vala"
	_vala_natural_height = granite_widgets_cell_renderer_expander_get_arrow_size (self, widget) + (2 * ((gint) _tmp1_));
#line 55 "../lib/Widgets/CellRendererExpander.vala"
	_vala_minimum_height = _vala_natural_height;
#line 56 "../lib/Widgets/CellRendererExpander.vala"
	granite_widgets_cell_renderer_expander_revert_style_changes (self, widget);
#line 49 "../lib/Widgets/CellRendererExpander.vala"
	if (minimum_height) {
#line 49 "../lib/Widgets/CellRendererExpander.vala"
		*minimum_height = _vala_minimum_height;
#line 255 "CellRendererExpander.c"
	}
#line 49 "../lib/Widgets/CellRendererExpander.vala"
	if (natural_height) {
#line 49 "../lib/Widgets/CellRendererExpander.vala"
		*natural_height = _vala_natural_height;
#line 261 "CellRendererExpander.c"
	}
}

/**
     * Gets the size of the expander arrow.
     *
     * The default implementation tries to retrieve the "expander-size" style property from
     * //widget//, as it is primarily meant to be used along with a {@link Gtk.TreeView}.
     * For those with special needs, it is recommended to override this method.
     *
     * @param widget Widget used to query the "expander-size" style property (should be a Gtk.TreeView.)
     * @return Size of the expander arrow.
     * @since 0.2
     */
static gint
granite_widgets_cell_renderer_expander_real_get_arrow_size (GraniteWidgetsCellRendererExpander* self,
                                                            GtkWidget* widget)
{
	gint arrow_size = 0;
	gint _tmp0_ = 0;
	gint result = 0;
#line 70 "../lib/Widgets/CellRendererExpander.vala"
	g_return_val_if_fail (widget != NULL, 0);
#line 72 "../lib/Widgets/CellRendererExpander.vala"
	gtk_widget_style_get (widget, "expander-size", &_tmp0_, NULL);
#line 72 "../lib/Widgets/CellRendererExpander.vala"
	arrow_size = _tmp0_;
#line 73 "../lib/Widgets/CellRendererExpander.vala"
	result = arrow_size;
#line 73 "../lib/Widgets/CellRendererExpander.vala"
	return result;
#line 293 "CellRendererExpander.c"
}

gint
granite_widgets_cell_renderer_expander_get_arrow_size (GraniteWidgetsCellRendererExpander* self,
                                                       GtkWidget* widget)
{
#line 70 "../lib/Widgets/CellRendererExpander.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 70 "../lib/Widgets/CellRendererExpander.vala"
	return GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_GET_CLASS (self)->get_arrow_size (self, widget);
#line 304 "CellRendererExpander.c"
}

static void
granite_widgets_cell_renderer_expander_real_render (GtkCellRenderer* base,
                                                    cairo_t* context,
                                                    GtkWidget* widget,
                                                    GdkRectangle* bg_area,
                                                    GdkRectangle* cell_area,
                                                    GtkCellRendererState flags)
{
	GraniteWidgetsCellRendererExpander * self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	GtkStyleContext* ctx = NULL;
	GtkStyleContext* _tmp2_;
	GdkRectangle aligned_area = {0};
	GdkRectangle _tmp3_;
	GdkRectangle _tmp4_ = {0};
	gint arrow_size = 0;
	GdkRectangle _tmp5_;
	gint offset = 0;
	gint x = 0;
	GdkRectangle _tmp6_;
	GdkRectangle _tmp7_;
	gint y = 0;
	GdkRectangle _tmp8_;
	GdkRectangle _tmp9_;
	GtkStateFlags state = 0U;
	GtkStyleContext* _tmp10_;
#line 98 "../lib/Widgets/CellRendererExpander.vala"
	static const GtkStateFlags EXPANDED_FLAG = GTK_STATE_FLAG_CHECKED;
#line 336 "CellRendererExpander.c"
	GtkStateFlags _tmp11_ = 0U;
	gboolean _tmp12_;
	gboolean _tmp13_;
	GtkStyleContext* _tmp16_;
	GtkStyleContext* _tmp17_;
#line 76 "../lib/Widgets/CellRendererExpander.vala"
	self = (GraniteWidgetsCellRendererExpander*) base;
#line 76 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (context != NULL);
#line 76 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (widget != NULL);
#line 76 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (bg_area != NULL);
#line 76 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (cell_area != NULL);
#line 83 "../lib/Widgets/CellRendererExpander.vala"
	g_object_get ((GtkCellRenderer*) self, "is-expander", &_tmp0_, NULL);
#line 83 "../lib/Widgets/CellRendererExpander.vala"
	_tmp1_ = _tmp0_;
#line 83 "../lib/Widgets/CellRendererExpander.vala"
	if (!_tmp1_) {
#line 84 "../lib/Widgets/CellRendererExpander.vala"
		return;
#line 360 "CellRendererExpander.c"
	}
#line 87 "../lib/Widgets/CellRendererExpander.vala"
	_tmp2_ = granite_widgets_cell_renderer_expander_apply_style_changes (self, widget);
#line 87 "../lib/Widgets/CellRendererExpander.vala"
	ctx = _tmp2_;
#line 89 "../lib/Widgets/CellRendererExpander.vala"
	_tmp3_ = *cell_area;
#line 89 "../lib/Widgets/CellRendererExpander.vala"
	gtk_cell_renderer_get_aligned_area ((GtkCellRenderer*) self, widget, flags, &_tmp3_, &_tmp4_);
#line 89 "../lib/Widgets/CellRendererExpander.vala"
	aligned_area = _tmp4_;
#line 91 "../lib/Widgets/CellRendererExpander.vala"
	_tmp5_ = aligned_area;
#line 91 "../lib/Widgets/CellRendererExpander.vala"
	arrow_size = MIN (granite_widgets_cell_renderer_expander_get_arrow_size (self, widget), _tmp5_.width);
#line 93 "../lib/Widgets/CellRendererExpander.vala"
	offset = arrow_size / 2;
#line 94 "../lib/Widgets/CellRendererExpander.vala"
	_tmp6_ = aligned_area;
#line 94 "../lib/Widgets/CellRendererExpander.vala"
	_tmp7_ = aligned_area;
#line 94 "../lib/Widgets/CellRendererExpander.vala"
	x = (_tmp6_.x + (_tmp7_.width / 2)) - offset;
#line 95 "../lib/Widgets/CellRendererExpander.vala"
	_tmp8_ = aligned_area;
#line 95 "../lib/Widgets/CellRendererExpander.vala"
	_tmp9_ = aligned_area;
#line 95 "../lib/Widgets/CellRendererExpander.vala"
	y = (_tmp8_.y + (_tmp9_.height / 2)) - offset;
#line 97 "../lib/Widgets/CellRendererExpander.vala"
	_tmp10_ = ctx;
#line 97 "../lib/Widgets/CellRendererExpander.vala"
	state = gtk_style_context_get_state (_tmp10_);
#line 99 "../lib/Widgets/CellRendererExpander.vala"
	g_object_get ((GtkCellRenderer*) self, "is-expanded", &_tmp12_, NULL);
#line 99 "../lib/Widgets/CellRendererExpander.vala"
	_tmp13_ = _tmp12_;
#line 99 "../lib/Widgets/CellRendererExpander.vala"
	if (_tmp13_) {
#line 400 "CellRendererExpander.c"
		GtkStateFlags _tmp14_;
#line 99 "../lib/Widgets/CellRendererExpander.vala"
		_tmp14_ = state;
#line 99 "../lib/Widgets/CellRendererExpander.vala"
		_tmp11_ = _tmp14_ | EXPANDED_FLAG;
#line 406 "CellRendererExpander.c"
	} else {
		GtkStateFlags _tmp15_;
#line 99 "../lib/Widgets/CellRendererExpander.vala"
		_tmp15_ = state;
#line 99 "../lib/Widgets/CellRendererExpander.vala"
		_tmp11_ = _tmp15_ & (~EXPANDED_FLAG);
#line 413 "CellRendererExpander.c"
	}
#line 99 "../lib/Widgets/CellRendererExpander.vala"
	_tmp16_ = ctx;
#line 99 "../lib/Widgets/CellRendererExpander.vala"
	gtk_style_context_set_state (_tmp16_, _tmp11_);
#line 101 "../lib/Widgets/CellRendererExpander.vala"
	_tmp17_ = ctx;
#line 101 "../lib/Widgets/CellRendererExpander.vala"
	gtk_render_expander (_tmp17_, context, (gdouble) x, (gdouble) y, (gdouble) arrow_size, (gdouble) arrow_size);
#line 103 "../lib/Widgets/CellRendererExpander.vala"
	granite_widgets_cell_renderer_expander_revert_style_changes (self, widget);
#line 425 "CellRendererExpander.c"
}

static GtkStyleContext*
granite_widgets_cell_renderer_expander_apply_style_changes (GraniteWidgetsCellRendererExpander* self,
                                                            GtkWidget* widget)
{
	GtkStyleContext* ctx = NULL;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	gboolean _tmp2_;
	GtkStyleContext* _tmp5_;
	GtkStyleContext* result = NULL;
#line 106 "../lib/Widgets/CellRendererExpander.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 106 "../lib/Widgets/CellRendererExpander.vala"
	g_return_val_if_fail (widget != NULL, NULL);
#line 107 "../lib/Widgets/CellRendererExpander.vala"
	_tmp0_ = gtk_widget_get_style_context (widget);
#line 107 "../lib/Widgets/CellRendererExpander.vala"
	ctx = _tmp0_;
#line 108 "../lib/Widgets/CellRendererExpander.vala"
	_tmp1_ = ctx;
#line 108 "../lib/Widgets/CellRendererExpander.vala"
	gtk_style_context_save (_tmp1_);
#line 110 "../lib/Widgets/CellRendererExpander.vala"
	_tmp2_ = self->priv->_is_category_expander;
#line 110 "../lib/Widgets/CellRendererExpander.vala"
	if (_tmp2_) {
#line 454 "CellRendererExpander.c"
		GtkStyleContext* _tmp3_;
#line 111 "../lib/Widgets/CellRendererExpander.vala"
		_tmp3_ = ctx;
#line 111 "../lib/Widgets/CellRendererExpander.vala"
		gtk_style_context_add_class (_tmp3_, GRANITE_STYLE_CLASS_CATEGORY_EXPANDER);
#line 460 "CellRendererExpander.c"
	} else {
		GtkStyleContext* _tmp4_;
#line 113 "../lib/Widgets/CellRendererExpander.vala"
		_tmp4_ = ctx;
#line 113 "../lib/Widgets/CellRendererExpander.vala"
		gtk_style_context_add_class (_tmp4_, GTK_STYLE_CLASS_EXPANDER);
#line 467 "CellRendererExpander.c"
	}
#line 115 "../lib/Widgets/CellRendererExpander.vala"
	_tmp5_ = ctx;
#line 115 "../lib/Widgets/CellRendererExpander.vala"
	result = _tmp5_;
#line 115 "../lib/Widgets/CellRendererExpander.vala"
	return result;
#line 475 "CellRendererExpander.c"
}

static void
granite_widgets_cell_renderer_expander_revert_style_changes (GraniteWidgetsCellRendererExpander* self,
                                                             GtkWidget* widget)
{
	GtkStyleContext* _tmp0_;
#line 118 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (self != NULL);
#line 118 "../lib/Widgets/CellRendererExpander.vala"
	g_return_if_fail (widget != NULL);
#line 119 "../lib/Widgets/CellRendererExpander.vala"
	_tmp0_ = gtk_widget_get_style_context (widget);
#line 119 "../lib/Widgets/CellRendererExpander.vala"
	gtk_style_context_restore (_tmp0_);
#line 491 "CellRendererExpander.c"
}

static void
granite_widgets_cell_renderer_expander_class_init (GraniteWidgetsCellRendererExpanderClass * klass,
                                                   gpointer klass_data)
{
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	granite_widgets_cell_renderer_expander_parent_class = g_type_class_peek_parent (klass);
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	g_type_class_adjust_private_offset (klass, &GraniteWidgetsCellRendererExpander_private_offset);
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	((GtkCellRendererClass *) klass)->get_request_mode = (GtkSizeRequestMode (*) (GtkCellRenderer*)) granite_widgets_cell_renderer_expander_real_get_request_mode;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	((GtkCellRendererClass *) klass)->get_preferred_width = (void (*) (GtkCellRenderer*, GtkWidget*, gint*, gint*)) granite_widgets_cell_renderer_expander_real_get_preferred_width;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	((GtkCellRendererClass *) klass)->get_preferred_height_for_width = (void (*) (GtkCellRenderer*, GtkWidget*, gint, gint*, gint*)) granite_widgets_cell_renderer_expander_real_get_preferred_height_for_width;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	((GraniteWidgetsCellRendererExpanderClass *) klass)->get_arrow_size = (gint (*) (GraniteWidgetsCellRendererExpander*, GtkWidget*)) granite_widgets_cell_renderer_expander_real_get_arrow_size;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	((GtkCellRendererClass *) klass)->render = (void (*) (GtkCellRenderer*, cairo_t*, GtkWidget*, GdkRectangle*, GdkRectangle*, GtkCellRendererState)) granite_widgets_cell_renderer_expander_real_render;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_widgets_cell_renderer_expander_get_property;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_widgets_cell_renderer_expander_set_property;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_widgets_cell_renderer_expander_finalize;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_IS_CATEGORY_EXPANDER_PROPERTY, granite_widgets_cell_renderer_expander_properties[GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_IS_CATEGORY_EXPANDER_PROPERTY] = g_param_spec_boolean ("is-category-expander", "is-category-expander", "is-category-expander", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 520 "CellRendererExpander.c"
}

static void
granite_widgets_cell_renderer_expander_instance_init (GraniteWidgetsCellRendererExpander * self,
                                                      gpointer klass)
{
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	self->priv = granite_widgets_cell_renderer_expander_get_instance_private (self);
#line 30 "../lib/Widgets/CellRendererExpander.vala"
	self->priv->_is_category_expander = FALSE;
#line 531 "CellRendererExpander.c"
}

static void
granite_widgets_cell_renderer_expander_finalize (GObject * obj)
{
	GraniteWidgetsCellRendererExpander * self;
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER, GraniteWidgetsCellRendererExpander);
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	G_OBJECT_CLASS (granite_widgets_cell_renderer_expander_parent_class)->finalize (obj);
#line 542 "CellRendererExpander.c"
}

/**
 * An expander renderer.
 *
 * For it to draw an expander, the the {@link Gtk.CellRenderer.is_expander} property must
 * be set to true; otherwise nothing is drawn. The state of the expander (i.e. expanded or
 * collapsed) is controlled by the {@link Gtk.CellRenderer.is_expanded} property.
 *
 * @since 0.2
 */
static GType
granite_widgets_cell_renderer_expander_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteWidgetsCellRendererExpanderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_widgets_cell_renderer_expander_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteWidgetsCellRendererExpander), 0, (GInstanceInitFunc) granite_widgets_cell_renderer_expander_instance_init, NULL };
	GType granite_widgets_cell_renderer_expander_type_id;
	granite_widgets_cell_renderer_expander_type_id = g_type_register_static (gtk_cell_renderer_get_type (), "GraniteWidgetsCellRendererExpander", &g_define_type_info, 0);
	GraniteWidgetsCellRendererExpander_private_offset = g_type_add_instance_private (granite_widgets_cell_renderer_expander_type_id, sizeof (GraniteWidgetsCellRendererExpanderPrivate));
	return granite_widgets_cell_renderer_expander_type_id;
}

GType
granite_widgets_cell_renderer_expander_get_type (void)
{
	static volatile gsize granite_widgets_cell_renderer_expander_type_id__volatile = 0;
	if (g_once_init_enter (&granite_widgets_cell_renderer_expander_type_id__volatile)) {
		GType granite_widgets_cell_renderer_expander_type_id;
		granite_widgets_cell_renderer_expander_type_id = granite_widgets_cell_renderer_expander_get_type_once ();
		g_once_init_leave (&granite_widgets_cell_renderer_expander_type_id__volatile, granite_widgets_cell_renderer_expander_type_id);
	}
	return granite_widgets_cell_renderer_expander_type_id__volatile;
}

static void
_vala_granite_widgets_cell_renderer_expander_get_property (GObject * object,
                                                           guint property_id,
                                                           GValue * value,
                                                           GParamSpec * pspec)
{
	GraniteWidgetsCellRendererExpander * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER, GraniteWidgetsCellRendererExpander);
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	switch (property_id) {
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		case GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_IS_CATEGORY_EXPANDER_PROPERTY:
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		g_value_set_boolean (value, granite_widgets_cell_renderer_expander_get_is_category_expander (self));
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		break;
#line 592 "CellRendererExpander.c"
		default:
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		break;
#line 598 "CellRendererExpander.c"
	}
}

static void
_vala_granite_widgets_cell_renderer_expander_set_property (GObject * object,
                                                           guint property_id,
                                                           const GValue * value,
                                                           GParamSpec * pspec)
{
	GraniteWidgetsCellRendererExpander * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_CELL_RENDERER_EXPANDER, GraniteWidgetsCellRendererExpander);
#line 29 "../lib/Widgets/CellRendererExpander.vala"
	switch (property_id) {
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		case GRANITE_WIDGETS_CELL_RENDERER_EXPANDER_IS_CATEGORY_EXPANDER_PROPERTY:
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		granite_widgets_cell_renderer_expander_set_is_category_expander (self, g_value_get_boolean (value));
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		break;
#line 618 "CellRendererExpander.c"
		default:
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 29 "../lib/Widgets/CellRendererExpander.vala"
		break;
#line 624 "CellRendererExpander.c"
	}
}


/* DateCalculator.c generated by valac 0.48.14, the Vala compiler
 * generated from DateCalculator.vala, do not modify */

/*
* Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
* Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Saunak Biswas <saunakbis97@gmail.com>
*/

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>
#include <stdlib.h>
#include <string.h>

#define PEBBLES_TYPE_DATE_FORMATTED (pebbles_date_formatted_get_type ())
#define PEBBLES_DATE_FORMATTED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_DATE_FORMATTED, PebblesDateFormatted))
#define PEBBLES_DATE_FORMATTED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_DATE_FORMATTED, PebblesDateFormattedClass))
#define PEBBLES_IS_DATE_FORMATTED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_DATE_FORMATTED))
#define PEBBLES_IS_DATE_FORMATTED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_DATE_FORMATTED))
#define PEBBLES_DATE_FORMATTED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_DATE_FORMATTED, PebblesDateFormattedClass))

typedef struct _PebblesDateFormatted PebblesDateFormatted;
typedef struct _PebblesDateFormattedClass PebblesDateFormattedClass;
typedef struct _PebblesDateFormattedPrivate PebblesDateFormattedPrivate;
typedef struct _PebblesParamSpecDateFormatted PebblesParamSpecDateFormatted;

#define PEBBLES_TYPE_DATE_CALCULATOR (pebbles_date_calculator_get_type ())
#define PEBBLES_DATE_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_DATE_CALCULATOR, PebblesDateCalculator))
#define PEBBLES_DATE_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_DATE_CALCULATOR, PebblesDateCalculatorClass))
#define PEBBLES_IS_DATE_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_DATE_CALCULATOR))
#define PEBBLES_IS_DATE_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_DATE_CALCULATOR))
#define PEBBLES_DATE_CALCULATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_DATE_CALCULATOR, PebblesDateCalculatorClass))

typedef struct _PebblesDateCalculator PebblesDateCalculator;
typedef struct _PebblesDateCalculatorClass PebblesDateCalculatorClass;
typedef struct _PebblesDateCalculatorPrivate PebblesDateCalculatorPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _PebblesParamSpecDateCalculator PebblesParamSpecDateCalculator;

struct _PebblesDateFormatted {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesDateFormattedPrivate * priv;
	gint day;
	gint week;
	gint month;
	gint year;
};

struct _PebblesDateFormattedClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesDateFormatted *self);
};

struct _PebblesParamSpecDateFormatted {
	GParamSpec parent_instance;
};

struct _PebblesDateCalculator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesDateCalculatorPrivate * priv;
};

struct _PebblesDateCalculatorClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesDateCalculator *self);
};

struct _PebblesParamSpecDateCalculator {
	GParamSpec parent_instance;
};

static gpointer pebbles_date_formatted_parent_class = NULL;
static gpointer pebbles_date_calculator_parent_class = NULL;

gpointer pebbles_date_formatted_ref (gpointer instance);
void pebbles_date_formatted_unref (gpointer instance);
GParamSpec* pebbles_param_spec_date_formatted (const gchar* name,
                                               const gchar* nick,
                                               const gchar* blurb,
                                               GType object_type,
                                               GParamFlags flags);
void pebbles_value_set_date_formatted (GValue* value,
                                       gpointer v_object);
void pebbles_value_take_date_formatted (GValue* value,
                                        gpointer v_object);
gpointer pebbles_value_get_date_formatted (const GValue* value);
GType pebbles_date_formatted_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesDateFormatted, pebbles_date_formatted_unref)
PebblesDateFormatted* pebbles_date_formatted_new (void);
PebblesDateFormatted* pebbles_date_formatted_construct (GType object_type);
static void pebbles_date_formatted_finalize (PebblesDateFormatted * obj);
static GType pebbles_date_formatted_get_type_once (void);
gpointer pebbles_date_calculator_ref (gpointer instance);
void pebbles_date_calculator_unref (gpointer instance);
GParamSpec* pebbles_param_spec_date_calculator (const gchar* name,
                                                const gchar* nick,
                                                const gchar* blurb,
                                                GType object_type,
                                                GParamFlags flags);
void pebbles_value_set_date_calculator (GValue* value,
                                        gpointer v_object);
void pebbles_value_take_date_calculator (GValue* value,
                                         gpointer v_object);
gpointer pebbles_value_get_date_calculator (const GValue* value);
GType pebbles_date_calculator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesDateCalculator, pebbles_date_calculator_unref)
gchar* pebbles_date_calculator_date_difference (PebblesDateCalculator* self,
                                                GDateTime* start_date_time,
                                                GDateTime* end_date_time);
PebblesDateFormatted* pebbles_date_calculator_difference_formatter (PebblesDateCalculator* self,
                                                                    GDateTime* start_date_time,
                                                                    GDateTime* end_date_time);
void pebbles_date_calculator_add_to_date (PebblesDateCalculator* self,
                                          GDateTime* start_date_time,
                                          gint days_to_add,
                                          gint months_to_add,
                                          gint years_to_add,
                                          GDate* result);
void pebbles_date_calculator_subtract_from_date (PebblesDateCalculator* self,
                                                 GDateTime* start_date_time,
                                                 gint days_to_subtract,
                                                 gint months_to_subtract,
                                                 gint years_to_subtract,
                                                 GDate* result);
gchar* pebbles_date_calculator_format_month_value (PebblesDateCalculator* self,
                                                   GDate* date);
PebblesDateCalculator* pebbles_date_calculator_new (void);
PebblesDateCalculator* pebbles_date_calculator_construct (GType object_type);
static void pebbles_date_calculator_finalize (PebblesDateCalculator * obj);
static GType pebbles_date_calculator_get_type_once (void);

PebblesDateFormatted*
pebbles_date_formatted_construct (GType object_type)
{
	PebblesDateFormatted* self = NULL;
#line 31 "../src/Core/DateCalculator.vala"
	self = (PebblesDateFormatted*) g_type_create_instance (object_type);
#line 32 "../src/Core/DateCalculator.vala"
	self->day = 0;
#line 33 "../src/Core/DateCalculator.vala"
	self->week = 0;
#line 34 "../src/Core/DateCalculator.vala"
	self->month = 0;
#line 35 "../src/Core/DateCalculator.vala"
	self->year = 0;
#line 31 "../src/Core/DateCalculator.vala"
	return self;
#line 168 "DateCalculator.c"
}

PebblesDateFormatted*
pebbles_date_formatted_new (void)
{
#line 31 "../src/Core/DateCalculator.vala"
	return pebbles_date_formatted_construct (PEBBLES_TYPE_DATE_FORMATTED);
#line 176 "DateCalculator.c"
}

static void
pebbles_value_date_formatted_init (GValue* value)
{
#line 26 "../src/Core/DateCalculator.vala"
	value->data[0].v_pointer = NULL;
#line 184 "DateCalculator.c"
}

static void
pebbles_value_date_formatted_free_value (GValue* value)
{
#line 26 "../src/Core/DateCalculator.vala"
	if (value->data[0].v_pointer) {
#line 26 "../src/Core/DateCalculator.vala"
		pebbles_date_formatted_unref (value->data[0].v_pointer);
#line 194 "DateCalculator.c"
	}
}

static void
pebbles_value_date_formatted_copy_value (const GValue* src_value,
                                         GValue* dest_value)
{
#line 26 "../src/Core/DateCalculator.vala"
	if (src_value->data[0].v_pointer) {
#line 26 "../src/Core/DateCalculator.vala"
		dest_value->data[0].v_pointer = pebbles_date_formatted_ref (src_value->data[0].v_pointer);
#line 206 "DateCalculator.c"
	} else {
#line 26 "../src/Core/DateCalculator.vala"
		dest_value->data[0].v_pointer = NULL;
#line 210 "DateCalculator.c"
	}
}

static gpointer
pebbles_value_date_formatted_peek_pointer (const GValue* value)
{
#line 26 "../src/Core/DateCalculator.vala"
	return value->data[0].v_pointer;
#line 219 "DateCalculator.c"
}

static gchar*
pebbles_value_date_formatted_collect_value (GValue* value,
                                            guint n_collect_values,
                                            GTypeCValue* collect_values,
                                            guint collect_flags)
{
#line 26 "../src/Core/DateCalculator.vala"
	if (collect_values[0].v_pointer) {
#line 230 "DateCalculator.c"
		PebblesDateFormatted * object;
		object = collect_values[0].v_pointer;
#line 26 "../src/Core/DateCalculator.vala"
		if (object->parent_instance.g_class == NULL) {
#line 26 "../src/Core/DateCalculator.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 237 "DateCalculator.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 26 "../src/Core/DateCalculator.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 241 "DateCalculator.c"
		}
#line 26 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = pebbles_date_formatted_ref (object);
#line 245 "DateCalculator.c"
	} else {
#line 26 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 249 "DateCalculator.c"
	}
#line 26 "../src/Core/DateCalculator.vala"
	return NULL;
#line 253 "DateCalculator.c"
}

static gchar*
pebbles_value_date_formatted_lcopy_value (const GValue* value,
                                          guint n_collect_values,
                                          GTypeCValue* collect_values,
                                          guint collect_flags)
{
	PebblesDateFormatted ** object_p;
	object_p = collect_values[0].v_pointer;
#line 26 "../src/Core/DateCalculator.vala"
	if (!object_p) {
#line 26 "../src/Core/DateCalculator.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 268 "DateCalculator.c"
	}
#line 26 "../src/Core/DateCalculator.vala"
	if (!value->data[0].v_pointer) {
#line 26 "../src/Core/DateCalculator.vala"
		*object_p = NULL;
#line 274 "DateCalculator.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 26 "../src/Core/DateCalculator.vala"
		*object_p = value->data[0].v_pointer;
#line 278 "DateCalculator.c"
	} else {
#line 26 "../src/Core/DateCalculator.vala"
		*object_p = pebbles_date_formatted_ref (value->data[0].v_pointer);
#line 282 "DateCalculator.c"
	}
#line 26 "../src/Core/DateCalculator.vala"
	return NULL;
#line 286 "DateCalculator.c"
}

GParamSpec*
pebbles_param_spec_date_formatted (const gchar* name,
                                   const gchar* nick,
                                   const gchar* blurb,
                                   GType object_type,
                                   GParamFlags flags)
{
	PebblesParamSpecDateFormatted* spec;
#line 26 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_DATE_FORMATTED), NULL);
#line 26 "../src/Core/DateCalculator.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 26 "../src/Core/DateCalculator.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 26 "../src/Core/DateCalculator.vala"
	return G_PARAM_SPEC (spec);
#line 305 "DateCalculator.c"
}

gpointer
pebbles_value_get_date_formatted (const GValue* value)
{
#line 26 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DATE_FORMATTED), NULL);
#line 26 "../src/Core/DateCalculator.vala"
	return value->data[0].v_pointer;
#line 315 "DateCalculator.c"
}

void
pebbles_value_set_date_formatted (GValue* value,
                                  gpointer v_object)
{
	PebblesDateFormatted * old;
#line 26 "../src/Core/DateCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DATE_FORMATTED));
#line 26 "../src/Core/DateCalculator.vala"
	old = value->data[0].v_pointer;
#line 26 "../src/Core/DateCalculator.vala"
	if (v_object) {
#line 26 "../src/Core/DateCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_DATE_FORMATTED));
#line 26 "../src/Core/DateCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 26 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 26 "../src/Core/DateCalculator.vala"
		pebbles_date_formatted_ref (value->data[0].v_pointer);
#line 337 "DateCalculator.c"
	} else {
#line 26 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 341 "DateCalculator.c"
	}
#line 26 "../src/Core/DateCalculator.vala"
	if (old) {
#line 26 "../src/Core/DateCalculator.vala"
		pebbles_date_formatted_unref (old);
#line 347 "DateCalculator.c"
	}
}

void
pebbles_value_take_date_formatted (GValue* value,
                                   gpointer v_object)
{
	PebblesDateFormatted * old;
#line 26 "../src/Core/DateCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DATE_FORMATTED));
#line 26 "../src/Core/DateCalculator.vala"
	old = value->data[0].v_pointer;
#line 26 "../src/Core/DateCalculator.vala"
	if (v_object) {
#line 26 "../src/Core/DateCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_DATE_FORMATTED));
#line 26 "../src/Core/DateCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 26 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 368 "DateCalculator.c"
	} else {
#line 26 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 372 "DateCalculator.c"
	}
#line 26 "../src/Core/DateCalculator.vala"
	if (old) {
#line 26 "../src/Core/DateCalculator.vala"
		pebbles_date_formatted_unref (old);
#line 378 "DateCalculator.c"
	}
}

static void
pebbles_date_formatted_class_init (PebblesDateFormattedClass * klass,
                                   gpointer klass_data)
{
#line 26 "../src/Core/DateCalculator.vala"
	pebbles_date_formatted_parent_class = g_type_class_peek_parent (klass);
#line 26 "../src/Core/DateCalculator.vala"
	((PebblesDateFormattedClass *) klass)->finalize = pebbles_date_formatted_finalize;
#line 390 "DateCalculator.c"
}

static void
pebbles_date_formatted_instance_init (PebblesDateFormatted * self,
                                      gpointer klass)
{
#line 26 "../src/Core/DateCalculator.vala"
	self->ref_count = 1;
#line 399 "DateCalculator.c"
}

static void
pebbles_date_formatted_finalize (PebblesDateFormatted * obj)
{
	PebblesDateFormatted * self;
#line 26 "../src/Core/DateCalculator.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_DATE_FORMATTED, PebblesDateFormatted);
#line 26 "../src/Core/DateCalculator.vala"
	g_signal_handlers_destroy (self);
#line 410 "DateCalculator.c"
}

static GType
pebbles_date_formatted_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_date_formatted_init, pebbles_value_date_formatted_free_value, pebbles_value_date_formatted_copy_value, pebbles_value_date_formatted_peek_pointer, "p", pebbles_value_date_formatted_collect_value, "p", pebbles_value_date_formatted_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesDateFormattedClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_date_formatted_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesDateFormatted), 0, (GInstanceInitFunc) pebbles_date_formatted_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_date_formatted_type_id;
	pebbles_date_formatted_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesDateFormatted", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_date_formatted_type_id;
}

GType
pebbles_date_formatted_get_type (void)
{
	static volatile gsize pebbles_date_formatted_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_date_formatted_type_id__volatile)) {
		GType pebbles_date_formatted_type_id;
		pebbles_date_formatted_type_id = pebbles_date_formatted_get_type_once ();
		g_once_init_leave (&pebbles_date_formatted_type_id__volatile, pebbles_date_formatted_type_id);
	}
	return pebbles_date_formatted_type_id__volatile;
}

gpointer
pebbles_date_formatted_ref (gpointer instance)
{
	PebblesDateFormatted * self;
	self = instance;
#line 26 "../src/Core/DateCalculator.vala"
	g_atomic_int_inc (&self->ref_count);
#line 26 "../src/Core/DateCalculator.vala"
	return instance;
#line 445 "DateCalculator.c"
}

void
pebbles_date_formatted_unref (gpointer instance)
{
	PebblesDateFormatted * self;
	self = instance;
#line 26 "../src/Core/DateCalculator.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 26 "../src/Core/DateCalculator.vala"
		PEBBLES_DATE_FORMATTED_GET_CLASS (self)->finalize (self);
#line 26 "../src/Core/DateCalculator.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 459 "DateCalculator.c"
	}
}

gchar*
pebbles_date_calculator_date_difference (PebblesDateCalculator* self,
                                         GDateTime* start_date_time,
                                         GDateTime* end_date_time)
{
	GDate start_date = {0};
	GDate end_date = {0};
	GDate _tmp0_;
	gchar* _tmp1_;
	gchar* result = NULL;
#line 39 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 39 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (start_date_time != NULL, NULL);
#line 39 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (end_date_time != NULL, NULL);
#line 40 "../src/Core/DateCalculator.vala"
	memset (&start_date, 0, sizeof (GDate));
#line 41 "../src/Core/DateCalculator.vala"
	g_date_set_dmy (&start_date, (GDateDay) g_date_time_get_day_of_month (start_date_time), g_date_time_get_month (start_date_time), (GDateYear) g_date_time_get_year (start_date_time));
#line 42 "../src/Core/DateCalculator.vala"
	memset (&end_date, 0, sizeof (GDate));
#line 43 "../src/Core/DateCalculator.vala"
	g_date_set_dmy (&end_date, (GDateDay) g_date_time_get_day_of_month (end_date_time), g_date_time_get_month (end_date_time), (GDateYear) g_date_time_get_year (end_date_time));
#line 44 "../src/Core/DateCalculator.vala"
	_tmp0_ = end_date;
#line 44 "../src/Core/DateCalculator.vala"
	_tmp1_ = g_strdup_printf ("%i", g_date_days_between (&start_date, &_tmp0_));
#line 44 "../src/Core/DateCalculator.vala"
	result = _tmp1_;
#line 44 "../src/Core/DateCalculator.vala"
	return result;
#line 495 "DateCalculator.c"
}

PebblesDateFormatted*
pebbles_date_calculator_difference_formatter (PebblesDateCalculator* self,
                                              GDateTime* start_date_time,
                                              GDateTime* end_date_time)
{
	PebblesDateFormatted* date_formatted = NULL;
	PebblesDateFormatted* _tmp0_;
	GDate start_date = {0};
	GDate end_date = {0};
	PebblesDateFormatted* _tmp4_;
	PebblesDateFormatted* _tmp5_;
	PebblesDateFormatted* _tmp9_;
	PebblesDateFormatted* _tmp10_;
	PebblesDateFormatted* _tmp11_;
	GDate _tmp12_;
	PebblesDateFormatted* _tmp13_;
	GDate _tmp14_;
	PebblesDateFormatted* result = NULL;
#line 46 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 46 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (start_date_time != NULL, NULL);
#line 46 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (end_date_time != NULL, NULL);
#line 47 "../src/Core/DateCalculator.vala"
	_tmp0_ = pebbles_date_formatted_new ();
#line 47 "../src/Core/DateCalculator.vala"
	date_formatted = _tmp0_;
#line 48 "../src/Core/DateCalculator.vala"
	memset (&start_date, 0, sizeof (GDate));
#line 49 "../src/Core/DateCalculator.vala"
	memset (&end_date, 0, sizeof (GDate));
#line 50 "../src/Core/DateCalculator.vala"
	g_date_set_dmy (&start_date, (GDateDay) g_date_time_get_day_of_month (start_date_time), g_date_time_get_month (start_date_time), (GDateYear) g_date_time_get_year (start_date_time));
#line 51 "../src/Core/DateCalculator.vala"
	g_date_set_dmy (&end_date, (GDateDay) g_date_time_get_day_of_month (end_date_time), g_date_time_get_month (end_date_time), (GDateYear) g_date_time_get_year (end_date_time));
#line 53 "../src/Core/DateCalculator.vala"
	while (TRUE) {
#line 536 "DateCalculator.c"
		GDate _tmp1_;
		PebblesDateFormatted* _tmp2_;
		PebblesDateFormatted* _tmp3_;
#line 53 "../src/Core/DateCalculator.vala"
		_tmp1_ = end_date;
#line 53 "../src/Core/DateCalculator.vala"
		if (!(g_date_compare (&start_date, &_tmp1_) <= 0)) {
#line 53 "../src/Core/DateCalculator.vala"
			break;
#line 546 "DateCalculator.c"
		}
#line 54 "../src/Core/DateCalculator.vala"
		g_date_add_years (&start_date, (guint) 1);
#line 55 "../src/Core/DateCalculator.vala"
		_tmp2_ = date_formatted;
#line 55 "../src/Core/DateCalculator.vala"
		_tmp3_ = date_formatted;
#line 55 "../src/Core/DateCalculator.vala"
		_tmp2_->year = _tmp3_->year + 1;
#line 556 "DateCalculator.c"
	}
#line 57 "../src/Core/DateCalculator.vala"
	g_date_subtract_years (&start_date, (guint) 1);
#line 58 "../src/Core/DateCalculator.vala"
	_tmp4_ = date_formatted;
#line 58 "../src/Core/DateCalculator.vala"
	_tmp5_ = date_formatted;
#line 58 "../src/Core/DateCalculator.vala"
	_tmp4_->year = _tmp5_->year - 1;
#line 59 "../src/Core/DateCalculator.vala"
	while (TRUE) {
#line 568 "DateCalculator.c"
		GDate _tmp6_;
		PebblesDateFormatted* _tmp7_;
		PebblesDateFormatted* _tmp8_;
#line 59 "../src/Core/DateCalculator.vala"
		_tmp6_ = end_date;
#line 59 "../src/Core/DateCalculator.vala"
		if (!(g_date_compare (&start_date, &_tmp6_) <= 0)) {
#line 59 "../src/Core/DateCalculator.vala"
			break;
#line 578 "DateCalculator.c"
		}
#line 60 "../src/Core/DateCalculator.vala"
		g_date_add_months (&start_date, (guint) 1);
#line 61 "../src/Core/DateCalculator.vala"
		_tmp7_ = date_formatted;
#line 61 "../src/Core/DateCalculator.vala"
		_tmp8_ = date_formatted;
#line 61 "../src/Core/DateCalculator.vala"
		_tmp7_->month = _tmp8_->month + 1;
#line 588 "DateCalculator.c"
	}
#line 63 "../src/Core/DateCalculator.vala"
	g_date_subtract_months (&start_date, (guint) 1);
#line 64 "../src/Core/DateCalculator.vala"
	_tmp9_ = date_formatted;
#line 64 "../src/Core/DateCalculator.vala"
	_tmp10_ = date_formatted;
#line 64 "../src/Core/DateCalculator.vala"
	_tmp9_->month = _tmp10_->month - 1;
#line 65 "../src/Core/DateCalculator.vala"
	_tmp11_ = date_formatted;
#line 65 "../src/Core/DateCalculator.vala"
	_tmp12_ = end_date;
#line 65 "../src/Core/DateCalculator.vala"
	_tmp11_->week = (gint) (g_date_days_between (&start_date, &_tmp12_) / 7);
#line 66 "../src/Core/DateCalculator.vala"
	_tmp13_ = date_formatted;
#line 66 "../src/Core/DateCalculator.vala"
	_tmp14_ = end_date;
#line 66 "../src/Core/DateCalculator.vala"
	_tmp13_->day = g_date_days_between (&start_date, &_tmp14_) % 7;
#line 67 "../src/Core/DateCalculator.vala"
	result = date_formatted;
#line 67 "../src/Core/DateCalculator.vala"
	return result;
#line 614 "DateCalculator.c"
}

void
pebbles_date_calculator_add_to_date (PebblesDateCalculator* self,
                                     GDateTime* start_date_time,
                                     gint days_to_add,
                                     gint months_to_add,
                                     gint years_to_add,
                                     GDate* result)
{
	GDate added_date = {0};
#line 69 "../src/Core/DateCalculator.vala"
	g_return_if_fail (self != NULL);
#line 69 "../src/Core/DateCalculator.vala"
	g_return_if_fail (start_date_time != NULL);
#line 70 "../src/Core/DateCalculator.vala"
	memset (&added_date, 0, sizeof (GDate));
#line 71 "../src/Core/DateCalculator.vala"
	g_date_set_dmy (&added_date, (GDateDay) g_date_time_get_day_of_month (start_date_time), g_date_time_get_month (start_date_time), (GDateYear) g_date_time_get_year (start_date_time));
#line 72 "../src/Core/DateCalculator.vala"
	g_date_add_days (&added_date, (guint) days_to_add);
#line 73 "../src/Core/DateCalculator.vala"
	g_date_add_months (&added_date, (guint) months_to_add);
#line 74 "../src/Core/DateCalculator.vala"
	g_date_add_years (&added_date, (guint) years_to_add);
#line 75 "../src/Core/DateCalculator.vala"
	*result = added_date;
#line 75 "../src/Core/DateCalculator.vala"
	return;
#line 644 "DateCalculator.c"
}

void
pebbles_date_calculator_subtract_from_date (PebblesDateCalculator* self,
                                            GDateTime* start_date_time,
                                            gint days_to_subtract,
                                            gint months_to_subtract,
                                            gint years_to_subtract,
                                            GDate* result)
{
	GDate subtracted_date = {0};
#line 77 "../src/Core/DateCalculator.vala"
	g_return_if_fail (self != NULL);
#line 77 "../src/Core/DateCalculator.vala"
	g_return_if_fail (start_date_time != NULL);
#line 78 "../src/Core/DateCalculator.vala"
	memset (&subtracted_date, 0, sizeof (GDate));
#line 79 "../src/Core/DateCalculator.vala"
	g_date_set_dmy (&subtracted_date, (GDateDay) g_date_time_get_day_of_month (start_date_time), g_date_time_get_month (start_date_time), (GDateYear) g_date_time_get_year (start_date_time));
#line 80 "../src/Core/DateCalculator.vala"
	g_date_subtract_days (&subtracted_date, (guint) days_to_subtract);
#line 81 "../src/Core/DateCalculator.vala"
	g_date_subtract_months (&subtracted_date, (guint) months_to_subtract);
#line 82 "../src/Core/DateCalculator.vala"
	g_date_subtract_years (&subtracted_date, (guint) years_to_subtract);
#line 83 "../src/Core/DateCalculator.vala"
	*result = subtracted_date;
#line 83 "../src/Core/DateCalculator.vala"
	return;
#line 674 "DateCalculator.c"
}

gchar*
pebbles_date_calculator_format_month_value (PebblesDateCalculator* self,
                                            GDate* date)
{
	gchar* month = NULL;
	gchar* _tmp0_;
	gchar* result = NULL;
#line 85 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 85 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 86 "../src/Core/DateCalculator.vala"
	_tmp0_ = g_strdup ("");
#line 86 "../src/Core/DateCalculator.vala"
	month = _tmp0_;
#line 87 "../src/Core/DateCalculator.vala"
	if (g_date_get_month (date) == 1) {
#line 694 "DateCalculator.c"
		gchar* _tmp1_;
#line 88 "../src/Core/DateCalculator.vala"
		_tmp1_ = g_strdup ("JANUARY");
#line 88 "../src/Core/DateCalculator.vala"
		_g_free0 (month);
#line 88 "../src/Core/DateCalculator.vala"
		month = _tmp1_;
#line 702 "DateCalculator.c"
	} else {
#line 90 "../src/Core/DateCalculator.vala"
		if (g_date_get_month (date) == 2) {
#line 706 "DateCalculator.c"
			gchar* _tmp2_;
#line 91 "../src/Core/DateCalculator.vala"
			_tmp2_ = g_strdup ("FEBRUARY");
#line 91 "../src/Core/DateCalculator.vala"
			_g_free0 (month);
#line 91 "../src/Core/DateCalculator.vala"
			month = _tmp2_;
#line 714 "DateCalculator.c"
		} else {
#line 93 "../src/Core/DateCalculator.vala"
			if (g_date_get_month (date) == 3) {
#line 718 "DateCalculator.c"
				gchar* _tmp3_;
#line 94 "../src/Core/DateCalculator.vala"
				_tmp3_ = g_strdup ("MARCH");
#line 94 "../src/Core/DateCalculator.vala"
				_g_free0 (month);
#line 94 "../src/Core/DateCalculator.vala"
				month = _tmp3_;
#line 726 "DateCalculator.c"
			} else {
#line 96 "../src/Core/DateCalculator.vala"
				if (g_date_get_month (date) == 4) {
#line 730 "DateCalculator.c"
					gchar* _tmp4_;
#line 97 "../src/Core/DateCalculator.vala"
					_tmp4_ = g_strdup ("APRIL");
#line 97 "../src/Core/DateCalculator.vala"
					_g_free0 (month);
#line 97 "../src/Core/DateCalculator.vala"
					month = _tmp4_;
#line 738 "DateCalculator.c"
				} else {
#line 99 "../src/Core/DateCalculator.vala"
					if (g_date_get_month (date) == 5) {
#line 742 "DateCalculator.c"
						gchar* _tmp5_;
#line 100 "../src/Core/DateCalculator.vala"
						_tmp5_ = g_strdup ("MAY");
#line 100 "../src/Core/DateCalculator.vala"
						_g_free0 (month);
#line 100 "../src/Core/DateCalculator.vala"
						month = _tmp5_;
#line 750 "DateCalculator.c"
					} else {
#line 102 "../src/Core/DateCalculator.vala"
						if (g_date_get_month (date) == 6) {
#line 754 "DateCalculator.c"
							gchar* _tmp6_;
#line 103 "../src/Core/DateCalculator.vala"
							_tmp6_ = g_strdup ("JUNE");
#line 103 "../src/Core/DateCalculator.vala"
							_g_free0 (month);
#line 103 "../src/Core/DateCalculator.vala"
							month = _tmp6_;
#line 762 "DateCalculator.c"
						} else {
#line 105 "../src/Core/DateCalculator.vala"
							if (g_date_get_month (date) == 7) {
#line 766 "DateCalculator.c"
								gchar* _tmp7_;
#line 106 "../src/Core/DateCalculator.vala"
								_tmp7_ = g_strdup ("JULY");
#line 106 "../src/Core/DateCalculator.vala"
								_g_free0 (month);
#line 106 "../src/Core/DateCalculator.vala"
								month = _tmp7_;
#line 774 "DateCalculator.c"
							} else {
#line 108 "../src/Core/DateCalculator.vala"
								if (g_date_get_month (date) == 8) {
#line 778 "DateCalculator.c"
									gchar* _tmp8_;
#line 109 "../src/Core/DateCalculator.vala"
									_tmp8_ = g_strdup ("AUGUST");
#line 109 "../src/Core/DateCalculator.vala"
									_g_free0 (month);
#line 109 "../src/Core/DateCalculator.vala"
									month = _tmp8_;
#line 786 "DateCalculator.c"
								} else {
#line 111 "../src/Core/DateCalculator.vala"
									if (g_date_get_month (date) == 9) {
#line 790 "DateCalculator.c"
										gchar* _tmp9_;
#line 112 "../src/Core/DateCalculator.vala"
										_tmp9_ = g_strdup ("SEPTEMBER");
#line 112 "../src/Core/DateCalculator.vala"
										_g_free0 (month);
#line 112 "../src/Core/DateCalculator.vala"
										month = _tmp9_;
#line 798 "DateCalculator.c"
									} else {
#line 114 "../src/Core/DateCalculator.vala"
										if (g_date_get_month (date) == 10) {
#line 802 "DateCalculator.c"
											gchar* _tmp10_;
#line 115 "../src/Core/DateCalculator.vala"
											_tmp10_ = g_strdup ("OCTOBER");
#line 115 "../src/Core/DateCalculator.vala"
											_g_free0 (month);
#line 115 "../src/Core/DateCalculator.vala"
											month = _tmp10_;
#line 810 "DateCalculator.c"
										} else {
#line 117 "../src/Core/DateCalculator.vala"
											if (g_date_get_month (date) == 11) {
#line 814 "DateCalculator.c"
												gchar* _tmp11_;
#line 118 "../src/Core/DateCalculator.vala"
												_tmp11_ = g_strdup ("NOVEMBER");
#line 118 "../src/Core/DateCalculator.vala"
												_g_free0 (month);
#line 118 "../src/Core/DateCalculator.vala"
												month = _tmp11_;
#line 822 "DateCalculator.c"
											} else {
#line 120 "../src/Core/DateCalculator.vala"
												if (g_date_get_month (date) == 12) {
#line 826 "DateCalculator.c"
													gchar* _tmp12_;
#line 121 "../src/Core/DateCalculator.vala"
													_tmp12_ = g_strdup ("DECEMBER");
#line 121 "../src/Core/DateCalculator.vala"
													_g_free0 (month);
#line 121 "../src/Core/DateCalculator.vala"
													month = _tmp12_;
#line 834 "DateCalculator.c"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
#line 123 "../src/Core/DateCalculator.vala"
	result = month;
#line 123 "../src/Core/DateCalculator.vala"
	return result;
#line 851 "DateCalculator.c"
}

PebblesDateCalculator*
pebbles_date_calculator_construct (GType object_type)
{
	PebblesDateCalculator* self = NULL;
#line 38 "../src/Core/DateCalculator.vala"
	self = (PebblesDateCalculator*) g_type_create_instance (object_type);
#line 38 "../src/Core/DateCalculator.vala"
	return self;
#line 862 "DateCalculator.c"
}

PebblesDateCalculator*
pebbles_date_calculator_new (void)
{
#line 38 "../src/Core/DateCalculator.vala"
	return pebbles_date_calculator_construct (PEBBLES_TYPE_DATE_CALCULATOR);
#line 870 "DateCalculator.c"
}

static void
pebbles_value_date_calculator_init (GValue* value)
{
#line 38 "../src/Core/DateCalculator.vala"
	value->data[0].v_pointer = NULL;
#line 878 "DateCalculator.c"
}

static void
pebbles_value_date_calculator_free_value (GValue* value)
{
#line 38 "../src/Core/DateCalculator.vala"
	if (value->data[0].v_pointer) {
#line 38 "../src/Core/DateCalculator.vala"
		pebbles_date_calculator_unref (value->data[0].v_pointer);
#line 888 "DateCalculator.c"
	}
}

static void
pebbles_value_date_calculator_copy_value (const GValue* src_value,
                                          GValue* dest_value)
{
#line 38 "../src/Core/DateCalculator.vala"
	if (src_value->data[0].v_pointer) {
#line 38 "../src/Core/DateCalculator.vala"
		dest_value->data[0].v_pointer = pebbles_date_calculator_ref (src_value->data[0].v_pointer);
#line 900 "DateCalculator.c"
	} else {
#line 38 "../src/Core/DateCalculator.vala"
		dest_value->data[0].v_pointer = NULL;
#line 904 "DateCalculator.c"
	}
}

static gpointer
pebbles_value_date_calculator_peek_pointer (const GValue* value)
{
#line 38 "../src/Core/DateCalculator.vala"
	return value->data[0].v_pointer;
#line 913 "DateCalculator.c"
}

static gchar*
pebbles_value_date_calculator_collect_value (GValue* value,
                                             guint n_collect_values,
                                             GTypeCValue* collect_values,
                                             guint collect_flags)
{
#line 38 "../src/Core/DateCalculator.vala"
	if (collect_values[0].v_pointer) {
#line 924 "DateCalculator.c"
		PebblesDateCalculator * object;
		object = collect_values[0].v_pointer;
#line 38 "../src/Core/DateCalculator.vala"
		if (object->parent_instance.g_class == NULL) {
#line 38 "../src/Core/DateCalculator.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 931 "DateCalculator.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 38 "../src/Core/DateCalculator.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 935 "DateCalculator.c"
		}
#line 38 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = pebbles_date_calculator_ref (object);
#line 939 "DateCalculator.c"
	} else {
#line 38 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 943 "DateCalculator.c"
	}
#line 38 "../src/Core/DateCalculator.vala"
	return NULL;
#line 947 "DateCalculator.c"
}

static gchar*
pebbles_value_date_calculator_lcopy_value (const GValue* value,
                                           guint n_collect_values,
                                           GTypeCValue* collect_values,
                                           guint collect_flags)
{
	PebblesDateCalculator ** object_p;
	object_p = collect_values[0].v_pointer;
#line 38 "../src/Core/DateCalculator.vala"
	if (!object_p) {
#line 38 "../src/Core/DateCalculator.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 962 "DateCalculator.c"
	}
#line 38 "../src/Core/DateCalculator.vala"
	if (!value->data[0].v_pointer) {
#line 38 "../src/Core/DateCalculator.vala"
		*object_p = NULL;
#line 968 "DateCalculator.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 38 "../src/Core/DateCalculator.vala"
		*object_p = value->data[0].v_pointer;
#line 972 "DateCalculator.c"
	} else {
#line 38 "../src/Core/DateCalculator.vala"
		*object_p = pebbles_date_calculator_ref (value->data[0].v_pointer);
#line 976 "DateCalculator.c"
	}
#line 38 "../src/Core/DateCalculator.vala"
	return NULL;
#line 980 "DateCalculator.c"
}

GParamSpec*
pebbles_param_spec_date_calculator (const gchar* name,
                                    const gchar* nick,
                                    const gchar* blurb,
                                    GType object_type,
                                    GParamFlags flags)
{
	PebblesParamSpecDateCalculator* spec;
#line 38 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_DATE_CALCULATOR), NULL);
#line 38 "../src/Core/DateCalculator.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 38 "../src/Core/DateCalculator.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 38 "../src/Core/DateCalculator.vala"
	return G_PARAM_SPEC (spec);
#line 999 "DateCalculator.c"
}

gpointer
pebbles_value_get_date_calculator (const GValue* value)
{
#line 38 "../src/Core/DateCalculator.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DATE_CALCULATOR), NULL);
#line 38 "../src/Core/DateCalculator.vala"
	return value->data[0].v_pointer;
#line 1009 "DateCalculator.c"
}

void
pebbles_value_set_date_calculator (GValue* value,
                                   gpointer v_object)
{
	PebblesDateCalculator * old;
#line 38 "../src/Core/DateCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DATE_CALCULATOR));
#line 38 "../src/Core/DateCalculator.vala"
	old = value->data[0].v_pointer;
#line 38 "../src/Core/DateCalculator.vala"
	if (v_object) {
#line 38 "../src/Core/DateCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_DATE_CALCULATOR));
#line 38 "../src/Core/DateCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 38 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 38 "../src/Core/DateCalculator.vala"
		pebbles_date_calculator_ref (value->data[0].v_pointer);
#line 1031 "DateCalculator.c"
	} else {
#line 38 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 1035 "DateCalculator.c"
	}
#line 38 "../src/Core/DateCalculator.vala"
	if (old) {
#line 38 "../src/Core/DateCalculator.vala"
		pebbles_date_calculator_unref (old);
#line 1041 "DateCalculator.c"
	}
}

void
pebbles_value_take_date_calculator (GValue* value,
                                    gpointer v_object)
{
	PebblesDateCalculator * old;
#line 38 "../src/Core/DateCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DATE_CALCULATOR));
#line 38 "../src/Core/DateCalculator.vala"
	old = value->data[0].v_pointer;
#line 38 "../src/Core/DateCalculator.vala"
	if (v_object) {
#line 38 "../src/Core/DateCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_DATE_CALCULATOR));
#line 38 "../src/Core/DateCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 38 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 1062 "DateCalculator.c"
	} else {
#line 38 "../src/Core/DateCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 1066 "DateCalculator.c"
	}
#line 38 "../src/Core/DateCalculator.vala"
	if (old) {
#line 38 "../src/Core/DateCalculator.vala"
		pebbles_date_calculator_unref (old);
#line 1072 "DateCalculator.c"
	}
}

static void
pebbles_date_calculator_class_init (PebblesDateCalculatorClass * klass,
                                    gpointer klass_data)
{
#line 38 "../src/Core/DateCalculator.vala"
	pebbles_date_calculator_parent_class = g_type_class_peek_parent (klass);
#line 38 "../src/Core/DateCalculator.vala"
	((PebblesDateCalculatorClass *) klass)->finalize = pebbles_date_calculator_finalize;
#line 1084 "DateCalculator.c"
}

static void
pebbles_date_calculator_instance_init (PebblesDateCalculator * self,
                                       gpointer klass)
{
#line 38 "../src/Core/DateCalculator.vala"
	self->ref_count = 1;
#line 1093 "DateCalculator.c"
}

static void
pebbles_date_calculator_finalize (PebblesDateCalculator * obj)
{
	PebblesDateCalculator * self;
#line 38 "../src/Core/DateCalculator.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_DATE_CALCULATOR, PebblesDateCalculator);
#line 38 "../src/Core/DateCalculator.vala"
	g_signal_handlers_destroy (self);
#line 1104 "DateCalculator.c"
}

static GType
pebbles_date_calculator_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_date_calculator_init, pebbles_value_date_calculator_free_value, pebbles_value_date_calculator_copy_value, pebbles_value_date_calculator_peek_pointer, "p", pebbles_value_date_calculator_collect_value, "p", pebbles_value_date_calculator_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesDateCalculatorClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_date_calculator_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesDateCalculator), 0, (GInstanceInitFunc) pebbles_date_calculator_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_date_calculator_type_id;
	pebbles_date_calculator_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesDateCalculator", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_date_calculator_type_id;
}

GType
pebbles_date_calculator_get_type (void)
{
	static volatile gsize pebbles_date_calculator_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_date_calculator_type_id__volatile)) {
		GType pebbles_date_calculator_type_id;
		pebbles_date_calculator_type_id = pebbles_date_calculator_get_type_once ();
		g_once_init_leave (&pebbles_date_calculator_type_id__volatile, pebbles_date_calculator_type_id);
	}
	return pebbles_date_calculator_type_id__volatile;
}

gpointer
pebbles_date_calculator_ref (gpointer instance)
{
	PebblesDateCalculator * self;
	self = instance;
#line 38 "../src/Core/DateCalculator.vala"
	g_atomic_int_inc (&self->ref_count);
#line 38 "../src/Core/DateCalculator.vala"
	return instance;
#line 1139 "DateCalculator.c"
}

void
pebbles_date_calculator_unref (gpointer instance)
{
	PebblesDateCalculator * self;
	self = instance;
#line 38 "../src/Core/DateCalculator.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 38 "../src/Core/DateCalculator.vala"
		PEBBLES_DATE_CALCULATOR_GET_CLASS (self)->finalize (self);
#line 38 "../src/Core/DateCalculator.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1153 "DateCalculator.c"
	}
}


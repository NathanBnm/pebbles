/* Calculus.c generated by valac 0.48.14, the Vala compiler
 * generated from Calculus.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 */

#include <glib-object.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <granite.h>
#include <stdlib.h>
#include <string.h>
#include <gsl/gsl_math.h>

#define PEBBLES_TYPE_CALCULUS (pebbles_calculus_get_type ())
#define PEBBLES_CALCULUS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_CALCULUS, PebblesCalculus))
#define PEBBLES_CALCULUS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_CALCULUS, PebblesCalculusClass))
#define PEBBLES_IS_CALCULUS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_CALCULUS))
#define PEBBLES_IS_CALCULUS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_CALCULUS))
#define PEBBLES_CALCULUS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_CALCULUS, PebblesCalculusClass))

typedef struct _PebblesCalculus PebblesCalculus;
typedef struct _PebblesCalculusClass PebblesCalculusClass;
typedef struct _PebblesCalculusPrivate PebblesCalculusPrivate;
enum  {
	PEBBLES_CALCULUS_0_PROPERTY,
	PEBBLES_CALCULUS_NUM_PROPERTIES
};
static GParamSpec* pebbles_calculus_properties[PEBBLES_CALCULUS_NUM_PROPERTIES];

#define PEBBLES_TYPE_SETTINGS (pebbles_settings_get_type ())
#define PEBBLES_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettings))
#define PEBBLES_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))
#define PEBBLES_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))

typedef struct _PebblesSettings PebblesSettings;
typedef struct _PebblesSettingsClass PebblesSettingsClass;

#define PEBBLES_TYPE_SCIENTIFIC_CALCULATOR (pebbles_scientific_calculator_get_type ())
#define PEBBLES_SCIENTIFIC_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculator))
#define PEBBLES_SCIENTIFIC_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculatorClass))
#define PEBBLES_IS_SCIENTIFIC_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR))
#define PEBBLES_IS_SCIENTIFIC_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR))
#define PEBBLES_SCIENTIFIC_CALCULATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculatorClass))

typedef struct _PebblesScientificCalculator PebblesScientificCalculator;
typedef struct _PebblesScientificCalculatorClass PebblesScientificCalculatorClass;
typedef enum  {
	PEBBLES_GLOBAL_ANGLE_UNIT_DEG = 0,
	PEBBLES_GLOBAL_ANGLE_UNIT_RAD = 1,
	PEBBLES_GLOBAL_ANGLE_UNIT_GRAD = 2
} PebblesGlobalAngleUnit;

#define PEBBLES_TYPE_GLOBAL_ANGLE_UNIT (pebbles_global_angle_unit_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _pebbles_scientific_calculator_unref0(var) ((var == NULL) ? NULL : (var = (pebbles_scientific_calculator_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _PebblesCalculus {
	GObject parent_instance;
	PebblesCalculusPrivate * priv;
};

struct _PebblesCalculusClass {
	GObjectClass parent_class;
};

static gpointer pebbles_calculus_parent_class = NULL;

GType pebbles_calculus_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesCalculus, g_object_unref)
static gdouble pebbles_calculus_derivable_function (gdouble x,
                                             gchar* params);
GType pebbles_settings_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesSettings, g_object_unref)
PebblesSettings* pebbles_settings_get_default (void);
gpointer pebbles_scientific_calculator_ref (gpointer instance);
void pebbles_scientific_calculator_unref (gpointer instance);
GParamSpec* pebbles_param_spec_scientific_calculator (const gchar* name,
                                                      const gchar* nick,
                                                      const gchar* blurb,
                                                      GType object_type,
                                                      GParamFlags flags);
void pebbles_value_set_scientific_calculator (GValue* value,
                                              gpointer v_object);
void pebbles_value_take_scientific_calculator (GValue* value,
                                               gpointer v_object);
gpointer pebbles_value_get_scientific_calculator (const GValue* value);
GType pebbles_scientific_calculator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesScientificCalculator, pebbles_scientific_calculator_unref)
PebblesScientificCalculator* pebbles_scientific_calculator_new (void);
PebblesScientificCalculator* pebbles_scientific_calculator_construct (GType object_type);
GType pebbles_global_angle_unit_get_type (void) G_GNUC_CONST;
gchar* pebbles_scientific_calculator_get_result (PebblesScientificCalculator* self,
                                                 const gchar* exp,
                                                 PebblesGlobalAngleUnit angle_mode_in,
                                                 gint* float_accuracy,
                                                 gboolean* tokenize);
PebblesGlobalAngleUnit pebbles_settings_get_global_angle_unit (PebblesSettings* self);
gchar* pebbles_calculus_get_derivative (const gchar* exp,
                                        PebblesGlobalAngleUnit angle_mode_in,
                                        gdouble val);
gchar* pebbles_utils_st_tokenize (const gchar* input);
gchar* pebbles_utils_algebraic_variable_product_convert (const gchar* exp);
static gdouble _pebbles_calculus_derivable_function_gsl_function (gdouble x,
                                                           void* params);
gchar* pebbles_utils_manage_decimal_places (gdouble _result_,
                                            gint accuracy);
gint pebbles_settings_get_decimal_places (PebblesSettings* self);
gchar* pebbles_calculus_get_definite_integral (const gchar* exp,
                                               PebblesGlobalAngleUnit angle_mode_in,
                                               gdouble lower_limit,
                                               gdouble upper_limit);
PebblesCalculus* pebbles_calculus_new (void);
PebblesCalculus* pebbles_calculus_construct (GType object_type);
static GType pebbles_calculus_get_type_once (void);

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1535 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 159 "Calculus.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 163 "Calculus.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 169 "Calculus.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 173 "Calculus.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp0_) {
#line 177 "Calculus.c"
		gchar* _tmp2_;
#line 1536 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1536 "glib-2.0.vapi"
		result = _tmp2_;
#line 1536 "glib-2.0.vapi"
		return result;
#line 185 "Calculus.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1539 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1539 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1539 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1539 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1539 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1539 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1539 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1539 "glib-2.0.vapi"
			_g_free0 (_tmp7_);
#line 1539 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1539 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 217 "Calculus.c"
				goto __catch0_g_regex_error;
			}
#line 1539 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1539 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1539 "glib-2.0.vapi"
			return NULL;
#line 226 "Calculus.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1540 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1540 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1540 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1540 "glib-2.0.vapi"
			_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 242 "Calculus.c"
				goto __catch0_g_regex_error;
			}
#line 1540 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1540 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1540 "glib-2.0.vapi"
			return NULL;
#line 251 "Calculus.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1540 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1540 "glib-2.0.vapi"
		result = _tmp10_;
#line 1540 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
		return result;
#line 265 "Calculus.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1538 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1542 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 274 "Calculus.c"
	}
	__finally0:
#line 1538 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1538 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1538 "glib-2.0.vapi"
	return NULL;
#line 283 "Calculus.c"
}

static gchar*
double_to_string (gdouble self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gint _tmp1__length1;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* result = NULL;
#line 989 "glib-2.0.vapi"
	_tmp0_ = g_new0 (gchar, G_ASCII_DTOSTR_BUF_SIZE);
#line 989 "glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 989 "glib-2.0.vapi"
	_tmp1__length1 = G_ASCII_DTOSTR_BUF_SIZE;
#line 989 "glib-2.0.vapi"
	_tmp2_ = g_ascii_dtostr (_tmp1_, (gint) G_ASCII_DTOSTR_BUF_SIZE, self);
#line 989 "glib-2.0.vapi"
	_tmp3_ = g_strdup (_tmp2_);
#line 989 "glib-2.0.vapi"
	_tmp4_ = _tmp3_;
#line 989 "glib-2.0.vapi"
	_tmp1_ = (g_free (_tmp1_), NULL);
#line 989 "glib-2.0.vapi"
	result = _tmp4_;
#line 989 "glib-2.0.vapi"
	return result;
#line 314 "Calculus.c"
}

static gdouble
double_parse (const gchar* str)
{
	gdouble result = 0.0;
#line 995 "glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0.0);
#line 996 "glib-2.0.vapi"
	result = g_ascii_strtod (str, NULL);
#line 996 "glib-2.0.vapi"
	return result;
#line 327 "Calculus.c"
}

static gdouble
pebbles_calculus_derivable_function (gdouble x,
                                     gchar* params)
{
	gchar* exp = NULL;
	gchar* _tmp0_;
	PebblesSettings* settings = NULL;
	PebblesSettings* _tmp1_;
	PebblesScientificCalculator* sci_calc = NULL;
	PebblesScientificCalculator* _tmp2_;
	gchar* res = NULL;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	PebblesGlobalAngleUnit _tmp7_;
	PebblesGlobalAngleUnit _tmp8_;
	gint _tmp9_;
	gboolean _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	gdouble result = 0.0;
#line 28 "../src/Core/Calculus.vala"
	_tmp0_ = g_strdup ((const gchar*) params);
#line 28 "../src/Core/Calculus.vala"
	exp = _tmp0_;
#line 29 "../src/Core/Calculus.vala"
	_tmp1_ = pebbles_settings_get_default ();
#line 29 "../src/Core/Calculus.vala"
	settings = _tmp1_;
#line 30 "../src/Core/Calculus.vala"
	_tmp2_ = pebbles_scientific_calculator_new ();
#line 30 "../src/Core/Calculus.vala"
	sci_calc = _tmp2_;
#line 31 "../src/Core/Calculus.vala"
	_tmp3_ = double_to_string (x);
#line 31 "../src/Core/Calculus.vala"
	_tmp4_ = _tmp3_;
#line 31 "../src/Core/Calculus.vala"
	_tmp5_ = string_replace (exp, "x", _tmp4_);
#line 31 "../src/Core/Calculus.vala"
	_tmp6_ = _tmp5_;
#line 31 "../src/Core/Calculus.vala"
	_tmp7_ = pebbles_settings_get_global_angle_unit (settings);
#line 31 "../src/Core/Calculus.vala"
	_tmp8_ = _tmp7_;
#line 31 "../src/Core/Calculus.vala"
	_tmp9_ = -1;
#line 31 "../src/Core/Calculus.vala"
	_tmp10_ = FALSE;
#line 31 "../src/Core/Calculus.vala"
	_tmp11_ = pebbles_scientific_calculator_get_result (sci_calc, _tmp6_, _tmp8_, &_tmp9_, &_tmp10_);
#line 31 "../src/Core/Calculus.vala"
	_tmp12_ = _tmp11_;
#line 31 "../src/Core/Calculus.vala"
	_tmp13_ = string_replace (_tmp12_, ",", "");
#line 31 "../src/Core/Calculus.vala"
	_tmp14_ = _tmp13_;
#line 31 "../src/Core/Calculus.vala"
	_g_free0 (_tmp12_);
#line 31 "../src/Core/Calculus.vala"
	_g_free0 (_tmp6_);
#line 31 "../src/Core/Calculus.vala"
	_g_free0 (_tmp4_);
#line 31 "../src/Core/Calculus.vala"
	res = _tmp14_;
#line 32 "../src/Core/Calculus.vala"
	result = double_parse (res);
#line 32 "../src/Core/Calculus.vala"
	_g_free0 (res);
#line 32 "../src/Core/Calculus.vala"
	_pebbles_scientific_calculator_unref0 (sci_calc);
#line 32 "../src/Core/Calculus.vala"
	_g_object_unref0 (settings);
#line 32 "../src/Core/Calculus.vala"
	_g_free0 (exp);
#line 32 "../src/Core/Calculus.vala"
	return result;
#line 410 "Calculus.c"
}

static gunichar
string_get_char (const gchar* self,
                 glong index)
{
	gunichar result = 0U;
#line 1262 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, 0U);
#line 1263 "glib-2.0.vapi"
	result = g_utf8_get_char (((gchar*) self) + index);
#line 1263 "glib-2.0.vapi"
	return result;
#line 424 "Calculus.c"
}

static gdouble
_pebbles_calculus_derivable_function_gsl_function (gdouble x,
                                                   void* params)
{
	gdouble result;
	result = pebbles_calculus_derivable_function (x, params);
#line 45 "../src/Core/Calculus.vala"
	return result;
#line 435 "Calculus.c"
}

gchar*
pebbles_calculus_get_derivative (const gchar* exp,
                                 PebblesGlobalAngleUnit angle_mode_in,
                                 gdouble val)
{
	gdouble _result_ = 0.0;
	gdouble _error_ = 0.0;
	gchar* revised_exp = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* user_func = NULL;
	const gchar* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	gchar* _tmp6_;
	gsl_function scientific_function = {0};
	gchar* _tmp14_;
	gsl_function _tmp15_ = {0};
	PebblesSettings* accuracy_settings = NULL;
	PebblesSettings* _tmp20_;
	gint _tmp21_;
	gint _tmp22_;
	gchar* _tmp23_;
	gchar* result = NULL;
#line 35 "../src/Core/Calculus.vala"
	g_return_val_if_fail (exp != NULL, NULL);
#line 38 "../src/Core/Calculus.vala"
	_tmp0_ = pebbles_utils_st_tokenize (exp);
#line 38 "../src/Core/Calculus.vala"
	revised_exp = _tmp0_;
#line 39 "../src/Core/Calculus.vala"
	_tmp1_ = revised_exp;
#line 39 "../src/Core/Calculus.vala"
	_tmp2_ = pebbles_utils_algebraic_variable_product_convert (_tmp1_);
#line 39 "../src/Core/Calculus.vala"
	_g_free0 (revised_exp);
#line 39 "../src/Core/Calculus.vala"
	revised_exp = _tmp2_;
#line 40 "../src/Core/Calculus.vala"
	_tmp3_ = revised_exp;
#line 40 "../src/Core/Calculus.vala"
	_tmp4_ = strlen (_tmp3_);
#line 40 "../src/Core/Calculus.vala"
	_tmp5_ = _tmp4_;
#line 40 "../src/Core/Calculus.vala"
	_tmp6_ = g_new0 (gchar, _tmp5_);
#line 40 "../src/Core/Calculus.vala"
	user_func = _tmp6_;
#line 487 "Calculus.c"
	{
		gint i = 0;
#line 41 "../src/Core/Calculus.vala"
		i = 0;
#line 492 "Calculus.c"
		{
			gboolean _tmp7_ = FALSE;
#line 41 "../src/Core/Calculus.vala"
			_tmp7_ = TRUE;
#line 41 "../src/Core/Calculus.vala"
			while (TRUE) {
#line 499 "Calculus.c"
				const gchar* _tmp9_;
				gint _tmp10_;
				gint _tmp11_;
				gchar* _tmp12_;
				const gchar* _tmp13_;
#line 41 "../src/Core/Calculus.vala"
				if (!_tmp7_) {
#line 507 "Calculus.c"
					gint _tmp8_;
#line 41 "../src/Core/Calculus.vala"
					_tmp8_ = i;
#line 41 "../src/Core/Calculus.vala"
					i = _tmp8_ + 1;
#line 513 "Calculus.c"
				}
#line 41 "../src/Core/Calculus.vala"
				_tmp7_ = FALSE;
#line 41 "../src/Core/Calculus.vala"
				_tmp9_ = revised_exp;
#line 41 "../src/Core/Calculus.vala"
				_tmp10_ = strlen (_tmp9_);
#line 41 "../src/Core/Calculus.vala"
				_tmp11_ = _tmp10_;
#line 41 "../src/Core/Calculus.vala"
				if (!(i < _tmp11_)) {
#line 41 "../src/Core/Calculus.vala"
					break;
#line 527 "Calculus.c"
				}
#line 42 "../src/Core/Calculus.vala"
				_tmp12_ = user_func;
#line 42 "../src/Core/Calculus.vala"
				_tmp13_ = revised_exp;
#line 42 "../src/Core/Calculus.vala"
				_tmp12_[i] = (gchar) string_get_char (_tmp13_, (glong) i);
#line 535 "Calculus.c"
			}
		}
	}
#line 45 "../src/Core/Calculus.vala"
	_tmp14_ = user_func;
#line 45 "../src/Core/Calculus.vala"
	memset (&_tmp15_, 0, sizeof (gsl_function));
#line 45 "../src/Core/Calculus.vala"
	_tmp15_.function = _pebbles_calculus_derivable_function_gsl_function;
#line 45 "../src/Core/Calculus.vala"
	_tmp15_.params = _tmp14_;
#line 45 "../src/Core/Calculus.vala"
	scientific_function = _tmp15_;
#line 46 "../src/Core/Calculus.vala"
	if (val != ((gdouble) 0)) {
#line 551 "Calculus.c"
		gdouble _tmp16_ = 0.0;
		gdouble _tmp17_ = 0.0;
#line 47 "../src/Core/Calculus.vala"
		gsl_deriv_central (&scientific_function, val, 1e-8, &_tmp16_, &_tmp17_);
#line 47 "../src/Core/Calculus.vala"
		_result_ = _tmp16_;
#line 47 "../src/Core/Calculus.vala"
		_error_ = _tmp17_;
#line 560 "Calculus.c"
	} else {
		gdouble _tmp18_ = 0.0;
		gdouble _tmp19_ = 0.0;
#line 50 "../src/Core/Calculus.vala"
		gsl_deriv_forward (&scientific_function, val, 1e-8, &_tmp18_, &_tmp19_);
#line 50 "../src/Core/Calculus.vala"
		_result_ = _tmp18_;
#line 50 "../src/Core/Calculus.vala"
		_error_ = _tmp19_;
#line 570 "Calculus.c"
	}
#line 53 "../src/Core/Calculus.vala"
	_tmp20_ = pebbles_settings_get_default ();
#line 53 "../src/Core/Calculus.vala"
	accuracy_settings = _tmp20_;
#line 54 "../src/Core/Calculus.vala"
	_tmp21_ = pebbles_settings_get_decimal_places (accuracy_settings);
#line 54 "../src/Core/Calculus.vala"
	_tmp22_ = _tmp21_;
#line 54 "../src/Core/Calculus.vala"
	_tmp23_ = pebbles_utils_manage_decimal_places (_result_, _tmp22_);
#line 54 "../src/Core/Calculus.vala"
	result = _tmp23_;
#line 54 "../src/Core/Calculus.vala"
	_g_object_unref0 (accuracy_settings);
#line 54 "../src/Core/Calculus.vala"
	_g_free0 (revised_exp);
#line 54 "../src/Core/Calculus.vala"
	return result;
#line 590 "Calculus.c"
}

gchar*
pebbles_calculus_get_definite_integral (const gchar* exp,
                                        PebblesGlobalAngleUnit angle_mode_in,
                                        gdouble lower_limit,
                                        gdouble upper_limit)
{
	gchar* revised_exp = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	PebblesScientificCalculator* sci_calc = NULL;
	PebblesScientificCalculator* _tmp3_;
	gint accuracy = 0;
	gdouble interval_size = 0.0;
	gchar* exp1 = NULL;
	PebblesScientificCalculator* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gint _tmp10_;
	gboolean _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* exp2 = NULL;
	PebblesScientificCalculator* _tmp14_;
	const gchar* _tmp15_;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	gint _tmp20_;
	gboolean _tmp21_;
	gchar* _tmp22_;
	gchar* _tmp23_;
	gboolean _tmp24_ = FALSE;
	const gchar* _tmp25_;
	gchar* result = NULL;
#line 60 "../src/Core/Calculus.vala"
	g_return_val_if_fail (exp != NULL, NULL);
#line 63 "../src/Core/Calculus.vala"
	_tmp0_ = pebbles_utils_st_tokenize (exp);
#line 63 "../src/Core/Calculus.vala"
	revised_exp = _tmp0_;
#line 64 "../src/Core/Calculus.vala"
	_tmp1_ = revised_exp;
#line 64 "../src/Core/Calculus.vala"
	_tmp2_ = pebbles_utils_algebraic_variable_product_convert (_tmp1_);
#line 64 "../src/Core/Calculus.vala"
	_g_free0 (revised_exp);
#line 64 "../src/Core/Calculus.vala"
	revised_exp = _tmp2_;
#line 65 "../src/Core/Calculus.vala"
	_tmp3_ = pebbles_scientific_calculator_new ();
#line 65 "../src/Core/Calculus.vala"
	sci_calc = _tmp3_;
#line 66 "../src/Core/Calculus.vala"
	accuracy = 40;
#line 67 "../src/Core/Calculus.vala"
	interval_size = (upper_limit - lower_limit) / accuracy;
#line 69 "../src/Core/Calculus.vala"
	_tmp4_ = sci_calc;
#line 69 "../src/Core/Calculus.vala"
	_tmp5_ = revised_exp;
#line 69 "../src/Core/Calculus.vala"
	_tmp6_ = double_to_string (lower_limit);
#line 69 "../src/Core/Calculus.vala"
	_tmp7_ = _tmp6_;
#line 69 "../src/Core/Calculus.vala"
	_tmp8_ = string_replace (_tmp5_, "x", _tmp7_);
#line 69 "../src/Core/Calculus.vala"
	_tmp9_ = _tmp8_;
#line 69 "../src/Core/Calculus.vala"
	_tmp10_ = -1;
#line 69 "../src/Core/Calculus.vala"
	_tmp11_ = TRUE;
#line 69 "../src/Core/Calculus.vala"
	_tmp12_ = pebbles_scientific_calculator_get_result (_tmp4_, _tmp9_, angle_mode_in, &_tmp10_, &_tmp11_);
#line 69 "../src/Core/Calculus.vala"
	_tmp13_ = _tmp12_;
#line 69 "../src/Core/Calculus.vala"
	_g_free0 (_tmp9_);
#line 69 "../src/Core/Calculus.vala"
	_g_free0 (_tmp7_);
#line 69 "../src/Core/Calculus.vala"
	exp1 = _tmp13_;
#line 70 "../src/Core/Calculus.vala"
	_tmp14_ = sci_calc;
#line 70 "../src/Core/Calculus.vala"
	_tmp15_ = revised_exp;
#line 70 "../src/Core/Calculus.vala"
	_tmp16_ = double_to_string (upper_limit);
#line 70 "../src/Core/Calculus.vala"
	_tmp17_ = _tmp16_;
#line 70 "../src/Core/Calculus.vala"
	_tmp18_ = string_replace (_tmp15_, "x", _tmp17_);
#line 70 "../src/Core/Calculus.vala"
	_tmp19_ = _tmp18_;
#line 70 "../src/Core/Calculus.vala"
	_tmp20_ = -1;
#line 70 "../src/Core/Calculus.vala"
	_tmp21_ = TRUE;
#line 70 "../src/Core/Calculus.vala"
	_tmp22_ = pebbles_scientific_calculator_get_result (_tmp14_, _tmp19_, angle_mode_in, &_tmp20_, &_tmp21_);
#line 70 "../src/Core/Calculus.vala"
	_tmp23_ = _tmp22_;
#line 70 "../src/Core/Calculus.vala"
	_g_free0 (_tmp19_);
#line 70 "../src/Core/Calculus.vala"
	_g_free0 (_tmp17_);
#line 70 "../src/Core/Calculus.vala"
	exp2 = _tmp23_;
#line 72 "../src/Core/Calculus.vala"
	_tmp25_ = exp1;
#line 72 "../src/Core/Calculus.vala"
	if (g_strcmp0 (_tmp25_, "E") != 0) {
#line 710 "Calculus.c"
		const gchar* _tmp26_;
#line 72 "../src/Core/Calculus.vala"
		_tmp26_ = exp2;
#line 72 "../src/Core/Calculus.vala"
		_tmp24_ = g_strcmp0 (_tmp26_, "E") != 0;
#line 716 "Calculus.c"
	} else {
#line 72 "../src/Core/Calculus.vala"
		_tmp24_ = FALSE;
#line 720 "Calculus.c"
	}
#line 72 "../src/Core/Calculus.vala"
	if (_tmp24_) {
#line 724 "Calculus.c"
		gdouble sum = 0.0;
		gboolean _tmp27_ = FALSE;
		const gchar* _tmp28_;
		PebblesSettings* accuracy_settings = NULL;
		PebblesSettings* _tmp58_;
		PebblesSettings* _tmp59_;
		gint _tmp60_;
		gint _tmp61_;
		gchar* _tmp62_;
#line 73 "../src/Core/Calculus.vala"
		sum = 0.0;
#line 74 "../src/Core/Calculus.vala"
		_tmp28_ = exp1;
#line 74 "../src/Core/Calculus.vala"
		if (g_strcmp0 (_tmp28_, "∞") == 0) {
#line 740 "Calculus.c"
			const gchar* _tmp29_;
#line 74 "../src/Core/Calculus.vala"
			_tmp29_ = exp2;
#line 74 "../src/Core/Calculus.vala"
			_tmp27_ = g_strcmp0 (_tmp29_, "∞") == 0;
#line 746 "Calculus.c"
		} else {
#line 74 "../src/Core/Calculus.vala"
			_tmp27_ = FALSE;
#line 750 "Calculus.c"
		}
#line 74 "../src/Core/Calculus.vala"
		if (_tmp27_) {
#line 75 "../src/Core/Calculus.vala"
			sum = ((double) INFINITY) - ((double) INFINITY);
#line 756 "Calculus.c"
		} else {
			const gchar* _tmp30_;
#line 77 "../src/Core/Calculus.vala"
			_tmp30_ = exp1;
#line 77 "../src/Core/Calculus.vala"
			if (g_strcmp0 (_tmp30_, "∞") == 0) {
#line 763 "Calculus.c"
				const gchar* _tmp31_;
#line 78 "../src/Core/Calculus.vala"
				_tmp31_ = exp2;
#line 78 "../src/Core/Calculus.vala"
				sum = ((double) INFINITY) - double_parse (_tmp31_);
#line 769 "Calculus.c"
			} else {
				const gchar* _tmp32_;
#line 80 "../src/Core/Calculus.vala"
				_tmp32_ = exp2;
#line 80 "../src/Core/Calculus.vala"
				if (g_strcmp0 (_tmp32_, "∞") == 0) {
#line 776 "Calculus.c"
					const gchar* _tmp33_;
#line 81 "../src/Core/Calculus.vala"
					_tmp33_ = exp1;
#line 81 "../src/Core/Calculus.vala"
					sum = double_parse (_tmp33_) - ((double) INFINITY);
#line 782 "Calculus.c"
				} else {
					const gchar* _tmp34_;
					const gchar* _tmp35_;
#line 84 "../src/Core/Calculus.vala"
					_tmp34_ = exp1;
#line 84 "../src/Core/Calculus.vala"
					_tmp35_ = exp2;
#line 84 "../src/Core/Calculus.vala"
					sum = double_parse (_tmp34_) - double_parse (_tmp35_);
#line 792 "Calculus.c"
				}
			}
		}
		{
			gint i = 0;
#line 88 "../src/Core/Calculus.vala"
			i = 1;
#line 800 "Calculus.c"
			{
				gboolean _tmp36_ = FALSE;
#line 88 "../src/Core/Calculus.vala"
				_tmp36_ = TRUE;
#line 88 "../src/Core/Calculus.vala"
				while (TRUE) {
#line 88 "../src/Core/Calculus.vala"
					if (!_tmp36_) {
#line 809 "Calculus.c"
						gint _tmp37_;
#line 88 "../src/Core/Calculus.vala"
						_tmp37_ = i;
#line 88 "../src/Core/Calculus.vala"
						i = _tmp37_ + 1;
#line 815 "Calculus.c"
					}
#line 88 "../src/Core/Calculus.vala"
					_tmp36_ = FALSE;
#line 88 "../src/Core/Calculus.vala"
					if (!(i < accuracy)) {
#line 88 "../src/Core/Calculus.vala"
						break;
#line 823 "Calculus.c"
					}
#line 89 "../src/Core/Calculus.vala"
					if ((i % 3) == 0) {
#line 827 "Calculus.c"
						PebblesScientificCalculator* _tmp38_;
						const gchar* _tmp39_;
						gchar* _tmp40_;
						gchar* _tmp41_;
						gchar* _tmp42_;
						gchar* _tmp43_;
						gint _tmp44_;
						gboolean _tmp45_;
						gchar* _tmp46_;
						gchar* _tmp47_;
#line 90 "../src/Core/Calculus.vala"
						_tmp38_ = sci_calc;
#line 90 "../src/Core/Calculus.vala"
						_tmp39_ = revised_exp;
#line 90 "../src/Core/Calculus.vala"
						_tmp40_ = double_to_string (lower_limit + (i * interval_size));
#line 90 "../src/Core/Calculus.vala"
						_tmp41_ = _tmp40_;
#line 90 "../src/Core/Calculus.vala"
						_tmp42_ = string_replace (_tmp39_, "x", _tmp41_);
#line 90 "../src/Core/Calculus.vala"
						_tmp43_ = _tmp42_;
#line 90 "../src/Core/Calculus.vala"
						_tmp44_ = -1;
#line 90 "../src/Core/Calculus.vala"
						_tmp45_ = TRUE;
#line 90 "../src/Core/Calculus.vala"
						_tmp46_ = pebbles_scientific_calculator_get_result (_tmp38_, _tmp43_, angle_mode_in, &_tmp44_, &_tmp45_);
#line 90 "../src/Core/Calculus.vala"
						_tmp47_ = _tmp46_;
#line 90 "../src/Core/Calculus.vala"
						sum = sum + (2 * double_parse (_tmp47_));
#line 90 "../src/Core/Calculus.vala"
						_g_free0 (_tmp47_);
#line 90 "../src/Core/Calculus.vala"
						_g_free0 (_tmp43_);
#line 90 "../src/Core/Calculus.vala"
						_g_free0 (_tmp41_);
#line 866 "Calculus.c"
					} else {
						PebblesScientificCalculator* _tmp48_;
						const gchar* _tmp49_;
						gchar* _tmp50_;
						gchar* _tmp51_;
						gchar* _tmp52_;
						gchar* _tmp53_;
						gint _tmp54_;
						gboolean _tmp55_;
						gchar* _tmp56_;
						gchar* _tmp57_;
#line 93 "../src/Core/Calculus.vala"
						_tmp48_ = sci_calc;
#line 93 "../src/Core/Calculus.vala"
						_tmp49_ = revised_exp;
#line 93 "../src/Core/Calculus.vala"
						_tmp50_ = double_to_string (lower_limit + (i * interval_size));
#line 93 "../src/Core/Calculus.vala"
						_tmp51_ = _tmp50_;
#line 93 "../src/Core/Calculus.vala"
						_tmp52_ = string_replace (_tmp49_, "x", _tmp51_);
#line 93 "../src/Core/Calculus.vala"
						_tmp53_ = _tmp52_;
#line 93 "../src/Core/Calculus.vala"
						_tmp54_ = -1;
#line 93 "../src/Core/Calculus.vala"
						_tmp55_ = TRUE;
#line 93 "../src/Core/Calculus.vala"
						_tmp56_ = pebbles_scientific_calculator_get_result (_tmp48_, _tmp53_, angle_mode_in, &_tmp54_, &_tmp55_);
#line 93 "../src/Core/Calculus.vala"
						_tmp57_ = _tmp56_;
#line 93 "../src/Core/Calculus.vala"
						sum = sum + (3 * double_parse (_tmp57_));
#line 93 "../src/Core/Calculus.vala"
						_g_free0 (_tmp57_);
#line 93 "../src/Core/Calculus.vala"
						_g_free0 (_tmp53_);
#line 93 "../src/Core/Calculus.vala"
						_g_free0 (_tmp51_);
#line 906 "Calculus.c"
					}
				}
			}
		}
#line 96 "../src/Core/Calculus.vala"
		_tmp58_ = pebbles_settings_get_default ();
#line 96 "../src/Core/Calculus.vala"
		accuracy_settings = _tmp58_;
#line 97 "../src/Core/Calculus.vala"
		_tmp59_ = accuracy_settings;
#line 97 "../src/Core/Calculus.vala"
		_tmp60_ = pebbles_settings_get_decimal_places (_tmp59_);
#line 97 "../src/Core/Calculus.vala"
		_tmp61_ = _tmp60_;
#line 97 "../src/Core/Calculus.vala"
		_tmp62_ = pebbles_utils_manage_decimal_places (((3 * interval_size) / 8) * sum, _tmp61_);
#line 97 "../src/Core/Calculus.vala"
		result = _tmp62_;
#line 97 "../src/Core/Calculus.vala"
		_g_object_unref0 (accuracy_settings);
#line 97 "../src/Core/Calculus.vala"
		_g_free0 (exp2);
#line 97 "../src/Core/Calculus.vala"
		_g_free0 (exp1);
#line 97 "../src/Core/Calculus.vala"
		_pebbles_scientific_calculator_unref0 (sci_calc);
#line 97 "../src/Core/Calculus.vala"
		_g_free0 (revised_exp);
#line 97 "../src/Core/Calculus.vala"
		return result;
#line 937 "Calculus.c"
	} else {
		gchar* _tmp63_;
#line 100 "../src/Core/Calculus.vala"
		_tmp63_ = g_strdup ("E");
#line 100 "../src/Core/Calculus.vala"
		result = _tmp63_;
#line 100 "../src/Core/Calculus.vala"
		_g_free0 (exp2);
#line 100 "../src/Core/Calculus.vala"
		_g_free0 (exp1);
#line 100 "../src/Core/Calculus.vala"
		_pebbles_scientific_calculator_unref0 (sci_calc);
#line 100 "../src/Core/Calculus.vala"
		_g_free0 (revised_exp);
#line 100 "../src/Core/Calculus.vala"
		return result;
#line 954 "Calculus.c"
	}
#line 60 "../src/Core/Calculus.vala"
	_g_free0 (exp2);
#line 60 "../src/Core/Calculus.vala"
	_g_free0 (exp1);
#line 60 "../src/Core/Calculus.vala"
	_pebbles_scientific_calculator_unref0 (sci_calc);
#line 60 "../src/Core/Calculus.vala"
	_g_free0 (revised_exp);
#line 964 "Calculus.c"
}

PebblesCalculus*
pebbles_calculus_construct (GType object_type)
{
	PebblesCalculus * self = NULL;
#line 25 "../src/Core/Calculus.vala"
	self = (PebblesCalculus*) g_object_new (object_type, NULL);
#line 25 "../src/Core/Calculus.vala"
	return self;
#line 975 "Calculus.c"
}

PebblesCalculus*
pebbles_calculus_new (void)
{
#line 25 "../src/Core/Calculus.vala"
	return pebbles_calculus_construct (PEBBLES_TYPE_CALCULUS);
#line 983 "Calculus.c"
}

static void
pebbles_calculus_class_init (PebblesCalculusClass * klass,
                             gpointer klass_data)
{
#line 25 "../src/Core/Calculus.vala"
	pebbles_calculus_parent_class = g_type_class_peek_parent (klass);
#line 992 "Calculus.c"
}

static void
pebbles_calculus_instance_init (PebblesCalculus * self,
                                gpointer klass)
{
}

static GType
pebbles_calculus_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (PebblesCalculusClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_calculus_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesCalculus), 0, (GInstanceInitFunc) pebbles_calculus_instance_init, NULL };
	GType pebbles_calculus_type_id;
	pebbles_calculus_type_id = g_type_register_static (G_TYPE_OBJECT, "PebblesCalculus", &g_define_type_info, 0);
	return pebbles_calculus_type_id;
}

GType
pebbles_calculus_get_type (void)
{
	static volatile gsize pebbles_calculus_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_calculus_type_id__volatile)) {
		GType pebbles_calculus_type_id;
		pebbles_calculus_type_id = pebbles_calculus_get_type_once ();
		g_once_init_leave (&pebbles_calculus_type_id__volatile, pebbles_calculus_type_id);
	}
	return pebbles_calculus_type_id__volatile;
}


/* Application.c generated by valac 0.48.14, the Vala compiler
 * generated from Application.vala, do not modify */

/*
 *  Copyright (C) 2019–2020 elementary, Inc. (https://elementary.io)
 *                2011–2013 Maxwell Barvian <maxwell@elementaryos.org>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <sys/prctl.h>
#include <sys/utsname.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>

#define GRANITE_TYPE_APPLICATION (granite_application_get_type ())
#define GRANITE_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_TYPE_APPLICATION, GraniteApplication))
#define GRANITE_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_TYPE_APPLICATION, GraniteApplicationClass))
#define GRANITE_IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_TYPE_APPLICATION))
#define GRANITE_IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_TYPE_APPLICATION))
#define GRANITE_APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_TYPE_APPLICATION, GraniteApplicationClass))

typedef struct _GraniteApplication GraniteApplication;
typedef struct _GraniteApplicationClass GraniteApplicationClass;
typedef struct _GraniteApplicationPrivate GraniteApplicationPrivate;
enum  {
	GRANITE_APPLICATION_0_PROPERTY,
	GRANITE_APPLICATION_NUM_PROPERTIES
};
static GParamSpec* granite_application_properties[GRANITE_APPLICATION_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
typedef enum  {
	GRANITE_SERVICES_LOG_LEVEL_DEBUG,
	GRANITE_SERVICES_LOG_LEVEL_INFO,
	GRANITE_SERVICES_LOG_LEVEL_NOTIFY,
	GRANITE_SERVICES_LOG_LEVEL_WARN,
	GRANITE_SERVICES_LOG_LEVEL_ERROR,
	GRANITE_SERVICES_LOG_LEVEL_FATAL
} GraniteServicesLogLevel;

#define GRANITE_SERVICES_TYPE_LOG_LEVEL (granite_services_log_level_get_type ())
#define _g_option_group_unref0(var) ((var == NULL) ? NULL : (var = (g_option_group_unref (var), NULL)))

struct _GraniteApplication {
	GtkApplication parent_instance;
	gchar* build_data_dir;
	gchar* build_pkg_data_dir;
	gchar* build_release_name;
	gchar* build_version;
	gchar* build_version_info;
	gchar* program_name;
	gchar* exec_name;
	gchar* app_copyright G_GNUC_DEPRECATED;
	gchar* app_years G_GNUC_DEPRECATED;
	gchar* app_icon G_GNUC_DEPRECATED;
	gchar* app_launcher;
	gchar* main_url G_GNUC_DEPRECATED;
	gchar* bug_url G_GNUC_DEPRECATED;
	gchar* help_url G_GNUC_DEPRECATED;
	gchar* translate_url G_GNUC_DEPRECATED;
	gchar** about_authors G_GNUC_DEPRECATED;
	gint about_authors_length1;
	gchar** about_documenters G_GNUC_DEPRECATED;
	gint about_documenters_length1;
	gchar** about_artists G_GNUC_DEPRECATED;
	gint about_artists_length1;
	gchar* about_comments G_GNUC_DEPRECATED;
	gchar* about_translators G_GNUC_DEPRECATED;
	gchar* about_license G_GNUC_DEPRECATED;
	GtkLicense about_license_type G_GNUC_DEPRECATED;
	GraniteApplicationPrivate * priv;
};

struct _GraniteApplicationClass {
	GtkApplicationClass parent_class;
	void (*set_options) (GraniteApplication* self);
};

static gpointer granite_application_parent_class = NULL;
extern gboolean granite_application_DEBUG;
gboolean granite_application_DEBUG = FALSE;

GType granite_application_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteApplication, g_object_unref)
void granite_application_set_options (GraniteApplication* self);
GraniteApplication* granite_application_construct (GType object_type);
void granite_services_logger_initialize (const gchar* app_name);
GType granite_services_log_level_get_type (void) G_GNUC_CONST;
void granite_services_logger_set_DisplayLevel (GraniteServicesLogLevel value);
static gint granite_application_on_handle_local_options (GraniteApplication* self,
                                                  GVariantDict* options);
static gint _granite_application_on_handle_local_options_g_application_handle_local_options (GApplication* _sender,
                                                                                      GVariantDict* options,
                                                                                      gpointer self);
gint granite_application_run (GraniteApplication* self,
                              gchar** args,
                              gint args_length1);
static void granite_application_real_set_options (GraniteApplication* self);
static void granite_application_finalize (GObject * obj);
static GType granite_application_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);

const GOptionEntry GRANITE_APPLICATION_options[2] = {{"debug", 'd', 0, G_OPTION_ARG_NONE, &granite_application_DEBUG, "Enable debug logging", NULL}, {NULL}};

/**
         * This creates a new Application class
         */
static gint
_granite_application_on_handle_local_options_g_application_handle_local_options (GApplication* _sender,
                                                                                 GVariantDict* options,
                                                                                 gpointer self)
{
	gint result;
	result = granite_application_on_handle_local_options ((GraniteApplication*) self, options);
#line 163 "../lib/Application.vala"
	return result;
#line 141 "Application.c"
}

GraniteApplication*
granite_application_construct (GType object_type)
{
	GraniteApplication * self = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	struct utsname un = {0};
	struct utsname _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
#line 148 "../lib/Application.vala"
	self = (GraniteApplication*) g_object_new (object_type, NULL);
#line 150 "../lib/Application.vala"
	_tmp0_ = self->exec_name;
#line 150 "../lib/Application.vala"
	prctl (15, _tmp0_, (gulong) 0, (gulong) 0, (gulong) 0);
#line 154 "../lib/Application.vala"
	_tmp1_ = self->program_name;
#line 154 "../lib/Application.vala"
	granite_services_logger_initialize (_tmp1_);
#line 155 "../lib/Application.vala"
	granite_services_logger_set_DisplayLevel (GRANITE_SERVICES_LOG_LEVEL_INFO);
#line 156 "../lib/Application.vala"
	_tmp2_ = self->program_name;
#line 156 "../lib/Application.vala"
	_tmp3_ = self->build_version;
#line 156 "../lib/Application.vala"
	g_message ("Application.vala:156: %s version: %s", _tmp2_, _tmp3_);
#line 157 "../lib/Application.vala"
	uname (&un);
#line 158 "../lib/Application.vala"
	_tmp4_ = un;
#line 158 "../lib/Application.vala"
	_tmp5_ = _tmp4_.release;
#line 158 "../lib/Application.vala"
	g_message ("Application.vala:158: Kernel version: %s", (const gchar*) _tmp5_);
#line 159 "../lib/Application.vala"
	granite_services_logger_set_DisplayLevel (GRANITE_SERVICES_LOG_LEVEL_WARN);
#line 161 "../lib/Application.vala"
	_tmp6_ = self->exec_name;
#line 161 "../lib/Application.vala"
	_tmp7_ = self->build_data_dir;
#line 161 "../lib/Application.vala"
	_tmp8_ = g_strconcat (_tmp7_, "/locale", NULL);
#line 161 "../lib/Application.vala"
	_tmp9_ = _tmp8_;
#line 161 "../lib/Application.vala"
	bindtextdomain (_tmp6_, _tmp9_);
#line 161 "../lib/Application.vala"
	_g_free0 (_tmp9_);
#line 163 "../lib/Application.vala"
	g_signal_connect_object ((GApplication*) self, "handle-local-options", (GCallback) _granite_application_on_handle_local_options_g_application_handle_local_options, self, 0);
#line 148 "../lib/Application.vala"
	return self;
#line 203 "Application.c"
}

/**
         * This method runs the application
         *
         * @param args array of arguments
         */
gint
granite_application_run (GraniteApplication* self,
                         gchar** args,
                         gint args_length1)
{
	GOptionGroup* option_group = NULL;
	GOptionGroup* _tmp0_;
	GOptionGroup* _tmp1_;
	GOptionGroup* _tmp2_;
	gint result = 0;
#line 182 "../lib/Application.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 183 "../lib/Application.vala"
	_tmp0_ = g_option_group_new ("granite", "Granite Options", _ ("Show Granite Options"), NULL, NULL);
#line 183 "../lib/Application.vala"
	option_group = _tmp0_;
#line 184 "../lib/Application.vala"
	_tmp1_ = option_group;
#line 184 "../lib/Application.vala"
	g_option_group_add_entries (_tmp1_, GRANITE_APPLICATION_options);
#line 186 "../lib/Application.vala"
	_tmp2_ = option_group;
#line 186 "../lib/Application.vala"
	option_group = NULL;
#line 186 "../lib/Application.vala"
	g_application_add_option_group ((GApplication*) self, _tmp2_);
#line 188 "../lib/Application.vala"
	result = g_application_run ((GApplication*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_application_get_type (), GtkApplication), (gint) args_length1, args);
#line 188 "../lib/Application.vala"
	_g_option_group_unref0 (option_group);
#line 188 "../lib/Application.vala"
	return result;
#line 243 "Application.c"
}

static gint
granite_application_on_handle_local_options (GraniteApplication* self,
                                             GVariantDict* options)
{
	gint result = 0;
#line 191 "../lib/Application.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 191 "../lib/Application.vala"
	g_return_val_if_fail (options != NULL, 0);
#line 192 "../lib/Application.vala"
	granite_application_set_options (self);
#line 193 "../lib/Application.vala"
	result = -1;
#line 193 "../lib/Application.vala"
	return result;
#line 261 "Application.c"
}

static void
granite_application_real_set_options (GraniteApplication* self)
{
#line 205 "../lib/Application.vala"
	if (granite_application_DEBUG) {
#line 206 "../lib/Application.vala"
		granite_services_logger_set_DisplayLevel (GRANITE_SERVICES_LOG_LEVEL_DEBUG);
#line 271 "Application.c"
	}
}

void
granite_application_set_options (GraniteApplication* self)
{
#line 203 "../lib/Application.vala"
	g_return_if_fail (self != NULL);
#line 203 "../lib/Application.vala"
	GRANITE_APPLICATION_GET_CLASS (self)->set_options (self);
#line 282 "Application.c"
}

static void
granite_application_class_init (GraniteApplicationClass * klass,
                                gpointer klass_data)
{
#line 27 "../lib/Application.vala"
	granite_application_parent_class = g_type_class_peek_parent (klass);
#line 27 "../lib/Application.vala"
	((GraniteApplicationClass *) klass)->set_options = (void (*) (GraniteApplication*)) granite_application_real_set_options;
#line 27 "../lib/Application.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_application_finalize;
#line 295 "Application.c"
}

static void
granite_application_instance_init (GraniteApplication * self,
                                   gpointer klass)
{
	gchar** _tmp0_;
	gchar** _tmp1_;
	gchar** _tmp2_;
#line 115 "../lib/Application.vala"
	_tmp0_ = g_new0 (gchar*, 0 + 1);
#line 115 "../lib/Application.vala"
	self->about_authors = _tmp0_;
#line 115 "../lib/Application.vala"
	self->about_authors_length1 = 0;
#line 121 "../lib/Application.vala"
	_tmp1_ = g_new0 (gchar*, 0 + 1);
#line 121 "../lib/Application.vala"
	self->about_documenters = _tmp1_;
#line 121 "../lib/Application.vala"
	self->about_documenters_length1 = 0;
#line 127 "../lib/Application.vala"
	_tmp2_ = g_new0 (gchar*, 0 + 1);
#line 127 "../lib/Application.vala"
	self->about_artists = _tmp2_;
#line 127 "../lib/Application.vala"
	self->about_artists_length1 = 0;
#line 323 "Application.c"
}

static void
granite_application_finalize (GObject * obj)
{
	GraniteApplication * self;
#line 27 "../lib/Application.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_APPLICATION, GraniteApplication);
#line 29 "../lib/Application.vala"
	_g_free0 (self->build_data_dir);
#line 30 "../lib/Application.vala"
	_g_free0 (self->build_pkg_data_dir);
#line 31 "../lib/Application.vala"
	_g_free0 (self->build_release_name);
#line 32 "../lib/Application.vala"
	_g_free0 (self->build_version);
#line 33 "../lib/Application.vala"
	_g_free0 (self->build_version_info);
#line 39 "../lib/Application.vala"
	_g_free0 (self->program_name);
#line 46 "../lib/Application.vala"
	_g_free0 (self->exec_name);
#line 53 "../lib/Application.vala"
	_g_free0 (self->app_copyright);
#line 55 "../lib/Application.vala"
	_g_free0 (self->app_years);
#line 66 "../lib/Application.vala"
	_g_free0 (self->app_icon);
#line 75 "../lib/Application.vala"
	_g_free0 (self->app_launcher);
#line 84 "../lib/Application.vala"
	_g_free0 (self->main_url);
#line 93 "../lib/Application.vala"
	_g_free0 (self->bug_url);
#line 101 "../lib/Application.vala"
	_g_free0 (self->help_url);
#line 109 "../lib/Application.vala"
	_g_free0 (self->translate_url);
#line 115 "../lib/Application.vala"
	self->about_authors = (_vala_array_free (self->about_authors, self->about_authors_length1, (GDestroyNotify) g_free), NULL);
#line 121 "../lib/Application.vala"
	self->about_documenters = (_vala_array_free (self->about_documenters, self->about_documenters_length1, (GDestroyNotify) g_free), NULL);
#line 127 "../lib/Application.vala"
	self->about_artists = (_vala_array_free (self->about_artists, self->about_artists_length1, (GDestroyNotify) g_free), NULL);
#line 129 "../lib/Application.vala"
	_g_free0 (self->about_comments);
#line 135 "../lib/Application.vala"
	_g_free0 (self->about_translators);
#line 141 "../lib/Application.vala"
	_g_free0 (self->about_license);
#line 27 "../lib/Application.vala"
	G_OBJECT_CLASS (granite_application_parent_class)->finalize (obj);
#line 376 "Application.c"
}

/**
     * This is the base class for all Granite-based apps. It has methods that help
     * to create a great deal of an app's functionality.
     */
static GType
granite_application_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteApplicationClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_application_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteApplication), 0, (GInstanceInitFunc) granite_application_instance_init, NULL };
	GType granite_application_type_id;
	granite_application_type_id = g_type_register_static (gtk_application_get_type (), "GraniteApplication", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
	return granite_application_type_id;
}

GType
granite_application_get_type (void)
{
	static volatile gsize granite_application_type_id__volatile = 0;
	if (g_once_init_enter (&granite_application_type_id__volatile)) {
		GType granite_application_type_id;
		granite_application_type_id = granite_application_get_type_once ();
		g_once_init_leave (&granite_application_type_id__volatile, granite_application_type_id);
	}
	return granite_application_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


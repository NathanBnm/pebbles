/* CellRendererBadge.c generated by valac 0.48.14, the Vala compiler
 * generated from CellRendererBadge.vala, do not modify */

/*
 *  Copyright (C) 2019 elementary, Inc. (https://elementary.io)
 *                2012â€“2013 Victor Eduardo <victoreduardm@gmal.com>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <pango/pango.h>
#include <cairo-gobject.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>

#define GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE (granite_widgets_cell_renderer_badge_get_type ())
#define GRANITE_WIDGETS_CELL_RENDERER_BADGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE, GraniteWidgetsCellRendererBadge))
#define GRANITE_WIDGETS_CELL_RENDERER_BADGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE, GraniteWidgetsCellRendererBadgeClass))
#define GRANITE_WIDGETS_IS_CELL_RENDERER_BADGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE))
#define GRANITE_WIDGETS_IS_CELL_RENDERER_BADGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE))
#define GRANITE_WIDGETS_CELL_RENDERER_BADGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE, GraniteWidgetsCellRendererBadgeClass))

typedef struct _GraniteWidgetsCellRendererBadge GraniteWidgetsCellRendererBadge;
typedef struct _GraniteWidgetsCellRendererBadgeClass GraniteWidgetsCellRendererBadgeClass;
typedef struct _GraniteWidgetsCellRendererBadgePrivate GraniteWidgetsCellRendererBadgePrivate;
enum  {
	GRANITE_WIDGETS_CELL_RENDERER_BADGE_0_PROPERTY,
	GRANITE_WIDGETS_CELL_RENDERER_BADGE_TEXT_PROPERTY,
	GRANITE_WIDGETS_CELL_RENDERER_BADGE_NUM_PROPERTIES
};
static GParamSpec* granite_widgets_cell_renderer_badge_properties[GRANITE_WIDGETS_CELL_RENDERER_BADGE_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _GraniteWidgetsCellRendererBadge {
	GtkCellRenderer parent_instance;
	GraniteWidgetsCellRendererBadgePrivate * priv;
};

struct _GraniteWidgetsCellRendererBadgeClass {
	GtkCellRendererClass parent_class;
};

struct _GraniteWidgetsCellRendererBadgePrivate {
	gchar* _text;
	PangoRectangle text_logical_rect;
	PangoLayout* text_layout;
	GtkBorder margin;
	GtkBorder padding;
	GtkBorder border;
};

static gint GraniteWidgetsCellRendererBadge_private_offset;
static gpointer granite_widgets_cell_renderer_badge_parent_class = NULL;

GType granite_widgets_cell_renderer_badge_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsCellRendererBadge, g_object_unref)
const gchar* granite_widgets_cell_renderer_badge_get_text (GraniteWidgetsCellRendererBadge* self);
void granite_widgets_cell_renderer_badge_set_text (GraniteWidgetsCellRendererBadge* self,
                                                   const gchar* value);
GraniteWidgetsCellRendererBadge* granite_widgets_cell_renderer_badge_new (void);
GraniteWidgetsCellRendererBadge* granite_widgets_cell_renderer_badge_construct (GType object_type);
static GtkSizeRequestMode granite_widgets_cell_renderer_badge_real_get_request_mode (GtkCellRenderer* base);
static void granite_widgets_cell_renderer_badge_real_get_preferred_width (GtkCellRenderer* base,
                                                                   GtkWidget* widget,
                                                                   gint* minimum_size,
                                                                   gint* natural_size);
static void granite_widgets_cell_renderer_badge_update_layout_properties (GraniteWidgetsCellRendererBadge* self,
                                                                   GtkWidget* widget);
static void granite_widgets_cell_renderer_badge_real_get_preferred_height_for_width (GtkCellRenderer* base,
                                                                              GtkWidget* widget,
                                                                              gint width,
                                                                              gint* minimum_height,
                                                                              gint* natural_height);
#define GRANITE_STYLE_CLASS_BADGE "badge"
static void granite_widgets_cell_renderer_badge_real_render (GtkCellRenderer* base,
                                                      cairo_t* context,
                                                      GtkWidget* widget,
                                                      GdkRectangle* bg_area,
                                                      GdkRectangle* cell_area,
                                                      GtkCellRendererState flags);
static void granite_widgets_cell_renderer_badge_finalize (GObject * obj);
static GType granite_widgets_cell_renderer_badge_get_type_once (void);
static void _vala_granite_widgets_cell_renderer_badge_get_property (GObject * object,
                                                             guint property_id,
                                                             GValue * value,
                                                             GParamSpec * pspec);
static void _vala_granite_widgets_cell_renderer_badge_set_property (GObject * object,
                                                             guint property_id,
                                                             const GValue * value,
                                                             GParamSpec * pspec);

static inline gpointer
granite_widgets_cell_renderer_badge_get_instance_private (GraniteWidgetsCellRendererBadge* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteWidgetsCellRendererBadge_private_offset);
}

const gchar*
granite_widgets_cell_renderer_badge_get_text (GraniteWidgetsCellRendererBadge* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	_tmp0_ = self->priv->_text;
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	result = _tmp0_;
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	return result;
#line 132 "CellRendererBadge.c"
}

void
granite_widgets_cell_renderer_badge_set_text (GraniteWidgetsCellRendererBadge* self,
                                              const gchar* value)
{
	gchar* old_value;
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (self != NULL);
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	old_value = granite_widgets_cell_renderer_badge_get_text (self);
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 146 "CellRendererBadge.c"
		gchar* _tmp0_;
#line 34 "../lib/Widgets/CellRendererBadge.vala"
		_tmp0_ = g_strdup (value);
#line 34 "../lib/Widgets/CellRendererBadge.vala"
		_g_free0 (self->priv->_text);
#line 34 "../lib/Widgets/CellRendererBadge.vala"
		self->priv->_text = _tmp0_;
#line 34 "../lib/Widgets/CellRendererBadge.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_widgets_cell_renderer_badge_properties[GRANITE_WIDGETS_CELL_RENDERER_BADGE_TEXT_PROPERTY]);
#line 156 "CellRendererBadge.c"
	}
}

GraniteWidgetsCellRendererBadge*
granite_widgets_cell_renderer_badge_construct (GType object_type)
{
	GraniteWidgetsCellRendererBadge * self = NULL;
#line 42 "../lib/Widgets/CellRendererBadge.vala"
	self = (GraniteWidgetsCellRendererBadge*) g_object_new (object_type, NULL);
#line 42 "../lib/Widgets/CellRendererBadge.vala"
	return self;
#line 168 "CellRendererBadge.c"
}

GraniteWidgetsCellRendererBadge*
granite_widgets_cell_renderer_badge_new (void)
{
#line 42 "../lib/Widgets/CellRendererBadge.vala"
	return granite_widgets_cell_renderer_badge_construct (GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE);
#line 176 "CellRendererBadge.c"
}

static GtkSizeRequestMode
granite_widgets_cell_renderer_badge_real_get_request_mode (GtkCellRenderer* base)
{
	GraniteWidgetsCellRendererBadge * self;
	GtkSizeRequestMode result = 0;
#line 45 "../lib/Widgets/CellRendererBadge.vala"
	self = (GraniteWidgetsCellRendererBadge*) base;
#line 46 "../lib/Widgets/CellRendererBadge.vala"
	result = GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH;
#line 46 "../lib/Widgets/CellRendererBadge.vala"
	return result;
#line 190 "CellRendererBadge.c"
}

static void
granite_widgets_cell_renderer_badge_real_get_preferred_width (GtkCellRenderer* base,
                                                              GtkWidget* widget,
                                                              gint* minimum_size,
                                                              gint* natural_size)
{
	GraniteWidgetsCellRendererBadge * self;
	gint _vala_minimum_size = 0;
	gint _vala_natural_size = 0;
	gint width = 0;
	PangoRectangle _tmp0_;
	GtkBorder _tmp1_;
	GtkBorder _tmp2_;
	GtkBorder _tmp3_;
	GtkBorder _tmp4_;
	GtkBorder _tmp5_;
	GtkBorder _tmp6_;
	guint _tmp7_;
	guint _tmp8_;
#line 49 "../lib/Widgets/CellRendererBadge.vala"
	self = (GraniteWidgetsCellRendererBadge*) base;
#line 49 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (widget != NULL);
#line 54 "../lib/Widgets/CellRendererBadge.vala"
	granite_widgets_cell_renderer_badge_update_layout_properties (self, widget);
#line 56 "../lib/Widgets/CellRendererBadge.vala"
	_tmp0_ = self->priv->text_logical_rect;
#line 56 "../lib/Widgets/CellRendererBadge.vala"
	width = _tmp0_.width;
#line 57 "../lib/Widgets/CellRendererBadge.vala"
	_tmp1_ = self->priv->margin;
#line 57 "../lib/Widgets/CellRendererBadge.vala"
	_tmp2_ = self->priv->margin;
#line 57 "../lib/Widgets/CellRendererBadge.vala"
	width += (gint) (_tmp1_.left + _tmp2_.right);
#line 58 "../lib/Widgets/CellRendererBadge.vala"
	_tmp3_ = self->priv->padding;
#line 58 "../lib/Widgets/CellRendererBadge.vala"
	_tmp4_ = self->priv->padding;
#line 58 "../lib/Widgets/CellRendererBadge.vala"
	width += (gint) (_tmp3_.left + _tmp4_.right);
#line 59 "../lib/Widgets/CellRendererBadge.vala"
	_tmp5_ = self->priv->border;
#line 59 "../lib/Widgets/CellRendererBadge.vala"
	_tmp6_ = self->priv->border;
#line 59 "../lib/Widgets/CellRendererBadge.vala"
	width += (gint) (_tmp5_.left + _tmp6_.right);
#line 61 "../lib/Widgets/CellRendererBadge.vala"
	g_object_get ((GtkCellRenderer*) self, "xpad", &_tmp7_, NULL);
#line 61 "../lib/Widgets/CellRendererBadge.vala"
	_tmp8_ = _tmp7_;
#line 61 "../lib/Widgets/CellRendererBadge.vala"
	_vala_natural_size = width + (2 * ((gint) _tmp8_));
#line 61 "../lib/Widgets/CellRendererBadge.vala"
	_vala_minimum_size = _vala_natural_size;
#line 49 "../lib/Widgets/CellRendererBadge.vala"
	if (minimum_size) {
#line 49 "../lib/Widgets/CellRendererBadge.vala"
		*minimum_size = _vala_minimum_size;
#line 252 "CellRendererBadge.c"
	}
#line 49 "../lib/Widgets/CellRendererBadge.vala"
	if (natural_size) {
#line 49 "../lib/Widgets/CellRendererBadge.vala"
		*natural_size = _vala_natural_size;
#line 258 "CellRendererBadge.c"
	}
}

static void
granite_widgets_cell_renderer_badge_real_get_preferred_height_for_width (GtkCellRenderer* base,
                                                                         GtkWidget* widget,
                                                                         gint width,
                                                                         gint* minimum_height,
                                                                         gint* natural_height)
{
	GraniteWidgetsCellRendererBadge * self;
	gint _vala_minimum_height = 0;
	gint _vala_natural_height = 0;
	gint height = 0;
	PangoRectangle _tmp0_;
	GtkBorder _tmp1_;
	GtkBorder _tmp2_;
	GtkBorder _tmp3_;
	GtkBorder _tmp4_;
	GtkBorder _tmp5_;
	GtkBorder _tmp6_;
	guint _tmp7_;
	guint _tmp8_;
#line 64 "../lib/Widgets/CellRendererBadge.vala"
	self = (GraniteWidgetsCellRendererBadge*) base;
#line 64 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (widget != NULL);
#line 69 "../lib/Widgets/CellRendererBadge.vala"
	granite_widgets_cell_renderer_badge_update_layout_properties (self, widget);
#line 71 "../lib/Widgets/CellRendererBadge.vala"
	_tmp0_ = self->priv->text_logical_rect;
#line 71 "../lib/Widgets/CellRendererBadge.vala"
	height = _tmp0_.height;
#line 72 "../lib/Widgets/CellRendererBadge.vala"
	_tmp1_ = self->priv->margin;
#line 72 "../lib/Widgets/CellRendererBadge.vala"
	_tmp2_ = self->priv->margin;
#line 72 "../lib/Widgets/CellRendererBadge.vala"
	height += (gint) (_tmp1_.top + _tmp2_.bottom);
#line 73 "../lib/Widgets/CellRendererBadge.vala"
	_tmp3_ = self->priv->padding;
#line 73 "../lib/Widgets/CellRendererBadge.vala"
	_tmp4_ = self->priv->padding;
#line 73 "../lib/Widgets/CellRendererBadge.vala"
	height += (gint) (_tmp3_.top + _tmp4_.bottom);
#line 74 "../lib/Widgets/CellRendererBadge.vala"
	_tmp5_ = self->priv->border;
#line 74 "../lib/Widgets/CellRendererBadge.vala"
	_tmp6_ = self->priv->border;
#line 74 "../lib/Widgets/CellRendererBadge.vala"
	height += (gint) (_tmp5_.top + _tmp6_.bottom);
#line 76 "../lib/Widgets/CellRendererBadge.vala"
	g_object_get ((GtkCellRenderer*) self, "ypad", &_tmp7_, NULL);
#line 76 "../lib/Widgets/CellRendererBadge.vala"
	_tmp8_ = _tmp7_;
#line 76 "../lib/Widgets/CellRendererBadge.vala"
	_vala_natural_height = height + (2 * ((gint) _tmp8_));
#line 76 "../lib/Widgets/CellRendererBadge.vala"
	_vala_minimum_height = _vala_natural_height;
#line 64 "../lib/Widgets/CellRendererBadge.vala"
	if (minimum_height) {
#line 64 "../lib/Widgets/CellRendererBadge.vala"
		*minimum_height = _vala_minimum_height;
#line 322 "CellRendererBadge.c"
	}
#line 64 "../lib/Widgets/CellRendererBadge.vala"
	if (natural_height) {
#line 64 "../lib/Widgets/CellRendererBadge.vala"
		*natural_height = _vala_natural_height;
#line 328 "CellRendererBadge.c"
	}
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 80 "../lib/Widgets/CellRendererBadge.vala"
	return self ? g_object_ref (self) : NULL;
#line 337 "CellRendererBadge.c"
}

static void
granite_widgets_cell_renderer_badge_update_layout_properties (GraniteWidgetsCellRendererBadge* self,
                                                              GtkWidget* widget)
{
	GtkStyleContext* ctx = NULL;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkStateFlags state = 0U;
	GtkBorder _tmp2_ = {0};
	GtkBorder _tmp3_ = {0};
	GtkBorder _tmp4_ = {0};
	const gchar* _tmp5_;
	PangoLayout* _tmp6_;
	PangoRectangle ink_rect = {0};
	PangoLayout* _tmp7_;
	PangoRectangle _tmp8_ = {0};
	PangoRectangle _tmp9_ = {0};
#line 79 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (self != NULL);
#line 79 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (widget != NULL);
#line 80 "../lib/Widgets/CellRendererBadge.vala"
	_tmp0_ = gtk_widget_get_style_context (widget);
#line 80 "../lib/Widgets/CellRendererBadge.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 80 "../lib/Widgets/CellRendererBadge.vala"
	ctx = _tmp1_;
#line 81 "../lib/Widgets/CellRendererBadge.vala"
	gtk_style_context_save (ctx);
#line 85 "../lib/Widgets/CellRendererBadge.vala"
	gtk_style_context_add_class (ctx, GRANITE_STYLE_CLASS_BADGE);
#line 87 "../lib/Widgets/CellRendererBadge.vala"
	state = gtk_style_context_get_state (ctx);
#line 89 "../lib/Widgets/CellRendererBadge.vala"
	gtk_style_context_get_margin (ctx, state, &_tmp2_);
#line 89 "../lib/Widgets/CellRendererBadge.vala"
	self->priv->margin = _tmp2_;
#line 90 "../lib/Widgets/CellRendererBadge.vala"
	gtk_style_context_get_padding (ctx, state, &_tmp3_);
#line 90 "../lib/Widgets/CellRendererBadge.vala"
	self->priv->padding = _tmp3_;
#line 91 "../lib/Widgets/CellRendererBadge.vala"
	gtk_style_context_get_border (ctx, state, &_tmp4_);
#line 91 "../lib/Widgets/CellRendererBadge.vala"
	self->priv->border = _tmp4_;
#line 93 "../lib/Widgets/CellRendererBadge.vala"
	_tmp5_ = self->priv->_text;
#line 93 "../lib/Widgets/CellRendererBadge.vala"
	_tmp6_ = gtk_widget_create_pango_layout (widget, _tmp5_);
#line 93 "../lib/Widgets/CellRendererBadge.vala"
	_g_object_unref0 (self->priv->text_layout);
#line 93 "../lib/Widgets/CellRendererBadge.vala"
	self->priv->text_layout = _tmp6_;
#line 95 "../lib/Widgets/CellRendererBadge.vala"
	gtk_style_context_restore (ctx);
#line 98 "../lib/Widgets/CellRendererBadge.vala"
	_tmp7_ = self->priv->text_layout;
#line 98 "../lib/Widgets/CellRendererBadge.vala"
	pango_layout_get_pixel_extents (_tmp7_, &_tmp8_, &_tmp9_);
#line 98 "../lib/Widgets/CellRendererBadge.vala"
	ink_rect = _tmp8_;
#line 98 "../lib/Widgets/CellRendererBadge.vala"
	self->priv->text_logical_rect = _tmp9_;
#line 79 "../lib/Widgets/CellRendererBadge.vala"
	_g_object_unref0 (ctx);
#line 405 "CellRendererBadge.c"
}

static void
granite_widgets_cell_renderer_badge_real_render (GtkCellRenderer* base,
                                                 cairo_t* context,
                                                 GtkWidget* widget,
                                                 GdkRectangle* bg_area,
                                                 GdkRectangle* cell_area,
                                                 GtkCellRendererState flags)
{
	GraniteWidgetsCellRendererBadge * self;
	GdkRectangle aligned_area = {0};
	GdkRectangle _tmp0_;
	GdkRectangle _tmp1_ = {0};
	gint x = 0;
	GdkRectangle _tmp2_;
	gint y = 0;
	GdkRectangle _tmp3_;
	gint width = 0;
	GdkRectangle _tmp4_;
	gint height = 0;
	GdkRectangle _tmp5_;
	GtkBorder _tmp6_;
	GtkBorder _tmp7_;
	GtkBorder _tmp8_;
	GtkBorder _tmp9_;
	GtkBorder _tmp10_;
	GtkBorder _tmp11_;
	GtkStyleContext* ctx = NULL;
	GtkStyleContext* _tmp12_;
	GtkStyleContext* _tmp13_;
	GtkBorder _tmp14_;
	GtkBorder _tmp15_;
	GtkBorder _tmp16_;
	GtkBorder _tmp17_;
	GtkBorder _tmp18_;
	GtkBorder _tmp19_;
	GtkBorder _tmp20_;
	GtkBorder _tmp21_;
	GtkBorder _tmp22_;
	GtkBorder _tmp23_;
	GtkBorder _tmp24_;
	GtkBorder _tmp25_;
	PangoRectangle _tmp26_;
	PangoRectangle _tmp27_;
	PangoRectangle _tmp28_;
	PangoRectangle _tmp29_;
	PangoLayout* _tmp30_;
#line 101 "../lib/Widgets/CellRendererBadge.vala"
	self = (GraniteWidgetsCellRendererBadge*) base;
#line 101 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (context != NULL);
#line 101 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (widget != NULL);
#line 101 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (bg_area != NULL);
#line 101 "../lib/Widgets/CellRendererBadge.vala"
	g_return_if_fail (cell_area != NULL);
#line 108 "../lib/Widgets/CellRendererBadge.vala"
	granite_widgets_cell_renderer_badge_update_layout_properties (self, widget);
#line 110 "../lib/Widgets/CellRendererBadge.vala"
	_tmp0_ = *cell_area;
#line 110 "../lib/Widgets/CellRendererBadge.vala"
	gtk_cell_renderer_get_aligned_area ((GtkCellRenderer*) self, widget, flags, &_tmp0_, &_tmp1_);
#line 110 "../lib/Widgets/CellRendererBadge.vala"
	aligned_area = _tmp1_;
#line 112 "../lib/Widgets/CellRendererBadge.vala"
	_tmp2_ = aligned_area;
#line 112 "../lib/Widgets/CellRendererBadge.vala"
	x = _tmp2_.x;
#line 113 "../lib/Widgets/CellRendererBadge.vala"
	_tmp3_ = aligned_area;
#line 113 "../lib/Widgets/CellRendererBadge.vala"
	y = _tmp3_.y;
#line 114 "../lib/Widgets/CellRendererBadge.vala"
	_tmp4_ = aligned_area;
#line 114 "../lib/Widgets/CellRendererBadge.vala"
	width = _tmp4_.width;
#line 115 "../lib/Widgets/CellRendererBadge.vala"
	_tmp5_ = aligned_area;
#line 115 "../lib/Widgets/CellRendererBadge.vala"
	height = _tmp5_.height;
#line 118 "../lib/Widgets/CellRendererBadge.vala"
	_tmp6_ = self->priv->margin;
#line 118 "../lib/Widgets/CellRendererBadge.vala"
	x += (gint) _tmp6_.right;
#line 119 "../lib/Widgets/CellRendererBadge.vala"
	_tmp7_ = self->priv->margin;
#line 119 "../lib/Widgets/CellRendererBadge.vala"
	y += (gint) _tmp7_.top;
#line 120 "../lib/Widgets/CellRendererBadge.vala"
	_tmp8_ = self->priv->margin;
#line 120 "../lib/Widgets/CellRendererBadge.vala"
	_tmp9_ = self->priv->margin;
#line 120 "../lib/Widgets/CellRendererBadge.vala"
	width -= (gint) (_tmp8_.left + _tmp9_.right);
#line 121 "../lib/Widgets/CellRendererBadge.vala"
	_tmp10_ = self->priv->margin;
#line 121 "../lib/Widgets/CellRendererBadge.vala"
	_tmp11_ = self->priv->margin;
#line 121 "../lib/Widgets/CellRendererBadge.vala"
	height -= (gint) (_tmp10_.top + _tmp11_.bottom);
#line 123 "../lib/Widgets/CellRendererBadge.vala"
	_tmp12_ = gtk_widget_get_style_context (widget);
#line 123 "../lib/Widgets/CellRendererBadge.vala"
	_tmp13_ = _g_object_ref0 (_tmp12_);
#line 123 "../lib/Widgets/CellRendererBadge.vala"
	ctx = _tmp13_;
#line 124 "../lib/Widgets/CellRendererBadge.vala"
	gtk_style_context_add_class (ctx, GRANITE_STYLE_CLASS_BADGE);
#line 126 "../lib/Widgets/CellRendererBadge.vala"
	gtk_render_background (ctx, context, (gdouble) x, (gdouble) y, (gdouble) width, (gdouble) height);
#line 127 "../lib/Widgets/CellRendererBadge.vala"
	gtk_render_frame (ctx, context, (gdouble) x, (gdouble) y, (gdouble) width, (gdouble) height);
#line 130 "../lib/Widgets/CellRendererBadge.vala"
	_tmp14_ = self->priv->border;
#line 130 "../lib/Widgets/CellRendererBadge.vala"
	_tmp15_ = self->priv->padding;
#line 130 "../lib/Widgets/CellRendererBadge.vala"
	x += (gint) (_tmp14_.right + _tmp15_.right);
#line 131 "../lib/Widgets/CellRendererBadge.vala"
	_tmp16_ = self->priv->border;
#line 131 "../lib/Widgets/CellRendererBadge.vala"
	_tmp17_ = self->priv->padding;
#line 131 "../lib/Widgets/CellRendererBadge.vala"
	y += (gint) (_tmp16_.top + _tmp17_.top);
#line 132 "../lib/Widgets/CellRendererBadge.vala"
	_tmp18_ = self->priv->border;
#line 132 "../lib/Widgets/CellRendererBadge.vala"
	_tmp19_ = self->priv->border;
#line 132 "../lib/Widgets/CellRendererBadge.vala"
	_tmp20_ = self->priv->padding;
#line 132 "../lib/Widgets/CellRendererBadge.vala"
	_tmp21_ = self->priv->padding;
#line 132 "../lib/Widgets/CellRendererBadge.vala"
	width -= (gint) (((_tmp18_.left + _tmp19_.right) + _tmp20_.left) + _tmp21_.right);
#line 133 "../lib/Widgets/CellRendererBadge.vala"
	_tmp22_ = self->priv->border;
#line 133 "../lib/Widgets/CellRendererBadge.vala"
	_tmp23_ = self->priv->border;
#line 133 "../lib/Widgets/CellRendererBadge.vala"
	_tmp24_ = self->priv->padding;
#line 133 "../lib/Widgets/CellRendererBadge.vala"
	_tmp25_ = self->priv->padding;
#line 133 "../lib/Widgets/CellRendererBadge.vala"
	height -= (gint) (((_tmp22_.top + _tmp23_.bottom) + _tmp24_.top) + _tmp25_.bottom);
#line 136 "../lib/Widgets/CellRendererBadge.vala"
	_tmp26_ = self->priv->text_logical_rect;
#line 136 "../lib/Widgets/CellRendererBadge.vala"
	_tmp27_ = self->priv->text_logical_rect;
#line 136 "../lib/Widgets/CellRendererBadge.vala"
	x += _tmp26_.x + ((width - _tmp27_.width) / 2);
#line 137 "../lib/Widgets/CellRendererBadge.vala"
	_tmp28_ = self->priv->text_logical_rect;
#line 137 "../lib/Widgets/CellRendererBadge.vala"
	_tmp29_ = self->priv->text_logical_rect;
#line 137 "../lib/Widgets/CellRendererBadge.vala"
	y += _tmp28_.y + ((height - _tmp29_.height) / 2);
#line 139 "../lib/Widgets/CellRendererBadge.vala"
	_tmp30_ = self->priv->text_layout;
#line 139 "../lib/Widgets/CellRendererBadge.vala"
	gtk_render_layout (ctx, context, (gdouble) x, (gdouble) y, _tmp30_);
#line 101 "../lib/Widgets/CellRendererBadge.vala"
	_g_object_unref0 (ctx);
#line 570 "CellRendererBadge.c"
}

static void
granite_widgets_cell_renderer_badge_class_init (GraniteWidgetsCellRendererBadgeClass * klass,
                                                gpointer klass_data)
{
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	granite_widgets_cell_renderer_badge_parent_class = g_type_class_peek_parent (klass);
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	g_type_class_adjust_private_offset (klass, &GraniteWidgetsCellRendererBadge_private_offset);
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	((GtkCellRendererClass *) klass)->get_request_mode = (GtkSizeRequestMode (*) (GtkCellRenderer*)) granite_widgets_cell_renderer_badge_real_get_request_mode;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	((GtkCellRendererClass *) klass)->get_preferred_width = (void (*) (GtkCellRenderer*, GtkWidget*, gint*, gint*)) granite_widgets_cell_renderer_badge_real_get_preferred_width;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	((GtkCellRendererClass *) klass)->get_preferred_height_for_width = (void (*) (GtkCellRenderer*, GtkWidget*, gint, gint*, gint*)) granite_widgets_cell_renderer_badge_real_get_preferred_height_for_width;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	((GtkCellRendererClass *) klass)->render = (void (*) (GtkCellRenderer*, cairo_t*, GtkWidget*, GdkRectangle*, GdkRectangle*, GtkCellRendererState)) granite_widgets_cell_renderer_badge_real_render;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_widgets_cell_renderer_badge_get_property;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_widgets_cell_renderer_badge_set_property;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_widgets_cell_renderer_badge_finalize;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_CELL_RENDERER_BADGE_TEXT_PROPERTY, granite_widgets_cell_renderer_badge_properties[GRANITE_WIDGETS_CELL_RENDERER_BADGE_TEXT_PROPERTY] = g_param_spec_string ("text", "text", "text", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 597 "CellRendererBadge.c"
}

static void
granite_widgets_cell_renderer_badge_instance_init (GraniteWidgetsCellRendererBadge * self,
                                                   gpointer klass)
{
	gchar* _tmp0_;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	self->priv = granite_widgets_cell_renderer_badge_get_instance_private (self);
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	_tmp0_ = g_strdup ("");
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	self->priv->_text = _tmp0_;
#line 611 "CellRendererBadge.c"
}

static void
granite_widgets_cell_renderer_badge_finalize (GObject * obj)
{
	GraniteWidgetsCellRendererBadge * self;
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE, GraniteWidgetsCellRendererBadge);
#line 34 "../lib/Widgets/CellRendererBadge.vala"
	_g_free0 (self->priv->_text);
#line 37 "../lib/Widgets/CellRendererBadge.vala"
	_g_object_unref0 (self->priv->text_layout);
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	G_OBJECT_CLASS (granite_widgets_cell_renderer_badge_parent_class)->finalize (obj);
#line 626 "CellRendererBadge.c"
}

/**
 * A badge renderer.
 *
 * Informs the user quickly on the content of the corresponding view. For example
 * it might be used to show how much songs are in a playlist or how much updates
 * are available.
 *
 * {{../doc/images/cellrendererbadge.png}}
 *
 * @since 0.2
 */
static GType
granite_widgets_cell_renderer_badge_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteWidgetsCellRendererBadgeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_widgets_cell_renderer_badge_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteWidgetsCellRendererBadge), 0, (GInstanceInitFunc) granite_widgets_cell_renderer_badge_instance_init, NULL };
	GType granite_widgets_cell_renderer_badge_type_id;
	granite_widgets_cell_renderer_badge_type_id = g_type_register_static (gtk_cell_renderer_get_type (), "GraniteWidgetsCellRendererBadge", &g_define_type_info, 0);
	GraniteWidgetsCellRendererBadge_private_offset = g_type_add_instance_private (granite_widgets_cell_renderer_badge_type_id, sizeof (GraniteWidgetsCellRendererBadgePrivate));
	return granite_widgets_cell_renderer_badge_type_id;
}

GType
granite_widgets_cell_renderer_badge_get_type (void)
{
	static volatile gsize granite_widgets_cell_renderer_badge_type_id__volatile = 0;
	if (g_once_init_enter (&granite_widgets_cell_renderer_badge_type_id__volatile)) {
		GType granite_widgets_cell_renderer_badge_type_id;
		granite_widgets_cell_renderer_badge_type_id = granite_widgets_cell_renderer_badge_get_type_once ();
		g_once_init_leave (&granite_widgets_cell_renderer_badge_type_id__volatile, granite_widgets_cell_renderer_badge_type_id);
	}
	return granite_widgets_cell_renderer_badge_type_id__volatile;
}

static void
_vala_granite_widgets_cell_renderer_badge_get_property (GObject * object,
                                                        guint property_id,
                                                        GValue * value,
                                                        GParamSpec * pspec)
{
	GraniteWidgetsCellRendererBadge * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE, GraniteWidgetsCellRendererBadge);
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	switch (property_id) {
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		case GRANITE_WIDGETS_CELL_RENDERER_BADGE_TEXT_PROPERTY:
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		g_value_set_string (value, granite_widgets_cell_renderer_badge_get_text (self));
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		break;
#line 678 "CellRendererBadge.c"
		default:
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		break;
#line 684 "CellRendererBadge.c"
	}
}

static void
_vala_granite_widgets_cell_renderer_badge_set_property (GObject * object,
                                                        guint property_id,
                                                        const GValue * value,
                                                        GParamSpec * pspec)
{
	GraniteWidgetsCellRendererBadge * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_CELL_RENDERER_BADGE, GraniteWidgetsCellRendererBadge);
#line 32 "../lib/Widgets/CellRendererBadge.vala"
	switch (property_id) {
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		case GRANITE_WIDGETS_CELL_RENDERER_BADGE_TEXT_PROPERTY:
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		granite_widgets_cell_renderer_badge_set_text (self, g_value_get_string (value));
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		break;
#line 704 "CellRendererBadge.c"
		default:
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 32 "../lib/Widgets/CellRendererBadge.vala"
		break;
#line 710 "CellRendererBadge.c"
	}
}


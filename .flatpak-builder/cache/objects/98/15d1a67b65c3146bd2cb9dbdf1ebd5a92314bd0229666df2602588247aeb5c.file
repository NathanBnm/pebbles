/* SettingsView.c generated by valac 0.48.14, the Vala compiler
 * generated from SettingsView.vala, do not modify */

/*
 * Copyright (c) 2017 elementary LLC. (https://elementary.io)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include "granite.h"

#define TYPE_SETTINGS_VIEW (settings_view_get_type ())
#define SETTINGS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SETTINGS_VIEW, SettingsView))
#define SETTINGS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SETTINGS_VIEW, SettingsViewClass))
#define IS_SETTINGS_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SETTINGS_VIEW))
#define IS_SETTINGS_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SETTINGS_VIEW))
#define SETTINGS_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SETTINGS_VIEW, SettingsViewClass))

typedef struct _SettingsView SettingsView;
typedef struct _SettingsViewClass SettingsViewClass;
typedef struct _SettingsViewPrivate SettingsViewPrivate;
enum  {
	SETTINGS_VIEW_0_PROPERTY,
	SETTINGS_VIEW_NUM_PROPERTIES
};
static GParamSpec* settings_view_properties[SETTINGS_VIEW_NUM_PROPERTIES];

#define TYPE_SIMPLE_SETTINGS_PAGE (simple_settings_page_get_type ())
#define SIMPLE_SETTINGS_PAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SIMPLE_SETTINGS_PAGE, SimpleSettingsPage))
#define SIMPLE_SETTINGS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SIMPLE_SETTINGS_PAGE, SimpleSettingsPageClass))
#define IS_SIMPLE_SETTINGS_PAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SIMPLE_SETTINGS_PAGE))
#define IS_SIMPLE_SETTINGS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SIMPLE_SETTINGS_PAGE))
#define SIMPLE_SETTINGS_PAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SIMPLE_SETTINGS_PAGE, SimpleSettingsPageClass))

typedef struct _SimpleSettingsPage SimpleSettingsPage;
typedef struct _SimpleSettingsPageClass SimpleSettingsPageClass;

#define TYPE_SETTINGS_PAGE (settings_page_get_type ())
#define SETTINGS_PAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SETTINGS_PAGE, SettingsPage))
#define SETTINGS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SETTINGS_PAGE, SettingsPageClass))
#define IS_SETTINGS_PAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SETTINGS_PAGE))
#define IS_SETTINGS_PAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SETTINGS_PAGE))
#define SETTINGS_PAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SETTINGS_PAGE, SettingsPageClass))

typedef struct _SettingsPage SettingsPage;
typedef struct _SettingsPageClass SettingsPageClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _SettingsView {
	GtkPaned parent_instance;
	SettingsViewPrivate * priv;
};

struct _SettingsViewClass {
	GtkPanedClass parent_class;
};

static gpointer settings_view_parent_class = NULL;

GType settings_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SettingsView, g_object_unref)
SettingsView* settings_view_new (void);
SettingsView* settings_view_construct (GType object_type);
static GObject * settings_view_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
GType simple_settings_page_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SimpleSettingsPage, g_object_unref)
SimpleSettingsPage* simple_settings_page_new (void);
SimpleSettingsPage* simple_settings_page_construct (GType object_type);
GType settings_page_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (SettingsPage, g_object_unref)
SettingsPage* settings_page_new (void);
SettingsPage* settings_page_construct (GType object_type);
static GType settings_view_get_type_once (void);

SettingsView*
settings_view_construct (GType object_type)
{
	SettingsView * self = NULL;
#line 20 "../demo/Views/SettingsView/SettingsView.vala"
	self = (SettingsView*) g_object_new (object_type, NULL);
#line 20 "../demo/Views/SettingsView/SettingsView.vala"
	return self;
#line 101 "SettingsView.c"
}

SettingsView*
settings_view_new (void)
{
#line 20 "../demo/Views/SettingsView/SettingsView.vala"
	return settings_view_construct (TYPE_SETTINGS_VIEW);
#line 109 "SettingsView.c"
}

static GObject *
settings_view_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	SettingsView * self;
	SimpleSettingsPage* settings_page = NULL;
	SimpleSettingsPage* _tmp0_;
	SettingsPage* settings_page_two = NULL;
	SettingsPage* _tmp1_;
	GtkStack* stack = NULL;
	GtkStack* _tmp2_;
	GtkStack* _tmp3_;
	SimpleSettingsPage* _tmp4_;
	GtkStack* _tmp5_;
	SettingsPage* _tmp6_;
	GraniteSettingsSidebar* settings_sidebar = NULL;
	GtkStack* _tmp7_;
	GraniteSettingsSidebar* _tmp8_;
	GraniteSettingsSidebar* _tmp9_;
	GtkStack* _tmp10_;
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	parent_class = G_OBJECT_CLASS (settings_view_parent_class);
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_SETTINGS_VIEW, SettingsView);
#line 22 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp0_ = simple_settings_page_new ();
#line 22 "../demo/Views/SettingsView/SettingsView.vala"
	g_object_ref_sink (_tmp0_);
#line 22 "../demo/Views/SettingsView/SettingsView.vala"
	settings_page = _tmp0_;
#line 24 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp1_ = settings_page_new ();
#line 24 "../demo/Views/SettingsView/SettingsView.vala"
	g_object_ref_sink (_tmp1_);
#line 24 "../demo/Views/SettingsView/SettingsView.vala"
	settings_page_two = _tmp1_;
#line 26 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp2_ = (GtkStack*) gtk_stack_new ();
#line 26 "../demo/Views/SettingsView/SettingsView.vala"
	g_object_ref_sink (_tmp2_);
#line 26 "../demo/Views/SettingsView/SettingsView.vala"
	stack = _tmp2_;
#line 27 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp3_ = stack;
#line 27 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp4_ = settings_page;
#line 27 "../demo/Views/SettingsView/SettingsView.vala"
	gtk_stack_add_named (_tmp3_, (GtkWidget*) _tmp4_, "settings_page");
#line 28 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp5_ = stack;
#line 28 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp6_ = settings_page_two;
#line 28 "../demo/Views/SettingsView/SettingsView.vala"
	gtk_stack_add_named (_tmp5_, (GtkWidget*) _tmp6_, "settings_page_two");
#line 30 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp7_ = stack;
#line 30 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp8_ = granite_settings_sidebar_new (_tmp7_);
#line 30 "../demo/Views/SettingsView/SettingsView.vala"
	g_object_ref_sink (_tmp8_);
#line 30 "../demo/Views/SettingsView/SettingsView.vala"
	settings_sidebar = _tmp8_;
#line 32 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp9_ = settings_sidebar;
#line 32 "../demo/Views/SettingsView/SettingsView.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp9_);
#line 33 "../demo/Views/SettingsView/SettingsView.vala"
	_tmp10_ = stack;
#line 33 "../demo/Views/SettingsView/SettingsView.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	_g_object_unref0 (settings_sidebar);
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	_g_object_unref0 (stack);
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	_g_object_unref0 (settings_page_two);
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	_g_object_unref0 (settings_page);
#line 21 "../demo/Views/SettingsView/SettingsView.vala"
	return obj;
#line 197 "SettingsView.c"
}

static void
settings_view_class_init (SettingsViewClass * klass,
                          gpointer klass_data)
{
#line 20 "../demo/Views/SettingsView/SettingsView.vala"
	settings_view_parent_class = g_type_class_peek_parent (klass);
#line 20 "../demo/Views/SettingsView/SettingsView.vala"
	G_OBJECT_CLASS (klass)->constructor = settings_view_constructor;
#line 208 "SettingsView.c"
}

static void
settings_view_instance_init (SettingsView * self,
                             gpointer klass)
{
}

static GType
settings_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (SettingsViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) settings_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (SettingsView), 0, (GInstanceInitFunc) settings_view_instance_init, NULL };
	GType settings_view_type_id;
	settings_view_type_id = g_type_register_static (gtk_paned_get_type (), "SettingsView", &g_define_type_info, 0);
	return settings_view_type_id;
}

GType
settings_view_get_type (void)
{
	static volatile gsize settings_view_type_id__volatile = 0;
	if (g_once_init_enter (&settings_view_type_id__volatile)) {
		GType settings_view_type_id;
		settings_view_type_id = settings_view_get_type_once ();
		g_once_init_leave (&settings_view_type_id__volatile, settings_view_type_id);
	}
	return settings_view_type_id__volatile;
}


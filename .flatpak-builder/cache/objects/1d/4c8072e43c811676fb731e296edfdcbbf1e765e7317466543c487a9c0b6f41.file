/* Avatar.c generated by valac 0.48.14, the Vala compiler
 * generated from Avatar.vala, do not modify */

/*
 *  Copyright (C) 2015-2017 Granite Developers (https://launchpad.net/granite)
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 *
 *  Authored by: Felipe Escoto <felescoto95@hotmail.com>, Rico Tzschichholz <ricotz@ubuntu.com>
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <cairo-gobject.h>
#include <gdk/gdk.h>
#include <stdio.h>
#include <float.h>
#include <math.h>

#define GRANITE_WIDGETS_TYPE_AVATAR (granite_widgets_avatar_get_type ())
#define GRANITE_WIDGETS_AVATAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_AVATAR, GraniteWidgetsAvatar))
#define GRANITE_WIDGETS_AVATAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_AVATAR, GraniteWidgetsAvatarClass))
#define GRANITE_WIDGETS_IS_AVATAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_AVATAR))
#define GRANITE_WIDGETS_IS_AVATAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_AVATAR))
#define GRANITE_WIDGETS_AVATAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_AVATAR, GraniteWidgetsAvatarClass))

typedef struct _GraniteWidgetsAvatar GraniteWidgetsAvatar;
typedef struct _GraniteWidgetsAvatarClass GraniteWidgetsAvatarClass;
typedef struct _GraniteWidgetsAvatarPrivate GraniteWidgetsAvatarPrivate;
enum  {
	GRANITE_WIDGETS_AVATAR_0_PROPERTY,
	GRANITE_WIDGETS_AVATAR_PIXBUF_PROPERTY,
	GRANITE_WIDGETS_AVATAR_NUM_PROPERTIES
};
static GParamSpec* granite_widgets_avatar_properties[GRANITE_WIDGETS_AVATAR_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _GraniteWidgetsAvatar {
	GtkEventBox parent_instance;
	GraniteWidgetsAvatarPrivate * priv;
};

struct _GraniteWidgetsAvatarClass {
	GtkEventBoxClass parent_class;
};

struct _GraniteWidgetsAvatarPrivate {
	gboolean draw_theme_background;
	gboolean is_default;
	gchar* orig_filename;
	gint* orig_pixel_size;
	GdkPixbuf* _pixbuf;
};

static gint GraniteWidgetsAvatar_private_offset;
static gpointer granite_widgets_avatar_parent_class = NULL;

GType granite_widgets_avatar_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsAvatar, g_object_unref)
static void granite_widgets_avatar_refresh_size_request (GraniteWidgetsAvatar* self);
static void _granite_widgets_avatar_refresh_size_request_g_object_notify (GObject* _sender,
                                                                   GParamSpec* pspec,
                                                                   gpointer self);
static void granite_widgets_avatar_dpi_change (GraniteWidgetsAvatar* self);
static void _granite_widgets_avatar_dpi_change_gdk_screen_monitors_changed (GdkScreen* _sender,
                                                                     gpointer self);
#define GRANITE_WIDGETS_AVATAR_DEFAULT_ICON "avatar-default"
#define GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN 4
GdkPixbuf* granite_widgets_avatar_get_pixbuf (GraniteWidgetsAvatar* self);
void granite_widgets_avatar_set_pixbuf (GraniteWidgetsAvatar* self,
                                        GdkPixbuf* value);
GraniteWidgetsAvatar* granite_widgets_avatar_new (void);
GraniteWidgetsAvatar* granite_widgets_avatar_construct (GType object_type);
GraniteWidgetsAvatar* granite_widgets_avatar_new_from_pixbuf (GdkPixbuf* pixbuf);
GraniteWidgetsAvatar* granite_widgets_avatar_construct_from_pixbuf (GType object_type,
                                                                    GdkPixbuf* pixbuf);
GraniteWidgetsAvatar* granite_widgets_avatar_new_from_file (const gchar* filepath,
                                                            gint pixel_size);
GraniteWidgetsAvatar* granite_widgets_avatar_construct_from_file (GType object_type,
                                                                  const gchar* filepath,
                                                                  gint pixel_size);
static void granite_widgets_avatar_load_image (GraniteWidgetsAvatar* self,
                                        const gchar* filepath,
                                        gint pixel_size);
static gint* _int_dup (gint* self);
void granite_widgets_avatar_show_default (GraniteWidgetsAvatar* self,
                                          gint pixel_size);
GraniteWidgetsAvatar* granite_widgets_avatar_new_with_default_icon (gint pixel_size);
GraniteWidgetsAvatar* granite_widgets_avatar_construct_with_default_icon (GType object_type,
                                                                          gint pixel_size);
static gboolean granite_widgets_avatar_real_draw (GtkWidget* base,
                                           cairo_t* cr);
void granite_drawing_utilities_cairo_rounded_rectangle (cairo_t* cr,
                                                        gdouble x,
                                                        gdouble y,
                                                        gdouble width,
                                                        gdouble height,
                                                        gdouble radius);
static GObject * granite_widgets_avatar_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties);
#define GRANITE_STYLE_CLASS_AVATAR "avatar"
static void granite_widgets_avatar_finalize (GObject * obj);
static GType granite_widgets_avatar_get_type_once (void);
static void _vala_granite_widgets_avatar_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec);
static void _vala_granite_widgets_avatar_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec);

static inline gpointer
granite_widgets_avatar_get_instance_private (GraniteWidgetsAvatar* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteWidgetsAvatar_private_offset);
}

static void
_granite_widgets_avatar_refresh_size_request_g_object_notify (GObject* _sender,
                                                              GParamSpec* pspec,
                                                              gpointer self)
{
#line 117 "../lib/Widgets/Avatar.vala"
	granite_widgets_avatar_refresh_size_request ((GraniteWidgetsAvatar*) self);
#line 147 "Avatar.c"
}

static void
_granite_widgets_avatar_dpi_change_gdk_screen_monitors_changed (GdkScreen* _sender,
                                                                gpointer self)
{
#line 118 "../lib/Widgets/Avatar.vala"
	granite_widgets_avatar_dpi_change ((GraniteWidgetsAvatar*) self);
#line 156 "Avatar.c"
}

GdkPixbuf*
granite_widgets_avatar_get_pixbuf (GraniteWidgetsAvatar* self)
{
	GdkPixbuf* result;
	GdkPixbuf* _tmp0_;
#line 56 "../lib/Widgets/Avatar.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 56 "../lib/Widgets/Avatar.vala"
	_tmp0_ = self->priv->_pixbuf;
#line 56 "../lib/Widgets/Avatar.vala"
	result = _tmp0_;
#line 56 "../lib/Widgets/Avatar.vala"
	return result;
#line 172 "Avatar.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 56 "../lib/Widgets/Avatar.vala"
	return self ? g_object_ref (self) : NULL;
#line 180 "Avatar.c"
}

void
granite_widgets_avatar_set_pixbuf (GraniteWidgetsAvatar* self,
                                   GdkPixbuf* value)
{
	GdkPixbuf* old_value;
#line 56 "../lib/Widgets/Avatar.vala"
	g_return_if_fail (self != NULL);
#line 56 "../lib/Widgets/Avatar.vala"
	old_value = granite_widgets_avatar_get_pixbuf (self);
#line 56 "../lib/Widgets/Avatar.vala"
	if (old_value != value) {
#line 194 "Avatar.c"
		GdkPixbuf* _tmp0_;
#line 56 "../lib/Widgets/Avatar.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 56 "../lib/Widgets/Avatar.vala"
		_g_object_unref0 (self->priv->_pixbuf);
#line 56 "../lib/Widgets/Avatar.vala"
		self->priv->_pixbuf = _tmp0_;
#line 56 "../lib/Widgets/Avatar.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_widgets_avatar_properties[GRANITE_WIDGETS_AVATAR_PIXBUF_PROPERTY]);
#line 204 "Avatar.c"
	}
}

/**
     * Makes new Avatar widget
     *
     */
GraniteWidgetsAvatar*
granite_widgets_avatar_construct (GType object_type)
{
	GraniteWidgetsAvatar * self = NULL;
#line 62 "../lib/Widgets/Avatar.vala"
	self = (GraniteWidgetsAvatar*) g_object_new (object_type, NULL);
#line 62 "../lib/Widgets/Avatar.vala"
	return self;
#line 220 "Avatar.c"
}

GraniteWidgetsAvatar*
granite_widgets_avatar_new (void)
{
#line 62 "../lib/Widgets/Avatar.vala"
	return granite_widgets_avatar_construct (GRANITE_WIDGETS_TYPE_AVATAR);
#line 228 "Avatar.c"
}

/**
    * Creates a new Avatar from the specified pixbuf
    *
    * @param pixbuf image to be used
    */
GraniteWidgetsAvatar*
granite_widgets_avatar_construct_from_pixbuf (GType object_type,
                                              GdkPixbuf* pixbuf)
{
	GraniteWidgetsAvatar * self = NULL;
#line 70 "../lib/Widgets/Avatar.vala"
	g_return_val_if_fail (pixbuf != NULL, NULL);
#line 71 "../lib/Widgets/Avatar.vala"
	self = (GraniteWidgetsAvatar*) g_object_new (object_type, "pixbuf", pixbuf, NULL);
#line 70 "../lib/Widgets/Avatar.vala"
	return self;
#line 247 "Avatar.c"
}

GraniteWidgetsAvatar*
granite_widgets_avatar_new_from_pixbuf (GdkPixbuf* pixbuf)
{
#line 70 "../lib/Widgets/Avatar.vala"
	return granite_widgets_avatar_construct_from_pixbuf (GRANITE_WIDGETS_TYPE_AVATAR, pixbuf);
#line 255 "Avatar.c"
}

/**
     * Creates a new Avatar from the specified filepath and icon size
     *
     * @param filepath image to be used
     * @param pixel_size to scale the image
     */
static gint*
_int_dup (gint* self)
{
	gint* dup;
#line 83 "../lib/Widgets/Avatar.vala"
	dup = g_new0 (gint, 1);
#line 83 "../lib/Widgets/Avatar.vala"
	memcpy (dup, self, sizeof (gint));
#line 83 "../lib/Widgets/Avatar.vala"
	return dup;
#line 274 "Avatar.c"
}

static gpointer
__int_dup0 (gpointer self)
{
#line 83 "../lib/Widgets/Avatar.vala"
	return self ? _int_dup (self) : NULL;
#line 282 "Avatar.c"
}

GraniteWidgetsAvatar*
granite_widgets_avatar_construct_from_file (GType object_type,
                                            const gchar* filepath,
                                            gint pixel_size)
{
	GraniteWidgetsAvatar * self = NULL;
	gchar* _tmp0_;
	gint* _tmp1_;
#line 80 "../lib/Widgets/Avatar.vala"
	g_return_val_if_fail (filepath != NULL, NULL);
#line 80 "../lib/Widgets/Avatar.vala"
	self = (GraniteWidgetsAvatar*) g_object_new (object_type, NULL);
#line 81 "../lib/Widgets/Avatar.vala"
	granite_widgets_avatar_load_image (self, filepath, pixel_size);
#line 82 "../lib/Widgets/Avatar.vala"
	_tmp0_ = g_strdup (filepath);
#line 82 "../lib/Widgets/Avatar.vala"
	_g_free0 (self->priv->orig_filename);
#line 82 "../lib/Widgets/Avatar.vala"
	self->priv->orig_filename = _tmp0_;
#line 83 "../lib/Widgets/Avatar.vala"
	_tmp1_ = __int_dup0 (&pixel_size);
#line 83 "../lib/Widgets/Avatar.vala"
	_g_free0 (self->priv->orig_pixel_size);
#line 83 "../lib/Widgets/Avatar.vala"
	self->priv->orig_pixel_size = _tmp1_;
#line 80 "../lib/Widgets/Avatar.vala"
	return self;
#line 313 "Avatar.c"
}

GraniteWidgetsAvatar*
granite_widgets_avatar_new_from_file (const gchar* filepath,
                                      gint pixel_size)
{
#line 80 "../lib/Widgets/Avatar.vala"
	return granite_widgets_avatar_construct_from_file (GRANITE_WIDGETS_TYPE_AVATAR, filepath, pixel_size);
#line 322 "Avatar.c"
}

static void
granite_widgets_avatar_load_image (GraniteWidgetsAvatar* self,
                                   const gchar* filepath,
                                   gint pixel_size)
{
	GError* _inner_error0_ = NULL;
#line 86 "../lib/Widgets/Avatar.vala"
	g_return_if_fail (self != NULL);
#line 86 "../lib/Widgets/Avatar.vala"
	g_return_if_fail (filepath != NULL);
#line 335 "Avatar.c"
	{
		gint size = 0;
		GdkPixbuf* _tmp0_ = NULL;
		GdkPixbuf* _tmp1_;
#line 88 "../lib/Widgets/Avatar.vala"
		size = pixel_size * gtk_widget_get_scale_factor ((GtkWidget*) self);
#line 89 "../lib/Widgets/Avatar.vala"
		_tmp1_ = gdk_pixbuf_new_from_file_at_size (filepath, size, size, &_inner_error0_);
#line 89 "../lib/Widgets/Avatar.vala"
		_tmp0_ = _tmp1_;
#line 89 "../lib/Widgets/Avatar.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 348 "Avatar.c"
			goto __catch0_g_error;
		}
#line 89 "../lib/Widgets/Avatar.vala"
		granite_widgets_avatar_set_pixbuf (self, _tmp0_);
#line 87 "../lib/Widgets/Avatar.vala"
		_g_object_unref0 (_tmp0_);
#line 355 "Avatar.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
#line 87 "../lib/Widgets/Avatar.vala"
		g_clear_error (&_inner_error0_);
#line 91 "../lib/Widgets/Avatar.vala"
		granite_widgets_avatar_show_default (self, pixel_size);
#line 364 "Avatar.c"
	}
	__finally0:
#line 87 "../lib/Widgets/Avatar.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 87 "../lib/Widgets/Avatar.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 87 "../lib/Widgets/Avatar.vala"
		g_clear_error (&_inner_error0_);
#line 87 "../lib/Widgets/Avatar.vala"
		return;
#line 375 "Avatar.c"
	}
}

/**
     * Creates a new Avatar with the default icon from theme without applying the css style
     *
     * @param pixel_size size of the icon to be loaded
     */
GraniteWidgetsAvatar*
granite_widgets_avatar_construct_with_default_icon (GType object_type,
                                                    gint pixel_size)
{
	GraniteWidgetsAvatar * self = NULL;
	gint* _tmp0_;
#line 100 "../lib/Widgets/Avatar.vala"
	self = (GraniteWidgetsAvatar*) g_object_new (object_type, NULL);
#line 101 "../lib/Widgets/Avatar.vala"
	granite_widgets_avatar_show_default (self, pixel_size);
#line 102 "../lib/Widgets/Avatar.vala"
	_tmp0_ = __int_dup0 (&pixel_size);
#line 102 "../lib/Widgets/Avatar.vala"
	_g_free0 (self->priv->orig_pixel_size);
#line 102 "../lib/Widgets/Avatar.vala"
	self->priv->orig_pixel_size = _tmp0_;
#line 100 "../lib/Widgets/Avatar.vala"
	return self;
#line 402 "Avatar.c"
}

GraniteWidgetsAvatar*
granite_widgets_avatar_new_with_default_icon (gint pixel_size)
{
#line 100 "../lib/Widgets/Avatar.vala"
	return granite_widgets_avatar_construct_with_default_icon (GRANITE_WIDGETS_TYPE_AVATAR, pixel_size);
#line 410 "Avatar.c"
}

static void
granite_widgets_avatar_refresh_size_request (GraniteWidgetsAvatar* self)
{
	GdkPixbuf* _tmp0_;
#line 121 "../lib/Widgets/Avatar.vala"
	g_return_if_fail (self != NULL);
#line 122 "../lib/Widgets/Avatar.vala"
	_tmp0_ = self->priv->_pixbuf;
#line 122 "../lib/Widgets/Avatar.vala"
	if (_tmp0_ != NULL) {
#line 423 "Avatar.c"
		gint scale_factor = 0;
		GdkPixbuf* _tmp1_;
		gint _tmp2_;
		gint _tmp3_;
		GdkPixbuf* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
#line 123 "../lib/Widgets/Avatar.vala"
		scale_factor = gtk_widget_get_scale_factor ((GtkWidget*) self);
#line 124 "../lib/Widgets/Avatar.vala"
		_tmp1_ = self->priv->_pixbuf;
#line 124 "../lib/Widgets/Avatar.vala"
		_tmp2_ = gdk_pixbuf_get_width (_tmp1_);
#line 124 "../lib/Widgets/Avatar.vala"
		_tmp3_ = _tmp2_;
#line 124 "../lib/Widgets/Avatar.vala"
		_tmp4_ = self->priv->_pixbuf;
#line 124 "../lib/Widgets/Avatar.vala"
		_tmp5_ = gdk_pixbuf_get_height (_tmp4_);
#line 124 "../lib/Widgets/Avatar.vala"
		_tmp6_ = _tmp5_;
#line 124 "../lib/Widgets/Avatar.vala"
		gtk_widget_set_size_request ((GtkWidget*) self, (_tmp3_ / scale_factor) + (GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN * 2), (_tmp6_ / scale_factor) + (GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN * 2));
#line 125 "../lib/Widgets/Avatar.vala"
		self->priv->draw_theme_background = TRUE;
#line 449 "Avatar.c"
	} else {
#line 127 "../lib/Widgets/Avatar.vala"
		gtk_widget_set_size_request ((GtkWidget*) self, 0, 0);
#line 453 "Avatar.c"
	}
#line 130 "../lib/Widgets/Avatar.vala"
	gtk_widget_queue_draw ((GtkWidget*) self);
#line 457 "Avatar.c"
}

static void
granite_widgets_avatar_dpi_change (GraniteWidgetsAvatar* self)
{
	gboolean _tmp0_ = FALSE;
#line 133 "../lib/Widgets/Avatar.vala"
	g_return_if_fail (self != NULL);
#line 134 "../lib/Widgets/Avatar.vala"
	if (self->priv->is_default) {
#line 468 "Avatar.c"
		gint* _tmp1_;
#line 134 "../lib/Widgets/Avatar.vala"
		_tmp1_ = self->priv->orig_pixel_size;
#line 134 "../lib/Widgets/Avatar.vala"
		_tmp0_ = _tmp1_ != NULL;
#line 474 "Avatar.c"
	} else {
#line 134 "../lib/Widgets/Avatar.vala"
		_tmp0_ = FALSE;
#line 478 "Avatar.c"
	}
#line 134 "../lib/Widgets/Avatar.vala"
	if (_tmp0_) {
#line 482 "Avatar.c"
		gint* _tmp2_;
#line 135 "../lib/Widgets/Avatar.vala"
		_tmp2_ = self->priv->orig_pixel_size;
#line 135 "../lib/Widgets/Avatar.vala"
		granite_widgets_avatar_show_default (self, *_tmp2_);
#line 488 "Avatar.c"
	} else {
		gboolean _tmp3_ = FALSE;
		const gchar* _tmp4_;
#line 137 "../lib/Widgets/Avatar.vala"
		_tmp4_ = self->priv->orig_filename;
#line 137 "../lib/Widgets/Avatar.vala"
		if (_tmp4_ != NULL) {
#line 496 "Avatar.c"
			gint* _tmp5_;
#line 137 "../lib/Widgets/Avatar.vala"
			_tmp5_ = self->priv->orig_pixel_size;
#line 137 "../lib/Widgets/Avatar.vala"
			_tmp3_ = _tmp5_ != NULL;
#line 502 "Avatar.c"
		} else {
#line 137 "../lib/Widgets/Avatar.vala"
			_tmp3_ = FALSE;
#line 506 "Avatar.c"
		}
#line 137 "../lib/Widgets/Avatar.vala"
		if (_tmp3_) {
#line 510 "Avatar.c"
			const gchar* _tmp6_;
			gint* _tmp7_;
#line 138 "../lib/Widgets/Avatar.vala"
			_tmp6_ = self->priv->orig_filename;
#line 138 "../lib/Widgets/Avatar.vala"
			_tmp7_ = self->priv->orig_pixel_size;
#line 138 "../lib/Widgets/Avatar.vala"
			granite_widgets_avatar_load_image (self, _tmp6_, *_tmp7_);
#line 519 "Avatar.c"
		}
	}
}

/**
     * Load the default avatar icon from theme into the widget without applying the css style
     *
     * @param pixel_size size of the icon to be loaded
     */
void
granite_widgets_avatar_show_default (GraniteWidgetsAvatar* self,
                                     gint pixel_size)
{
	GtkIconTheme* icon_theme = NULL;
	GtkIconTheme* _tmp0_;
	GtkIconTheme* _tmp1_;
	GError* _inner_error0_ = NULL;
#line 148 "../lib/Widgets/Avatar.vala"
	g_return_if_fail (self != NULL);
#line 149 "../lib/Widgets/Avatar.vala"
	_tmp0_ = gtk_icon_theme_get_default ();
#line 149 "../lib/Widgets/Avatar.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 149 "../lib/Widgets/Avatar.vala"
	icon_theme = _tmp1_;
#line 545 "Avatar.c"
	{
		GdkPixbuf* _tmp2_ = NULL;
		GdkPixbuf* _tmp3_;
#line 151 "../lib/Widgets/Avatar.vala"
		_tmp3_ = gtk_icon_theme_load_icon_for_scale (icon_theme, GRANITE_WIDGETS_AVATAR_DEFAULT_ICON, pixel_size, gtk_widget_get_scale_factor ((GtkWidget*) self), 0, &_inner_error0_);
#line 151 "../lib/Widgets/Avatar.vala"
		_tmp2_ = _tmp3_;
#line 151 "../lib/Widgets/Avatar.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 555 "Avatar.c"
			goto __catch0_g_error;
		}
#line 151 "../lib/Widgets/Avatar.vala"
		granite_widgets_avatar_set_pixbuf (self, _tmp2_);
#line 150 "../lib/Widgets/Avatar.vala"
		_g_object_unref0 (_tmp2_);
#line 562 "Avatar.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		FILE* _tmp4_;
		GError* _tmp5_;
		const gchar* _tmp6_;
#line 150 "../lib/Widgets/Avatar.vala"
		e = _inner_error0_;
#line 150 "../lib/Widgets/Avatar.vala"
		_inner_error0_ = NULL;
#line 153 "../lib/Widgets/Avatar.vala"
		_tmp4_ = stderr;
#line 153 "../lib/Widgets/Avatar.vala"
		_tmp5_ = e;
#line 153 "../lib/Widgets/Avatar.vala"
		_tmp6_ = _tmp5_->message;
#line 153 "../lib/Widgets/Avatar.vala"
		fprintf (_tmp4_, "Error setting default avatar icon: %s ", _tmp6_);
#line 150 "../lib/Widgets/Avatar.vala"
		_g_error_free0 (e);
#line 585 "Avatar.c"
	}
	__finally0:
#line 150 "../lib/Widgets/Avatar.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 150 "../lib/Widgets/Avatar.vala"
		_g_object_unref0 (icon_theme);
#line 150 "../lib/Widgets/Avatar.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 150 "../lib/Widgets/Avatar.vala"
		g_clear_error (&_inner_error0_);
#line 150 "../lib/Widgets/Avatar.vala"
		return;
#line 598 "Avatar.c"
	}
#line 156 "../lib/Widgets/Avatar.vala"
	self->priv->draw_theme_background = FALSE;
#line 157 "../lib/Widgets/Avatar.vala"
	self->priv->is_default = TRUE;
#line 148 "../lib/Widgets/Avatar.vala"
	_g_object_unref0 (icon_theme);
#line 606 "Avatar.c"
}

static gboolean
granite_widgets_avatar_real_draw (GtkWidget* base,
                                  cairo_t* cr)
{
	GraniteWidgetsAvatar * self;
	GdkPixbuf* _tmp0_;
	GtkStyleContext* style_context = NULL;
	GtkStyleContext* _tmp1_;
	gint width = 0;
	gint height = 0;
	gint scale_factor = 0;
	gboolean result = FALSE;
#line 160 "../lib/Widgets/Avatar.vala"
	self = (GraniteWidgetsAvatar*) base;
#line 160 "../lib/Widgets/Avatar.vala"
	g_return_val_if_fail (cr != NULL, FALSE);
#line 161 "../lib/Widgets/Avatar.vala"
	_tmp0_ = self->priv->_pixbuf;
#line 161 "../lib/Widgets/Avatar.vala"
	if (_tmp0_ == NULL) {
#line 162 "../lib/Widgets/Avatar.vala"
		result = GTK_WIDGET_CLASS (granite_widgets_avatar_parent_class)->draw ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_event_box_get_type (), GtkEventBox), cr);
#line 162 "../lib/Widgets/Avatar.vala"
		return result;
#line 633 "Avatar.c"
	}
#line 165 "../lib/Widgets/Avatar.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 165 "../lib/Widgets/Avatar.vala"
	style_context = _tmp1_;
#line 166 "../lib/Widgets/Avatar.vala"
	width = gtk_widget_get_allocated_width ((GtkWidget*) self) - (GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN * 2);
#line 167 "../lib/Widgets/Avatar.vala"
	height = gtk_widget_get_allocated_height ((GtkWidget*) self) - (GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN * 2);
#line 168 "../lib/Widgets/Avatar.vala"
	scale_factor = gtk_widget_get_scale_factor ((GtkWidget*) self);
#line 170 "../lib/Widgets/Avatar.vala"
	if (self->priv->draw_theme_background) {
#line 647 "Avatar.c"
		gint border_radius = 0;
		GtkStyleContext* _tmp2_;
		GtkStyleContext* _tmp3_;
		GValue _tmp4_ = {0};
		GValue _tmp5_;
		gint _tmp6_;
		gint crop_radius = 0;
		GdkPixbuf* _tmp7_;
		GtkStyleContext* _tmp8_;
		GtkStyleContext* _tmp9_;
#line 171 "../lib/Widgets/Avatar.vala"
		_tmp2_ = style_context;
#line 171 "../lib/Widgets/Avatar.vala"
		_tmp3_ = style_context;
#line 171 "../lib/Widgets/Avatar.vala"
		gtk_style_context_get_property (_tmp2_, GTK_STYLE_PROPERTY_BORDER_RADIUS, gtk_style_context_get_state (_tmp3_), &_tmp4_);
#line 171 "../lib/Widgets/Avatar.vala"
		_tmp5_ = _tmp4_;
#line 171 "../lib/Widgets/Avatar.vala"
		_tmp6_ = g_value_get_int (&_tmp5_);
#line 171 "../lib/Widgets/Avatar.vala"
		G_IS_VALUE (&_tmp5_) ? (g_value_unset (&_tmp5_), NULL) : NULL;
#line 171 "../lib/Widgets/Avatar.vala"
		border_radius = _tmp6_;
#line 172 "../lib/Widgets/Avatar.vala"
		crop_radius = MIN (width / 2, (border_radius * width) / 100);
#line 174 "../lib/Widgets/Avatar.vala"
		granite_drawing_utilities_cairo_rounded_rectangle (cr, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN, (gdouble) width, (gdouble) height, (gdouble) crop_radius);
#line 175 "../lib/Widgets/Avatar.vala"
		cairo_save (cr);
#line 176 "../lib/Widgets/Avatar.vala"
		cairo_scale (cr, 1.0 / scale_factor, 1.0 / scale_factor);
#line 177 "../lib/Widgets/Avatar.vala"
		_tmp7_ = self->priv->_pixbuf;
#line 177 "../lib/Widgets/Avatar.vala"
		gdk_cairo_set_source_pixbuf (cr, _tmp7_, (gdouble) (GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN * scale_factor), (gdouble) (GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN * scale_factor));
#line 178 "../lib/Widgets/Avatar.vala"
		cairo_fill_preserve (cr);
#line 179 "../lib/Widgets/Avatar.vala"
		cairo_restore (cr);
#line 180 "../lib/Widgets/Avatar.vala"
		_tmp8_ = style_context;
#line 180 "../lib/Widgets/Avatar.vala"
		gtk_render_background (_tmp8_, cr, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN, (gdouble) width, (gdouble) height);
#line 181 "../lib/Widgets/Avatar.vala"
		_tmp9_ = style_context;
#line 181 "../lib/Widgets/Avatar.vala"
		gtk_render_frame (_tmp9_, cr, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN, (gdouble) width, (gdouble) height);
#line 696 "Avatar.c"
	} else {
		GtkStyleContext* _tmp10_;
		GdkPixbuf* _tmp11_;
#line 184 "../lib/Widgets/Avatar.vala"
		cairo_save (cr);
#line 185 "../lib/Widgets/Avatar.vala"
		cairo_scale (cr, 1.0 / scale_factor, 1.0 / scale_factor);
#line 186 "../lib/Widgets/Avatar.vala"
		_tmp10_ = style_context;
#line 186 "../lib/Widgets/Avatar.vala"
		_tmp11_ = self->priv->_pixbuf;
#line 186 "../lib/Widgets/Avatar.vala"
		gtk_render_icon (_tmp10_, cr, _tmp11_, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN, (gdouble) GRANITE_WIDGETS_AVATAR_EXTRA_MARGIN);
#line 187 "../lib/Widgets/Avatar.vala"
		cairo_restore (cr);
#line 712 "Avatar.c"
	}
#line 190 "../lib/Widgets/Avatar.vala"
	result = GDK_EVENT_STOP;
#line 190 "../lib/Widgets/Avatar.vala"
	return result;
#line 718 "Avatar.c"
}

static GObject *
granite_widgets_avatar_constructor (GType type,
                                    guint n_construct_properties,
                                    GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteWidgetsAvatar * self;
	GtkStyleContext* style_context = NULL;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkStyleContext* _tmp2_;
	GdkScreen* _tmp3_;
#line 105 "../lib/Widgets/Avatar.vala"
	parent_class = G_OBJECT_CLASS (granite_widgets_avatar_parent_class);
#line 105 "../lib/Widgets/Avatar.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 105 "../lib/Widgets/Avatar.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_AVATAR, GraniteWidgetsAvatar);
#line 106 "../lib/Widgets/Avatar.vala"
	gtk_widget_set_valign ((GtkWidget*) self, GTK_ALIGN_CENTER);
#line 107 "../lib/Widgets/Avatar.vala"
	gtk_widget_set_halign ((GtkWidget*) self, GTK_ALIGN_CENTER);
#line 108 "../lib/Widgets/Avatar.vala"
	gtk_event_box_set_visible_window ((GtkEventBox*) self, FALSE);
#line 109 "../lib/Widgets/Avatar.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 109 "../lib/Widgets/Avatar.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 109 "../lib/Widgets/Avatar.vala"
	style_context = _tmp1_;
#line 110 "../lib/Widgets/Avatar.vala"
	_tmp2_ = style_context;
#line 110 "../lib/Widgets/Avatar.vala"
	gtk_style_context_add_class (_tmp2_, GRANITE_STYLE_CLASS_AVATAR);
#line 112 "../lib/Widgets/Avatar.vala"
	g_signal_connect_object ((GObject*) self, "notify::pixbuf", (GCallback) _granite_widgets_avatar_refresh_size_request_g_object_notify, self, 0);
#line 113 "../lib/Widgets/Avatar.vala"
	_tmp3_ = gdk_screen_get_default ();
#line 113 "../lib/Widgets/Avatar.vala"
	g_signal_connect_object (_tmp3_, "monitors-changed", (GCallback) _granite_widgets_avatar_dpi_change_gdk_screen_monitors_changed, self, 0);
#line 105 "../lib/Widgets/Avatar.vala"
	_g_object_unref0 (style_context);
#line 105 "../lib/Widgets/Avatar.vala"
	return obj;
#line 766 "Avatar.c"
}

static void
granite_widgets_avatar_class_init (GraniteWidgetsAvatarClass * klass,
                                   gpointer klass_data)
{
#line 47 "../lib/Widgets/Avatar.vala"
	granite_widgets_avatar_parent_class = g_type_class_peek_parent (klass);
#line 47 "../lib/Widgets/Avatar.vala"
	g_type_class_adjust_private_offset (klass, &GraniteWidgetsAvatar_private_offset);
#line 47 "../lib/Widgets/Avatar.vala"
	((GtkWidgetClass *) klass)->draw = (gboolean (*) (GtkWidget*, cairo_t*)) granite_widgets_avatar_real_draw;
#line 47 "../lib/Widgets/Avatar.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_widgets_avatar_get_property;
#line 47 "../lib/Widgets/Avatar.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_widgets_avatar_set_property;
#line 47 "../lib/Widgets/Avatar.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_widgets_avatar_constructor;
#line 47 "../lib/Widgets/Avatar.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_widgets_avatar_finalize;
#line 47 "../lib/Widgets/Avatar.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_AVATAR_PIXBUF_PROPERTY, granite_widgets_avatar_properties[GRANITE_WIDGETS_AVATAR_PIXBUF_PROPERTY] = g_param_spec_object ("pixbuf", "pixbuf", "pixbuf", gdk_pixbuf_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 789 "Avatar.c"
}

static void
granite_widgets_avatar_instance_init (GraniteWidgetsAvatar * self,
                                      gpointer klass)
{
#line 47 "../lib/Widgets/Avatar.vala"
	self->priv = granite_widgets_avatar_get_instance_private (self);
#line 50 "../lib/Widgets/Avatar.vala"
	self->priv->draw_theme_background = TRUE;
#line 52 "../lib/Widgets/Avatar.vala"
	self->priv->is_default = FALSE;
#line 53 "../lib/Widgets/Avatar.vala"
	self->priv->orig_filename = NULL;
#line 54 "../lib/Widgets/Avatar.vala"
	self->priv->orig_pixel_size = NULL;
#line 806 "Avatar.c"
}

static void
granite_widgets_avatar_finalize (GObject * obj)
{
	GraniteWidgetsAvatar * self;
	guint _tmp0_;
	GQuark _tmp1_;
	GdkScreen* _tmp2_;
	guint _tmp3_;
#line 47 "../lib/Widgets/Avatar.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_AVATAR, GraniteWidgetsAvatar);
#line 117 "../lib/Widgets/Avatar.vala"
	g_signal_parse_name ("notify::pixbuf", G_TYPE_OBJECT, &_tmp0_, &_tmp1_, TRUE);
#line 117 "../lib/Widgets/Avatar.vala"
	g_signal_handlers_disconnect_matched ((GObject*) self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, _tmp1_, NULL, (GCallback) _granite_widgets_avatar_refresh_size_request_g_object_notify, self);
#line 118 "../lib/Widgets/Avatar.vala"
	_tmp2_ = gdk_screen_get_default ();
#line 118 "../lib/Widgets/Avatar.vala"
	g_signal_parse_name ("monitors-changed", gdk_screen_get_type (), &_tmp3_, NULL, FALSE);
#line 118 "../lib/Widgets/Avatar.vala"
	g_signal_handlers_disconnect_matched (_tmp2_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, 0, NULL, (GCallback) _granite_widgets_avatar_dpi_change_gdk_screen_monitors_changed, self);
#line 53 "../lib/Widgets/Avatar.vala"
	_g_free0 (self->priv->orig_filename);
#line 54 "../lib/Widgets/Avatar.vala"
	_g_free0 (self->priv->orig_pixel_size);
#line 56 "../lib/Widgets/Avatar.vala"
	_g_object_unref0 (self->priv->_pixbuf);
#line 47 "../lib/Widgets/Avatar.vala"
	G_OBJECT_CLASS (granite_widgets_avatar_parent_class)->finalize (obj);
#line 837 "Avatar.c"
}

/**
 * The Avatar widget allowes to theme & crop images with css BORDER_RADIUS property in the .avatar class.
 *
 * ''Example''<<BR>>
 * {{{
 * public class AvatarView : Gtk.Grid {
 *     construct {
 *         var username = GLib.Environment.get_user_name ();
 *         var iconfile = @"/var/lib/AccountsService/icons/$username";
 *
 *         var avatar_dialog = new Granite.Widgets.Avatar.from_file (iconfile, 48);
 *
 *         var avatar_default_dialog = new Granite.Widgets.Avatar.with_default_icon (48);
 *
 *         row_spacing = 6;
 *         halign = Gtk.Align.CENTER;
 *         valign = Gtk.Align.CENTER;
 *         attach (avatar_dialog, 0, 0, 1, 1);
 *         attach (avatar_default_dialog, 0, 1, 1, 1);
 *     }
 * }
 * }}}
 */
static GType
granite_widgets_avatar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteWidgetsAvatarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_widgets_avatar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteWidgetsAvatar), 0, (GInstanceInitFunc) granite_widgets_avatar_instance_init, NULL };
	GType granite_widgets_avatar_type_id;
	granite_widgets_avatar_type_id = g_type_register_static (gtk_event_box_get_type (), "GraniteWidgetsAvatar", &g_define_type_info, 0);
	GraniteWidgetsAvatar_private_offset = g_type_add_instance_private (granite_widgets_avatar_type_id, sizeof (GraniteWidgetsAvatarPrivate));
	return granite_widgets_avatar_type_id;
}

GType
granite_widgets_avatar_get_type (void)
{
	static volatile gsize granite_widgets_avatar_type_id__volatile = 0;
	if (g_once_init_enter (&granite_widgets_avatar_type_id__volatile)) {
		GType granite_widgets_avatar_type_id;
		granite_widgets_avatar_type_id = granite_widgets_avatar_get_type_once ();
		g_once_init_leave (&granite_widgets_avatar_type_id__volatile, granite_widgets_avatar_type_id);
	}
	return granite_widgets_avatar_type_id__volatile;
}

static void
_vala_granite_widgets_avatar_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec)
{
	GraniteWidgetsAvatar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_AVATAR, GraniteWidgetsAvatar);
#line 47 "../lib/Widgets/Avatar.vala"
	switch (property_id) {
#line 47 "../lib/Widgets/Avatar.vala"
		case GRANITE_WIDGETS_AVATAR_PIXBUF_PROPERTY:
#line 47 "../lib/Widgets/Avatar.vala"
		g_value_set_object (value, granite_widgets_avatar_get_pixbuf (self));
#line 47 "../lib/Widgets/Avatar.vala"
		break;
#line 901 "Avatar.c"
		default:
#line 47 "../lib/Widgets/Avatar.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 47 "../lib/Widgets/Avatar.vala"
		break;
#line 907 "Avatar.c"
	}
}

static void
_vala_granite_widgets_avatar_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec)
{
	GraniteWidgetsAvatar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_AVATAR, GraniteWidgetsAvatar);
#line 47 "../lib/Widgets/Avatar.vala"
	switch (property_id) {
#line 47 "../lib/Widgets/Avatar.vala"
		case GRANITE_WIDGETS_AVATAR_PIXBUF_PROPERTY:
#line 47 "../lib/Widgets/Avatar.vala"
		granite_widgets_avatar_set_pixbuf (self, g_value_get_object (value));
#line 47 "../lib/Widgets/Avatar.vala"
		break;
#line 927 "Avatar.c"
		default:
#line 47 "../lib/Widgets/Avatar.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 47 "../lib/Widgets/Avatar.vala"
		break;
#line 933 "Avatar.c"
	}
}


/* IconFactory.c generated by valac 0.48.14, the Vala compiler
 * generated from IconFactory.vala, do not modify */

/*
 *  Copyright (c) 2019 elementary, Inc. (https://elementary.io)
 *                2011-2013 ammonkey <am.monkeyd@gmail.com>,
 *                          Mario Guerriero <mario@elementaryos.org>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <glib.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define GRANITE_SERVICES_TYPE_ICON_FACTORY (granite_services_icon_factory_get_type ())
#define GRANITE_SERVICES_ICON_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_TYPE_ICON_FACTORY, GraniteServicesIconFactory))
#define GRANITE_SERVICES_ICON_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_SERVICES_TYPE_ICON_FACTORY, GraniteServicesIconFactoryClass))
#define GRANITE_SERVICES_IS_ICON_FACTORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_TYPE_ICON_FACTORY))
#define GRANITE_SERVICES_IS_ICON_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_SERVICES_TYPE_ICON_FACTORY))
#define GRANITE_SERVICES_ICON_FACTORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_SERVICES_TYPE_ICON_FACTORY, GraniteServicesIconFactoryClass))

typedef struct _GraniteServicesIconFactory GraniteServicesIconFactory;
typedef struct _GraniteServicesIconFactoryClass GraniteServicesIconFactoryClass;
typedef struct _GraniteServicesIconFactoryPrivate GraniteServicesIconFactoryPrivate;
enum  {
	GRANITE_SERVICES_ICON_FACTORY_0_PROPERTY,
	GRANITE_SERVICES_ICON_FACTORY_NUM_PROPERTIES
};
static GParamSpec* granite_services_icon_factory_properties[GRANITE_SERVICES_ICON_FACTORY_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _GraniteServicesIconFactory {
	GObject parent_instance;
	GraniteServicesIconFactoryPrivate * priv;
};

struct _GraniteServicesIconFactoryClass {
	GObjectClass parent_class;
};

struct _GraniteServicesIconFactoryPrivate {
	GtkIconTheme* icon_theme;
};

extern GraniteServicesIconFactory* granite_services_icon_factory;
GraniteServicesIconFactory* granite_services_icon_factory = NULL;
static gint GraniteServicesIconFactory_private_offset;
static gpointer granite_services_icon_factory_parent_class = NULL;

GType granite_services_icon_factory_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteServicesIconFactory, g_object_unref)
GraniteServicesIconFactory* granite_services_icon_factory_new (void);
GraniteServicesIconFactory* granite_services_icon_factory_construct (GType object_type);
GraniteServicesIconFactory* granite_services_icon_factory_get_default (void);
GdkPixbuf* granite_services_icon_factory_load_symbolic_icon_from_gicon (GraniteServicesIconFactory* self,
                                                                        GtkStyleContext* style,
                                                                        GIcon* gicon,
                                                                        gint size) G_GNUC_DEPRECATED;
GdkPixbuf* granite_services_icon_factory_load_symbolic_icon (GraniteServicesIconFactory* self,
                                                             GtkStyleContext* style,
                                                             const gchar* iconname,
                                                             gint size) G_GNUC_DEPRECATED;
static void granite_services_icon_factory_finalize (GObject * obj);
static GType granite_services_icon_factory_get_type_once (void);

static inline gpointer
granite_services_icon_factory_get_instance_private (GraniteServicesIconFactory* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteServicesIconFactory_private_offset);
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 34 "../lib/Services/IconFactory.vala"
	return self ? g_object_ref (self) : NULL;
#line 98 "IconFactory.c"
}

GraniteServicesIconFactory*
granite_services_icon_factory_construct (GType object_type)
{
	GraniteServicesIconFactory * self = NULL;
	GtkIconTheme* _tmp0_;
	GtkIconTheme* _tmp1_;
#line 33 "../lib/Services/IconFactory.vala"
	self = (GraniteServicesIconFactory*) g_object_new (object_type, NULL);
#line 34 "../lib/Services/IconFactory.vala"
	_tmp0_ = gtk_icon_theme_get_default ();
#line 34 "../lib/Services/IconFactory.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 34 "../lib/Services/IconFactory.vala"
	_g_object_unref0 (self->priv->icon_theme);
#line 34 "../lib/Services/IconFactory.vala"
	self->priv->icon_theme = _tmp1_;
#line 33 "../lib/Services/IconFactory.vala"
	return self;
#line 119 "IconFactory.c"
}

GraniteServicesIconFactory*
granite_services_icon_factory_new (void)
{
#line 33 "../lib/Services/IconFactory.vala"
	return granite_services_icon_factory_construct (GRANITE_SERVICES_TYPE_ICON_FACTORY);
#line 127 "IconFactory.c"
}

GraniteServicesIconFactory*
granite_services_icon_factory_get_default (void)
{
	GraniteServicesIconFactory* _tmp0_;
	GraniteServicesIconFactory* _tmp3_;
	GraniteServicesIconFactory* _tmp4_;
	GraniteServicesIconFactory* _tmp5_;
	GraniteServicesIconFactory* result = NULL;
#line 38 "../lib/Services/IconFactory.vala"
	_tmp0_ = granite_services_icon_factory;
#line 38 "../lib/Services/IconFactory.vala"
	if (_tmp0_ != NULL) {
#line 142 "IconFactory.c"
		GraniteServicesIconFactory* _tmp1_;
		GraniteServicesIconFactory* _tmp2_;
#line 39 "../lib/Services/IconFactory.vala"
		_tmp1_ = granite_services_icon_factory;
#line 39 "../lib/Services/IconFactory.vala"
		_tmp2_ = _g_object_ref0 (_tmp1_);
#line 39 "../lib/Services/IconFactory.vala"
		result = _tmp2_;
#line 39 "../lib/Services/IconFactory.vala"
		return result;
#line 153 "IconFactory.c"
	}
#line 41 "../lib/Services/IconFactory.vala"
	_tmp3_ = granite_services_icon_factory_new ();
#line 41 "../lib/Services/IconFactory.vala"
	_g_object_unref0 (granite_services_icon_factory);
#line 41 "../lib/Services/IconFactory.vala"
	granite_services_icon_factory = _tmp3_;
#line 42 "../lib/Services/IconFactory.vala"
	_tmp4_ = granite_services_icon_factory;
#line 42 "../lib/Services/IconFactory.vala"
	_tmp5_ = _g_object_ref0 (_tmp4_);
#line 42 "../lib/Services/IconFactory.vala"
	result = _tmp5_;
#line 42 "../lib/Services/IconFactory.vala"
	return result;
#line 169 "IconFactory.c"
}

/**
         * Attempts to load a symbolic icon for the given {@link GLib.Icon}
         * with graceful fallback on the non-symbolic variant if the symbolic one
         * does not exist.
         *
         * Note that the resulting pixbuf may not be exactly the requested size;
         * an icon theme may have icons that differ slightly from their nominal sizes,
         * and in addition GTK+ will avoid scaling icons that it considers sufficiently close
         * to the requested size or for which the source image would have to be scaled up too far
         * (this maintains sharpness).
         *
         * @return a {@link Gdk.Pixbuf} with the rendered icon; this may be a newly created icon
         * or a new reference to an internal icon, so you must not modify the icon.
         * Returns null if the icon was not found in the theme hierarchy.
         */
GdkPixbuf*
granite_services_icon_factory_load_symbolic_icon_from_gicon (GraniteServicesIconFactory* self,
                                                             GtkStyleContext* style,
                                                             GIcon* gicon,
                                                             gint size)
{
	GdkPixbuf* px = NULL;
	GtkIconInfo* icon_info = NULL;
	GtkIconTheme* _tmp0_;
	GtkIconInfo* _tmp1_;
	GtkIconInfo* _tmp2_;
	GError* _inner_error0_ = NULL;
	GdkPixbuf* result = NULL;
#line 61 "../lib/Services/IconFactory.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 61 "../lib/Services/IconFactory.vala"
	g_return_val_if_fail (style != NULL, NULL);
#line 61 "../lib/Services/IconFactory.vala"
	g_return_val_if_fail (gicon != NULL, NULL);
#line 62 "../lib/Services/IconFactory.vala"
	px = NULL;
#line 64 "../lib/Services/IconFactory.vala"
	_tmp0_ = self->priv->icon_theme;
#line 64 "../lib/Services/IconFactory.vala"
	_tmp1_ = gtk_icon_theme_lookup_by_gicon (_tmp0_, gicon, size, GTK_ICON_LOOKUP_GENERIC_FALLBACK);
#line 64 "../lib/Services/IconFactory.vala"
	icon_info = _tmp1_;
#line 65 "../lib/Services/IconFactory.vala"
	_tmp2_ = icon_info;
#line 65 "../lib/Services/IconFactory.vala"
	if (_tmp2_ == NULL) {
#line 66 "../lib/Services/IconFactory.vala"
		result = NULL;
#line 66 "../lib/Services/IconFactory.vala"
		_g_object_unref0 (icon_info);
#line 66 "../lib/Services/IconFactory.vala"
		_g_object_unref0 (px);
#line 66 "../lib/Services/IconFactory.vala"
		return result;
#line 226 "IconFactory.c"
	}
	{
		GdkPixbuf* _tmp3_ = NULL;
		GtkIconInfo* _tmp4_;
		GdkPixbuf* _tmp5_;
		GdkPixbuf* _tmp6_;
#line 69 "../lib/Services/IconFactory.vala"
		_tmp4_ = icon_info;
#line 69 "../lib/Services/IconFactory.vala"
		_tmp5_ = gtk_icon_info_load_symbolic_for_context (_tmp4_, style, NULL, &_inner_error0_);
#line 69 "../lib/Services/IconFactory.vala"
		_tmp3_ = _tmp5_;
#line 69 "../lib/Services/IconFactory.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 241 "IconFactory.c"
			goto __catch0_g_error;
		}
#line 69 "../lib/Services/IconFactory.vala"
		_tmp6_ = _tmp3_;
#line 69 "../lib/Services/IconFactory.vala"
		_tmp3_ = NULL;
#line 69 "../lib/Services/IconFactory.vala"
		_g_object_unref0 (px);
#line 69 "../lib/Services/IconFactory.vala"
		px = _tmp6_;
#line 68 "../lib/Services/IconFactory.vala"
		_g_object_unref0 (_tmp3_);
#line 254 "IconFactory.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* err = NULL;
		FILE* _tmp7_;
		GError* _tmp8_;
		const gchar* _tmp9_;
#line 68 "../lib/Services/IconFactory.vala"
		err = _inner_error0_;
#line 68 "../lib/Services/IconFactory.vala"
		_inner_error0_ = NULL;
#line 71 "../lib/Services/IconFactory.vala"
		_tmp7_ = stderr;
#line 71 "../lib/Services/IconFactory.vala"
		_tmp8_ = err;
#line 71 "../lib/Services/IconFactory.vala"
		_tmp9_ = _tmp8_->message;
#line 71 "../lib/Services/IconFactory.vala"
		fprintf (_tmp7_, "Unable to load symbolic icon: %s", _tmp9_);
#line 68 "../lib/Services/IconFactory.vala"
		_g_error_free0 (err);
#line 277 "IconFactory.c"
	}
	__finally0:
#line 68 "../lib/Services/IconFactory.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 68 "../lib/Services/IconFactory.vala"
		_g_object_unref0 (icon_info);
#line 68 "../lib/Services/IconFactory.vala"
		_g_object_unref0 (px);
#line 68 "../lib/Services/IconFactory.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 68 "../lib/Services/IconFactory.vala"
		g_clear_error (&_inner_error0_);
#line 68 "../lib/Services/IconFactory.vala"
		return NULL;
#line 292 "IconFactory.c"
	}
#line 74 "../lib/Services/IconFactory.vala"
	result = px;
#line 74 "../lib/Services/IconFactory.vala"
	_g_object_unref0 (icon_info);
#line 74 "../lib/Services/IconFactory.vala"
	return result;
#line 300 "IconFactory.c"
}

/**
         * Loads a symbolic icon for the given icon name with a better chance
         * for loading a symbolic icon in case of fallback than with {@link Gtk.IconTheme.load_icon}
         *
         * Note that the resulting pixbuf may not be exactly the requested size;
         * an icon theme may have icons that differ slightly from their nominal sizes,
         * and in addition GTK+ will avoid scaling icons that it considers sufficiently close
         * to the requested size or for which the source image would have to be scaled up too far
         * (this maintains sharpness).
         *
         * Due to the way {@link Gtk.IconLookupFlags.GENERIC_FALLBACK} works, Gtk readily
         * falls back to the non-symbolic icon if the exact match for the provided name is not found,
         * and only after that fails tries to look up alternative names of the icon itself.
         * This function uses the same mechanism, but looks up the symbolic icon for the
         * name chosen after all the fallbacks, and returns the symbolic one if it's present.
         * This gives a better chance of getting a symbolic icon in case of fallbacks than
         * when using {@link Gtk.IconTheme.load_icon}
         *
         * @return a {@link Gdk.Pixbuf} with the rendered icon; this may be a newly created icon
         * or a new reference to an internal icon, so you must not modify the icon.
         * Returns null if the icon was not found in the theme hierarchy.
         */
GdkPixbuf*
granite_services_icon_factory_load_symbolic_icon (GraniteServicesIconFactory* self,
                                                  GtkStyleContext* style,
                                                  const gchar* iconname,
                                                  gint size)
{
	GThemedIcon* themed_icon = NULL;
	GThemedIcon* _tmp0_;
	GdkPixbuf* _tmp1_;
	GdkPixbuf* result = NULL;
#line 100 "../lib/Services/IconFactory.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 100 "../lib/Services/IconFactory.vala"
	g_return_val_if_fail (style != NULL, NULL);
#line 100 "../lib/Services/IconFactory.vala"
	g_return_val_if_fail (iconname != NULL, NULL);
#line 101 "../lib/Services/IconFactory.vala"
	_tmp0_ = (GThemedIcon*) g_themed_icon_new_with_default_fallbacks (iconname);
#line 101 "../lib/Services/IconFactory.vala"
	themed_icon = _tmp0_;
#line 103 "../lib/Services/IconFactory.vala"
	_tmp1_ = granite_services_icon_factory_load_symbolic_icon_from_gicon (self, style, G_TYPE_CHECK_INSTANCE_CAST (themed_icon, g_icon_get_type (), GIcon), size);
#line 103 "../lib/Services/IconFactory.vala"
	result = _tmp1_;
#line 103 "../lib/Services/IconFactory.vala"
	_g_object_unref0 (themed_icon);
#line 103 "../lib/Services/IconFactory.vala"
	return result;
#line 353 "IconFactory.c"
}

static void
granite_services_icon_factory_class_init (GraniteServicesIconFactoryClass * klass,
                                          gpointer klass_data)
{
#line 29 "../lib/Services/IconFactory.vala"
	granite_services_icon_factory_parent_class = g_type_class_peek_parent (klass);
#line 29 "../lib/Services/IconFactory.vala"
	g_type_class_adjust_private_offset (klass, &GraniteServicesIconFactory_private_offset);
#line 29 "../lib/Services/IconFactory.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_services_icon_factory_finalize;
#line 366 "IconFactory.c"
}

static void
granite_services_icon_factory_instance_init (GraniteServicesIconFactory * self,
                                             gpointer klass)
{
#line 29 "../lib/Services/IconFactory.vala"
	self->priv = granite_services_icon_factory_get_instance_private (self);
#line 375 "IconFactory.c"
}

static void
granite_services_icon_factory_finalize (GObject * obj)
{
	GraniteServicesIconFactory * self;
#line 29 "../lib/Services/IconFactory.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_SERVICES_TYPE_ICON_FACTORY, GraniteServicesIconFactory);
#line 31 "../lib/Services/IconFactory.vala"
	_g_object_unref0 (self->priv->icon_theme);
#line 29 "../lib/Services/IconFactory.vala"
	G_OBJECT_CLASS (granite_services_icon_factory_parent_class)->finalize (obj);
#line 388 "IconFactory.c"
}

/**
     * This class provides an easy way to access symbolic icons.
     */
static GType
granite_services_icon_factory_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteServicesIconFactoryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_services_icon_factory_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteServicesIconFactory), 0, (GInstanceInitFunc) granite_services_icon_factory_instance_init, NULL };
	GType granite_services_icon_factory_type_id;
	granite_services_icon_factory_type_id = g_type_register_static (G_TYPE_OBJECT, "GraniteServicesIconFactory", &g_define_type_info, 0);
	GraniteServicesIconFactory_private_offset = g_type_add_instance_private (granite_services_icon_factory_type_id, sizeof (GraniteServicesIconFactoryPrivate));
	return granite_services_icon_factory_type_id;
}

GType
granite_services_icon_factory_get_type (void)
{
	static volatile gsize granite_services_icon_factory_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_icon_factory_type_id__volatile)) {
		GType granite_services_icon_factory_type_id;
		granite_services_icon_factory_type_id = granite_services_icon_factory_get_type_once ();
		g_once_init_leave (&granite_services_icon_factory_type_id__volatile, granite_services_icon_factory_type_id);
	}
	return granite_services_icon_factory_type_id__volatile;
}


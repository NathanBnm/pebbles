/* HistoryManager.c generated by valac 0.48.14, the Vala compiler
 * generated from HistoryManager.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 *              Saunak Biswas  <saunakbis97@gmail.com>
 */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_HISTORY_MANAGER (pebbles_history_manager_get_type ())
#define PEBBLES_HISTORY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_HISTORY_MANAGER, PebblesHistoryManager))
#define PEBBLES_HISTORY_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_HISTORY_MANAGER, PebblesHistoryManagerClass))
#define PEBBLES_IS_HISTORY_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_HISTORY_MANAGER))
#define PEBBLES_IS_HISTORY_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_HISTORY_MANAGER))
#define PEBBLES_HISTORY_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_HISTORY_MANAGER, PebblesHistoryManagerClass))

typedef struct _PebblesHistoryManager PebblesHistoryManager;
typedef struct _PebblesHistoryManagerClass PebblesHistoryManagerClass;
typedef struct _PebblesHistoryManagerPrivate PebblesHistoryManagerPrivate;

#define PEBBLES_TYPE_EVALUATION_RESULT (pebbles_evaluation_result_get_type ())
#define PEBBLES_EVALUATION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_EVALUATION_RESULT, PebblesEvaluationResult))
#define PEBBLES_EVALUATION_RESULT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_EVALUATION_RESULT, PebblesEvaluationResultClass))
#define PEBBLES_IS_EVALUATION_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_EVALUATION_RESULT))
#define PEBBLES_IS_EVALUATION_RESULT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_EVALUATION_RESULT))
#define PEBBLES_EVALUATION_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_EVALUATION_RESULT, PebblesEvaluationResultClass))

typedef struct _PebblesEvaluationResult PebblesEvaluationResult;
typedef struct _PebblesEvaluationResultClass PebblesEvaluationResultClass;
typedef enum  {
	PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_SCIF,
	PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_CALC,
	PEBBLES_EVALUATION_RESULT_RESULT_SOURCE_PROG
} PebblesEvaluationResultResultSource;

#define PEBBLES_EVALUATION_RESULT_TYPE_RESULT_SOURCE (pebbles_evaluation_result_result_source_get_type ())
typedef enum  {
	PEBBLES_GLOBAL_ANGLE_UNIT_DEG = 0,
	PEBBLES_GLOBAL_ANGLE_UNIT_RAD = 1,
	PEBBLES_GLOBAL_ANGLE_UNIT_GRAD = 2
} PebblesGlobalAngleUnit;

#define PEBBLES_TYPE_GLOBAL_ANGLE_UNIT (pebbles_global_angle_unit_get_type ())
typedef enum  {
	PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_NONE,
	PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_INT,
	PEBBLES_EVALUATION_RESULT_CALCULUS_RESULT_MODE_DER
} PebblesEvaluationResultCalculusResultMode;

#define PEBBLES_EVALUATION_RESULT_TYPE_CALCULUS_RESULT_MODE (pebbles_evaluation_result_calculus_result_mode_get_type ())

#define PEBBLES_PROGRAMMER_CALCULATOR_TYPE_TOKEN (pebbles_programmer_calculator_token_get_type ())
typedef struct _PebblesProgrammerCalculatorToken PebblesProgrammerCalculatorToken;
typedef enum  {
	PEBBLES_PROGRAMMER_CALCULATOR_TOKEN_TYPE_OPERATOR,
	PEBBLES_PROGRAMMER_CALCULATOR_TOKEN_TYPE_OPERAND,
	PEBBLES_PROGRAMMER_CALCULATOR_TOKEN_TYPE_PARENTHESIS
} PebblesProgrammerCalculatorTokenType;

#define PEBBLES_PROGRAMMER_CALCULATOR_TYPE_TOKEN_TYPE (pebbles_programmer_calculator_token_type_get_type ())
typedef enum  {
	PEBBLES_NUMBER_SYSTEM_BINARY,
	PEBBLES_NUMBER_SYSTEM_OCTAL,
	PEBBLES_NUMBER_SYSTEM_DECIMAL,
	PEBBLES_NUMBER_SYSTEM_HEXADECIMAL
} PebblesNumberSystem;

#define PEBBLES_TYPE_NUMBER_SYSTEM (pebbles_number_system_get_type ())
typedef enum  {
	PEBBLES_GLOBAL_WORD_LENGTH_QWD = 0,
	PEBBLES_GLOBAL_WORD_LENGTH_DWD = 1,
	PEBBLES_GLOBAL_WORD_LENGTH_WRD = 2,
	PEBBLES_GLOBAL_WORD_LENGTH_BYT = 3
} PebblesGlobalWordLength;

#define PEBBLES_TYPE_GLOBAL_WORD_LENGTH (pebbles_global_word_length_get_type ())
typedef struct _PebblesParamSpecHistoryManager PebblesParamSpecHistoryManager;

struct _PebblesHistoryManager {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesHistoryManagerPrivate * priv;
};

struct _PebblesHistoryManagerClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesHistoryManager *self);
};

struct _PebblesHistoryManagerPrivate {
	GList* _history;
};

struct _PebblesProgrammerCalculatorToken {
	gchar* token;
	PebblesProgrammerCalculatorTokenType type;
	PebblesNumberSystem number_system;
};

struct _PebblesParamSpecHistoryManager {
	GParamSpec parent_instance;
};

static gint PebblesHistoryManager_private_offset;
static gpointer pebbles_history_manager_parent_class = NULL;

gpointer pebbles_history_manager_ref (gpointer instance);
void pebbles_history_manager_unref (gpointer instance);
GParamSpec* pebbles_param_spec_history_manager (const gchar* name,
                                                const gchar* nick,
                                                const gchar* blurb,
                                                GType object_type,
                                                GParamFlags flags);
void pebbles_value_set_history_manager (GValue* value,
                                        gpointer v_object);
void pebbles_value_take_history_manager (GValue* value,
                                         gpointer v_object);
gpointer pebbles_value_get_history_manager (const GValue* value);
GType pebbles_history_manager_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesHistoryManager, pebbles_history_manager_unref)
gpointer pebbles_evaluation_result_ref (gpointer instance);
void pebbles_evaluation_result_unref (gpointer instance);
GParamSpec* pebbles_param_spec_evaluation_result (const gchar* name,
                                                  const gchar* nick,
                                                  const gchar* blurb,
                                                  GType object_type,
                                                  GParamFlags flags);
void pebbles_value_set_evaluation_result (GValue* value,
                                          gpointer v_object);
void pebbles_value_take_evaluation_result (GValue* value,
                                           gpointer v_object);
gpointer pebbles_value_get_evaluation_result (const GValue* value);
GType pebbles_evaluation_result_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesEvaluationResult, pebbles_evaluation_result_unref)
static void _pebbles_evaluation_result_unref0_ (gpointer var);
static inline void _g_list_free__pebbles_evaluation_result_unref0_ (GList* self);
GType pebbles_evaluation_result_result_source_get_type (void) G_GNUC_CONST;
GType pebbles_global_angle_unit_get_type (void) G_GNUC_CONST;
GType pebbles_evaluation_result_calculus_result_mode_get_type (void) G_GNUC_CONST;
GType pebbles_programmer_calculator_token_get_type (void) G_GNUC_CONST;
GType pebbles_programmer_calculator_token_type_get_type (void) G_GNUC_CONST;
GType pebbles_number_system_get_type (void) G_GNUC_CONST;
PebblesProgrammerCalculatorToken* pebbles_programmer_calculator_token_dup (const PebblesProgrammerCalculatorToken* self);
void pebbles_programmer_calculator_token_free (PebblesProgrammerCalculatorToken* self);
void pebbles_programmer_calculator_token_copy (const PebblesProgrammerCalculatorToken* self,
                                               PebblesProgrammerCalculatorToken* dest);
void pebbles_programmer_calculator_token_destroy (PebblesProgrammerCalculatorToken* self);
GType pebbles_global_word_length_get_type (void) G_GNUC_CONST;
void pebbles_history_manager_append_from_strings (PebblesHistoryManager* self,
                                                  PebblesEvaluationResultResultSource result_source,
                                                  const gchar* problem_expression,
                                                  const gchar* _result_,
                                                  PebblesGlobalAngleUnit* angle_mode,
                                                  PebblesEvaluationResultCalculusResultMode* calc_mode,
                                                  gdouble* int_limit_a,
                                                  gdouble* int_limit_b,
                                                  gdouble* derivative_point,
                                                  PebblesProgrammerCalculatorToken* token_list,
                                                  gint token_list_length1,
                                                  gboolean* output,
                                                  gint output_length1,
                                                  PebblesGlobalWordLength* output_word_length);
PebblesEvaluationResult* pebbles_evaluation_result_new (const gchar* problem_expression,
                                                        const gchar* _result_,
                                                        PebblesGlobalAngleUnit* angle_mode,
                                                        PebblesEvaluationResultCalculusResultMode* calc_mode,
                                                        gdouble* int_limit_a,
                                                        gdouble* int_limit_b,
                                                        gdouble* derivative_point,
                                                        PebblesEvaluationResultResultSource* result_source,
                                                        PebblesProgrammerCalculatorToken* problem_expression_prog,
                                                        gint problem_expression_prog_length1,
                                                        gboolean* prog_output,
                                                        gint prog_output_length1,
                                                        PebblesGlobalWordLength* word_length);
PebblesEvaluationResult* pebbles_evaluation_result_construct (GType object_type,
                                                              const gchar* problem_expression,
                                                              const gchar* _result_,
                                                              PebblesGlobalAngleUnit* angle_mode,
                                                              PebblesEvaluationResultCalculusResultMode* calc_mode,
                                                              gdouble* int_limit_a,
                                                              gdouble* int_limit_b,
                                                              gdouble* derivative_point,
                                                              PebblesEvaluationResultResultSource* result_source,
                                                              PebblesProgrammerCalculatorToken* problem_expression_prog,
                                                              gint problem_expression_prog_length1,
                                                              gboolean* prog_output,
                                                              gint prog_output_length1,
                                                              PebblesGlobalWordLength* word_length);
void pebbles_history_manager_append_from_evaluation_result (PebblesHistoryManager* self,
                                                            PebblesEvaluationResult* eval_res);
PebblesEvaluationResult* pebbles_history_manager_get_nth_evaluation_result (PebblesHistoryManager* self,
                                                                            guint n);
PebblesEvaluationResult* pebbles_history_manager_get_last_evaluation_result (PebblesHistoryManager* self,
                                                                             PebblesEvaluationResultResultSource* mode);
PebblesEvaluationResultResultSource pebbles_evaluation_result_get_result_source (PebblesEvaluationResult* self);
static gboolean _pebbles_evaluation_result_result_source_equal (const PebblesEvaluationResultResultSource * s1,
                                                         const PebblesEvaluationResultResultSource * s2);
guint pebbles_history_manager_length (PebblesHistoryManager* self,
                                      PebblesEvaluationResultResultSource* mode);
gboolean pebbles_history_manager_is_empty (PebblesHistoryManager* self,
                                           PebblesEvaluationResultResultSource* mode);
PebblesHistoryManager* pebbles_history_manager_new (void);
PebblesHistoryManager* pebbles_history_manager_construct (GType object_type);
static void pebbles_history_manager_finalize (PebblesHistoryManager * obj);
static GType pebbles_history_manager_get_type_once (void);

static inline gpointer
pebbles_history_manager_get_instance_private (PebblesHistoryManager* self)
{
	return G_STRUCT_MEMBER_P (self, PebblesHistoryManager_private_offset);
}

static void
_pebbles_evaluation_result_unref0_ (gpointer var)
{
#line 24 "../src/Core/HistoryManager.vala"
	(var == NULL) ? NULL : (var = (pebbles_evaluation_result_unref (var), NULL));
#line 243 "HistoryManager.c"
}

static inline void
_g_list_free__pebbles_evaluation_result_unref0_ (GList* self)
{
#line 24 "../src/Core/HistoryManager.vala"
	g_list_free_full (self, (GDestroyNotify) _pebbles_evaluation_result_unref0_);
#line 251 "HistoryManager.c"
}

void
pebbles_history_manager_append_from_strings (PebblesHistoryManager* self,
                                             PebblesEvaluationResultResultSource result_source,
                                             const gchar* problem_expression,
                                             const gchar* _result_,
                                             PebblesGlobalAngleUnit* angle_mode,
                                             PebblesEvaluationResultCalculusResultMode* calc_mode,
                                             gdouble* int_limit_a,
                                             gdouble* int_limit_b,
                                             gdouble* derivative_point,
                                             PebblesProgrammerCalculatorToken* token_list,
                                             gint token_list_length1,
                                             gboolean* output,
                                             gint output_length1,
                                             PebblesGlobalWordLength* output_word_length)
{
	PebblesEvaluationResult* _tmp0_;
#line 26 "../src/Core/HistoryManager.vala"
	g_return_if_fail (self != NULL);
#line 26 "../src/Core/HistoryManager.vala"
	g_return_if_fail (problem_expression != NULL);
#line 26 "../src/Core/HistoryManager.vala"
	g_return_if_fail (_result_ != NULL);
#line 38 "../src/Core/HistoryManager.vala"
	_tmp0_ = pebbles_evaluation_result_new (problem_expression, _result_, angle_mode, calc_mode, int_limit_a, int_limit_b, derivative_point, &result_source, token_list, token_list_length1, output, output_length1, output_word_length);
#line 38 "../src/Core/HistoryManager.vala"
	self->priv->_history = g_list_append (self->priv->_history, _tmp0_);
#line 281 "HistoryManager.c"
}

static gpointer
_pebbles_evaluation_result_ref0 (gpointer self)
{
#line 52 "../src/Core/HistoryManager.vala"
	return self ? pebbles_evaluation_result_ref (self) : NULL;
#line 289 "HistoryManager.c"
}

void
pebbles_history_manager_append_from_evaluation_result (PebblesHistoryManager* self,
                                                       PebblesEvaluationResult* eval_res)
{
	PebblesEvaluationResult* _tmp0_;
#line 51 "../src/Core/HistoryManager.vala"
	g_return_if_fail (self != NULL);
#line 51 "../src/Core/HistoryManager.vala"
	g_return_if_fail (eval_res != NULL);
#line 52 "../src/Core/HistoryManager.vala"
	_tmp0_ = _pebbles_evaluation_result_ref0 (eval_res);
#line 52 "../src/Core/HistoryManager.vala"
	self->priv->_history = g_list_append (self->priv->_history, _tmp0_);
#line 305 "HistoryManager.c"
}

PebblesEvaluationResult*
pebbles_history_manager_get_nth_evaluation_result (PebblesHistoryManager* self,
                                                   guint n)
{
	GList* _tmp0_;
	gconstpointer _tmp1_;
	PebblesEvaluationResult* _tmp2_;
	PebblesEvaluationResult* result = NULL;
#line 55 "../src/Core/HistoryManager.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 56 "../src/Core/HistoryManager.vala"
	_tmp0_ = self->priv->_history;
#line 56 "../src/Core/HistoryManager.vala"
	_tmp1_ = g_list_nth_data (_tmp0_, n);
#line 56 "../src/Core/HistoryManager.vala"
	_tmp2_ = _pebbles_evaluation_result_ref0 ((PebblesEvaluationResult*) _tmp1_);
#line 56 "../src/Core/HistoryManager.vala"
	result = _tmp2_;
#line 56 "../src/Core/HistoryManager.vala"
	return result;
#line 328 "HistoryManager.c"
}

static gboolean
_pebbles_evaluation_result_result_source_equal (const PebblesEvaluationResultResultSource * s1,
                                                const PebblesEvaluationResultResultSource * s2)
{
#line 62 "../src/Core/HistoryManager.vala"
	if (s1 == s2) {
#line 62 "../src/Core/HistoryManager.vala"
		return TRUE;
#line 339 "HistoryManager.c"
	}
#line 62 "../src/Core/HistoryManager.vala"
	if (s1 == NULL) {
#line 62 "../src/Core/HistoryManager.vala"
		return FALSE;
#line 345 "HistoryManager.c"
	}
#line 62 "../src/Core/HistoryManager.vala"
	if (s2 == NULL) {
#line 62 "../src/Core/HistoryManager.vala"
		return FALSE;
#line 351 "HistoryManager.c"
	}
#line 62 "../src/Core/HistoryManager.vala"
	return (*s1) == (*s2);
#line 355 "HistoryManager.c"
}

PebblesEvaluationResult*
pebbles_history_manager_get_last_evaluation_result (PebblesHistoryManager* self,
                                                    PebblesEvaluationResultResultSource* mode)
{
	GList* last = NULL;
	GList* _tmp13_;
	GList* _tmp14_;
	GList* _tmp15_;
	gconstpointer _tmp16_;
	PebblesEvaluationResult* _tmp17_;
	PebblesEvaluationResult* result = NULL;
#line 59 "../src/Core/HistoryManager.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 60 "../src/Core/HistoryManager.vala"
	if (mode != NULL) {
#line 373 "HistoryManager.c"
		{
			guint i = 0U;
			GList* _tmp0_;
#line 61 "../src/Core/HistoryManager.vala"
			_tmp0_ = self->priv->_history;
#line 61 "../src/Core/HistoryManager.vala"
			i = g_list_length (_tmp0_) - 1;
#line 381 "HistoryManager.c"
			{
				gboolean _tmp1_ = FALSE;
#line 61 "../src/Core/HistoryManager.vala"
				_tmp1_ = TRUE;
#line 61 "../src/Core/HistoryManager.vala"
				while (TRUE) {
#line 388 "HistoryManager.c"
					gboolean _tmp3_ = FALSE;
					GList* _tmp4_;
					gconstpointer _tmp5_;
#line 61 "../src/Core/HistoryManager.vala"
					if (!_tmp1_) {
#line 394 "HistoryManager.c"
						guint _tmp2_;
#line 61 "../src/Core/HistoryManager.vala"
						_tmp2_ = i;
#line 61 "../src/Core/HistoryManager.vala"
						i = _tmp2_ - 1;
#line 400 "HistoryManager.c"
					}
#line 61 "../src/Core/HistoryManager.vala"
					_tmp1_ = FALSE;
#line 61 "../src/Core/HistoryManager.vala"
					if (!(i >= ((guint) 0))) {
#line 61 "../src/Core/HistoryManager.vala"
						break;
#line 408 "HistoryManager.c"
					}
#line 62 "../src/Core/HistoryManager.vala"
					_tmp4_ = self->priv->_history;
#line 62 "../src/Core/HistoryManager.vala"
					_tmp5_ = g_list_nth_data (_tmp4_, i);
#line 62 "../src/Core/HistoryManager.vala"
					if (((PebblesEvaluationResult*) _tmp5_) != NULL) {
#line 416 "HistoryManager.c"
						GList* _tmp6_;
						gconstpointer _tmp7_;
						PebblesEvaluationResultResultSource _tmp8_;
						PebblesEvaluationResultResultSource _tmp9_;
#line 62 "../src/Core/HistoryManager.vala"
						_tmp6_ = self->priv->_history;
#line 62 "../src/Core/HistoryManager.vala"
						_tmp7_ = g_list_nth_data (_tmp6_, i);
#line 62 "../src/Core/HistoryManager.vala"
						_tmp8_ = pebbles_evaluation_result_get_result_source ((PebblesEvaluationResult*) _tmp7_);
#line 62 "../src/Core/HistoryManager.vala"
						_tmp9_ = _tmp8_;
#line 62 "../src/Core/HistoryManager.vala"
						_tmp3_ = _pebbles_evaluation_result_result_source_equal (&_tmp9_, mode) == TRUE;
#line 431 "HistoryManager.c"
					} else {
#line 62 "../src/Core/HistoryManager.vala"
						_tmp3_ = FALSE;
#line 435 "HistoryManager.c"
					}
#line 62 "../src/Core/HistoryManager.vala"
					if (_tmp3_) {
#line 439 "HistoryManager.c"
						GList* _tmp10_;
						gconstpointer _tmp11_;
						PebblesEvaluationResult* _tmp12_;
#line 63 "../src/Core/HistoryManager.vala"
						_tmp10_ = self->priv->_history;
#line 63 "../src/Core/HistoryManager.vala"
						_tmp11_ = g_list_nth_data (_tmp10_, i);
#line 63 "../src/Core/HistoryManager.vala"
						_tmp12_ = _pebbles_evaluation_result_ref0 ((PebblesEvaluationResult*) _tmp11_);
#line 63 "../src/Core/HistoryManager.vala"
						result = _tmp12_;
#line 63 "../src/Core/HistoryManager.vala"
						return result;
#line 453 "HistoryManager.c"
					}
				}
			}
		}
	}
#line 67 "../src/Core/HistoryManager.vala"
	_tmp13_ = self->priv->_history;
#line 67 "../src/Core/HistoryManager.vala"
	_tmp14_ = g_list_last (_tmp13_);
#line 67 "../src/Core/HistoryManager.vala"
	last = _tmp14_;
#line 68 "../src/Core/HistoryManager.vala"
	_tmp15_ = last;
#line 68 "../src/Core/HistoryManager.vala"
	_tmp16_ = g_list_nth_data (_tmp15_, (guint) 0);
#line 68 "../src/Core/HistoryManager.vala"
	_tmp17_ = _pebbles_evaluation_result_ref0 ((PebblesEvaluationResult*) _tmp16_);
#line 68 "../src/Core/HistoryManager.vala"
	result = _tmp17_;
#line 68 "../src/Core/HistoryManager.vala"
	return result;
#line 475 "HistoryManager.c"
}

guint
pebbles_history_manager_length (PebblesHistoryManager* self,
                                PebblesEvaluationResultResultSource* mode)
{
	GList* _tmp11_;
	guint result = 0U;
#line 71 "../src/Core/HistoryManager.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 72 "../src/Core/HistoryManager.vala"
	if (mode != NULL) {
#line 488 "HistoryManager.c"
		guint count = 0U;
#line 73 "../src/Core/HistoryManager.vala"
		count = (guint) 0;
#line 492 "HistoryManager.c"
		{
			guint i = 0U;
#line 74 "../src/Core/HistoryManager.vala"
			i = (guint) 0;
#line 497 "HistoryManager.c"
			{
				gboolean _tmp0_ = FALSE;
#line 74 "../src/Core/HistoryManager.vala"
				_tmp0_ = TRUE;
#line 74 "../src/Core/HistoryManager.vala"
				while (TRUE) {
#line 504 "HistoryManager.c"
					GList* _tmp2_;
					gboolean _tmp3_ = FALSE;
					GList* _tmp4_;
					gconstpointer _tmp5_;
#line 74 "../src/Core/HistoryManager.vala"
					if (!_tmp0_) {
#line 511 "HistoryManager.c"
						guint _tmp1_;
#line 74 "../src/Core/HistoryManager.vala"
						_tmp1_ = i;
#line 74 "../src/Core/HistoryManager.vala"
						i = _tmp1_ + 1;
#line 517 "HistoryManager.c"
					}
#line 74 "../src/Core/HistoryManager.vala"
					_tmp0_ = FALSE;
#line 74 "../src/Core/HistoryManager.vala"
					_tmp2_ = self->priv->_history;
#line 74 "../src/Core/HistoryManager.vala"
					if (!(i < g_list_length (_tmp2_))) {
#line 74 "../src/Core/HistoryManager.vala"
						break;
#line 527 "HistoryManager.c"
					}
#line 75 "../src/Core/HistoryManager.vala"
					_tmp4_ = self->priv->_history;
#line 75 "../src/Core/HistoryManager.vala"
					_tmp5_ = g_list_nth_data (_tmp4_, i);
#line 75 "../src/Core/HistoryManager.vala"
					if (((PebblesEvaluationResult*) _tmp5_) != NULL) {
#line 535 "HistoryManager.c"
						GList* _tmp6_;
						gconstpointer _tmp7_;
						PebblesEvaluationResultResultSource _tmp8_;
						PebblesEvaluationResultResultSource _tmp9_;
#line 75 "../src/Core/HistoryManager.vala"
						_tmp6_ = self->priv->_history;
#line 75 "../src/Core/HistoryManager.vala"
						_tmp7_ = g_list_nth_data (_tmp6_, i);
#line 75 "../src/Core/HistoryManager.vala"
						_tmp8_ = pebbles_evaluation_result_get_result_source ((PebblesEvaluationResult*) _tmp7_);
#line 75 "../src/Core/HistoryManager.vala"
						_tmp9_ = _tmp8_;
#line 75 "../src/Core/HistoryManager.vala"
						_tmp3_ = _pebbles_evaluation_result_result_source_equal (&_tmp9_, mode) == TRUE;
#line 550 "HistoryManager.c"
					} else {
#line 75 "../src/Core/HistoryManager.vala"
						_tmp3_ = FALSE;
#line 554 "HistoryManager.c"
					}
#line 75 "../src/Core/HistoryManager.vala"
					if (_tmp3_) {
#line 558 "HistoryManager.c"
						guint _tmp10_;
#line 76 "../src/Core/HistoryManager.vala"
						_tmp10_ = count;
#line 76 "../src/Core/HistoryManager.vala"
						count = _tmp10_ + 1;
#line 564 "HistoryManager.c"
					}
#line 78 "../src/Core/HistoryManager.vala"
					if (i == ((guint) 0)) {
#line 79 "../src/Core/HistoryManager.vala"
						break;
#line 570 "HistoryManager.c"
					}
				}
			}
		}
#line 82 "../src/Core/HistoryManager.vala"
		result = count;
#line 82 "../src/Core/HistoryManager.vala"
		return result;
#line 579 "HistoryManager.c"
	}
#line 84 "../src/Core/HistoryManager.vala"
	_tmp11_ = self->priv->_history;
#line 84 "../src/Core/HistoryManager.vala"
	result = g_list_length (_tmp11_);
#line 84 "../src/Core/HistoryManager.vala"
	return result;
#line 587 "HistoryManager.c"
}

gboolean
pebbles_history_manager_is_empty (PebblesHistoryManager* self,
                                  PebblesEvaluationResultResultSource* mode)
{
	GList* _tmp0_;
	gboolean result = FALSE;
#line 87 "../src/Core/HistoryManager.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 88 "../src/Core/HistoryManager.vala"
	g_print ("H\n");
#line 89 "../src/Core/HistoryManager.vala"
	_tmp0_ = self->priv->_history;
#line 89 "../src/Core/HistoryManager.vala"
	if (g_list_length (_tmp0_) == ((guint) 0)) {
#line 90 "../src/Core/HistoryManager.vala"
		result = TRUE;
#line 90 "../src/Core/HistoryManager.vala"
		return result;
#line 608 "HistoryManager.c"
	} else {
		gboolean _tmp1_ = FALSE;
#line 94 "../src/Core/HistoryManager.vala"
		if (mode != NULL) {
#line 613 "HistoryManager.c"
			GList* _tmp2_;
#line 94 "../src/Core/HistoryManager.vala"
			_tmp2_ = self->priv->_history;
#line 94 "../src/Core/HistoryManager.vala"
			_tmp1_ = _tmp2_ != NULL;
#line 619 "HistoryManager.c"
		} else {
#line 94 "../src/Core/HistoryManager.vala"
			_tmp1_ = FALSE;
#line 623 "HistoryManager.c"
		}
#line 94 "../src/Core/HistoryManager.vala"
		if (_tmp1_) {
#line 627 "HistoryManager.c"
			{
				guint i = 0U;
				GList* _tmp3_;
#line 95 "../src/Core/HistoryManager.vala"
				_tmp3_ = self->priv->_history;
#line 95 "../src/Core/HistoryManager.vala"
				i = g_list_length (_tmp3_) - 1;
#line 635 "HistoryManager.c"
				{
					gboolean _tmp4_ = FALSE;
#line 95 "../src/Core/HistoryManager.vala"
					_tmp4_ = TRUE;
#line 95 "../src/Core/HistoryManager.vala"
					while (TRUE) {
#line 642 "HistoryManager.c"
						gboolean _tmp6_ = FALSE;
						GList* _tmp7_;
						gconstpointer _tmp8_;
#line 95 "../src/Core/HistoryManager.vala"
						if (!_tmp4_) {
#line 648 "HistoryManager.c"
							guint _tmp5_;
#line 95 "../src/Core/HistoryManager.vala"
							_tmp5_ = i;
#line 95 "../src/Core/HistoryManager.vala"
							i = _tmp5_ - 1;
#line 654 "HistoryManager.c"
						}
#line 95 "../src/Core/HistoryManager.vala"
						_tmp4_ = FALSE;
#line 95 "../src/Core/HistoryManager.vala"
						if (!(i >= ((guint) 0))) {
#line 95 "../src/Core/HistoryManager.vala"
							break;
#line 662 "HistoryManager.c"
						}
#line 96 "../src/Core/HistoryManager.vala"
						_tmp7_ = self->priv->_history;
#line 96 "../src/Core/HistoryManager.vala"
						_tmp8_ = g_list_nth_data (_tmp7_, i);
#line 96 "../src/Core/HistoryManager.vala"
						if (((PebblesEvaluationResult*) _tmp8_) != NULL) {
#line 670 "HistoryManager.c"
							GList* _tmp9_;
							gconstpointer _tmp10_;
							PebblesEvaluationResultResultSource _tmp11_;
							PebblesEvaluationResultResultSource _tmp12_;
#line 96 "../src/Core/HistoryManager.vala"
							_tmp9_ = self->priv->_history;
#line 96 "../src/Core/HistoryManager.vala"
							_tmp10_ = g_list_nth_data (_tmp9_, i);
#line 96 "../src/Core/HistoryManager.vala"
							_tmp11_ = pebbles_evaluation_result_get_result_source ((PebblesEvaluationResult*) _tmp10_);
#line 96 "../src/Core/HistoryManager.vala"
							_tmp12_ = _tmp11_;
#line 96 "../src/Core/HistoryManager.vala"
							_tmp6_ = _pebbles_evaluation_result_result_source_equal (&_tmp12_, mode) == TRUE;
#line 685 "HistoryManager.c"
						} else {
#line 96 "../src/Core/HistoryManager.vala"
							_tmp6_ = FALSE;
#line 689 "HistoryManager.c"
						}
#line 96 "../src/Core/HistoryManager.vala"
						if (_tmp6_) {
#line 97 "../src/Core/HistoryManager.vala"
							result = FALSE;
#line 97 "../src/Core/HistoryManager.vala"
							return result;
#line 697 "HistoryManager.c"
						}
#line 99 "../src/Core/HistoryManager.vala"
						g_print ("Counting_history (%u)...\n", i);
#line 100 "../src/Core/HistoryManager.vala"
						if (i == ((guint) 0)) {
#line 101 "../src/Core/HistoryManager.vala"
							result = TRUE;
#line 101 "../src/Core/HistoryManager.vala"
							return result;
#line 707 "HistoryManager.c"
						}
					}
				}
			}
		}
#line 105 "../src/Core/HistoryManager.vala"
		result = TRUE;
#line 105 "../src/Core/HistoryManager.vala"
		return result;
#line 717 "HistoryManager.c"
	}
}

PebblesHistoryManager*
pebbles_history_manager_construct (GType object_type)
{
	PebblesHistoryManager* self = NULL;
#line 23 "../src/Core/HistoryManager.vala"
	self = (PebblesHistoryManager*) g_type_create_instance (object_type);
#line 23 "../src/Core/HistoryManager.vala"
	return self;
#line 729 "HistoryManager.c"
}

PebblesHistoryManager*
pebbles_history_manager_new (void)
{
#line 23 "../src/Core/HistoryManager.vala"
	return pebbles_history_manager_construct (PEBBLES_TYPE_HISTORY_MANAGER);
#line 737 "HistoryManager.c"
}

static void
pebbles_value_history_manager_init (GValue* value)
{
#line 23 "../src/Core/HistoryManager.vala"
	value->data[0].v_pointer = NULL;
#line 745 "HistoryManager.c"
}

static void
pebbles_value_history_manager_free_value (GValue* value)
{
#line 23 "../src/Core/HistoryManager.vala"
	if (value->data[0].v_pointer) {
#line 23 "../src/Core/HistoryManager.vala"
		pebbles_history_manager_unref (value->data[0].v_pointer);
#line 755 "HistoryManager.c"
	}
}

static void
pebbles_value_history_manager_copy_value (const GValue* src_value,
                                          GValue* dest_value)
{
#line 23 "../src/Core/HistoryManager.vala"
	if (src_value->data[0].v_pointer) {
#line 23 "../src/Core/HistoryManager.vala"
		dest_value->data[0].v_pointer = pebbles_history_manager_ref (src_value->data[0].v_pointer);
#line 767 "HistoryManager.c"
	} else {
#line 23 "../src/Core/HistoryManager.vala"
		dest_value->data[0].v_pointer = NULL;
#line 771 "HistoryManager.c"
	}
}

static gpointer
pebbles_value_history_manager_peek_pointer (const GValue* value)
{
#line 23 "../src/Core/HistoryManager.vala"
	return value->data[0].v_pointer;
#line 780 "HistoryManager.c"
}

static gchar*
pebbles_value_history_manager_collect_value (GValue* value,
                                             guint n_collect_values,
                                             GTypeCValue* collect_values,
                                             guint collect_flags)
{
#line 23 "../src/Core/HistoryManager.vala"
	if (collect_values[0].v_pointer) {
#line 791 "HistoryManager.c"
		PebblesHistoryManager * object;
		object = collect_values[0].v_pointer;
#line 23 "../src/Core/HistoryManager.vala"
		if (object->parent_instance.g_class == NULL) {
#line 23 "../src/Core/HistoryManager.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 798 "HistoryManager.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 23 "../src/Core/HistoryManager.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 802 "HistoryManager.c"
		}
#line 23 "../src/Core/HistoryManager.vala"
		value->data[0].v_pointer = pebbles_history_manager_ref (object);
#line 806 "HistoryManager.c"
	} else {
#line 23 "../src/Core/HistoryManager.vala"
		value->data[0].v_pointer = NULL;
#line 810 "HistoryManager.c"
	}
#line 23 "../src/Core/HistoryManager.vala"
	return NULL;
#line 814 "HistoryManager.c"
}

static gchar*
pebbles_value_history_manager_lcopy_value (const GValue* value,
                                           guint n_collect_values,
                                           GTypeCValue* collect_values,
                                           guint collect_flags)
{
	PebblesHistoryManager ** object_p;
	object_p = collect_values[0].v_pointer;
#line 23 "../src/Core/HistoryManager.vala"
	if (!object_p) {
#line 23 "../src/Core/HistoryManager.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 829 "HistoryManager.c"
	}
#line 23 "../src/Core/HistoryManager.vala"
	if (!value->data[0].v_pointer) {
#line 23 "../src/Core/HistoryManager.vala"
		*object_p = NULL;
#line 835 "HistoryManager.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 23 "../src/Core/HistoryManager.vala"
		*object_p = value->data[0].v_pointer;
#line 839 "HistoryManager.c"
	} else {
#line 23 "../src/Core/HistoryManager.vala"
		*object_p = pebbles_history_manager_ref (value->data[0].v_pointer);
#line 843 "HistoryManager.c"
	}
#line 23 "../src/Core/HistoryManager.vala"
	return NULL;
#line 847 "HistoryManager.c"
}

GParamSpec*
pebbles_param_spec_history_manager (const gchar* name,
                                    const gchar* nick,
                                    const gchar* blurb,
                                    GType object_type,
                                    GParamFlags flags)
{
	PebblesParamSpecHistoryManager* spec;
#line 23 "../src/Core/HistoryManager.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_HISTORY_MANAGER), NULL);
#line 23 "../src/Core/HistoryManager.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 23 "../src/Core/HistoryManager.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 23 "../src/Core/HistoryManager.vala"
	return G_PARAM_SPEC (spec);
#line 866 "HistoryManager.c"
}

gpointer
pebbles_value_get_history_manager (const GValue* value)
{
#line 23 "../src/Core/HistoryManager.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_HISTORY_MANAGER), NULL);
#line 23 "../src/Core/HistoryManager.vala"
	return value->data[0].v_pointer;
#line 876 "HistoryManager.c"
}

void
pebbles_value_set_history_manager (GValue* value,
                                   gpointer v_object)
{
	PebblesHistoryManager * old;
#line 23 "../src/Core/HistoryManager.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_HISTORY_MANAGER));
#line 23 "../src/Core/HistoryManager.vala"
	old = value->data[0].v_pointer;
#line 23 "../src/Core/HistoryManager.vala"
	if (v_object) {
#line 23 "../src/Core/HistoryManager.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_HISTORY_MANAGER));
#line 23 "../src/Core/HistoryManager.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../src/Core/HistoryManager.vala"
		value->data[0].v_pointer = v_object;
#line 23 "../src/Core/HistoryManager.vala"
		pebbles_history_manager_ref (value->data[0].v_pointer);
#line 898 "HistoryManager.c"
	} else {
#line 23 "../src/Core/HistoryManager.vala"
		value->data[0].v_pointer = NULL;
#line 902 "HistoryManager.c"
	}
#line 23 "../src/Core/HistoryManager.vala"
	if (old) {
#line 23 "../src/Core/HistoryManager.vala"
		pebbles_history_manager_unref (old);
#line 908 "HistoryManager.c"
	}
}

void
pebbles_value_take_history_manager (GValue* value,
                                    gpointer v_object)
{
	PebblesHistoryManager * old;
#line 23 "../src/Core/HistoryManager.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_HISTORY_MANAGER));
#line 23 "../src/Core/HistoryManager.vala"
	old = value->data[0].v_pointer;
#line 23 "../src/Core/HistoryManager.vala"
	if (v_object) {
#line 23 "../src/Core/HistoryManager.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_HISTORY_MANAGER));
#line 23 "../src/Core/HistoryManager.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../src/Core/HistoryManager.vala"
		value->data[0].v_pointer = v_object;
#line 929 "HistoryManager.c"
	} else {
#line 23 "../src/Core/HistoryManager.vala"
		value->data[0].v_pointer = NULL;
#line 933 "HistoryManager.c"
	}
#line 23 "../src/Core/HistoryManager.vala"
	if (old) {
#line 23 "../src/Core/HistoryManager.vala"
		pebbles_history_manager_unref (old);
#line 939 "HistoryManager.c"
	}
}

static void
pebbles_history_manager_class_init (PebblesHistoryManagerClass * klass,
                                    gpointer klass_data)
{
#line 23 "../src/Core/HistoryManager.vala"
	pebbles_history_manager_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Core/HistoryManager.vala"
	((PebblesHistoryManagerClass *) klass)->finalize = pebbles_history_manager_finalize;
#line 23 "../src/Core/HistoryManager.vala"
	g_type_class_adjust_private_offset (klass, &PebblesHistoryManager_private_offset);
#line 953 "HistoryManager.c"
}

static void
pebbles_history_manager_instance_init (PebblesHistoryManager * self,
                                       gpointer klass)
{
#line 23 "../src/Core/HistoryManager.vala"
	self->priv = pebbles_history_manager_get_instance_private (self);
#line 23 "../src/Core/HistoryManager.vala"
	self->ref_count = 1;
#line 964 "HistoryManager.c"
}

static void
pebbles_history_manager_finalize (PebblesHistoryManager * obj)
{
	PebblesHistoryManager * self;
#line 23 "../src/Core/HistoryManager.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_HISTORY_MANAGER, PebblesHistoryManager);
#line 23 "../src/Core/HistoryManager.vala"
	g_signal_handlers_destroy (self);
#line 24 "../src/Core/HistoryManager.vala"
	(self->priv->_history == NULL) ? NULL : (self->priv->_history = (_g_list_free__pebbles_evaluation_result_unref0_ (self->priv->_history), NULL));
#line 977 "HistoryManager.c"
}

static GType
pebbles_history_manager_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_history_manager_init, pebbles_value_history_manager_free_value, pebbles_value_history_manager_copy_value, pebbles_value_history_manager_peek_pointer, "p", pebbles_value_history_manager_collect_value, "p", pebbles_value_history_manager_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesHistoryManagerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_history_manager_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesHistoryManager), 0, (GInstanceInitFunc) pebbles_history_manager_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_history_manager_type_id;
	pebbles_history_manager_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesHistoryManager", &g_define_type_info, &g_define_type_fundamental_info, 0);
	PebblesHistoryManager_private_offset = g_type_add_instance_private (pebbles_history_manager_type_id, sizeof (PebblesHistoryManagerPrivate));
	return pebbles_history_manager_type_id;
}

GType
pebbles_history_manager_get_type (void)
{
	static volatile gsize pebbles_history_manager_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_history_manager_type_id__volatile)) {
		GType pebbles_history_manager_type_id;
		pebbles_history_manager_type_id = pebbles_history_manager_get_type_once ();
		g_once_init_leave (&pebbles_history_manager_type_id__volatile, pebbles_history_manager_type_id);
	}
	return pebbles_history_manager_type_id__volatile;
}

gpointer
pebbles_history_manager_ref (gpointer instance)
{
	PebblesHistoryManager * self;
	self = instance;
#line 23 "../src/Core/HistoryManager.vala"
	g_atomic_int_inc (&self->ref_count);
#line 23 "../src/Core/HistoryManager.vala"
	return instance;
#line 1013 "HistoryManager.c"
}

void
pebbles_history_manager_unref (gpointer instance)
{
	PebblesHistoryManager * self;
	self = instance;
#line 23 "../src/Core/HistoryManager.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 23 "../src/Core/HistoryManager.vala"
		PEBBLES_HISTORY_MANAGER_GET_CLASS (self)->finalize (self);
#line 23 "../src/Core/HistoryManager.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1027 "HistoryManager.c"
	}
}


/* StyledButton.c generated by valac 0.48.14, the Vala compiler
 * generated from StyledButton.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <granite.h>

#define PEBBLES_TYPE_STYLED_BUTTON (pebbles_styled_button_get_type ())
#define PEBBLES_STYLED_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_STYLED_BUTTON, PebblesStyledButton))
#define PEBBLES_STYLED_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_STYLED_BUTTON, PebblesStyledButtonClass))
#define PEBBLES_IS_STYLED_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_STYLED_BUTTON))
#define PEBBLES_IS_STYLED_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_STYLED_BUTTON))
#define PEBBLES_STYLED_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_STYLED_BUTTON, PebblesStyledButtonClass))

typedef struct _PebblesStyledButton PebblesStyledButton;
typedef struct _PebblesStyledButtonClass PebblesStyledButtonClass;
typedef struct _PebblesStyledButtonPrivate PebblesStyledButtonPrivate;
enum  {
	PEBBLES_STYLED_BUTTON_0_PROPERTY,
	PEBBLES_STYLED_BUTTON_NUM_PROPERTIES
};
static GParamSpec* pebbles_styled_button_properties[PEBBLES_STYLED_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

struct _PebblesStyledButton {
	GtkButton parent_instance;
	PebblesStyledButtonPrivate * priv;
};

struct _PebblesStyledButtonClass {
	GtkButtonClass parent_class;
};

struct _PebblesStyledButtonPrivate {
	GtkLabel* label_text;
};

static gint PebblesStyledButton_private_offset;
static gpointer pebbles_styled_button_parent_class = NULL;

GType pebbles_styled_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesStyledButton, g_object_unref)
PebblesStyledButton* pebbles_styled_button_new (const gchar* label_text,
                                                const gchar* tooltip_desc,
                                                gchar** accel_markup,
                                                gint accel_markup_length1);
PebblesStyledButton* pebbles_styled_button_construct (GType object_type,
                                                      const gchar* label_text,
                                                      const gchar* tooltip_desc,
                                                      gchar** accel_markup,
                                                      gint accel_markup_length1);
void pebbles_styled_button_update_label (PebblesStyledButton* self,
                                         const gchar* label_text,
                                         const gchar* tooltip_desc,
                                         gchar** accel_markup,
                                         gint accel_markup_length1);
static void pebbles_styled_button_finalize (GObject * obj);
static GType pebbles_styled_button_get_type_once (void);

static inline gpointer
pebbles_styled_button_get_instance_private (PebblesStyledButton* self)
{
	return G_STRUCT_MEMBER_P (self, PebblesStyledButton_private_offset);
}

PebblesStyledButton*
pebbles_styled_button_construct (GType object_type,
                                 const gchar* label_text,
                                 const gchar* tooltip_desc,
                                 gchar** accel_markup,
                                 gint accel_markup_length1)
{
	PebblesStyledButton * self = NULL;
	GtkLabel* _tmp0_;
	GtkLabel* _tmp1_;
	GtkLabel* _tmp2_;
	GtkStyleContext* _tmp5_;
#line 24 "../src/StyledButton.vala"
	g_return_val_if_fail (label_text != NULL, NULL);
#line 24 "../src/StyledButton.vala"
	self = (PebblesStyledButton*) g_object_new (object_type, NULL);
#line 25 "../src/StyledButton.vala"
	_tmp0_ = (GtkLabel*) gtk_label_new (label_text);
#line 25 "../src/StyledButton.vala"
	g_object_ref_sink (_tmp0_);
#line 25 "../src/StyledButton.vala"
	_g_object_unref0 (self->priv->label_text);
#line 25 "../src/StyledButton.vala"
	self->priv->label_text = _tmp0_;
#line 26 "../src/StyledButton.vala"
	_tmp1_ = self->priv->label_text;
#line 26 "../src/StyledButton.vala"
	gtk_label_set_use_markup (_tmp1_, TRUE);
#line 27 "../src/StyledButton.vala"
	_tmp2_ = self->priv->label_text;
#line 27 "../src/StyledButton.vala"
	gtk_button_set_image ((GtkButton*) self, (GtkWidget*) _tmp2_);
#line 28 "../src/StyledButton.vala"
	if (accel_markup != NULL) {
#line 125 "StyledButton.c"
		gchar* _tmp3_;
		gchar* _tmp4_;
#line 29 "../src/StyledButton.vala"
		_tmp3_ = granite_markup_accel_tooltip (accel_markup, (gint) accel_markup_length1, tooltip_desc);
#line 29 "../src/StyledButton.vala"
		_tmp4_ = _tmp3_;
#line 29 "../src/StyledButton.vala"
		gtk_widget_set_tooltip_markup ((GtkWidget*) self, _tmp4_);
#line 29 "../src/StyledButton.vala"
		_g_free0 (_tmp4_);
#line 136 "StyledButton.c"
	} else {
#line 31 "../src/StyledButton.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) self, tooltip_desc);
#line 140 "StyledButton.c"
	}
#line 33 "../src/StyledButton.vala"
	_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 33 "../src/StyledButton.vala"
	gtk_style_context_remove_class (_tmp5_, "image-button");
#line 24 "../src/StyledButton.vala"
	return self;
#line 148 "StyledButton.c"
}

PebblesStyledButton*
pebbles_styled_button_new (const gchar* label_text,
                           const gchar* tooltip_desc,
                           gchar** accel_markup,
                           gint accel_markup_length1)
{
#line 24 "../src/StyledButton.vala"
	return pebbles_styled_button_construct (PEBBLES_TYPE_STYLED_BUTTON, label_text, tooltip_desc, accel_markup, accel_markup_length1);
#line 159 "StyledButton.c"
}

void
pebbles_styled_button_update_label (PebblesStyledButton* self,
                                    const gchar* label_text,
                                    const gchar* tooltip_desc,
                                    gchar** accel_markup,
                                    gint accel_markup_length1)
{
	GtkLabel* _tmp0_;
	GtkLabel* _tmp1_;
	GtkLabel* _tmp2_;
	GtkStyleContext* _tmp5_;
#line 35 "../src/StyledButton.vala"
	g_return_if_fail (self != NULL);
#line 35 "../src/StyledButton.vala"
	g_return_if_fail (label_text != NULL);
#line 36 "../src/StyledButton.vala"
	_tmp0_ = self->priv->label_text;
#line 36 "../src/StyledButton.vala"
	gtk_label_set_text (_tmp0_, label_text);
#line 37 "../src/StyledButton.vala"
	_tmp1_ = self->priv->label_text;
#line 37 "../src/StyledButton.vala"
	gtk_label_set_use_markup (_tmp1_, TRUE);
#line 38 "../src/StyledButton.vala"
	_tmp2_ = self->priv->label_text;
#line 38 "../src/StyledButton.vala"
	gtk_button_set_image ((GtkButton*) self, (GtkWidget*) _tmp2_);
#line 39 "../src/StyledButton.vala"
	if (accel_markup != NULL) {
#line 191 "StyledButton.c"
		gchar* _tmp3_;
		gchar* _tmp4_;
#line 40 "../src/StyledButton.vala"
		_tmp3_ = granite_markup_accel_tooltip (accel_markup, (gint) accel_markup_length1, tooltip_desc);
#line 40 "../src/StyledButton.vala"
		_tmp4_ = _tmp3_;
#line 40 "../src/StyledButton.vala"
		gtk_widget_set_tooltip_markup ((GtkWidget*) self, _tmp4_);
#line 40 "../src/StyledButton.vala"
		_g_free0 (_tmp4_);
#line 202 "StyledButton.c"
	} else {
#line 42 "../src/StyledButton.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) self, tooltip_desc);
#line 206 "StyledButton.c"
	}
#line 44 "../src/StyledButton.vala"
	_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 44 "../src/StyledButton.vala"
	gtk_style_context_remove_class (_tmp5_, "image-button");
#line 212 "StyledButton.c"
}

static void
pebbles_styled_button_class_init (PebblesStyledButtonClass * klass,
                                  gpointer klass_data)
{
#line 22 "../src/StyledButton.vala"
	pebbles_styled_button_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/StyledButton.vala"
	g_type_class_adjust_private_offset (klass, &PebblesStyledButton_private_offset);
#line 22 "../src/StyledButton.vala"
	G_OBJECT_CLASS (klass)->finalize = pebbles_styled_button_finalize;
#line 225 "StyledButton.c"
}

static void
pebbles_styled_button_instance_init (PebblesStyledButton * self,
                                     gpointer klass)
{
#line 22 "../src/StyledButton.vala"
	self->priv = pebbles_styled_button_get_instance_private (self);
#line 234 "StyledButton.c"
}

static void
pebbles_styled_button_finalize (GObject * obj)
{
	PebblesStyledButton * self;
#line 22 "../src/StyledButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_STYLED_BUTTON, PebblesStyledButton);
#line 23 "../src/StyledButton.vala"
	_g_object_unref0 (self->priv->label_text);
#line 22 "../src/StyledButton.vala"
	G_OBJECT_CLASS (pebbles_styled_button_parent_class)->finalize (obj);
#line 247 "StyledButton.c"
}

static GType
pebbles_styled_button_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (PebblesStyledButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_styled_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesStyledButton), 0, (GInstanceInitFunc) pebbles_styled_button_instance_init, NULL };
	GType pebbles_styled_button_type_id;
	pebbles_styled_button_type_id = g_type_register_static (gtk_button_get_type (), "PebblesStyledButton", &g_define_type_info, 0);
	PebblesStyledButton_private_offset = g_type_add_instance_private (pebbles_styled_button_type_id, sizeof (PebblesStyledButtonPrivate));
	return pebbles_styled_button_type_id;
}

GType
pebbles_styled_button_get_type (void)
{
	static volatile gsize pebbles_styled_button_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_styled_button_type_id__volatile)) {
		GType pebbles_styled_button_type_id;
		pebbles_styled_button_type_id = pebbles_styled_button_get_type_once ();
		g_once_init_leave (&pebbles_styled_button_type_id__volatile, pebbles_styled_button_type_id);
	}
	return pebbles_styled_button_type_id__volatile;
}


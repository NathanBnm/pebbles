/* Application.c generated by valac 0.48.14, the Vala compiler
 * generated from Application.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 *              Saunak Biswas  <saunakbis97@gmail.com>
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <granite.h>
#include <glib.h>
#include <gio/gio.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Xutil.h>
#include <X11/Xregion.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>

#define PEBBLES_TYPE_PEBBLES_APP (pebbles_pebbles_app_get_type ())
#define PEBBLES_PEBBLES_APP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_PEBBLES_APP, PebblesPebblesApp))
#define PEBBLES_PEBBLES_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_PEBBLES_APP, PebblesPebblesAppClass))
#define PEBBLES_IS_PEBBLES_APP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_PEBBLES_APP))
#define PEBBLES_IS_PEBBLES_APP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_PEBBLES_APP))
#define PEBBLES_PEBBLES_APP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_PEBBLES_APP, PebblesPebblesAppClass))

typedef struct _PebblesPebblesApp PebblesPebblesApp;
typedef struct _PebblesPebblesAppClass PebblesPebblesAppClass;
typedef struct _PebblesPebblesAppPrivate PebblesPebblesAppPrivate;

#define PEBBLES_TYPE_SETTINGS (pebbles_settings_get_type ())
#define PEBBLES_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettings))
#define PEBBLES_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))
#define PEBBLES_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))

typedef struct _PebblesSettings PebblesSettings;
typedef struct _PebblesSettingsClass PebblesSettingsClass;
enum  {
	PEBBLES_PEBBLES_APP_0_PROPERTY,
	PEBBLES_PEBBLES_APP_NUM_PROPERTIES
};
static GParamSpec* pebbles_pebbles_app_properties[PEBBLES_PEBBLES_APP_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define PEBBLES_TYPE_MAIN_WINDOW (pebbles_main_window_get_type ())
#define PEBBLES_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_MAIN_WINDOW, PebblesMainWindow))
#define PEBBLES_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_MAIN_WINDOW, PebblesMainWindowClass))
#define PEBBLES_IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_MAIN_WINDOW))
#define PEBBLES_IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_MAIN_WINDOW))
#define PEBBLES_MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_MAIN_WINDOW, PebblesMainWindowClass))

typedef struct _PebblesMainWindow PebblesMainWindow;
typedef struct _PebblesMainWindowClass PebblesMainWindowClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_option_context_free0(var) ((var == NULL) ? NULL : (var = (g_option_context_free (var), NULL)))

#define PEBBLES_TYPE_MINI_CALCULATOR (pebbles_mini_calculator_get_type ())
#define PEBBLES_MINI_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_MINI_CALCULATOR, PebblesMiniCalculator))
#define PEBBLES_MINI_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_MINI_CALCULATOR, PebblesMiniCalculatorClass))
#define PEBBLES_IS_MINI_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_MINI_CALCULATOR))
#define PEBBLES_IS_MINI_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_MINI_CALCULATOR))
#define PEBBLES_MINI_CALCULATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_MINI_CALCULATOR, PebblesMiniCalculatorClass))

typedef struct _PebblesMiniCalculator PebblesMiniCalculator;
typedef struct _PebblesMiniCalculatorClass PebblesMiniCalculatorClass;

struct _PebblesPebblesApp {
	GtkApplication parent_instance;
	PebblesPebblesAppPrivate * priv;
};

struct _PebblesPebblesAppClass {
	GtkApplicationClass parent_class;
};

struct _PebblesPebblesAppPrivate {
	PebblesSettings* settings;
	gboolean test_mode;
	GtkCssProvider* css_provider;
};

static gint PebblesPebblesApp_private_offset;
static gpointer pebbles_pebbles_app_parent_class = NULL;
static PebblesPebblesApp* pebbles_pebbles_app__instance;
static PebblesPebblesApp* pebbles_pebbles_app__instance = NULL;

GType pebbles_pebbles_app_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesPebblesApp, g_object_unref)
GType pebbles_settings_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesSettings, g_object_unref)
PebblesPebblesApp* pebbles_pebbles_app_new (void);
PebblesPebblesApp* pebbles_pebbles_app_construct (GType object_type);
PebblesSettings* pebbles_settings_get_default (void);
static void pebbles_pebbles_app_real_activate (GApplication* base);
GType pebbles_main_window_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesMainWindow, g_object_unref)
PebblesMainWindow* pebbles_main_window_new (void);
PebblesMainWindow* pebbles_main_window_construct (GType object_type);
static gint pebbles_pebbles_app_real_command_line (GApplication* base,
                                            GApplicationCommandLine* cmd);
static void pebbles_pebbles_app_command_line_interpreter (PebblesPebblesApp* self,
                                                   GApplicationCommandLine* cmd);
GType pebbles_mini_calculator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesMiniCalculator, g_object_unref)
PebblesMiniCalculator* pebbles_mini_calculator_new (void);
PebblesMiniCalculator* pebbles_mini_calculator_construct (GType object_type);
void pebbles_test_util_run_test (void);
gint pebbles_pebbles_app_main (gchar** args,
                               gint args_length1);
PebblesPebblesApp* pebbles_pebbles_app_get_instance (void);
static void pebbles_pebbles_app_finalize (GObject * obj);
static GType pebbles_pebbles_app_get_type_once (void);
static void _vala_pebbles_pebbles_app_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);

static inline gpointer
pebbles_pebbles_app_get_instance_private (PebblesPebblesApp* self)
{
	return G_STRUCT_MEMBER_P (self, PebblesPebblesApp_private_offset);
}

PebblesPebblesApp*
pebbles_pebbles_app_construct (GType object_type)
{
	PebblesPebblesApp * self = NULL;
	PebblesSettings* _tmp0_;
#line 40 "../src/Application.vala"
	self = (PebblesPebblesApp*) g_object_new (object_type, "application-id", "com.github.subhadeepjasu.pebbles", "flags", G_APPLICATION_HANDLES_COMMAND_LINE, NULL);
#line 44 "../src/Application.vala"
	XInitThreads ();
#line 45 "../src/Application.vala"
	_tmp0_ = pebbles_settings_get_default ();
#line 45 "../src/Application.vala"
	_g_object_unref0 (self->priv->settings);
#line 45 "../src/Application.vala"
	self->priv->settings = _tmp0_;
#line 39 "../src/Application.vala"
	return self;
#line 169 "Application.c"
}

PebblesPebblesApp*
pebbles_pebbles_app_new (void)
{
#line 39 "../src/Application.vala"
	return pebbles_pebbles_app_construct (PEBBLES_TYPE_PEBBLES_APP);
#line 177 "Application.c"
}

static void
pebbles_pebbles_app_real_activate (GApplication* base)
{
	PebblesPebblesApp * self;
	PebblesMainWindow* mainwindow = NULL;
	PebblesMainWindow* _tmp0_;
#line 48 "../src/Application.vala"
	self = (PebblesPebblesApp*) base;
#line 49 "../src/Application.vala"
	_tmp0_ = pebbles_main_window_new ();
#line 49 "../src/Application.vala"
	g_object_ref_sink (_tmp0_);
#line 49 "../src/Application.vala"
	mainwindow = _tmp0_;
#line 50 "../src/Application.vala"
	gtk_window_set_application ((GtkWindow*) mainwindow, (GtkApplication*) self);
#line 52 "../src/Application.vala"
	gtk_window_present ((GtkWindow*) mainwindow);
#line 48 "../src/Application.vala"
	_g_object_unref0 (mainwindow);
#line 200 "Application.c"
}

static gint
pebbles_pebbles_app_real_command_line (GApplication* base,
                                       GApplicationCommandLine* cmd)
{
	PebblesPebblesApp * self;
	gint result = 0;
#line 55 "../src/Application.vala"
	self = (PebblesPebblesApp*) base;
#line 55 "../src/Application.vala"
	g_return_val_if_fail (cmd != NULL, 0);
#line 56 "../src/Application.vala"
	pebbles_pebbles_app_command_line_interpreter (self, cmd);
#line 57 "../src/Application.vala"
	result = 0;
#line 57 "../src/Application.vala"
	return result;
#line 219 "Application.c"
}

static void
pebbles_pebbles_app_command_line_interpreter (PebblesPebblesApp* self,
                                              GApplicationCommandLine* cmd)
{
	gchar** cmd_args = NULL;
	gint _tmp0_ = 0;
	gchar** _tmp1_;
	gint cmd_args_length1;
	gint _cmd_args_size_;
	gchar** args = NULL;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gint args_length1;
	gint _args_size_;
	gboolean new_window = FALSE;
	gboolean mini_mode = FALSE;
	GOptionEntry* option = NULL;
	GOptionEntry* _tmp3_;
	gint option_length1;
	gint _option_size_;
	GOptionEntry* _tmp4_;
	gint _tmp4__length1;
	GOptionEntry _tmp5_ = {0};
	GOptionEntry* _tmp6_;
	gint _tmp6__length1;
	GOptionEntry _tmp7_ = {0};
	GOptionEntry* _tmp8_;
	gint _tmp8__length1;
	GOptionEntry _tmp9_ = {0};
	GOptionEntry* _tmp10_;
	gint _tmp10__length1;
	GOptionEntry _tmp11_ = {0};
	GOptionContext* option_context = NULL;
	GOptionContext* _tmp12_;
	GOptionContext* _tmp13_;
	GOptionEntry* _tmp14_;
	gint _tmp14__length1;
	GtkCssProvider* _tmp18_;
	GError* _inner_error0_ = NULL;
#line 60 "../src/Application.vala"
	g_return_if_fail (self != NULL);
#line 60 "../src/Application.vala"
	g_return_if_fail (cmd != NULL);
#line 61 "../src/Application.vala"
	_tmp1_ = g_application_command_line_get_arguments (cmd, &_tmp0_);
#line 61 "../src/Application.vala"
	cmd_args = _tmp1_;
#line 61 "../src/Application.vala"
	cmd_args_length1 = _tmp0_;
#line 61 "../src/Application.vala"
	_cmd_args_size_ = cmd_args_length1;
#line 62 "../src/Application.vala"
	_tmp2_ = cmd_args;
#line 62 "../src/Application.vala"
	_tmp2__length1 = cmd_args_length1;
#line 62 "../src/Application.vala"
	args = _tmp2_;
#line 62 "../src/Application.vala"
	args_length1 = _tmp2__length1;
#line 62 "../src/Application.vala"
	_args_size_ = args_length1;
#line 64 "../src/Application.vala"
	new_window = FALSE;
#line 64 "../src/Application.vala"
	mini_mode = FALSE;
#line 66 "../src/Application.vala"
	_tmp3_ = g_new0 (GOptionEntry, 4);
#line 66 "../src/Application.vala"
	option = _tmp3_;
#line 66 "../src/Application.vala"
	option_length1 = 4;
#line 66 "../src/Application.vala"
	_option_size_ = option_length1;
#line 67 "../src/Application.vala"
	_tmp4_ = option;
#line 67 "../src/Application.vala"
	_tmp4__length1 = option_length1;
#line 67 "../src/Application.vala"
	_tmp5_.long_name = "mini_mode";
#line 67 "../src/Application.vala"
	_tmp5_.short_name = (gchar) 0;
#line 67 "../src/Application.vala"
	_tmp5_.flags = 0;
#line 67 "../src/Application.vala"
	_tmp5_.arg = G_OPTION_ARG_NONE;
#line 67 "../src/Application.vala"
	_tmp5_.arg_data = &mini_mode;
#line 67 "../src/Application.vala"
	_tmp5_.description = _ ("Open In Mini Mode");
#line 67 "../src/Application.vala"
	_tmp5_.arg_description = NULL;
#line 67 "../src/Application.vala"
	_tmp4_[0] = _tmp5_;
#line 68 "../src/Application.vala"
	_tmp6_ = option;
#line 68 "../src/Application.vala"
	_tmp6__length1 = option_length1;
#line 68 "../src/Application.vala"
	_tmp7_.long_name = "new_window";
#line 68 "../src/Application.vala"
	_tmp7_.short_name = (gchar) 0;
#line 68 "../src/Application.vala"
	_tmp7_.flags = 0;
#line 68 "../src/Application.vala"
	_tmp7_.arg = G_OPTION_ARG_NONE;
#line 68 "../src/Application.vala"
	_tmp7_.arg_data = &new_window;
#line 68 "../src/Application.vala"
	_tmp7_.description = _ ("Open A New Window");
#line 68 "../src/Application.vala"
	_tmp7_.arg_description = NULL;
#line 68 "../src/Application.vala"
	_tmp6_[1] = _tmp7_;
#line 69 "../src/Application.vala"
	_tmp8_ = option;
#line 69 "../src/Application.vala"
	_tmp8__length1 = option_length1;
#line 69 "../src/Application.vala"
	_tmp9_.long_name = "test";
#line 69 "../src/Application.vala"
	_tmp9_.short_name = (gchar) 0;
#line 69 "../src/Application.vala"
	_tmp9_.flags = 0;
#line 69 "../src/Application.vala"
	_tmp9_.arg = G_OPTION_ARG_NONE;
#line 69 "../src/Application.vala"
	_tmp9_.arg_data = &self->priv->test_mode;
#line 69 "../src/Application.vala"
	_tmp9_.description = _ ("Enable test mode");
#line 69 "../src/Application.vala"
	_tmp9_.arg_description = NULL;
#line 69 "../src/Application.vala"
	_tmp8_[2] = _tmp9_;
#line 70 "../src/Application.vala"
	_tmp10_ = option;
#line 70 "../src/Application.vala"
	_tmp10__length1 = option_length1;
#line 70 "../src/Application.vala"
	_tmp11_.long_name = NULL;
#line 70 "../src/Application.vala"
	_tmp10_[3] = _tmp11_;
#line 72 "../src/Application.vala"
	_tmp12_ = g_option_context_new ("actions");
#line 72 "../src/Application.vala"
	option_context = _tmp12_;
#line 73 "../src/Application.vala"
	_tmp13_ = option_context;
#line 73 "../src/Application.vala"
	_tmp14_ = option;
#line 73 "../src/Application.vala"
	_tmp14__length1 = option_length1;
#line 73 "../src/Application.vala"
	g_option_context_add_main_entries (_tmp13_, _tmp14_, NULL);
#line 375 "Application.c"
	{
		GOptionContext* _tmp15_;
#line 75 "../src/Application.vala"
		_tmp15_ = option_context;
#line 75 "../src/Application.vala"
		g_option_context_parse (_tmp15_, (gint*) (&args_length1), &args, &_inner_error0_);
#line 75 "../src/Application.vala"
		_args_size_ = args_length1;
#line 75 "../src/Application.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 386 "Application.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* err = NULL;
		GError* _tmp16_;
		const gchar* _tmp17_;
#line 74 "../src/Application.vala"
		err = _inner_error0_;
#line 74 "../src/Application.vala"
		_inner_error0_ = NULL;
#line 77 "../src/Application.vala"
		_tmp16_ = err;
#line 77 "../src/Application.vala"
		_tmp17_ = _tmp16_->message;
#line 77 "../src/Application.vala"
		g_warning ("Application.vala:77: %s", _tmp17_);
#line 78 "../src/Application.vala"
		_g_error_free0 (err);
#line 78 "../src/Application.vala"
		_g_option_context_free0 (option_context);
#line 78 "../src/Application.vala"
		option = (g_free (option), NULL);
#line 78 "../src/Application.vala"
		cmd_args = (_vala_array_free (cmd_args, cmd_args_length1, (GDestroyNotify) g_free), NULL);
#line 78 "../src/Application.vala"
		return;
#line 416 "Application.c"
	}
	__finally0:
#line 74 "../src/Application.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 74 "../src/Application.vala"
		_g_option_context_free0 (option_context);
#line 74 "../src/Application.vala"
		option = (g_free (option), NULL);
#line 74 "../src/Application.vala"
		cmd_args = (_vala_array_free (cmd_args, cmd_args_length1, (GDestroyNotify) g_free), NULL);
#line 74 "../src/Application.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 74 "../src/Application.vala"
		g_clear_error (&_inner_error0_);
#line 74 "../src/Application.vala"
		return;
#line 433 "Application.c"
	}
#line 81 "../src/Application.vala"
	_tmp18_ = self->priv->css_provider;
#line 81 "../src/Application.vala"
	if (_tmp18_ == NULL) {
#line 439 "Application.c"
		GtkCssProvider* _tmp19_;
		GtkCssProvider* _tmp20_;
		GdkScreen* _tmp21_;
		GtkCssProvider* _tmp22_;
#line 82 "../src/Application.vala"
		_tmp19_ = gtk_css_provider_new ();
#line 82 "../src/Application.vala"
		_g_object_unref0 (self->priv->css_provider);
#line 82 "../src/Application.vala"
		self->priv->css_provider = _tmp19_;
#line 83 "../src/Application.vala"
		_tmp20_ = self->priv->css_provider;
#line 83 "../src/Application.vala"
		gtk_css_provider_load_from_resource (_tmp20_, "/com/github/subhadeepjasu/pebbles/Application.css");
#line 85 "../src/Application.vala"
		_tmp21_ = gdk_screen_get_default ();
#line 85 "../src/Application.vala"
		_tmp22_ = self->priv->css_provider;
#line 85 "../src/Application.vala"
		gtk_style_context_add_provider_for_screen (_tmp21_, (GtkStyleProvider*) _tmp22_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 460 "Application.c"
	}
#line 92 "../src/Application.vala"
	if (mini_mode) {
#line 464 "Application.c"
		PebblesMiniCalculator* minicalcwindow = NULL;
		PebblesMiniCalculator* _tmp23_;
		PebblesMiniCalculator* _tmp24_;
		PebblesMiniCalculator* _tmp25_;
		PebblesMiniCalculator* _tmp26_;
#line 93 "../src/Application.vala"
		_tmp23_ = pebbles_mini_calculator_new ();
#line 93 "../src/Application.vala"
		g_object_ref_sink (_tmp23_);
#line 93 "../src/Application.vala"
		minicalcwindow = _tmp23_;
#line 94 "../src/Application.vala"
		_tmp24_ = minicalcwindow;
#line 94 "../src/Application.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp24_);
#line 95 "../src/Application.vala"
		_tmp25_ = minicalcwindow;
#line 95 "../src/Application.vala"
		gtk_window_set_application ((GtkWindow*) _tmp25_, (GtkApplication*) self);
#line 96 "../src/Application.vala"
		_tmp26_ = minicalcwindow;
#line 96 "../src/Application.vala"
		gtk_application_add_window ((GtkApplication*) self, (GtkWindow*) _tmp26_);
#line 92 "../src/Application.vala"
		_g_object_unref0 (minicalcwindow);
#line 490 "Application.c"
	} else {
#line 98 "../src/Application.vala"
		if (self->priv->test_mode) {
#line 99 "../src/Application.vala"
			pebbles_test_util_run_test ();
#line 100 "../src/Application.vala"
			_g_option_context_free0 (option_context);
#line 100 "../src/Application.vala"
			option = (g_free (option), NULL);
#line 100 "../src/Application.vala"
			cmd_args = (_vala_array_free (cmd_args, cmd_args_length1, (GDestroyNotify) g_free), NULL);
#line 100 "../src/Application.vala"
			return;
#line 504 "Application.c"
		} else {
#line 103 "../src/Application.vala"
			g_application_activate ((GApplication*) self);
#line 508 "Application.c"
		}
	}
#line 60 "../src/Application.vala"
	_g_option_context_free0 (option_context);
#line 60 "../src/Application.vala"
	option = (g_free (option), NULL);
#line 60 "../src/Application.vala"
	cmd_args = (_vala_array_free (cmd_args, cmd_args_length1, (GDestroyNotify) g_free), NULL);
#line 517 "Application.c"
}

gint
pebbles_pebbles_app_main (gchar** args,
                          gint args_length1)
{
	PebblesPebblesApp* app = NULL;
	PebblesPebblesApp* _tmp0_;
	gint result = 0;
#line 108 "../src/Application.vala"
	_tmp0_ = pebbles_pebbles_app_new ();
#line 108 "../src/Application.vala"
	app = _tmp0_;
#line 109 "../src/Application.vala"
	result = g_application_run ((GApplication*) app, (gint) args_length1, args);
#line 109 "../src/Application.vala"
	_g_object_unref0 (app);
#line 109 "../src/Application.vala"
	return result;
#line 537 "Application.c"
}

int
main (int argc,
      char ** argv)
{
#line 107 "../src/Application.vala"
	return pebbles_pebbles_app_main (argv, argc);
#line 546 "Application.c"
}

PebblesPebblesApp*
pebbles_pebbles_app_get_instance (void)
{
	PebblesPebblesApp* result;
	PebblesPebblesApp* _tmp0_;
	PebblesPebblesApp* _tmp2_;
#line 30 "../src/Application.vala"
	_tmp0_ = pebbles_pebbles_app__instance;
#line 30 "../src/Application.vala"
	if (_tmp0_ == NULL) {
#line 559 "Application.c"
		PebblesPebblesApp* _tmp1_;
#line 31 "../src/Application.vala"
		_tmp1_ = pebbles_pebbles_app_new ();
#line 31 "../src/Application.vala"
		_g_object_unref0 (pebbles_pebbles_app__instance);
#line 31 "../src/Application.vala"
		pebbles_pebbles_app__instance = _tmp1_;
#line 567 "Application.c"
	}
#line 33 "../src/Application.vala"
	_tmp2_ = pebbles_pebbles_app__instance;
#line 33 "../src/Application.vala"
	result = _tmp2_;
#line 33 "../src/Application.vala"
	return result;
#line 575 "Application.c"
}

static void
pebbles_pebbles_app_class_init (PebblesPebblesAppClass * klass,
                                gpointer klass_data)
{
#line 23 "../src/Application.vala"
	pebbles_pebbles_app_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Application.vala"
	g_type_class_adjust_private_offset (klass, &PebblesPebblesApp_private_offset);
#line 23 "../src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) pebbles_pebbles_app_real_activate;
#line 23 "../src/Application.vala"
	((GApplicationClass *) klass)->command_line = (gint (*) (GApplication*, GApplicationCommandLine*)) pebbles_pebbles_app_real_command_line;
#line 23 "../src/Application.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_pebbles_pebbles_app_get_property;
#line 23 "../src/Application.vala"
	G_OBJECT_CLASS (klass)->finalize = pebbles_pebbles_app_finalize;
#line 594 "Application.c"
}

static void
pebbles_pebbles_app_instance_init (PebblesPebblesApp * self,
                                   gpointer klass)
{
#line 23 "../src/Application.vala"
	self->priv = pebbles_pebbles_app_get_instance_private (self);
#line 25 "../src/Application.vala"
	self->priv->test_mode = FALSE;
#line 605 "Application.c"
}

static void
pebbles_pebbles_app_finalize (GObject * obj)
{
	PebblesPebblesApp * self;
#line 23 "../src/Application.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_PEBBLES_APP, PebblesPebblesApp);
#line 24 "../src/Application.vala"
	_g_object_unref0 (self->priv->settings);
#line 37 "../src/Application.vala"
	_g_object_unref0 (self->priv->css_provider);
#line 23 "../src/Application.vala"
	G_OBJECT_CLASS (pebbles_pebbles_app_parent_class)->finalize (obj);
#line 620 "Application.c"
}

static GType
pebbles_pebbles_app_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (PebblesPebblesAppClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_pebbles_app_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesPebblesApp), 0, (GInstanceInitFunc) pebbles_pebbles_app_instance_init, NULL };
	GType pebbles_pebbles_app_type_id;
	pebbles_pebbles_app_type_id = g_type_register_static (gtk_application_get_type (), "PebblesPebblesApp", &g_define_type_info, 0);
	PebblesPebblesApp_private_offset = g_type_add_instance_private (pebbles_pebbles_app_type_id, sizeof (PebblesPebblesAppPrivate));
	return pebbles_pebbles_app_type_id;
}

GType
pebbles_pebbles_app_get_type (void)
{
	static volatile gsize pebbles_pebbles_app_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_pebbles_app_type_id__volatile)) {
		GType pebbles_pebbles_app_type_id;
		pebbles_pebbles_app_type_id = pebbles_pebbles_app_get_type_once ();
		g_once_init_leave (&pebbles_pebbles_app_type_id__volatile, pebbles_pebbles_app_type_id);
	}
	return pebbles_pebbles_app_type_id__volatile;
}

static void
_vala_pebbles_pebbles_app_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	PebblesPebblesApp * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, PEBBLES_TYPE_PEBBLES_APP, PebblesPebblesApp);
#line 23 "../src/Application.vala"
	switch (property_id) {
#line 655 "Application.c"
		default:
#line 23 "../src/Application.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 23 "../src/Application.vala"
		break;
#line 661 "Application.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


/* Logger.c generated by valac 0.48.14, the Vala compiler
 * generated from Logger.vala, do not modify */

/*
 *  Copyright (c) 2015–2019 elementary, Inc.
 *                2015–2017 Rico Tzschichholz
 *                2011–2013 Robert Dyer
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <stdio.h>

typedef enum  {
	GRANITE_SERVICES_LOG_LEVEL_DEBUG,
	GRANITE_SERVICES_LOG_LEVEL_INFO,
	GRANITE_SERVICES_LOG_LEVEL_NOTIFY,
	GRANITE_SERVICES_LOG_LEVEL_WARN,
	GRANITE_SERVICES_LOG_LEVEL_ERROR,
	GRANITE_SERVICES_LOG_LEVEL_FATAL
} GraniteServicesLogLevel;

#define GRANITE_SERVICES_TYPE_LOG_LEVEL (granite_services_log_level_get_type ())
typedef enum  {
	GRANITE_SERVICES_CONSOLE_COLOR_BLACK,
	GRANITE_SERVICES_CONSOLE_COLOR_RED,
	GRANITE_SERVICES_CONSOLE_COLOR_GREEN,
	GRANITE_SERVICES_CONSOLE_COLOR_YELLOW,
	GRANITE_SERVICES_CONSOLE_COLOR_BLUE,
	GRANITE_SERVICES_CONSOLE_COLOR_MAGENTA,
	GRANITE_SERVICES_CONSOLE_COLOR_CYAN,
	GRANITE_SERVICES_CONSOLE_COLOR_WHITE
} GraniteServicesConsoleColor;

#define GRANITE_SERVICES_TYPE_CONSOLE_COLOR (granite_services_console_color_get_type ())

#define GRANITE_SERVICES_TYPE_LOGGER (granite_services_logger_get_type ())
#define GRANITE_SERVICES_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_TYPE_LOGGER, GraniteServicesLogger))
#define GRANITE_SERVICES_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_SERVICES_TYPE_LOGGER, GraniteServicesLoggerClass))
#define GRANITE_SERVICES_IS_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_TYPE_LOGGER))
#define GRANITE_SERVICES_IS_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_SERVICES_TYPE_LOGGER))
#define GRANITE_SERVICES_LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_SERVICES_TYPE_LOGGER, GraniteServicesLoggerClass))

typedef struct _GraniteServicesLogger GraniteServicesLogger;
typedef struct _GraniteServicesLoggerClass GraniteServicesLoggerClass;
typedef struct _GraniteServicesLoggerPrivate GraniteServicesLoggerPrivate;
enum  {
	GRANITE_SERVICES_LOGGER_0_PROPERTY,
	GRANITE_SERVICES_LOGGER_NUM_PROPERTIES
};
static GParamSpec* granite_services_logger_properties[GRANITE_SERVICES_LOGGER_NUM_PROPERTIES];
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))

struct _GraniteServicesLogger {
	GObject parent_instance;
	GraniteServicesLoggerPrivate * priv;
};

struct _GraniteServicesLoggerClass {
	GObjectClass parent_class;
};

static gpointer granite_services_logger_parent_class = NULL;
static GraniteServicesLogLevel granite_services_logger__DisplayLevel;
static GraniteServicesLogLevel granite_services_logger__DisplayLevel = GRANITE_SERVICES_LOG_LEVEL_WARN;
static GMutex granite_services_logger_write_mutex;
static GMutex granite_services_logger_write_mutex = {0};

GType granite_services_log_level_get_type (void) G_GNUC_CONST;
G_GNUC_INTERNAL GType granite_services_console_color_get_type (void) G_GNUC_CONST;
GType granite_services_logger_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteServicesLogger, g_object_unref)
GraniteServicesLogLevel granite_services_logger_get_DisplayLevel (void);
void granite_services_logger_set_DisplayLevel (GraniteServicesLogLevel value);
void granite_services_logger_initialize (const gchar* app_name);
static void granite_services_logger_glib_log_func (const gchar* d,
                                            GLogLevelFlags flags,
                                            const gchar* msg);
void granite_services_logger_notification (const gchar* msg);
static void granite_services_logger_write (GraniteServicesLogLevel level,
                                    gchar* msg);
static gchar* granite_services_logger_get_time (void);
static void granite_services_logger_set_color_for_level (GraniteServicesLogLevel level);
static void granite_services_logger_reset_color (void);
static void granite_services_logger_set_foreground (GraniteServicesConsoleColor color);
static void granite_services_logger_set_background (GraniteServicesConsoleColor color);
static void granite_services_logger_set_color (GraniteServicesConsoleColor color,
                                        gboolean is_foreground);
GraniteServicesLogger* granite_services_logger_new (void);
GraniteServicesLogger* granite_services_logger_construct (GType object_type);
static void granite_services_logger_finalize (GObject * obj);
static GType granite_services_logger_get_type_once (void);
static void _vala_granite_services_logger_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec);
static void _vala_granite_services_logger_set_property (GObject * object,
                                                 guint property_id,
                                                 const GValue * value,
                                                 GParamSpec * pspec);

static const gchar* GRANITE_SERVICES_LOGGER_LOG_LEVEL_TO_STRING[6] = {"DEBUG", "INFO", "NOTIFY", "WARNING", "ERROR", "FATAL"};

/**
     * LogLevel:
     */
static GType
granite_services_log_level_get_type_once (void)
{
	static const GEnumValue values[] = {{GRANITE_SERVICES_LOG_LEVEL_DEBUG, "GRANITE_SERVICES_LOG_LEVEL_DEBUG", "debug"}, {GRANITE_SERVICES_LOG_LEVEL_INFO, "GRANITE_SERVICES_LOG_LEVEL_INFO", "info"}, {GRANITE_SERVICES_LOG_LEVEL_NOTIFY, "GRANITE_SERVICES_LOG_LEVEL_NOTIFY", "notify"}, {GRANITE_SERVICES_LOG_LEVEL_WARN, "GRANITE_SERVICES_LOG_LEVEL_WARN", "warn"}, {GRANITE_SERVICES_LOG_LEVEL_ERROR, "GRANITE_SERVICES_LOG_LEVEL_ERROR", "error"}, {GRANITE_SERVICES_LOG_LEVEL_FATAL, "GRANITE_SERVICES_LOG_LEVEL_FATAL", "fatal"}, {0, NULL, NULL}};
	GType granite_services_log_level_type_id;
	granite_services_log_level_type_id = g_enum_register_static ("GraniteServicesLogLevel", values);
	return granite_services_log_level_type_id;
}

GType
granite_services_log_level_get_type (void)
{
	static volatile gsize granite_services_log_level_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_log_level_type_id__volatile)) {
		GType granite_services_log_level_type_id;
		granite_services_log_level_type_id = granite_services_log_level_get_type_once ();
		g_once_init_leave (&granite_services_log_level_type_id__volatile, granite_services_log_level_type_id);
	}
	return granite_services_log_level_type_id__volatile;
}

static GType
granite_services_console_color_get_type_once (void)
{
	static const GEnumValue values[] = {{GRANITE_SERVICES_CONSOLE_COLOR_BLACK, "GRANITE_SERVICES_CONSOLE_COLOR_BLACK", "black"}, {GRANITE_SERVICES_CONSOLE_COLOR_RED, "GRANITE_SERVICES_CONSOLE_COLOR_RED", "red"}, {GRANITE_SERVICES_CONSOLE_COLOR_GREEN, "GRANITE_SERVICES_CONSOLE_COLOR_GREEN", "green"}, {GRANITE_SERVICES_CONSOLE_COLOR_YELLOW, "GRANITE_SERVICES_CONSOLE_COLOR_YELLOW", "yellow"}, {GRANITE_SERVICES_CONSOLE_COLOR_BLUE, "GRANITE_SERVICES_CONSOLE_COLOR_BLUE", "blue"}, {GRANITE_SERVICES_CONSOLE_COLOR_MAGENTA, "GRANITE_SERVICES_CONSOLE_COLOR_MAGENTA", "magenta"}, {GRANITE_SERVICES_CONSOLE_COLOR_CYAN, "GRANITE_SERVICES_CONSOLE_COLOR_CYAN", "cyan"}, {GRANITE_SERVICES_CONSOLE_COLOR_WHITE, "GRANITE_SERVICES_CONSOLE_COLOR_WHITE", "white"}, {0, NULL, NULL}};
	GType granite_services_console_color_type_id;
	granite_services_console_color_type_id = g_enum_register_static ("GraniteServicesConsoleColor", values);
	return granite_services_console_color_type_id;
}

G_GNUC_INTERNAL GType
granite_services_console_color_get_type (void)
{
	static volatile gsize granite_services_console_color_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_console_color_type_id__volatile)) {
		GType granite_services_console_color_type_id;
		granite_services_console_color_type_id = granite_services_console_color_get_type_once ();
		g_once_init_leave (&granite_services_console_color_type_id__volatile, granite_services_console_color_type_id);
	}
	return granite_services_console_color_type_id__volatile;
}

GraniteServicesLogLevel
granite_services_logger_get_DisplayLevel (void)
{
	GraniteServicesLogLevel result;
	GraniteServicesLogLevel _tmp0_;
#line 86 "../lib/Services/Logger.vala"
	_tmp0_ = granite_services_logger__DisplayLevel;
#line 86 "../lib/Services/Logger.vala"
	result = _tmp0_;
#line 86 "../lib/Services/Logger.vala"
	return result;
#line 180 "Logger.c"
}

void
granite_services_logger_set_DisplayLevel (GraniteServicesLogLevel value)
{
#line 86 "../lib/Services/Logger.vala"
	granite_services_logger__DisplayLevel = value;
#line 188 "Logger.c"
}

/**
         * This method initializes the Logger
         *
         * @param app_name name of app that is logging
         */
void
granite_services_logger_initialize (const gchar* app_name)
{
#line 95 "../lib/Services/Logger.vala"
	g_return_if_fail (app_name != NULL);
#line 96 "../lib/Services/Logger.vala"
	g_log_set_default_handler ((GLogFunc) granite_services_logger_glib_log_func, NULL);
#line 203 "Logger.c"
}

/**
         * Logs message using Notify level formatting
         *
         * @param msg message to be logged
         */
void
granite_services_logger_notification (const gchar* msg)
{
	gchar* _tmp0_;
#line 104 "../lib/Services/Logger.vala"
	g_return_if_fail (msg != NULL);
#line 105 "../lib/Services/Logger.vala"
	_tmp0_ = g_strdup (msg);
#line 105 "../lib/Services/Logger.vala"
	granite_services_logger_write (GRANITE_SERVICES_LOG_LEVEL_NOTIFY, _tmp0_);
#line 221 "Logger.c"
}

static gchar*
granite_services_logger_get_time (void)
{
	GDateTime* now = NULL;
	GDateTime* _tmp0_;
	gchar* _tmp1_;
	gchar* result = NULL;
#line 109 "../lib/Services/Logger.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 109 "../lib/Services/Logger.vala"
	now = _tmp0_;
#line 110 "../lib/Services/Logger.vala"
	_tmp1_ = g_strdup_printf ("%.2d:%.2d:%.2d.%.6d", g_date_time_get_hour (now), g_date_time_get_minute (now), g_date_time_get_second (now), g_date_time_get_microsecond (now));
#line 110 "../lib/Services/Logger.vala"
	result = _tmp1_;
#line 110 "../lib/Services/Logger.vala"
	_g_date_time_unref0 (now);
#line 110 "../lib/Services/Logger.vala"
	return result;
#line 243 "Logger.c"
}

static void
granite_services_logger_write (GraniteServicesLogLevel level,
                               gchar* msg)
{
	GraniteServicesLogLevel _tmp0_;
	GraniteServicesLogLevel _tmp1_;
	FILE* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	FILE* _tmp6_;
#line 118 "../lib/Services/Logger.vala"
	g_return_if_fail (msg != NULL);
#line 120 "../lib/Services/Logger.vala"
	_tmp0_ = granite_services_logger_get_DisplayLevel ();
#line 120 "../lib/Services/Logger.vala"
	_tmp1_ = _tmp0_;
#line 120 "../lib/Services/Logger.vala"
	if (level < _tmp1_) {
#line 121 "../lib/Services/Logger.vala"
		_g_free0 (msg);
#line 121 "../lib/Services/Logger.vala"
		return;
#line 269 "Logger.c"
	}
#line 123 "../lib/Services/Logger.vala"
	g_mutex_lock (&granite_services_logger_write_mutex);
#line 124 "../lib/Services/Logger.vala"
	granite_services_logger_set_color_for_level (level);
#line 125 "../lib/Services/Logger.vala"
	_tmp2_ = stdout;
#line 125 "../lib/Services/Logger.vala"
	_tmp3_ = GRANITE_SERVICES_LOGGER_LOG_LEVEL_TO_STRING[level];
#line 125 "../lib/Services/Logger.vala"
	_tmp4_ = granite_services_logger_get_time ();
#line 125 "../lib/Services/Logger.vala"
	_tmp5_ = _tmp4_;
#line 125 "../lib/Services/Logger.vala"
	fprintf (_tmp2_, "[%s %s]", _tmp3_, _tmp5_);
#line 125 "../lib/Services/Logger.vala"
	_g_free0 (_tmp5_);
#line 127 "../lib/Services/Logger.vala"
	granite_services_logger_reset_color ();
#line 128 "../lib/Services/Logger.vala"
	_tmp6_ = stdout;
#line 128 "../lib/Services/Logger.vala"
	fprintf (_tmp6_, " %s\n", msg);
#line 130 "../lib/Services/Logger.vala"
	g_mutex_unlock (&granite_services_logger_write_mutex);
#line 118 "../lib/Services/Logger.vala"
	_g_free0 (msg);
#line 297 "Logger.c"
}

static void
granite_services_logger_set_color_for_level (GraniteServicesLogLevel level)
{
#line 135 "../lib/Services/Logger.vala"
	switch (level) {
#line 135 "../lib/Services/Logger.vala"
		case GRANITE_SERVICES_LOG_LEVEL_DEBUG:
#line 307 "Logger.c"
		{
#line 137 "../lib/Services/Logger.vala"
			granite_services_logger_set_foreground (GRANITE_SERVICES_CONSOLE_COLOR_GREEN);
#line 138 "../lib/Services/Logger.vala"
			break;
#line 313 "Logger.c"
		}
#line 135 "../lib/Services/Logger.vala"
		case GRANITE_SERVICES_LOG_LEVEL_INFO:
#line 317 "Logger.c"
		{
#line 140 "../lib/Services/Logger.vala"
			granite_services_logger_set_foreground (GRANITE_SERVICES_CONSOLE_COLOR_BLUE);
#line 141 "../lib/Services/Logger.vala"
			break;
#line 323 "Logger.c"
		}
#line 135 "../lib/Services/Logger.vala"
		case GRANITE_SERVICES_LOG_LEVEL_NOTIFY:
#line 327 "Logger.c"
		{
#line 143 "../lib/Services/Logger.vala"
			granite_services_logger_set_foreground (GRANITE_SERVICES_CONSOLE_COLOR_MAGENTA);
#line 144 "../lib/Services/Logger.vala"
			break;
#line 333 "Logger.c"
		}
#line 135 "../lib/Services/Logger.vala"
		case GRANITE_SERVICES_LOG_LEVEL_WARN:
#line 337 "Logger.c"
		{
#line 146 "../lib/Services/Logger.vala"
			granite_services_logger_set_foreground (GRANITE_SERVICES_CONSOLE_COLOR_YELLOW);
#line 147 "../lib/Services/Logger.vala"
			break;
#line 343 "Logger.c"
		}
#line 135 "../lib/Services/Logger.vala"
		case GRANITE_SERVICES_LOG_LEVEL_ERROR:
#line 347 "Logger.c"
		{
#line 149 "../lib/Services/Logger.vala"
			granite_services_logger_set_foreground (GRANITE_SERVICES_CONSOLE_COLOR_RED);
#line 150 "../lib/Services/Logger.vala"
			break;
#line 353 "Logger.c"
		}
#line 135 "../lib/Services/Logger.vala"
		case GRANITE_SERVICES_LOG_LEVEL_FATAL:
#line 357 "Logger.c"
		{
#line 152 "../lib/Services/Logger.vala"
			granite_services_logger_set_background (GRANITE_SERVICES_CONSOLE_COLOR_RED);
#line 153 "../lib/Services/Logger.vala"
			granite_services_logger_set_foreground (GRANITE_SERVICES_CONSOLE_COLOR_WHITE);
#line 154 "../lib/Services/Logger.vala"
			break;
#line 365 "Logger.c"
		}
		default:
#line 135 "../lib/Services/Logger.vala"
		break;
#line 370 "Logger.c"
	}
}

static void
granite_services_logger_reset_color (void)
{
	FILE* _tmp0_;
#line 159 "../lib/Services/Logger.vala"
	_tmp0_ = stdout;
#line 159 "../lib/Services/Logger.vala"
	fprintf (_tmp0_, "\x001b[0m");
#line 382 "Logger.c"
}

static void
granite_services_logger_set_foreground (GraniteServicesConsoleColor color)
{
#line 163 "../lib/Services/Logger.vala"
	granite_services_logger_set_color (color, TRUE);
#line 390 "Logger.c"
}

static void
granite_services_logger_set_background (GraniteServicesConsoleColor color)
{
#line 167 "../lib/Services/Logger.vala"
	granite_services_logger_set_color (color, FALSE);
#line 398 "Logger.c"
}

static void
granite_services_logger_set_color (GraniteServicesConsoleColor color,
                                   gboolean is_foreground)
{
	GraniteServicesConsoleColor color_code = 0;
	FILE* _tmp1_;
	GraniteServicesConsoleColor _tmp2_;
#line 172 "../lib/Services/Logger.vala"
	color_code = (color + 30) + 60;
#line 173 "../lib/Services/Logger.vala"
	if (!is_foreground) {
#line 412 "Logger.c"
		GraniteServicesConsoleColor _tmp0_;
#line 174 "../lib/Services/Logger.vala"
		_tmp0_ = color_code;
#line 174 "../lib/Services/Logger.vala"
		color_code = _tmp0_ + 10;
#line 418 "Logger.c"
	}
#line 175 "../lib/Services/Logger.vala"
	_tmp1_ = stdout;
#line 175 "../lib/Services/Logger.vala"
	_tmp2_ = color_code;
#line 175 "../lib/Services/Logger.vala"
	fprintf (_tmp1_, "\x001b[%dm", (gint) _tmp2_);
#line 426 "Logger.c"
}

static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gchar* _tmp0_;
	gboolean result = FALSE;
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1531 "glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1531 "glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1531 "glib-2.0.vapi"
	return result;
#line 445 "Logger.c"
}

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1535 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 467 "Logger.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 471 "Logger.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 477 "Logger.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 481 "Logger.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp0_) {
#line 485 "Logger.c"
		gchar* _tmp2_;
#line 1536 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1536 "glib-2.0.vapi"
		result = _tmp2_;
#line 1536 "glib-2.0.vapi"
		return result;
#line 493 "Logger.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1539 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1539 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1539 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1539 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1539 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1539 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1539 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1539 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 521 "Logger.c"
				goto __catch0_g_regex_error;
			}
#line 1539 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1539 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1539 "glib-2.0.vapi"
			return NULL;
#line 530 "Logger.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1540 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1540 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1540 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1540 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 544 "Logger.c"
				goto __catch0_g_regex_error;
			}
#line 1540 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1540 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1540 "glib-2.0.vapi"
			return NULL;
#line 553 "Logger.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1540 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1540 "glib-2.0.vapi"
		result = _tmp10_;
#line 1540 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
		return result;
#line 567 "Logger.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1538 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1542 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 576 "Logger.c"
	}
	__finally0:
#line 1538 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1538 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1538 "glib-2.0.vapi"
	return NULL;
#line 585 "Logger.c"
}

static void
granite_services_logger_glib_log_func (const gchar* d,
                                       GLogLevelFlags flags,
                                       const gchar* msg)
{
	gchar* domain = NULL;
	gchar* message = NULL;
	gboolean _tmp2_ = FALSE;
	GraniteServicesLogLevel level = 0;
	GraniteServicesLogLevel _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
#line 178 "../lib/Services/Logger.vala"
	g_return_if_fail (msg != NULL);
#line 180 "../lib/Services/Logger.vala"
	if (d != NULL) {
#line 604 "Logger.c"
		gchar* _tmp0_;
#line 181 "../lib/Services/Logger.vala"
		_tmp0_ = g_strdup_printf ("[%s] ", d);
#line 181 "../lib/Services/Logger.vala"
		_g_free0 (domain);
#line 181 "../lib/Services/Logger.vala"
		domain = _tmp0_;
#line 612 "Logger.c"
	} else {
		gchar* _tmp1_;
#line 183 "../lib/Services/Logger.vala"
		_tmp1_ = g_strdup ("");
#line 183 "../lib/Services/Logger.vala"
		_g_free0 (domain);
#line 183 "../lib/Services/Logger.vala"
		domain = _tmp1_;
#line 621 "Logger.c"
	}
#line 186 "../lib/Services/Logger.vala"
	if (string_contains (msg, "\n")) {
#line 186 "../lib/Services/Logger.vala"
		_tmp2_ = TRUE;
#line 627 "Logger.c"
	} else {
#line 186 "../lib/Services/Logger.vala"
		_tmp2_ = string_contains (msg, "\r");
#line 631 "Logger.c"
	}
#line 186 "../lib/Services/Logger.vala"
	if (_tmp2_) {
#line 635 "Logger.c"
		const gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
#line 187 "../lib/Services/Logger.vala"
		_tmp3_ = domain;
#line 187 "../lib/Services/Logger.vala"
		_tmp4_ = string_replace (msg, "\n", "");
#line 187 "../lib/Services/Logger.vala"
		_tmp5_ = _tmp4_;
#line 187 "../lib/Services/Logger.vala"
		_tmp6_ = string_replace (_tmp5_, "\r", "");
#line 187 "../lib/Services/Logger.vala"
		_tmp7_ = _tmp6_;
#line 187 "../lib/Services/Logger.vala"
		_tmp8_ = g_strdup_printf ("%s%s", _tmp3_, _tmp7_);
#line 187 "../lib/Services/Logger.vala"
		_g_free0 (message);
#line 187 "../lib/Services/Logger.vala"
		message = _tmp8_;
#line 187 "../lib/Services/Logger.vala"
		_g_free0 (_tmp7_);
#line 187 "../lib/Services/Logger.vala"
		_g_free0 (_tmp5_);
#line 662 "Logger.c"
	} else {
		const gchar* _tmp9_;
		gchar* _tmp10_;
#line 189 "../lib/Services/Logger.vala"
		_tmp9_ = domain;
#line 189 "../lib/Services/Logger.vala"
		_tmp10_ = g_strdup_printf ("%s%s", _tmp9_, msg);
#line 189 "../lib/Services/Logger.vala"
		_g_free0 (message);
#line 189 "../lib/Services/Logger.vala"
		message = _tmp10_;
#line 674 "Logger.c"
	}
#line 194 "../lib/Services/Logger.vala"
	flags = flags & G_LOG_LEVEL_MASK;
#line 196 "../lib/Services/Logger.vala"
	switch (flags) {
#line 196 "../lib/Services/Logger.vala"
		case G_LOG_LEVEL_CRITICAL:
#line 682 "Logger.c"
		{
#line 198 "../lib/Services/Logger.vala"
			level = GRANITE_SERVICES_LOG_LEVEL_FATAL;
#line 199 "../lib/Services/Logger.vala"
			break;
#line 688 "Logger.c"
		}
#line 196 "../lib/Services/Logger.vala"
		case G_LOG_LEVEL_ERROR:
#line 692 "Logger.c"
		{
#line 202 "../lib/Services/Logger.vala"
			level = GRANITE_SERVICES_LOG_LEVEL_ERROR;
#line 203 "../lib/Services/Logger.vala"
			break;
#line 698 "Logger.c"
		}
#line 196 "../lib/Services/Logger.vala"
		case G_LOG_LEVEL_INFO:
#line 196 "../lib/Services/Logger.vala"
		case G_LOG_LEVEL_MESSAGE:
#line 704 "Logger.c"
		{
#line 207 "../lib/Services/Logger.vala"
			level = GRANITE_SERVICES_LOG_LEVEL_INFO;
#line 208 "../lib/Services/Logger.vala"
			break;
#line 710 "Logger.c"
		}
#line 196 "../lib/Services/Logger.vala"
		case G_LOG_LEVEL_DEBUG:
#line 714 "Logger.c"
		{
#line 211 "../lib/Services/Logger.vala"
			level = GRANITE_SERVICES_LOG_LEVEL_DEBUG;
#line 212 "../lib/Services/Logger.vala"
			break;
#line 720 "Logger.c"
		}
		default:
#line 196 "../lib/Services/Logger.vala"
		case G_LOG_LEVEL_WARNING:
#line 725 "Logger.c"
		{
#line 216 "../lib/Services/Logger.vala"
			level = GRANITE_SERVICES_LOG_LEVEL_WARN;
#line 217 "../lib/Services/Logger.vala"
			break;
#line 731 "Logger.c"
		}
	}
#line 220 "../lib/Services/Logger.vala"
	_tmp11_ = level;
#line 220 "../lib/Services/Logger.vala"
	_tmp12_ = message;
#line 220 "../lib/Services/Logger.vala"
	_tmp13_ = g_strdup (_tmp12_);
#line 220 "../lib/Services/Logger.vala"
	granite_services_logger_write (_tmp11_, _tmp13_);
#line 178 "../lib/Services/Logger.vala"
	_g_free0 (message);
#line 178 "../lib/Services/Logger.vala"
	_g_free0 (domain);
#line 746 "Logger.c"
}

GraniteServicesLogger*
granite_services_logger_construct (GType object_type)
{
	GraniteServicesLogger * self = NULL;
#line 73 "../lib/Services/Logger.vala"
	self = (GraniteServicesLogger*) g_object_new (object_type, NULL);
#line 73 "../lib/Services/Logger.vala"
	return self;
#line 757 "Logger.c"
}

GraniteServicesLogger*
granite_services_logger_new (void)
{
#line 73 "../lib/Services/Logger.vala"
	return granite_services_logger_construct (GRANITE_SERVICES_TYPE_LOGGER);
#line 765 "Logger.c"
}

static void
granite_services_logger_class_init (GraniteServicesLoggerClass * klass,
                                    gpointer klass_data)
{
#line 73 "../lib/Services/Logger.vala"
	granite_services_logger_parent_class = g_type_class_peek_parent (klass);
#line 73 "../lib/Services/Logger.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_services_logger_get_property;
#line 73 "../lib/Services/Logger.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_services_logger_set_property;
#line 73 "../lib/Services/Logger.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_services_logger_finalize;
#line 780 "Logger.c"
}

static void
granite_services_logger_instance_init (GraniteServicesLogger * self,
                                       gpointer klass)
{
}

static void
granite_services_logger_finalize (GObject * obj)
{
	GraniteServicesLogger * self;
#line 73 "../lib/Services/Logger.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_SERVICES_TYPE_LOGGER, GraniteServicesLogger);
#line 73 "../lib/Services/Logger.vala"
	G_OBJECT_CLASS (granite_services_logger_parent_class)->finalize (obj);
#line 797 "Logger.c"
}

/**
     * This class helps in the use of logs in a Granite application.
     *
     */
static GType
granite_services_logger_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteServicesLoggerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_services_logger_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteServicesLogger), 0, (GInstanceInitFunc) granite_services_logger_instance_init, NULL };
	GType granite_services_logger_type_id;
	granite_services_logger_type_id = g_type_register_static (G_TYPE_OBJECT, "GraniteServicesLogger", &g_define_type_info, 0);
	return granite_services_logger_type_id;
}

GType
granite_services_logger_get_type (void)
{
	static volatile gsize granite_services_logger_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_logger_type_id__volatile)) {
		GType granite_services_logger_type_id;
		granite_services_logger_type_id = granite_services_logger_get_type_once ();
		g_once_init_leave (&granite_services_logger_type_id__volatile, granite_services_logger_type_id);
	}
	return granite_services_logger_type_id__volatile;
}

static void
_vala_granite_services_logger_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec)
{
	GraniteServicesLogger * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_SERVICES_TYPE_LOGGER, GraniteServicesLogger);
#line 73 "../lib/Services/Logger.vala"
	switch (property_id) {
#line 835 "Logger.c"
		default:
#line 73 "../lib/Services/Logger.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 73 "../lib/Services/Logger.vala"
		break;
#line 841 "Logger.c"
	}
}

static void
_vala_granite_services_logger_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec)
{
	GraniteServicesLogger * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_SERVICES_TYPE_LOGGER, GraniteServicesLogger);
#line 73 "../lib/Services/Logger.vala"
	switch (property_id) {
#line 855 "Logger.c"
		default:
#line 73 "../lib/Services/Logger.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 73 "../lib/Services/Logger.vala"
		break;
#line 861 "Logger.c"
	}
}


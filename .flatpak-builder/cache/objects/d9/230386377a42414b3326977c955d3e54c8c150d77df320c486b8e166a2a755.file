/* FormView.c generated by valac 0.48.14, the Vala compiler
 * generated from FormView.vala, do not modify */

/*
* Copyright 2020 elementary, Inc. (https://elementary.io)
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA.
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include "granite.h"

#define TYPE_FORM_VIEW (form_view_get_type ())
#define FORM_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FORM_VIEW, FormView))
#define FORM_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FORM_VIEW, FormViewClass))
#define IS_FORM_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FORM_VIEW))
#define IS_FORM_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FORM_VIEW))
#define FORM_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FORM_VIEW, FormViewClass))

typedef struct _FormView FormView;
typedef struct _FormViewClass FormViewClass;
typedef struct _FormViewPrivate FormViewPrivate;
enum  {
	FORM_VIEW_0_PROPERTY,
	FORM_VIEW_NUM_PROPERTIES
};
static GParamSpec* form_view_properties[FORM_VIEW_NUM_PROPERTIES];
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _FormView {
	GtkGrid parent_instance;
	FormViewPrivate * priv;
};

struct _FormViewClass {
	GtkGridClass parent_class;
};

static gpointer form_view_parent_class = NULL;

GType form_view_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FormView, g_object_unref)
FormView* form_view_new (void);
FormView* form_view_construct (GType object_type);
static GObject * form_view_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties);
static GType form_view_get_type_once (void);

FormView*
form_view_construct (GType object_type)
{
	FormView * self = NULL;
#line 20 "../demo/Views/FormView.vala"
	self = (FormView*) g_object_new (object_type, NULL);
#line 20 "../demo/Views/FormView.vala"
	return self;
#line 76 "FormView.c"
}

FormView*
form_view_new (void)
{
#line 20 "../demo/Views/FormView.vala"
	return form_view_construct (TYPE_FORM_VIEW);
#line 84 "FormView.c"
}

static GObject *
form_view_constructor (GType type,
                       guint n_construct_properties,
                       GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	FormView * self;
	GRegex* username_regex = NULL;
	GraniteHeaderLabel* username_label = NULL;
	GraniteHeaderLabel* _tmp5_;
	GraniteValidatedEntry* username_entry = NULL;
	GRegex* _tmp6_;
	GraniteValidatedEntry* _tmp7_;
	GtkButton* button = NULL;
	GtkButton* _tmp8_;
	GraniteHeaderLabel* _tmp9_;
	GraniteValidatedEntry* _tmp10_;
	GtkButton* _tmp11_;
	GraniteValidatedEntry* _tmp12_;
	GtkButton* _tmp13_;
	GError* _inner_error0_ = NULL;
#line 21 "../demo/Views/FormView.vala"
	parent_class = G_OBJECT_CLASS (form_view_parent_class);
#line 21 "../demo/Views/FormView.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 21 "../demo/Views/FormView.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FORM_VIEW, FormView);
#line 22 "../demo/Views/FormView.vala"
	username_regex = NULL;
#line 117 "FormView.c"
	{
		GRegex* _tmp0_ = NULL;
		GRegex* _tmp1_;
		GRegex* _tmp2_;
#line 24 "../demo/Views/FormView.vala"
		_tmp1_ = g_regex_new ("^[a-z]+[a-z0-9]*$", 0, 0, &_inner_error0_);
#line 24 "../demo/Views/FormView.vala"
		_tmp0_ = _tmp1_;
#line 24 "../demo/Views/FormView.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 128 "FormView.c"
			goto __catch0_g_error;
		}
#line 24 "../demo/Views/FormView.vala"
		_tmp2_ = _tmp0_;
#line 24 "../demo/Views/FormView.vala"
		_tmp0_ = NULL;
#line 24 "../demo/Views/FormView.vala"
		_g_regex_unref0 (username_regex);
#line 24 "../demo/Views/FormView.vala"
		username_regex = _tmp2_;
#line 23 "../demo/Views/FormView.vala"
		_g_regex_unref0 (_tmp0_);
#line 141 "FormView.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp3_;
		const gchar* _tmp4_;
#line 23 "../demo/Views/FormView.vala"
		e = _inner_error0_;
#line 23 "../demo/Views/FormView.vala"
		_inner_error0_ = NULL;
#line 26 "../demo/Views/FormView.vala"
		_tmp3_ = e;
#line 26 "../demo/Views/FormView.vala"
		_tmp4_ = _tmp3_->message;
#line 26 "../demo/Views/FormView.vala"
		g_critical ("FormView.vala:26: %s", _tmp4_);
#line 23 "../demo/Views/FormView.vala"
		_g_error_free0 (e);
#line 161 "FormView.c"
	}
	__finally0:
#line 23 "../demo/Views/FormView.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 23 "../demo/Views/FormView.vala"
		_g_regex_unref0 (username_regex);
#line 23 "../demo/Views/FormView.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 23 "../demo/Views/FormView.vala"
		g_clear_error (&_inner_error0_);
#line 172 "FormView.c"
	}
#line 29 "../demo/Views/FormView.vala"
	_tmp5_ = granite_header_label_new ("Username");
#line 29 "../demo/Views/FormView.vala"
	g_object_ref_sink (_tmp5_);
#line 29 "../demo/Views/FormView.vala"
	username_label = _tmp5_;
#line 31 "../demo/Views/FormView.vala"
	_tmp6_ = username_regex;
#line 31 "../demo/Views/FormView.vala"
	_tmp7_ = granite_validated_entry_new_from_regex (_tmp6_);
#line 31 "../demo/Views/FormView.vala"
	g_object_ref_sink (_tmp7_);
#line 31 "../demo/Views/FormView.vala"
	username_entry = _tmp7_;
#line 33 "../demo/Views/FormView.vala"
	_tmp8_ = (GtkButton*) gtk_button_new_with_label ("Submit");
#line 33 "../demo/Views/FormView.vala"
	g_object_ref_sink (_tmp8_);
#line 33 "../demo/Views/FormView.vala"
	button = _tmp8_;
#line 35 "../demo/Views/FormView.vala"
	g_object_set ((GtkWidget*) self, "margin", 12, NULL);
#line 36 "../demo/Views/FormView.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) self, GTK_ORIENTATION_VERTICAL);
#line 37 "../demo/Views/FormView.vala"
	gtk_grid_set_row_spacing ((GtkGrid*) self, 3);
#line 38 "../demo/Views/FormView.vala"
	gtk_widget_set_halign ((GtkWidget*) self, GTK_ALIGN_CENTER);
#line 39 "../demo/Views/FormView.vala"
	gtk_widget_set_valign ((GtkWidget*) self, GTK_ALIGN_CENTER);
#line 40 "../demo/Views/FormView.vala"
	gtk_widget_set_vexpand ((GtkWidget*) self, TRUE);
#line 41 "../demo/Views/FormView.vala"
	_tmp9_ = username_label;
#line 41 "../demo/Views/FormView.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp9_);
#line 42 "../demo/Views/FormView.vala"
	_tmp10_ = username_entry;
#line 42 "../demo/Views/FormView.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 43 "../demo/Views/FormView.vala"
	_tmp11_ = button;
#line 43 "../demo/Views/FormView.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp11_);
#line 44 "../demo/Views/FormView.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 46 "../demo/Views/FormView.vala"
	_tmp12_ = username_entry;
#line 46 "../demo/Views/FormView.vala"
	_tmp13_ = button;
#line 46 "../demo/Views/FormView.vala"
	g_object_bind_property_with_closures ((GObject*) _tmp12_, "is-valid", (GObject*) _tmp13_, "sensitive", G_BINDING_DEFAULT, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
#line 21 "../demo/Views/FormView.vala"
	_g_object_unref0 (button);
#line 21 "../demo/Views/FormView.vala"
	_g_object_unref0 (username_entry);
#line 21 "../demo/Views/FormView.vala"
	_g_object_unref0 (username_label);
#line 21 "../demo/Views/FormView.vala"
	_g_regex_unref0 (username_regex);
#line 21 "../demo/Views/FormView.vala"
	return obj;
#line 236 "FormView.c"
}

static void
form_view_class_init (FormViewClass * klass,
                      gpointer klass_data)
{
#line 20 "../demo/Views/FormView.vala"
	form_view_parent_class = g_type_class_peek_parent (klass);
#line 20 "../demo/Views/FormView.vala"
	G_OBJECT_CLASS (klass)->constructor = form_view_constructor;
#line 247 "FormView.c"
}

static void
form_view_instance_init (FormView * self,
                         gpointer klass)
{
}

static GType
form_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FormViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) form_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FormView), 0, (GInstanceInitFunc) form_view_instance_init, NULL };
	GType form_view_type_id;
	form_view_type_id = g_type_register_static (gtk_grid_get_type (), "FormView", &g_define_type_info, 0);
	return form_view_type_id;
}

GType
form_view_get_type (void)
{
	static volatile gsize form_view_type_id__volatile = 0;
	if (g_once_init_enter (&form_view_type_id__volatile)) {
		GType form_view_type_id;
		form_view_type_id = form_view_get_type_once ();
		g_once_init_leave (&form_view_type_id__volatile, form_view_type_id);
	}
	return form_view_type_id__volatile;
}


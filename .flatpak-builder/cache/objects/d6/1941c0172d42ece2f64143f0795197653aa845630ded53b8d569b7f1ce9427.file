/* TimePicker.c generated by valac 0.48.14, the Vala compiler
 * generated from TimePicker.vala, do not modify */

/*
 *  Copyright (C) 2018–2019 elementary, Inc. (https://elementary.io),
                  2011–2013 Maxwell Barvian <maxwell@elementaryos.org>,
 *                          Corentin Noël <tintou@mailoo.org>
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>

#define GRANITE_WIDGETS_TYPE_TIME_PICKER (granite_widgets_time_picker_get_type ())
#define GRANITE_WIDGETS_TIME_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_TIME_PICKER, GraniteWidgetsTimePicker))
#define GRANITE_WIDGETS_TIME_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_TIME_PICKER, GraniteWidgetsTimePickerClass))
#define GRANITE_WIDGETS_IS_TIME_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_TIME_PICKER))
#define GRANITE_WIDGETS_IS_TIME_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_TIME_PICKER))
#define GRANITE_WIDGETS_TIME_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_TIME_PICKER, GraniteWidgetsTimePickerClass))

typedef struct _GraniteWidgetsTimePicker GraniteWidgetsTimePicker;
typedef struct _GraniteWidgetsTimePickerClass GraniteWidgetsTimePickerClass;
typedef struct _GraniteWidgetsTimePickerPrivate GraniteWidgetsTimePickerPrivate;

#define GRANITE_WIDGETS_TYPE_MODE_BUTTON (granite_widgets_mode_button_get_type ())
#define GRANITE_WIDGETS_MODE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_WIDGETS_TYPE_MODE_BUTTON, GraniteWidgetsModeButton))
#define GRANITE_WIDGETS_MODE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_WIDGETS_TYPE_MODE_BUTTON, GraniteWidgetsModeButtonClass))
#define GRANITE_WIDGETS_IS_MODE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_WIDGETS_TYPE_MODE_BUTTON))
#define GRANITE_WIDGETS_IS_MODE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_WIDGETS_TYPE_MODE_BUTTON))
#define GRANITE_WIDGETS_MODE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_WIDGETS_TYPE_MODE_BUTTON, GraniteWidgetsModeButtonClass))

typedef struct _GraniteWidgetsModeButton GraniteWidgetsModeButton;
typedef struct _GraniteWidgetsModeButtonClass GraniteWidgetsModeButtonClass;
enum  {
	GRANITE_WIDGETS_TIME_PICKER_0_PROPERTY,
	GRANITE_WIDGETS_TIME_PICKER_FORMAT_12_PROPERTY,
	GRANITE_WIDGETS_TIME_PICKER_FORMAT_24_PROPERTY,
	GRANITE_WIDGETS_TIME_PICKER_TIME_PROPERTY,
	GRANITE_WIDGETS_TIME_PICKER_NUM_PROPERTIES
};
static GParamSpec* granite_widgets_time_picker_properties[GRANITE_WIDGETS_TIME_PICKER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
enum  {
	GRANITE_WIDGETS_TIME_PICKER_TIME_CHANGED_SIGNAL,
	GRANITE_WIDGETS_TIME_PICKER_NUM_SIGNALS
};
static guint granite_widgets_time_picker_signals[GRANITE_WIDGETS_TIME_PICKER_NUM_SIGNALS] = {0};

struct _GraniteWidgetsTimePicker {
	GtkEntry parent_instance;
	GraniteWidgetsTimePickerPrivate * priv;
};

struct _GraniteWidgetsTimePickerClass {
	GtkEntryClass parent_class;
	void (*position_dropdown) (GraniteWidgetsTimePicker* self, gint* x, gint* y) G_GNUC_DEPRECATED;
};

struct _GraniteWidgetsTimePickerPrivate {
	gchar* _format_12;
	gchar* _format_24;
	GDateTime* _time;
	gboolean changing_time;
	gchar* old_string;
	GtkPopover* popover;
	GtkSpinButton* hours_spinbutton;
	GtkSpinButton* minutes_spinbutton;
	GraniteWidgetsModeButton* am_pm_modebutton;
};

static gint GraniteWidgetsTimePicker_private_offset;
static gpointer granite_widgets_time_picker_parent_class = NULL;

GType granite_widgets_time_picker_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsTimePicker, g_object_unref)
GType granite_widgets_mode_button_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteWidgetsModeButton, g_object_unref)
void granite_widgets_time_picker_position_dropdown (GraniteWidgetsTimePicker* self,
                                                    gint* x,
                                                    gint* y) G_GNUC_DEPRECATED;
const gchar* granite_widgets_time_picker_get_format_12 (GraniteWidgetsTimePicker* self);
static void granite_widgets_time_picker_set_format_12 (GraniteWidgetsTimePicker* self,
                                                const gchar* value);
const gchar* granite_widgets_time_picker_get_format_24 (GraniteWidgetsTimePicker* self);
static void granite_widgets_time_picker_set_format_24 (GraniteWidgetsTimePicker* self,
                                                const gchar* value);
GDateTime* granite_widgets_time_picker_get_time (GraniteWidgetsTimePicker* self);
void granite_widgets_time_picker_set_time (GraniteWidgetsTimePicker* self,
                                           GDateTime* value);
void granite_widgets_mode_button_set_active (GraniteWidgetsModeButton* self,
                                             gint new_active_index);
static void granite_widgets_time_picker_update_text (GraniteWidgetsTimePicker* self,
                                              gboolean no_signal);
GraniteWidgetsTimePicker* granite_widgets_time_picker_new_with_format (const gchar* format_12,
                                                                       const gchar* format_24);
GraniteWidgetsTimePicker* granite_widgets_time_picker_construct_with_format (GType object_type,
                                                                             const gchar* format_12,
                                                                             const gchar* format_24);
static void granite_widgets_time_picker_update_time (GraniteWidgetsTimePicker* self,
                                              gboolean is_hour);
G_GNUC_INTERNAL gboolean granite_date_time_is_clock_format_12h (void);
gint granite_widgets_mode_button_get_selected (GraniteWidgetsModeButton* self);
static void granite_widgets_time_picker_on_icon_press (GraniteWidgetsTimePicker* self,
                                                GtkEntryIconPosition position,
                                                GdkEvent* event);
static void granite_widgets_time_picker_real_position_dropdown (GraniteWidgetsTimePicker* self,
                                                         gint* x,
                                                         gint* y) G_GNUC_DEPRECATED;
static void granite_widgets_time_picker_is_unfocused (GraniteWidgetsTimePicker* self);
static void granite_widgets_time_picker_parse_time (GraniteWidgetsTimePicker* self,
                                             const gchar* timestr);
static gint* _int_dup (gint* self);
static gboolean _int_equal (const gint * s1,
                     const gint * s2);
GraniteWidgetsTimePicker* granite_widgets_time_picker_new (void);
GraniteWidgetsTimePicker* granite_widgets_time_picker_construct (GType object_type);
static GObject * granite_widgets_time_picker_constructor (GType type,
                                                   guint n_construct_properties,
                                                   GObjectConstructParam * construct_properties);
gchar* granite_date_time_get_default_time_format (gboolean is_12h,
                                                  gboolean with_second);
static void _granite_widgets_time_picker_on_icon_press_gtk_entry_icon_release (GtkEntry* _sender,
                                                                        GtkEntryIconPosition icon_pos,
                                                                        GdkEvent* event,
                                                                        gpointer self);
GraniteWidgetsModeButton* granite_widgets_mode_button_new (void);
GraniteWidgetsModeButton* granite_widgets_mode_button_construct (GType object_type);
gint granite_widgets_mode_button_append_text (GraniteWidgetsModeButton* self,
                                              const gchar* text);
static void _granite_widgets_time_picker___lambda84_ (GraniteWidgetsTimePicker* self,
                                               GtkWidget* mode);
static void __granite_widgets_time_picker___lambda84__granite_widgets_mode_button_mode_changed (GraniteWidgetsModeButton* _sender,
                                                                                         GtkWidget* widget,
                                                                                         gpointer self);
static void _granite_widgets_time_picker___lambda85_ (GraniteWidgetsTimePicker* self);
static void __granite_widgets_time_picker___lambda85__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                              gpointer self);
static void _granite_widgets_time_picker___lambda86_ (GraniteWidgetsTimePicker* self);
static void __granite_widgets_time_picker___lambda86__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                              gpointer self);
static gboolean _granite_widgets_time_picker___lambda87_ (GraniteWidgetsTimePicker* self);
static gboolean __granite_widgets_time_picker___lambda87__gtk_spin_button_output (GtkSpinButton* _sender,
                                                                           gpointer self);
static gboolean _granite_widgets_time_picker___lambda88_ (GraniteWidgetsTimePicker* self);
static gboolean __granite_widgets_time_picker___lambda88__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                               GdkEventFocus* event,
                                                                               gpointer self);
static gboolean _granite_widgets_time_picker___lambda89_ (GraniteWidgetsTimePicker* self,
                                                   GdkEventScroll* event);
static gboolean __granite_widgets_time_picker___lambda89__gtk_widget_scroll_event (GtkWidget* _sender,
                                                                            GdkEventScroll* event,
                                                                            gpointer self);
static void _granite_widgets_time_picker_is_unfocused_gtk_entry_activate (GtkEntry* _sender,
                                                                   gpointer self);
static void granite_widgets_time_picker_finalize (GObject * obj);
static GType granite_widgets_time_picker_get_type_once (void);
static void _vala_granite_widgets_time_picker_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec);
static void _vala_granite_widgets_time_picker_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec);

static inline gpointer
granite_widgets_time_picker_get_instance_private (GraniteWidgetsTimePicker* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteWidgetsTimePicker_private_offset);
}

const gchar*
granite_widgets_time_picker_get_format_12 (GraniteWidgetsTimePicker* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 36 "../lib/Widgets/TimePicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 36 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = self->priv->_format_12;
#line 36 "../lib/Widgets/TimePicker.vala"
	result = _tmp0_;
#line 36 "../lib/Widgets/TimePicker.vala"
	return result;
#line 210 "TimePicker.c"
}

static void
granite_widgets_time_picker_set_format_12 (GraniteWidgetsTimePicker* self,
                                           const gchar* value)
{
	gchar* old_value;
#line 36 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 36 "../lib/Widgets/TimePicker.vala"
	old_value = granite_widgets_time_picker_get_format_12 (self);
#line 36 "../lib/Widgets/TimePicker.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 224 "TimePicker.c"
		gchar* _tmp0_;
#line 36 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = g_strdup (value);
#line 36 "../lib/Widgets/TimePicker.vala"
		_g_free0 (self->priv->_format_12);
#line 36 "../lib/Widgets/TimePicker.vala"
		self->priv->_format_12 = _tmp0_;
#line 36 "../lib/Widgets/TimePicker.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_widgets_time_picker_properties[GRANITE_WIDGETS_TIME_PICKER_FORMAT_12_PROPERTY]);
#line 234 "TimePicker.c"
	}
}

const gchar*
granite_widgets_time_picker_get_format_24 (GraniteWidgetsTimePicker* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 41 "../lib/Widgets/TimePicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 41 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = self->priv->_format_24;
#line 41 "../lib/Widgets/TimePicker.vala"
	result = _tmp0_;
#line 41 "../lib/Widgets/TimePicker.vala"
	return result;
#line 251 "TimePicker.c"
}

static void
granite_widgets_time_picker_set_format_24 (GraniteWidgetsTimePicker* self,
                                           const gchar* value)
{
	gchar* old_value;
#line 41 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 41 "../lib/Widgets/TimePicker.vala"
	old_value = granite_widgets_time_picker_get_format_24 (self);
#line 41 "../lib/Widgets/TimePicker.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 265 "TimePicker.c"
		gchar* _tmp0_;
#line 41 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = g_strdup (value);
#line 41 "../lib/Widgets/TimePicker.vala"
		_g_free0 (self->priv->_format_24);
#line 41 "../lib/Widgets/TimePicker.vala"
		self->priv->_format_24 = _tmp0_;
#line 41 "../lib/Widgets/TimePicker.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_widgets_time_picker_properties[GRANITE_WIDGETS_TIME_PICKER_FORMAT_24_PROPERTY]);
#line 275 "TimePicker.c"
	}
}

GDateTime*
granite_widgets_time_picker_get_time (GraniteWidgetsTimePicker* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
	GDateTime* _tmp3_;
#line 48 "../lib/Widgets/TimePicker.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 49 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = self->priv->_time;
#line 49 "../lib/Widgets/TimePicker.vala"
	if (_tmp0_ == NULL) {
#line 291 "TimePicker.c"
		GDateTime* _tmp1_;
		GDateTime* _tmp2_;
#line 50 "../lib/Widgets/TimePicker.vala"
		_tmp1_ = g_date_time_new_now_local ();
#line 50 "../lib/Widgets/TimePicker.vala"
		_tmp2_ = _tmp1_;
#line 50 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_time (self, _tmp2_);
#line 50 "../lib/Widgets/TimePicker.vala"
		_g_date_time_unref0 (_tmp2_);
#line 302 "TimePicker.c"
	}
#line 53 "../lib/Widgets/TimePicker.vala"
	_tmp3_ = self->priv->_time;
#line 53 "../lib/Widgets/TimePicker.vala"
	result = _tmp3_;
#line 53 "../lib/Widgets/TimePicker.vala"
	return result;
#line 310 "TimePicker.c"
}

static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 57 "../lib/Widgets/TimePicker.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 318 "TimePicker.c"
}

void
granite_widgets_time_picker_set_time (GraniteWidgetsTimePicker* self,
                                      GDateTime* value)
{
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 56 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 57 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = _g_date_time_ref0 (value);
#line 57 "../lib/Widgets/TimePicker.vala"
	_g_date_time_unref0 (self->priv->_time);
#line 57 "../lib/Widgets/TimePicker.vala"
	self->priv->_time = _tmp0_;
#line 58 "../lib/Widgets/TimePicker.vala"
	self->priv->changing_time = TRUE;
#line 60 "../lib/Widgets/TimePicker.vala"
	_tmp1_ = self->priv->_time;
#line 60 "../lib/Widgets/TimePicker.vala"
	if (g_date_time_get_hour (_tmp1_) >= 12) {
#line 341 "TimePicker.c"
		GraniteWidgetsModeButton* _tmp2_;
#line 61 "../lib/Widgets/TimePicker.vala"
		_tmp2_ = self->priv->am_pm_modebutton;
#line 61 "../lib/Widgets/TimePicker.vala"
		granite_widgets_mode_button_set_active (_tmp2_, 1);
#line 347 "TimePicker.c"
	} else {
		GraniteWidgetsModeButton* _tmp3_;
#line 63 "../lib/Widgets/TimePicker.vala"
		_tmp3_ = self->priv->am_pm_modebutton;
#line 63 "../lib/Widgets/TimePicker.vala"
		granite_widgets_mode_button_set_active (_tmp3_, 0);
#line 354 "TimePicker.c"
	}
#line 66 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_text (self, TRUE);
#line 67 "../lib/Widgets/TimePicker.vala"
	self->priv->changing_time = FALSE;
#line 56 "../lib/Widgets/TimePicker.vala"
	g_object_notify_by_pspec ((GObject *) self, granite_widgets_time_picker_properties[GRANITE_WIDGETS_TIME_PICKER_TIME_PROPERTY]);
#line 362 "TimePicker.c"
}

/**
         * Creates a new TimePicker.
         *
         * @param format_12 The desired custom 12h format. For example "%l:%M %p".
         * @param format_24 The desired custom 24h format. For example "%H:%M".
         */
GraniteWidgetsTimePicker*
granite_widgets_time_picker_construct_with_format (GType object_type,
                                                   const gchar* format_12,
                                                   const gchar* format_24)
{
	GraniteWidgetsTimePicker * self = NULL;
#line 85 "../lib/Widgets/TimePicker.vala"
	g_return_val_if_fail (format_12 != NULL, NULL);
#line 85 "../lib/Widgets/TimePicker.vala"
	g_return_val_if_fail (format_24 != NULL, NULL);
#line 86 "../lib/Widgets/TimePicker.vala"
	self = (GraniteWidgetsTimePicker*) g_object_new (object_type, "format-12", format_12, "format-24", format_24, NULL);
#line 85 "../lib/Widgets/TimePicker.vala"
	return self;
#line 385 "TimePicker.c"
}

GraniteWidgetsTimePicker*
granite_widgets_time_picker_new_with_format (const gchar* format_12,
                                             const gchar* format_24)
{
#line 85 "../lib/Widgets/TimePicker.vala"
	return granite_widgets_time_picker_construct_with_format (GRANITE_WIDGETS_TYPE_TIME_PICKER, format_12, format_24);
#line 394 "TimePicker.c"
}

static void
granite_widgets_time_picker_update_time (GraniteWidgetsTimePicker* self,
                                         gboolean is_hour)
{
#line 200 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 201 "../lib/Widgets/TimePicker.vala"
	if (self->priv->changing_time) {
#line 202 "../lib/Widgets/TimePicker.vala"
		return;
#line 407 "TimePicker.c"
	}
#line 205 "../lib/Widgets/TimePicker.vala"
	if (is_hour) {
#line 411 "TimePicker.c"
		gint new_hour = 0;
		GtkSpinButton* _tmp0_;
		GDateTime* _tmp1_;
		GDateTime* _tmp2_;
#line 206 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = self->priv->hours_spinbutton;
#line 206 "../lib/Widgets/TimePicker.vala"
		_tmp1_ = granite_widgets_time_picker_get_time (self);
#line 206 "../lib/Widgets/TimePicker.vala"
		_tmp2_ = _tmp1_;
#line 206 "../lib/Widgets/TimePicker.vala"
		new_hour = gtk_spin_button_get_value_as_int (_tmp0_) - g_date_time_get_hour (_tmp2_);
#line 208 "../lib/Widgets/TimePicker.vala"
		if (granite_date_time_is_clock_format_12h ()) {
#line 426 "TimePicker.c"
			gboolean _tmp3_ = FALSE;
			GtkSpinButton* _tmp4_;
#line 209 "../lib/Widgets/TimePicker.vala"
			_tmp4_ = self->priv->hours_spinbutton;
#line 209 "../lib/Widgets/TimePicker.vala"
			if (gtk_spin_button_get_value_as_int (_tmp4_) == 12) {
#line 433 "TimePicker.c"
				GraniteWidgetsModeButton* _tmp5_;
				gint _tmp6_;
				gint _tmp7_;
#line 209 "../lib/Widgets/TimePicker.vala"
				_tmp5_ = self->priv->am_pm_modebutton;
#line 209 "../lib/Widgets/TimePicker.vala"
				_tmp6_ = granite_widgets_mode_button_get_selected (_tmp5_);
#line 209 "../lib/Widgets/TimePicker.vala"
				_tmp7_ = _tmp6_;
#line 209 "../lib/Widgets/TimePicker.vala"
				_tmp3_ = _tmp7_ == 0;
#line 445 "TimePicker.c"
			} else {
#line 209 "../lib/Widgets/TimePicker.vala"
				_tmp3_ = FALSE;
#line 449 "TimePicker.c"
			}
#line 209 "../lib/Widgets/TimePicker.vala"
			if (_tmp3_) {
#line 453 "TimePicker.c"
				GDateTime* _tmp8_;
				GDateTime* _tmp9_;
				GDateTime* _tmp10_;
#line 210 "../lib/Widgets/TimePicker.vala"
				_tmp8_ = self->priv->_time;
#line 210 "../lib/Widgets/TimePicker.vala"
				_tmp9_ = self->priv->_time;
#line 210 "../lib/Widgets/TimePicker.vala"
				_tmp10_ = g_date_time_add_hours (_tmp8_, -g_date_time_get_hour (_tmp9_));
#line 210 "../lib/Widgets/TimePicker.vala"
				_g_date_time_unref0 (self->priv->_time);
#line 210 "../lib/Widgets/TimePicker.vala"
				self->priv->_time = _tmp10_;
#line 467 "TimePicker.c"
			} else {
				gboolean _tmp11_ = FALSE;
				GtkSpinButton* _tmp12_;
#line 211 "../lib/Widgets/TimePicker.vala"
				_tmp12_ = self->priv->hours_spinbutton;
#line 211 "../lib/Widgets/TimePicker.vala"
				if (gtk_spin_button_get_value_as_int (_tmp12_) < 12) {
#line 475 "TimePicker.c"
					GraniteWidgetsModeButton* _tmp13_;
					gint _tmp14_;
					gint _tmp15_;
#line 211 "../lib/Widgets/TimePicker.vala"
					_tmp13_ = self->priv->am_pm_modebutton;
#line 211 "../lib/Widgets/TimePicker.vala"
					_tmp14_ = granite_widgets_mode_button_get_selected (_tmp13_);
#line 211 "../lib/Widgets/TimePicker.vala"
					_tmp15_ = _tmp14_;
#line 211 "../lib/Widgets/TimePicker.vala"
					_tmp11_ = _tmp15_ == 0;
#line 487 "TimePicker.c"
				} else {
#line 211 "../lib/Widgets/TimePicker.vala"
					_tmp11_ = FALSE;
#line 491 "TimePicker.c"
				}
#line 211 "../lib/Widgets/TimePicker.vala"
				if (_tmp11_) {
#line 495 "TimePicker.c"
					GDateTime* _tmp16_;
					GDateTime* _tmp17_;
#line 212 "../lib/Widgets/TimePicker.vala"
					_tmp16_ = self->priv->_time;
#line 212 "../lib/Widgets/TimePicker.vala"
					_tmp17_ = g_date_time_add_hours (_tmp16_, new_hour);
#line 212 "../lib/Widgets/TimePicker.vala"
					_g_date_time_unref0 (self->priv->_time);
#line 212 "../lib/Widgets/TimePicker.vala"
					self->priv->_time = _tmp17_;
#line 506 "TimePicker.c"
				} else {
					gboolean _tmp18_ = FALSE;
					GtkSpinButton* _tmp19_;
#line 213 "../lib/Widgets/TimePicker.vala"
					_tmp19_ = self->priv->hours_spinbutton;
#line 213 "../lib/Widgets/TimePicker.vala"
					if (gtk_spin_button_get_value_as_int (_tmp19_) == 12) {
#line 514 "TimePicker.c"
						GraniteWidgetsModeButton* _tmp20_;
						gint _tmp21_;
						gint _tmp22_;
#line 213 "../lib/Widgets/TimePicker.vala"
						_tmp20_ = self->priv->am_pm_modebutton;
#line 213 "../lib/Widgets/TimePicker.vala"
						_tmp21_ = granite_widgets_mode_button_get_selected (_tmp20_);
#line 213 "../lib/Widgets/TimePicker.vala"
						_tmp22_ = _tmp21_;
#line 213 "../lib/Widgets/TimePicker.vala"
						_tmp18_ = _tmp22_ == 1;
#line 526 "TimePicker.c"
					} else {
#line 213 "../lib/Widgets/TimePicker.vala"
						_tmp18_ = FALSE;
#line 530 "TimePicker.c"
					}
#line 213 "../lib/Widgets/TimePicker.vala"
					if (_tmp18_) {
#line 534 "TimePicker.c"
						GDateTime* _tmp23_;
						GDateTime* _tmp24_;
						GDateTime* _tmp25_;
#line 214 "../lib/Widgets/TimePicker.vala"
						_tmp23_ = self->priv->_time;
#line 214 "../lib/Widgets/TimePicker.vala"
						_tmp24_ = self->priv->_time;
#line 214 "../lib/Widgets/TimePicker.vala"
						_tmp25_ = g_date_time_add_hours (_tmp23_, (-g_date_time_get_hour (_tmp24_)) + 12);
#line 214 "../lib/Widgets/TimePicker.vala"
						_g_date_time_unref0 (self->priv->_time);
#line 214 "../lib/Widgets/TimePicker.vala"
						self->priv->_time = _tmp25_;
#line 548 "TimePicker.c"
					} else {
						gboolean _tmp26_ = FALSE;
						GtkSpinButton* _tmp27_;
#line 215 "../lib/Widgets/TimePicker.vala"
						_tmp27_ = self->priv->hours_spinbutton;
#line 215 "../lib/Widgets/TimePicker.vala"
						if (gtk_spin_button_get_value_as_int (_tmp27_) < 12) {
#line 556 "TimePicker.c"
							GraniteWidgetsModeButton* _tmp28_;
							gint _tmp29_;
							gint _tmp30_;
#line 215 "../lib/Widgets/TimePicker.vala"
							_tmp28_ = self->priv->am_pm_modebutton;
#line 215 "../lib/Widgets/TimePicker.vala"
							_tmp29_ = granite_widgets_mode_button_get_selected (_tmp28_);
#line 215 "../lib/Widgets/TimePicker.vala"
							_tmp30_ = _tmp29_;
#line 215 "../lib/Widgets/TimePicker.vala"
							_tmp26_ = _tmp30_ == 1;
#line 568 "TimePicker.c"
						} else {
#line 215 "../lib/Widgets/TimePicker.vala"
							_tmp26_ = FALSE;
#line 572 "TimePicker.c"
						}
#line 215 "../lib/Widgets/TimePicker.vala"
						if (_tmp26_) {
#line 576 "TimePicker.c"
							GDateTime* _tmp31_;
							GDateTime* _tmp32_;
							GDateTime* _tmp33_;
							GDateTime* _tmp34_;
#line 216 "../lib/Widgets/TimePicker.vala"
							_tmp31_ = self->priv->_time;
#line 216 "../lib/Widgets/TimePicker.vala"
							_tmp32_ = g_date_time_add_hours (_tmp31_, new_hour + 12);
#line 216 "../lib/Widgets/TimePicker.vala"
							_g_date_time_unref0 (self->priv->_time);
#line 216 "../lib/Widgets/TimePicker.vala"
							self->priv->_time = _tmp32_;
#line 218 "../lib/Widgets/TimePicker.vala"
							_tmp33_ = granite_widgets_time_picker_get_time (self);
#line 218 "../lib/Widgets/TimePicker.vala"
							_tmp34_ = _tmp33_;
#line 218 "../lib/Widgets/TimePicker.vala"
							if (g_date_time_get_hour (_tmp34_) <= 12) {
#line 595 "TimePicker.c"
								GDateTime* _tmp35_;
								GDateTime* _tmp36_;
#line 219 "../lib/Widgets/TimePicker.vala"
								_tmp35_ = self->priv->_time;
#line 219 "../lib/Widgets/TimePicker.vala"
								_tmp36_ = g_date_time_add_hours (_tmp35_, 12);
#line 219 "../lib/Widgets/TimePicker.vala"
								_g_date_time_unref0 (self->priv->_time);
#line 219 "../lib/Widgets/TimePicker.vala"
								self->priv->_time = _tmp36_;
#line 606 "TimePicker.c"
							}
						}
					}
				}
			}
		} else {
			GDateTime* _tmp37_;
			GDateTime* _tmp38_;
#line 223 "../lib/Widgets/TimePicker.vala"
			_tmp37_ = self->priv->_time;
#line 223 "../lib/Widgets/TimePicker.vala"
			_tmp38_ = g_date_time_add_hours (_tmp37_, new_hour);
#line 223 "../lib/Widgets/TimePicker.vala"
			_g_date_time_unref0 (self->priv->_time);
#line 223 "../lib/Widgets/TimePicker.vala"
			self->priv->_time = _tmp38_;
#line 623 "TimePicker.c"
		}
	} else {
		GDateTime* _tmp39_;
		GDateTime* _tmp40_;
		GtkSpinButton* _tmp41_;
		GDateTime* _tmp42_;
		GDateTime* _tmp43_;
		GDateTime* _tmp44_;
#line 226 "../lib/Widgets/TimePicker.vala"
		_tmp39_ = granite_widgets_time_picker_get_time (self);
#line 226 "../lib/Widgets/TimePicker.vala"
		_tmp40_ = _tmp39_;
#line 226 "../lib/Widgets/TimePicker.vala"
		_tmp41_ = self->priv->minutes_spinbutton;
#line 226 "../lib/Widgets/TimePicker.vala"
		_tmp42_ = granite_widgets_time_picker_get_time (self);
#line 226 "../lib/Widgets/TimePicker.vala"
		_tmp43_ = _tmp42_;
#line 226 "../lib/Widgets/TimePicker.vala"
		_tmp44_ = g_date_time_add_minutes (_tmp40_, gtk_spin_button_get_value_as_int (_tmp41_) - g_date_time_get_minute (_tmp43_));
#line 226 "../lib/Widgets/TimePicker.vala"
		_g_date_time_unref0 (self->priv->_time);
#line 226 "../lib/Widgets/TimePicker.vala"
		self->priv->_time = _tmp44_;
#line 648 "TimePicker.c"
	}
#line 229 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_text (self, FALSE);
#line 652 "TimePicker.c"
}

static void
granite_widgets_time_picker_on_icon_press (GraniteWidgetsTimePicker* self,
                                           GtkEntryIconPosition position,
                                           GdkEvent* event)
{
	gboolean _tmp0_ = FALSE;
	GtkSpinButton* _tmp29_;
	GDateTime* _tmp30_;
	GDateTime* _tmp31_;
	GtkPopover* _tmp32_;
	GdkRectangle _tmp33_ = {0};
	GtkPopover* _tmp34_;
#line 232 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 232 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (event != NULL);
#line 234 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_text (self, FALSE);
#line 235 "../lib/Widgets/TimePicker.vala"
	self->priv->changing_time = TRUE;
#line 237 "../lib/Widgets/TimePicker.vala"
	if (granite_date_time_is_clock_format_12h ()) {
#line 677 "TimePicker.c"
		GDateTime* _tmp1_;
		GDateTime* _tmp2_;
#line 237 "../lib/Widgets/TimePicker.vala"
		_tmp1_ = granite_widgets_time_picker_get_time (self);
#line 237 "../lib/Widgets/TimePicker.vala"
		_tmp2_ = _tmp1_;
#line 237 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = g_date_time_get_hour (_tmp2_) > 12;
#line 686 "TimePicker.c"
	} else {
#line 237 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = FALSE;
#line 690 "TimePicker.c"
	}
#line 237 "../lib/Widgets/TimePicker.vala"
	if (_tmp0_) {
#line 694 "TimePicker.c"
		GtkSpinButton* _tmp3_;
		GDateTime* _tmp4_;
		GDateTime* _tmp5_;
#line 238 "../lib/Widgets/TimePicker.vala"
		_tmp3_ = self->priv->hours_spinbutton;
#line 238 "../lib/Widgets/TimePicker.vala"
		_tmp4_ = granite_widgets_time_picker_get_time (self);
#line 238 "../lib/Widgets/TimePicker.vala"
		_tmp5_ = _tmp4_;
#line 238 "../lib/Widgets/TimePicker.vala"
		gtk_spin_button_set_value (_tmp3_, (gdouble) (g_date_time_get_hour (_tmp5_) - 12));
#line 706 "TimePicker.c"
	} else {
		GtkSpinButton* _tmp6_;
		GDateTime* _tmp7_;
		GDateTime* _tmp8_;
#line 240 "../lib/Widgets/TimePicker.vala"
		_tmp6_ = self->priv->hours_spinbutton;
#line 240 "../lib/Widgets/TimePicker.vala"
		_tmp7_ = granite_widgets_time_picker_get_time (self);
#line 240 "../lib/Widgets/TimePicker.vala"
		_tmp8_ = _tmp7_;
#line 240 "../lib/Widgets/TimePicker.vala"
		gtk_spin_button_set_value (_tmp6_, (gdouble) g_date_time_get_hour (_tmp8_));
#line 719 "TimePicker.c"
	}
#line 243 "../lib/Widgets/TimePicker.vala"
	if (granite_date_time_is_clock_format_12h ()) {
#line 723 "TimePicker.c"
		GraniteWidgetsModeButton* _tmp9_;
		GraniteWidgetsModeButton* _tmp10_;
		GDateTime* _tmp11_;
		GDateTime* _tmp12_;
		GtkSpinButton* _tmp22_;
#line 244 "../lib/Widgets/TimePicker.vala"
		_tmp9_ = self->priv->am_pm_modebutton;
#line 244 "../lib/Widgets/TimePicker.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp9_, FALSE);
#line 245 "../lib/Widgets/TimePicker.vala"
		_tmp10_ = self->priv->am_pm_modebutton;
#line 245 "../lib/Widgets/TimePicker.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp10_);
#line 247 "../lib/Widgets/TimePicker.vala"
		_tmp11_ = granite_widgets_time_picker_get_time (self);
#line 247 "../lib/Widgets/TimePicker.vala"
		_tmp12_ = _tmp11_;
#line 247 "../lib/Widgets/TimePicker.vala"
		if (g_date_time_get_hour (_tmp12_) > 12) {
#line 743 "TimePicker.c"
			GtkSpinButton* _tmp13_;
			GDateTime* _tmp14_;
			GDateTime* _tmp15_;
#line 248 "../lib/Widgets/TimePicker.vala"
			_tmp13_ = self->priv->hours_spinbutton;
#line 248 "../lib/Widgets/TimePicker.vala"
			_tmp14_ = granite_widgets_time_picker_get_time (self);
#line 248 "../lib/Widgets/TimePicker.vala"
			_tmp15_ = _tmp14_;
#line 248 "../lib/Widgets/TimePicker.vala"
			gtk_spin_button_set_value (_tmp13_, (gdouble) (g_date_time_get_hour (_tmp15_) - 12));
#line 755 "TimePicker.c"
		} else {
			GDateTime* _tmp16_;
			GDateTime* _tmp17_;
#line 249 "../lib/Widgets/TimePicker.vala"
			_tmp16_ = granite_widgets_time_picker_get_time (self);
#line 249 "../lib/Widgets/TimePicker.vala"
			_tmp17_ = _tmp16_;
#line 249 "../lib/Widgets/TimePicker.vala"
			if (g_date_time_get_hour (_tmp17_) == 0) {
#line 765 "TimePicker.c"
				GtkSpinButton* _tmp18_;
#line 250 "../lib/Widgets/TimePicker.vala"
				_tmp18_ = self->priv->hours_spinbutton;
#line 250 "../lib/Widgets/TimePicker.vala"
				gtk_spin_button_set_value (_tmp18_, (gdouble) 12);
#line 771 "TimePicker.c"
			} else {
				GtkSpinButton* _tmp19_;
				GDateTime* _tmp20_;
				GDateTime* _tmp21_;
#line 252 "../lib/Widgets/TimePicker.vala"
				_tmp19_ = self->priv->hours_spinbutton;
#line 252 "../lib/Widgets/TimePicker.vala"
				_tmp20_ = granite_widgets_time_picker_get_time (self);
#line 252 "../lib/Widgets/TimePicker.vala"
				_tmp21_ = _tmp20_;
#line 252 "../lib/Widgets/TimePicker.vala"
				gtk_spin_button_set_value (_tmp19_, (gdouble) g_date_time_get_hour (_tmp21_));
#line 784 "TimePicker.c"
			}
		}
#line 256 "../lib/Widgets/TimePicker.vala"
		_tmp22_ = self->priv->hours_spinbutton;
#line 256 "../lib/Widgets/TimePicker.vala"
		gtk_spin_button_set_range (_tmp22_, (gdouble) 1, (gdouble) 12);
#line 791 "TimePicker.c"
	} else {
		GraniteWidgetsModeButton* _tmp23_;
		GraniteWidgetsModeButton* _tmp24_;
		GtkSpinButton* _tmp25_;
		GDateTime* _tmp26_;
		GDateTime* _tmp27_;
		GtkSpinButton* _tmp28_;
#line 258 "../lib/Widgets/TimePicker.vala"
		_tmp23_ = self->priv->am_pm_modebutton;
#line 258 "../lib/Widgets/TimePicker.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp23_, TRUE);
#line 259 "../lib/Widgets/TimePicker.vala"
		_tmp24_ = self->priv->am_pm_modebutton;
#line 259 "../lib/Widgets/TimePicker.vala"
		gtk_widget_hide ((GtkWidget*) _tmp24_);
#line 260 "../lib/Widgets/TimePicker.vala"
		_tmp25_ = self->priv->hours_spinbutton;
#line 260 "../lib/Widgets/TimePicker.vala"
		_tmp26_ = granite_widgets_time_picker_get_time (self);
#line 260 "../lib/Widgets/TimePicker.vala"
		_tmp27_ = _tmp26_;
#line 260 "../lib/Widgets/TimePicker.vala"
		gtk_spin_button_set_value (_tmp25_, (gdouble) g_date_time_get_hour (_tmp27_));
#line 262 "../lib/Widgets/TimePicker.vala"
		_tmp28_ = self->priv->hours_spinbutton;
#line 262 "../lib/Widgets/TimePicker.vala"
		gtk_spin_button_set_range (_tmp28_, (gdouble) 0, (gdouble) 23);
#line 819 "TimePicker.c"
	}
#line 265 "../lib/Widgets/TimePicker.vala"
	_tmp29_ = self->priv->minutes_spinbutton;
#line 265 "../lib/Widgets/TimePicker.vala"
	_tmp30_ = granite_widgets_time_picker_get_time (self);
#line 265 "../lib/Widgets/TimePicker.vala"
	_tmp31_ = _tmp30_;
#line 265 "../lib/Widgets/TimePicker.vala"
	gtk_spin_button_set_value (_tmp29_, (gdouble) g_date_time_get_minute (_tmp31_));
#line 266 "../lib/Widgets/TimePicker.vala"
	self->priv->changing_time = FALSE;
#line 268 "../lib/Widgets/TimePicker.vala"
	_tmp32_ = self->priv->popover;
#line 268 "../lib/Widgets/TimePicker.vala"
	gtk_entry_get_icon_area ((GtkEntry*) self, GTK_ENTRY_ICON_SECONDARY, &_tmp33_);
#line 268 "../lib/Widgets/TimePicker.vala"
	g_object_set (_tmp32_, "pointing-to", &_tmp33_, NULL);
#line 269 "../lib/Widgets/TimePicker.vala"
	_tmp34_ = self->priv->popover;
#line 269 "../lib/Widgets/TimePicker.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp34_);
#line 841 "TimePicker.c"
}

static void
granite_widgets_time_picker_real_position_dropdown (GraniteWidgetsTimePicker* self,
                                                    gint* x,
                                                    gint* y)
{
	gint _vala_x = 0;
	gint _vala_y = 0;
#line 274 "../lib/Widgets/TimePicker.vala"
	_vala_x = -1;
#line 275 "../lib/Widgets/TimePicker.vala"
	_vala_y = -1;
#line 273 "../lib/Widgets/TimePicker.vala"
	if (x) {
#line 273 "../lib/Widgets/TimePicker.vala"
		*x = _vala_x;
#line 859 "TimePicker.c"
	}
#line 273 "../lib/Widgets/TimePicker.vala"
	if (y) {
#line 273 "../lib/Widgets/TimePicker.vala"
		*y = _vala_y;
#line 865 "TimePicker.c"
	}
}

void
granite_widgets_time_picker_position_dropdown (GraniteWidgetsTimePicker* self,
                                               gint* x,
                                               gint* y)
{
#line 273 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 273 "../lib/Widgets/TimePicker.vala"
	GRANITE_WIDGETS_TIME_PICKER_GET_CLASS (self)->position_dropdown (self, x, y);
#line 878 "TimePicker.c"
}

static void
granite_widgets_time_picker_is_unfocused (GraniteWidgetsTimePicker* self)
{
	gboolean _tmp0_ = FALSE;
	GtkPopover* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
#line 278 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 279 "../lib/Widgets/TimePicker.vala"
	_tmp1_ = self->priv->popover;
#line 279 "../lib/Widgets/TimePicker.vala"
	_tmp2_ = gtk_widget_get_visible ((GtkWidget*) _tmp1_);
#line 279 "../lib/Widgets/TimePicker.vala"
	_tmp3_ = _tmp2_;
#line 279 "../lib/Widgets/TimePicker.vala"
	if (!_tmp3_) {
#line 898 "TimePicker.c"
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
#line 279 "../lib/Widgets/TimePicker.vala"
		_tmp4_ = self->priv->old_string;
#line 279 "../lib/Widgets/TimePicker.vala"
		_tmp5_ = gtk_entry_get_text ((GtkEntry*) self);
#line 279 "../lib/Widgets/TimePicker.vala"
		_tmp6_ = _tmp5_;
#line 279 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = g_utf8_collate (_tmp4_, _tmp6_) != 0;
#line 910 "TimePicker.c"
	} else {
#line 279 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = FALSE;
#line 914 "TimePicker.c"
	}
#line 279 "../lib/Widgets/TimePicker.vala"
	if (_tmp0_) {
#line 918 "TimePicker.c"
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		gchar* _tmp9_;
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
#line 280 "../lib/Widgets/TimePicker.vala"
		_tmp7_ = gtk_entry_get_text ((GtkEntry*) self);
#line 280 "../lib/Widgets/TimePicker.vala"
		_tmp8_ = _tmp7_;
#line 280 "../lib/Widgets/TimePicker.vala"
		_tmp9_ = g_strdup (_tmp8_);
#line 280 "../lib/Widgets/TimePicker.vala"
		_g_free0 (self->priv->old_string);
#line 280 "../lib/Widgets/TimePicker.vala"
		self->priv->old_string = _tmp9_;
#line 281 "../lib/Widgets/TimePicker.vala"
		_tmp10_ = gtk_entry_get_text ((GtkEntry*) self);
#line 281 "../lib/Widgets/TimePicker.vala"
		_tmp11_ = _tmp10_;
#line 281 "../lib/Widgets/TimePicker.vala"
		_tmp12_ = g_strdup (_tmp11_);
#line 281 "../lib/Widgets/TimePicker.vala"
		_tmp13_ = _tmp12_;
#line 281 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_parse_time (self, _tmp13_);
#line 281 "../lib/Widgets/TimePicker.vala"
		_g_free0 (_tmp13_);
#line 948 "TimePicker.c"
	}
}

static gchar*
string_to_utf8 (const gchar* self,
                gint* result_length1)
{
	gint string_length = 0;
	gint _tmp0_;
	gint _tmp1_;
	gchar* _result_ = NULL;
	gchar* _tmp2_;
	gint _result__length1;
	gint __result__size_;
	gint _tmp3_;
	gchar* _tmp4_;
	gint _tmp4__length1;
	gchar* result = NULL;
#line 1562 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1563 "glib-2.0.vapi"
	_tmp0_ = strlen (self);
#line 1563 "glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 1563 "glib-2.0.vapi"
	string_length = _tmp1_;
#line 1564 "glib-2.0.vapi"
	_tmp2_ = g_new0 (gchar, string_length + 1);
#line 1564 "glib-2.0.vapi"
	_result_ = _tmp2_;
#line 1564 "glib-2.0.vapi"
	_result__length1 = string_length + 1;
#line 1564 "glib-2.0.vapi"
	__result__size_ = _result__length1;
#line 1565 "glib-2.0.vapi"
	_tmp3_ = _result__length1;
#line 1565 "glib-2.0.vapi"
	_result__length1 = _tmp3_ - 1;
#line 1566 "glib-2.0.vapi"
	memcpy (_result_, self, (gsize) string_length);
#line 1567 "glib-2.0.vapi"
	_tmp4_ = _result_;
#line 1567 "glib-2.0.vapi"
	_tmp4__length1 = _result__length1;
#line 1567 "glib-2.0.vapi"
	if (result_length1) {
#line 1567 "glib-2.0.vapi"
		*result_length1 = _tmp4__length1;
#line 997 "TimePicker.c"
	}
#line 1567 "glib-2.0.vapi"
	result = _tmp4_;
#line 1567 "glib-2.0.vapi"
	return result;
#line 1003 "TimePicker.c"
}

static gint*
_int_dup (gint* self)
{
	gint* dup;
#line 301 "../lib/Widgets/TimePicker.vala"
	dup = g_new0 (gint, 1);
#line 301 "../lib/Widgets/TimePicker.vala"
	memcpy (dup, self, sizeof (gint));
#line 301 "../lib/Widgets/TimePicker.vala"
	return dup;
#line 1016 "TimePicker.c"
}

static gpointer
__int_dup0 (gpointer self)
{
#line 301 "../lib/Widgets/TimePicker.vala"
	return self ? _int_dup (self) : NULL;
#line 1024 "TimePicker.c"
}

static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gchar* _tmp0_;
	gboolean result = FALSE;
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1531 "glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1531 "glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1531 "glib-2.0.vapi"
	return result;
#line 1043 "TimePicker.c"
}

static gboolean
_int_equal (const gint * s1,
            const gint * s2)
{
#line 329 "../lib/Widgets/TimePicker.vala"
	if (s1 == s2) {
#line 329 "../lib/Widgets/TimePicker.vala"
		return TRUE;
#line 1054 "TimePicker.c"
	}
#line 329 "../lib/Widgets/TimePicker.vala"
	if (s1 == NULL) {
#line 329 "../lib/Widgets/TimePicker.vala"
		return FALSE;
#line 1060 "TimePicker.c"
	}
#line 329 "../lib/Widgets/TimePicker.vala"
	if (s2 == NULL) {
#line 329 "../lib/Widgets/TimePicker.vala"
		return FALSE;
#line 1066 "TimePicker.c"
	}
#line 329 "../lib/Widgets/TimePicker.vala"
	return (*s1) == (*s2);
#line 1070 "TimePicker.c"
}

static gchar*
string_slice (const gchar* self,
              glong start,
              glong end)
{
	glong string_length = 0L;
	gint _tmp0_;
	gint _tmp1_;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	gchar* _tmp4_;
	gchar* result = NULL;
#line 1480 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1481 "glib-2.0.vapi"
	_tmp0_ = strlen (self);
#line 1481 "glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 1481 "glib-2.0.vapi"
	string_length = (glong) _tmp1_;
#line 1482 "glib-2.0.vapi"
	if (start < ((glong) 0)) {
#line 1483 "glib-2.0.vapi"
		start = string_length + start;
#line 1097 "TimePicker.c"
	}
#line 1485 "glib-2.0.vapi"
	if (end < ((glong) 0)) {
#line 1486 "glib-2.0.vapi"
		end = string_length + end;
#line 1103 "TimePicker.c"
	}
#line 1488 "glib-2.0.vapi"
	if (start >= ((glong) 0)) {
#line 1488 "glib-2.0.vapi"
		_tmp2_ = start <= string_length;
#line 1109 "TimePicker.c"
	} else {
#line 1488 "glib-2.0.vapi"
		_tmp2_ = FALSE;
#line 1113 "TimePicker.c"
	}
#line 1488 "glib-2.0.vapi"
	g_return_val_if_fail (_tmp2_, NULL);
#line 1489 "glib-2.0.vapi"
	if (end >= ((glong) 0)) {
#line 1489 "glib-2.0.vapi"
		_tmp3_ = end <= string_length;
#line 1121 "TimePicker.c"
	} else {
#line 1489 "glib-2.0.vapi"
		_tmp3_ = FALSE;
#line 1125 "TimePicker.c"
	}
#line 1489 "glib-2.0.vapi"
	g_return_val_if_fail (_tmp3_, NULL);
#line 1490 "glib-2.0.vapi"
	g_return_val_if_fail (start <= end, NULL);
#line 1491 "glib-2.0.vapi"
	_tmp4_ = g_strndup (((gchar*) self) + start, (gsize) (end - start));
#line 1491 "glib-2.0.vapi"
	result = _tmp4_;
#line 1491 "glib-2.0.vapi"
	return result;
#line 1137 "TimePicker.c"
}

static void
granite_widgets_time_picker_parse_time (GraniteWidgetsTimePicker* self,
                                        const gchar* timestr)
{
	gchar* current = NULL;
	gchar* _tmp0_;
	gboolean is_hours = FALSE;
	gboolean is_suffix = FALSE;
	gboolean has_suffix = FALSE;
	gint* hour = NULL;
	gint* minute = NULL;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gint _tmp3_ = 0;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gint _tmp5__length1;
	gboolean _tmp65_ = FALSE;
	gboolean _tmp66_ = FALSE;
	gint* _tmp71_;
	gboolean _tmp96_ = FALSE;
	gint* _tmp97_;
#line 285 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 285 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (timestr != NULL);
#line 286 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = g_strdup ("");
#line 286 "../lib/Widgets/TimePicker.vala"
	current = _tmp0_;
#line 287 "../lib/Widgets/TimePicker.vala"
	is_hours = TRUE;
#line 288 "../lib/Widgets/TimePicker.vala"
	is_suffix = FALSE;
#line 289 "../lib/Widgets/TimePicker.vala"
	has_suffix = FALSE;
#line 291 "../lib/Widgets/TimePicker.vala"
	hour = NULL;
#line 292 "../lib/Widgets/TimePicker.vala"
	minute = NULL;
#line 293 "../lib/Widgets/TimePicker.vala"
	_tmp1_ = g_utf8_strdown (timestr, (gssize) -1);
#line 293 "../lib/Widgets/TimePicker.vala"
	_tmp2_ = _tmp1_;
#line 293 "../lib/Widgets/TimePicker.vala"
	_tmp4_ = string_to_utf8 (_tmp2_, &_tmp3_);
#line 293 "../lib/Widgets/TimePicker.vala"
	_tmp5_ = _tmp4_;
#line 293 "../lib/Widgets/TimePicker.vala"
	_tmp5__length1 = _tmp3_;
#line 293 "../lib/Widgets/TimePicker.vala"
	_g_free0 (_tmp2_);
#line 1192 "TimePicker.c"
	{
		gchar* c_collection = NULL;
		gint c_collection_length1 = 0;
		gint _c_collection_size_ = 0;
		gint c_it = 0;
#line 293 "../lib/Widgets/TimePicker.vala"
		c_collection = _tmp5_;
#line 293 "../lib/Widgets/TimePicker.vala"
		c_collection_length1 = _tmp5__length1;
#line 293 "../lib/Widgets/TimePicker.vala"
		for (c_it = 0; c_it < c_collection_length1; c_it = c_it + 1) {
#line 1204 "TimePicker.c"
			gchar c = '\0';
#line 293 "../lib/Widgets/TimePicker.vala"
			c = c_collection[c_it];
#line 1208 "TimePicker.c"
			{
#line 294 "../lib/Widgets/TimePicker.vala"
				if (g_ascii_isdigit (c)) {
#line 1212 "TimePicker.c"
					const gchar* _tmp6_;
					gchar* _tmp7_;
#line 295 "../lib/Widgets/TimePicker.vala"
					_tmp6_ = current;
#line 295 "../lib/Widgets/TimePicker.vala"
					_tmp7_ = g_strdup_printf ("%s%c", _tmp6_, (gint) c);
#line 295 "../lib/Widgets/TimePicker.vala"
					_g_free0 (current);
#line 295 "../lib/Widgets/TimePicker.vala"
					current = _tmp7_;
#line 1223 "TimePicker.c"
				} else {
					gboolean _tmp25_ = FALSE;
					gchar* _tmp26_;
					gchar* _tmp27_;
					gboolean _tmp28_;
#line 297 "../lib/Widgets/TimePicker.vala"
					if (!is_suffix) {
#line 1231 "TimePicker.c"
						const gchar* _tmp8_;
						gboolean _tmp17_ = FALSE;
						gchar* _tmp18_;
						gchar* _tmp19_;
						gboolean _tmp20_;
#line 298 "../lib/Widgets/TimePicker.vala"
						_tmp8_ = current;
#line 298 "../lib/Widgets/TimePicker.vala"
						if (g_strcmp0 (_tmp8_, "") != 0) {
#line 299 "../lib/Widgets/TimePicker.vala"
							if (is_hours) {
#line 1243 "TimePicker.c"
								const gchar* _tmp9_;
								gint _tmp10_;
								gint* _tmp11_;
								gchar* _tmp12_;
#line 300 "../lib/Widgets/TimePicker.vala"
								is_hours = FALSE;
#line 301 "../lib/Widgets/TimePicker.vala"
								_tmp9_ = current;
#line 301 "../lib/Widgets/TimePicker.vala"
								_tmp10_ = atoi (_tmp9_);
#line 301 "../lib/Widgets/TimePicker.vala"
								_tmp11_ = __int_dup0 (&_tmp10_);
#line 301 "../lib/Widgets/TimePicker.vala"
								_g_free0 (hour);
#line 301 "../lib/Widgets/TimePicker.vala"
								hour = _tmp11_;
#line 302 "../lib/Widgets/TimePicker.vala"
								_tmp12_ = g_strdup ("");
#line 302 "../lib/Widgets/TimePicker.vala"
								_g_free0 (current);
#line 302 "../lib/Widgets/TimePicker.vala"
								current = _tmp12_;
#line 1266 "TimePicker.c"
							} else {
								const gchar* _tmp13_;
								gint _tmp14_;
								gint* _tmp15_;
								gchar* _tmp16_;
#line 304 "../lib/Widgets/TimePicker.vala"
								_tmp13_ = current;
#line 304 "../lib/Widgets/TimePicker.vala"
								_tmp14_ = atoi (_tmp13_);
#line 304 "../lib/Widgets/TimePicker.vala"
								_tmp15_ = __int_dup0 (&_tmp14_);
#line 304 "../lib/Widgets/TimePicker.vala"
								_g_free0 (minute);
#line 304 "../lib/Widgets/TimePicker.vala"
								minute = _tmp15_;
#line 305 "../lib/Widgets/TimePicker.vala"
								_tmp16_ = g_strdup ("");
#line 305 "../lib/Widgets/TimePicker.vala"
								_g_free0 (current);
#line 305 "../lib/Widgets/TimePicker.vala"
								current = _tmp16_;
#line 1288 "TimePicker.c"
							}
						}
#line 309 "../lib/Widgets/TimePicker.vala"
						_tmp18_ = g_strdup_printf ("%c", c);
#line 309 "../lib/Widgets/TimePicker.vala"
						_tmp19_ = _tmp18_;
#line 309 "../lib/Widgets/TimePicker.vala"
						_tmp20_ = string_contains (_tmp19_, "a");
#line 309 "../lib/Widgets/TimePicker.vala"
						_g_free0 (_tmp19_);
#line 309 "../lib/Widgets/TimePicker.vala"
						if (_tmp20_) {
#line 309 "../lib/Widgets/TimePicker.vala"
							_tmp17_ = TRUE;
#line 1303 "TimePicker.c"
						} else {
							gchar* _tmp21_;
							gchar* _tmp22_;
#line 309 "../lib/Widgets/TimePicker.vala"
							_tmp21_ = g_strdup_printf ("%c", c);
#line 309 "../lib/Widgets/TimePicker.vala"
							_tmp22_ = _tmp21_;
#line 309 "../lib/Widgets/TimePicker.vala"
							_tmp17_ = string_contains (_tmp22_, "p");
#line 309 "../lib/Widgets/TimePicker.vala"
							_g_free0 (_tmp22_);
#line 1315 "TimePicker.c"
						}
#line 309 "../lib/Widgets/TimePicker.vala"
						if (_tmp17_) {
#line 1319 "TimePicker.c"
							const gchar* _tmp23_;
							gchar* _tmp24_;
#line 310 "../lib/Widgets/TimePicker.vala"
							is_suffix = TRUE;
#line 311 "../lib/Widgets/TimePicker.vala"
							_tmp23_ = current;
#line 311 "../lib/Widgets/TimePicker.vala"
							_tmp24_ = g_strdup_printf ("%s%c", _tmp23_, (gint) c);
#line 311 "../lib/Widgets/TimePicker.vala"
							_g_free0 (current);
#line 311 "../lib/Widgets/TimePicker.vala"
							current = _tmp24_;
#line 1332 "TimePicker.c"
						}
					}
#line 315 "../lib/Widgets/TimePicker.vala"
					_tmp26_ = g_strdup_printf ("%c", c);
#line 315 "../lib/Widgets/TimePicker.vala"
					_tmp27_ = _tmp26_;
#line 315 "../lib/Widgets/TimePicker.vala"
					_tmp28_ = string_contains (_tmp27_, "m");
#line 315 "../lib/Widgets/TimePicker.vala"
					_g_free0 (_tmp27_);
#line 315 "../lib/Widgets/TimePicker.vala"
					if (_tmp28_) {
#line 315 "../lib/Widgets/TimePicker.vala"
						_tmp25_ = is_suffix;
#line 1347 "TimePicker.c"
					} else {
#line 315 "../lib/Widgets/TimePicker.vala"
						_tmp25_ = FALSE;
#line 1351 "TimePicker.c"
					}
#line 315 "../lib/Widgets/TimePicker.vala"
					if (_tmp25_) {
#line 1355 "TimePicker.c"
						gint* _tmp29_;
						gboolean _tmp33_ = FALSE;
						const gchar* _tmp34_;
						gboolean _tmp50_ = FALSE;
						const gchar* _tmp51_;
						GDateTime* _tmp58_;
						GDateTime* _tmp59_;
						gint* _tmp60_;
						GDateTime* _tmp61_;
						GDateTime* _tmp62_;
						GDateTime* _tmp63_;
						GDateTime* _tmp64_;
#line 316 "../lib/Widgets/TimePicker.vala"
						_tmp29_ = hour;
#line 316 "../lib/Widgets/TimePicker.vala"
						if (_tmp29_ == NULL) {
#line 317 "../lib/Widgets/TimePicker.vala"
							c_collection = (g_free (c_collection), NULL);
#line 317 "../lib/Widgets/TimePicker.vala"
							_g_free0 (minute);
#line 317 "../lib/Widgets/TimePicker.vala"
							_g_free0 (hour);
#line 317 "../lib/Widgets/TimePicker.vala"
							_g_free0 (current);
#line 317 "../lib/Widgets/TimePicker.vala"
							return;
#line 1382 "TimePicker.c"
						} else {
							gint* _tmp30_;
#line 318 "../lib/Widgets/TimePicker.vala"
							_tmp30_ = minute;
#line 318 "../lib/Widgets/TimePicker.vala"
							if (_tmp30_ == NULL) {
#line 1389 "TimePicker.c"
								gint _tmp31_;
								gint* _tmp32_;
#line 319 "../lib/Widgets/TimePicker.vala"
								_tmp31_ = 0;
#line 319 "../lib/Widgets/TimePicker.vala"
								_tmp32_ = __int_dup0 (&_tmp31_);
#line 319 "../lib/Widgets/TimePicker.vala"
								_g_free0 (minute);
#line 319 "../lib/Widgets/TimePicker.vala"
								minute = _tmp32_;
#line 1400 "TimePicker.c"
							}
						}
#line 323 "../lib/Widgets/TimePicker.vala"
						_tmp34_ = current;
#line 323 "../lib/Widgets/TimePicker.vala"
						if (string_contains (_tmp34_, "a")) {
#line 323 "../lib/Widgets/TimePicker.vala"
							_tmp33_ = TRUE;
#line 1409 "TimePicker.c"
						} else {
							gint* _tmp35_;
#line 323 "../lib/Widgets/TimePicker.vala"
							_tmp35_ = hour;
#line 323 "../lib/Widgets/TimePicker.vala"
							_tmp33_ = (*_tmp35_) >= 12;
#line 1416 "TimePicker.c"
						}
#line 323 "../lib/Widgets/TimePicker.vala"
						if (_tmp33_) {
#line 1420 "TimePicker.c"
							GDateTime* _tmp36_;
							GDateTime* _tmp37_;
							gint* _tmp38_;
							GDateTime* _tmp39_;
							GDateTime* _tmp40_;
							GDateTime* _tmp41_;
							GDateTime* _tmp42_;
#line 324 "../lib/Widgets/TimePicker.vala"
							_tmp36_ = granite_widgets_time_picker_get_time (self);
#line 324 "../lib/Widgets/TimePicker.vala"
							_tmp37_ = _tmp36_;
#line 324 "../lib/Widgets/TimePicker.vala"
							_tmp38_ = hour;
#line 324 "../lib/Widgets/TimePicker.vala"
							_tmp39_ = granite_widgets_time_picker_get_time (self);
#line 324 "../lib/Widgets/TimePicker.vala"
							_tmp40_ = _tmp39_;
#line 324 "../lib/Widgets/TimePicker.vala"
							_tmp41_ = g_date_time_add_hours (_tmp37_, (*_tmp38_) - g_date_time_get_hour (_tmp40_));
#line 324 "../lib/Widgets/TimePicker.vala"
							_tmp42_ = _tmp41_;
#line 324 "../lib/Widgets/TimePicker.vala"
							granite_widgets_time_picker_set_time (self, _tmp42_);
#line 324 "../lib/Widgets/TimePicker.vala"
							_g_date_time_unref0 (_tmp42_);
#line 1446 "TimePicker.c"
						} else {
							GDateTime* _tmp43_;
							GDateTime* _tmp44_;
							gint* _tmp45_;
							GDateTime* _tmp46_;
							GDateTime* _tmp47_;
							GDateTime* _tmp48_;
							GDateTime* _tmp49_;
#line 326 "../lib/Widgets/TimePicker.vala"
							_tmp43_ = granite_widgets_time_picker_get_time (self);
#line 326 "../lib/Widgets/TimePicker.vala"
							_tmp44_ = _tmp43_;
#line 326 "../lib/Widgets/TimePicker.vala"
							_tmp45_ = hour;
#line 326 "../lib/Widgets/TimePicker.vala"
							_tmp46_ = granite_widgets_time_picker_get_time (self);
#line 326 "../lib/Widgets/TimePicker.vala"
							_tmp47_ = _tmp46_;
#line 326 "../lib/Widgets/TimePicker.vala"
							_tmp48_ = g_date_time_add_hours (_tmp44_, ((*_tmp45_) + 12) - g_date_time_get_hour (_tmp47_));
#line 326 "../lib/Widgets/TimePicker.vala"
							_tmp49_ = _tmp48_;
#line 326 "../lib/Widgets/TimePicker.vala"
							granite_widgets_time_picker_set_time (self, _tmp49_);
#line 326 "../lib/Widgets/TimePicker.vala"
							_g_date_time_unref0 (_tmp49_);
#line 1473 "TimePicker.c"
						}
#line 329 "../lib/Widgets/TimePicker.vala"
						_tmp51_ = current;
#line 329 "../lib/Widgets/TimePicker.vala"
						if (string_contains (_tmp51_, "a")) {
#line 1479 "TimePicker.c"
							gint* _tmp52_;
							gint _tmp53_;
#line 329 "../lib/Widgets/TimePicker.vala"
							_tmp52_ = hour;
#line 329 "../lib/Widgets/TimePicker.vala"
							_tmp53_ = 12;
#line 329 "../lib/Widgets/TimePicker.vala"
							_tmp50_ = _int_equal (_tmp52_, &_tmp53_) == TRUE;
#line 1488 "TimePicker.c"
						} else {
#line 329 "../lib/Widgets/TimePicker.vala"
							_tmp50_ = FALSE;
#line 1492 "TimePicker.c"
						}
#line 329 "../lib/Widgets/TimePicker.vala"
						if (_tmp50_) {
#line 1496 "TimePicker.c"
							GDateTime* _tmp54_;
							GDateTime* _tmp55_;
							GDateTime* _tmp56_;
							GDateTime* _tmp57_;
#line 330 "../lib/Widgets/TimePicker.vala"
							_tmp54_ = granite_widgets_time_picker_get_time (self);
#line 330 "../lib/Widgets/TimePicker.vala"
							_tmp55_ = _tmp54_;
#line 330 "../lib/Widgets/TimePicker.vala"
							_tmp56_ = g_date_time_add_hours (_tmp55_, -12);
#line 330 "../lib/Widgets/TimePicker.vala"
							_tmp57_ = _tmp56_;
#line 330 "../lib/Widgets/TimePicker.vala"
							granite_widgets_time_picker_set_time (self, _tmp57_);
#line 330 "../lib/Widgets/TimePicker.vala"
							_g_date_time_unref0 (_tmp57_);
#line 1513 "TimePicker.c"
						}
#line 333 "../lib/Widgets/TimePicker.vala"
						_tmp58_ = granite_widgets_time_picker_get_time (self);
#line 333 "../lib/Widgets/TimePicker.vala"
						_tmp59_ = _tmp58_;
#line 333 "../lib/Widgets/TimePicker.vala"
						_tmp60_ = minute;
#line 333 "../lib/Widgets/TimePicker.vala"
						_tmp61_ = granite_widgets_time_picker_get_time (self);
#line 333 "../lib/Widgets/TimePicker.vala"
						_tmp62_ = _tmp61_;
#line 333 "../lib/Widgets/TimePicker.vala"
						_tmp63_ = g_date_time_add_minutes (_tmp59_, (*_tmp60_) - g_date_time_get_minute (_tmp62_));
#line 333 "../lib/Widgets/TimePicker.vala"
						_tmp64_ = _tmp63_;
#line 333 "../lib/Widgets/TimePicker.vala"
						granite_widgets_time_picker_set_time (self, _tmp64_);
#line 333 "../lib/Widgets/TimePicker.vala"
						_g_date_time_unref0 (_tmp64_);
#line 334 "../lib/Widgets/TimePicker.vala"
						has_suffix = TRUE;
#line 1535 "TimePicker.c"
					}
				}
			}
		}
#line 293 "../lib/Widgets/TimePicker.vala"
		c_collection = (g_free (c_collection), NULL);
#line 1542 "TimePicker.c"
	}
#line 339 "../lib/Widgets/TimePicker.vala"
	if (is_hours == FALSE) {
#line 339 "../lib/Widgets/TimePicker.vala"
		_tmp66_ = is_suffix == FALSE;
#line 1548 "TimePicker.c"
	} else {
#line 339 "../lib/Widgets/TimePicker.vala"
		_tmp66_ = FALSE;
#line 1552 "TimePicker.c"
	}
#line 339 "../lib/Widgets/TimePicker.vala"
	if (_tmp66_) {
#line 1556 "TimePicker.c"
		const gchar* _tmp67_;
#line 339 "../lib/Widgets/TimePicker.vala"
		_tmp67_ = current;
#line 339 "../lib/Widgets/TimePicker.vala"
		_tmp65_ = g_strcmp0 (_tmp67_, "") != 0;
#line 1562 "TimePicker.c"
	} else {
#line 339 "../lib/Widgets/TimePicker.vala"
		_tmp65_ = FALSE;
#line 1566 "TimePicker.c"
	}
#line 339 "../lib/Widgets/TimePicker.vala"
	if (_tmp65_) {
#line 1570 "TimePicker.c"
		const gchar* _tmp68_;
		gint _tmp69_;
		gint* _tmp70_;
#line 340 "../lib/Widgets/TimePicker.vala"
		_tmp68_ = current;
#line 340 "../lib/Widgets/TimePicker.vala"
		_tmp69_ = atoi (_tmp68_);
#line 340 "../lib/Widgets/TimePicker.vala"
		_tmp70_ = __int_dup0 (&_tmp69_);
#line 340 "../lib/Widgets/TimePicker.vala"
		_g_free0 (minute);
#line 340 "../lib/Widgets/TimePicker.vala"
		minute = _tmp70_;
#line 1584 "TimePicker.c"
	}
#line 343 "../lib/Widgets/TimePicker.vala"
	_tmp71_ = hour;
#line 343 "../lib/Widgets/TimePicker.vala"
	if (_tmp71_ == NULL) {
#line 1590 "TimePicker.c"
		const gchar* _tmp72_;
		gint _tmp73_;
		gint _tmp74_;
#line 344 "../lib/Widgets/TimePicker.vala"
		_tmp72_ = current;
#line 344 "../lib/Widgets/TimePicker.vala"
		_tmp73_ = strlen (_tmp72_);
#line 344 "../lib/Widgets/TimePicker.vala"
		_tmp74_ = _tmp73_;
#line 344 "../lib/Widgets/TimePicker.vala"
		if (_tmp74_ < 3) {
#line 1602 "TimePicker.c"
			const gchar* _tmp75_;
			gint _tmp76_;
			gint* _tmp77_;
			gint _tmp78_;
			gint* _tmp79_;
#line 345 "../lib/Widgets/TimePicker.vala"
			_tmp75_ = current;
#line 345 "../lib/Widgets/TimePicker.vala"
			_tmp76_ = atoi (_tmp75_);
#line 345 "../lib/Widgets/TimePicker.vala"
			_tmp77_ = __int_dup0 (&_tmp76_);
#line 345 "../lib/Widgets/TimePicker.vala"
			_g_free0 (hour);
#line 345 "../lib/Widgets/TimePicker.vala"
			hour = _tmp77_;
#line 346 "../lib/Widgets/TimePicker.vala"
			_tmp78_ = 0;
#line 346 "../lib/Widgets/TimePicker.vala"
			_tmp79_ = __int_dup0 (&_tmp78_);
#line 346 "../lib/Widgets/TimePicker.vala"
			_g_free0 (minute);
#line 346 "../lib/Widgets/TimePicker.vala"
			minute = _tmp79_;
#line 1626 "TimePicker.c"
		} else {
			const gchar* _tmp80_;
			gint _tmp81_;
			gint _tmp82_;
#line 347 "../lib/Widgets/TimePicker.vala"
			_tmp80_ = current;
#line 347 "../lib/Widgets/TimePicker.vala"
			_tmp81_ = strlen (_tmp80_);
#line 347 "../lib/Widgets/TimePicker.vala"
			_tmp82_ = _tmp81_;
#line 347 "../lib/Widgets/TimePicker.vala"
			if (_tmp82_ == 4) {
#line 1639 "TimePicker.c"
				const gchar* _tmp83_;
				gchar* _tmp84_;
				gchar* _tmp85_;
				gint _tmp86_;
				gint* _tmp87_;
				const gchar* _tmp88_;
				gchar* _tmp89_;
				gchar* _tmp90_;
				gint _tmp91_;
				gint* _tmp92_;
				gboolean _tmp93_ = FALSE;
				gint* _tmp94_;
#line 348 "../lib/Widgets/TimePicker.vala"
				_tmp83_ = current;
#line 348 "../lib/Widgets/TimePicker.vala"
				_tmp84_ = string_slice (_tmp83_, (glong) 0, (glong) 2);
#line 348 "../lib/Widgets/TimePicker.vala"
				_tmp85_ = _tmp84_;
#line 348 "../lib/Widgets/TimePicker.vala"
				_tmp86_ = atoi (_tmp85_);
#line 348 "../lib/Widgets/TimePicker.vala"
				_tmp87_ = __int_dup0 (&_tmp86_);
#line 348 "../lib/Widgets/TimePicker.vala"
				_g_free0 (hour);
#line 348 "../lib/Widgets/TimePicker.vala"
				hour = _tmp87_;
#line 348 "../lib/Widgets/TimePicker.vala"
				_g_free0 (_tmp85_);
#line 349 "../lib/Widgets/TimePicker.vala"
				_tmp88_ = current;
#line 349 "../lib/Widgets/TimePicker.vala"
				_tmp89_ = string_slice (_tmp88_, (glong) 2, (glong) 4);
#line 349 "../lib/Widgets/TimePicker.vala"
				_tmp90_ = _tmp89_;
#line 349 "../lib/Widgets/TimePicker.vala"
				_tmp91_ = atoi (_tmp90_);
#line 349 "../lib/Widgets/TimePicker.vala"
				_tmp92_ = __int_dup0 (&_tmp91_);
#line 349 "../lib/Widgets/TimePicker.vala"
				_g_free0 (minute);
#line 349 "../lib/Widgets/TimePicker.vala"
				minute = _tmp92_;
#line 349 "../lib/Widgets/TimePicker.vala"
				_g_free0 (_tmp90_);
#line 350 "../lib/Widgets/TimePicker.vala"
				_tmp94_ = hour;
#line 350 "../lib/Widgets/TimePicker.vala"
				if ((*_tmp94_) > 23) {
#line 350 "../lib/Widgets/TimePicker.vala"
					_tmp93_ = TRUE;
#line 1690 "TimePicker.c"
				} else {
					gint* _tmp95_;
#line 350 "../lib/Widgets/TimePicker.vala"
					_tmp95_ = minute;
#line 350 "../lib/Widgets/TimePicker.vala"
					_tmp93_ = (*_tmp95_) > 59;
#line 1697 "TimePicker.c"
				}
#line 350 "../lib/Widgets/TimePicker.vala"
				if (_tmp93_) {
#line 351 "../lib/Widgets/TimePicker.vala"
					_g_free0 (hour);
#line 351 "../lib/Widgets/TimePicker.vala"
					hour = NULL;
#line 352 "../lib/Widgets/TimePicker.vala"
					_g_free0 (minute);
#line 352 "../lib/Widgets/TimePicker.vala"
					minute = NULL;
#line 1709 "TimePicker.c"
				}
			}
		}
	}
#line 357 "../lib/Widgets/TimePicker.vala"
	_tmp97_ = hour;
#line 357 "../lib/Widgets/TimePicker.vala"
	if (_tmp97_ == NULL) {
#line 357 "../lib/Widgets/TimePicker.vala"
		_tmp96_ = TRUE;
#line 1720 "TimePicker.c"
	} else {
		gint* _tmp98_;
#line 357 "../lib/Widgets/TimePicker.vala"
		_tmp98_ = minute;
#line 357 "../lib/Widgets/TimePicker.vala"
		_tmp96_ = _tmp98_ == NULL;
#line 1727 "TimePicker.c"
	}
#line 357 "../lib/Widgets/TimePicker.vala"
	if (_tmp96_) {
#line 358 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_update_text (self, FALSE);
#line 359 "../lib/Widgets/TimePicker.vala"
		_g_free0 (minute);
#line 359 "../lib/Widgets/TimePicker.vala"
		_g_free0 (hour);
#line 359 "../lib/Widgets/TimePicker.vala"
		_g_free0 (current);
#line 359 "../lib/Widgets/TimePicker.vala"
		return;
#line 1741 "TimePicker.c"
	}
#line 362 "../lib/Widgets/TimePicker.vala"
	if (has_suffix == FALSE) {
#line 1745 "TimePicker.c"
		GDateTime* _tmp99_;
		GDateTime* _tmp100_;
		gint* _tmp101_;
		GDateTime* _tmp102_;
		GDateTime* _tmp103_;
		GDateTime* _tmp104_;
		GDateTime* _tmp105_;
		GDateTime* _tmp106_;
		GDateTime* _tmp107_;
		gint* _tmp108_;
		GDateTime* _tmp109_;
		GDateTime* _tmp110_;
		GDateTime* _tmp111_;
		GDateTime* _tmp112_;
#line 363 "../lib/Widgets/TimePicker.vala"
		_tmp99_ = granite_widgets_time_picker_get_time (self);
#line 363 "../lib/Widgets/TimePicker.vala"
		_tmp100_ = _tmp99_;
#line 363 "../lib/Widgets/TimePicker.vala"
		_tmp101_ = hour;
#line 363 "../lib/Widgets/TimePicker.vala"
		_tmp102_ = granite_widgets_time_picker_get_time (self);
#line 363 "../lib/Widgets/TimePicker.vala"
		_tmp103_ = _tmp102_;
#line 363 "../lib/Widgets/TimePicker.vala"
		_tmp104_ = g_date_time_add_hours (_tmp100_, (*_tmp101_) - g_date_time_get_hour (_tmp103_));
#line 363 "../lib/Widgets/TimePicker.vala"
		_tmp105_ = _tmp104_;
#line 363 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_time (self, _tmp105_);
#line 363 "../lib/Widgets/TimePicker.vala"
		_g_date_time_unref0 (_tmp105_);
#line 364 "../lib/Widgets/TimePicker.vala"
		_tmp106_ = granite_widgets_time_picker_get_time (self);
#line 364 "../lib/Widgets/TimePicker.vala"
		_tmp107_ = _tmp106_;
#line 364 "../lib/Widgets/TimePicker.vala"
		_tmp108_ = minute;
#line 364 "../lib/Widgets/TimePicker.vala"
		_tmp109_ = granite_widgets_time_picker_get_time (self);
#line 364 "../lib/Widgets/TimePicker.vala"
		_tmp110_ = _tmp109_;
#line 364 "../lib/Widgets/TimePicker.vala"
		_tmp111_ = g_date_time_add_minutes (_tmp107_, (*_tmp108_) - g_date_time_get_minute (_tmp110_));
#line 364 "../lib/Widgets/TimePicker.vala"
		_tmp112_ = _tmp111_;
#line 364 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_time (self, _tmp112_);
#line 364 "../lib/Widgets/TimePicker.vala"
		_g_date_time_unref0 (_tmp112_);
#line 1796 "TimePicker.c"
	}
#line 367 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_text (self, FALSE);
#line 285 "../lib/Widgets/TimePicker.vala"
	_g_free0 (minute);
#line 285 "../lib/Widgets/TimePicker.vala"
	_g_free0 (hour);
#line 285 "../lib/Widgets/TimePicker.vala"
	_g_free0 (current);
#line 1806 "TimePicker.c"
}

static void
granite_widgets_time_picker_update_text (GraniteWidgetsTimePicker* self,
                                         gboolean no_signal)
{
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	gchar* _tmp12_;
#line 370 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (self != NULL);
#line 371 "../lib/Widgets/TimePicker.vala"
	if (granite_date_time_is_clock_format_12h ()) {
#line 1820 "TimePicker.c"
		GDateTime* _tmp0_;
		GDateTime* _tmp1_;
		const gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
#line 372 "../lib/Widgets/TimePicker.vala"
		_tmp0_ = granite_widgets_time_picker_get_time (self);
#line 372 "../lib/Widgets/TimePicker.vala"
		_tmp1_ = _tmp0_;
#line 372 "../lib/Widgets/TimePicker.vala"
		_tmp2_ = self->priv->_format_12;
#line 372 "../lib/Widgets/TimePicker.vala"
		_tmp3_ = g_date_time_format (_tmp1_, _tmp2_);
#line 372 "../lib/Widgets/TimePicker.vala"
		_tmp4_ = _tmp3_;
#line 372 "../lib/Widgets/TimePicker.vala"
		gtk_entry_set_text ((GtkEntry*) self, _tmp4_);
#line 372 "../lib/Widgets/TimePicker.vala"
		_g_free0 (_tmp4_);
#line 1840 "TimePicker.c"
	} else {
		GDateTime* _tmp5_;
		GDateTime* _tmp6_;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
#line 374 "../lib/Widgets/TimePicker.vala"
		_tmp5_ = granite_widgets_time_picker_get_time (self);
#line 374 "../lib/Widgets/TimePicker.vala"
		_tmp6_ = _tmp5_;
#line 374 "../lib/Widgets/TimePicker.vala"
		_tmp7_ = self->priv->_format_24;
#line 374 "../lib/Widgets/TimePicker.vala"
		_tmp8_ = g_date_time_format (_tmp6_, _tmp7_);
#line 374 "../lib/Widgets/TimePicker.vala"
		_tmp9_ = _tmp8_;
#line 374 "../lib/Widgets/TimePicker.vala"
		gtk_entry_set_text ((GtkEntry*) self, _tmp9_);
#line 374 "../lib/Widgets/TimePicker.vala"
		_g_free0 (_tmp9_);
#line 1861 "TimePicker.c"
	}
#line 377 "../lib/Widgets/TimePicker.vala"
	_tmp10_ = gtk_entry_get_text ((GtkEntry*) self);
#line 377 "../lib/Widgets/TimePicker.vala"
	_tmp11_ = _tmp10_;
#line 377 "../lib/Widgets/TimePicker.vala"
	_tmp12_ = g_strdup (_tmp11_);
#line 377 "../lib/Widgets/TimePicker.vala"
	_g_free0 (self->priv->old_string);
#line 377 "../lib/Widgets/TimePicker.vala"
	self->priv->old_string = _tmp12_;
#line 379 "../lib/Widgets/TimePicker.vala"
	if (no_signal == FALSE) {
#line 380 "../lib/Widgets/TimePicker.vala"
		g_signal_emit (self, granite_widgets_time_picker_signals[GRANITE_WIDGETS_TIME_PICKER_TIME_CHANGED_SIGNAL], 0);
#line 1877 "TimePicker.c"
	}
}

GraniteWidgetsTimePicker*
granite_widgets_time_picker_construct (GType object_type)
{
	GraniteWidgetsTimePicker * self = NULL;
#line 27 "../lib/Widgets/TimePicker.vala"
	self = (GraniteWidgetsTimePicker*) g_object_new (object_type, NULL);
#line 27 "../lib/Widgets/TimePicker.vala"
	return self;
#line 1889 "TimePicker.c"
}

GraniteWidgetsTimePicker*
granite_widgets_time_picker_new (void)
{
#line 27 "../lib/Widgets/TimePicker.vala"
	return granite_widgets_time_picker_construct (GRANITE_WIDGETS_TYPE_TIME_PICKER);
#line 1897 "TimePicker.c"
}

static void
_granite_widgets_time_picker_on_icon_press_gtk_entry_icon_release (GtkEntry* _sender,
                                                                   GtkEntryIconPosition icon_pos,
                                                                   GdkEvent* event,
                                                                   gpointer self)
{
#line 100 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_on_icon_press ((GraniteWidgetsTimePicker*) self, icon_pos, event);
#line 1908 "TimePicker.c"
}

static void
_granite_widgets_time_picker___lambda84_ (GraniteWidgetsTimePicker* self,
                                          GtkWidget* mode)
{
	GraniteWidgetsModeButton* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
#line 111 "../lib/Widgets/TimePicker.vala"
	g_return_if_fail (mode != NULL);
#line 112 "../lib/Widgets/TimePicker.vala"
	if (self->priv->changing_time) {
#line 113 "../lib/Widgets/TimePicker.vala"
		return;
#line 1924 "TimePicker.c"
	}
#line 116 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = self->priv->am_pm_modebutton;
#line 116 "../lib/Widgets/TimePicker.vala"
	_tmp1_ = granite_widgets_mode_button_get_selected (_tmp0_);
#line 116 "../lib/Widgets/TimePicker.vala"
	_tmp2_ = _tmp1_;
#line 116 "../lib/Widgets/TimePicker.vala"
	if (_tmp2_ == 0) {
#line 1934 "TimePicker.c"
		GDateTime* _tmp3_;
		GDateTime* _tmp4_;
		GDateTime* _tmp5_;
#line 117 "../lib/Widgets/TimePicker.vala"
		_tmp3_ = self->priv->_time;
#line 117 "../lib/Widgets/TimePicker.vala"
		_tmp4_ = g_date_time_add_hours (_tmp3_, -12);
#line 117 "../lib/Widgets/TimePicker.vala"
		_tmp5_ = _tmp4_;
#line 117 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_time (self, _tmp5_);
#line 117 "../lib/Widgets/TimePicker.vala"
		_g_date_time_unref0 (_tmp5_);
#line 118 "../lib/Widgets/TimePicker.vala"
		g_signal_emit (self, granite_widgets_time_picker_signals[GRANITE_WIDGETS_TIME_PICKER_TIME_CHANGED_SIGNAL], 0);
#line 1950 "TimePicker.c"
	} else {
		GraniteWidgetsModeButton* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
#line 119 "../lib/Widgets/TimePicker.vala"
		_tmp6_ = self->priv->am_pm_modebutton;
#line 119 "../lib/Widgets/TimePicker.vala"
		_tmp7_ = granite_widgets_mode_button_get_selected (_tmp6_);
#line 119 "../lib/Widgets/TimePicker.vala"
		_tmp8_ = _tmp7_;
#line 119 "../lib/Widgets/TimePicker.vala"
		if (_tmp8_ == 1) {
#line 1963 "TimePicker.c"
			GDateTime* _tmp9_;
			GDateTime* _tmp10_;
			GDateTime* _tmp11_;
#line 120 "../lib/Widgets/TimePicker.vala"
			_tmp9_ = self->priv->_time;
#line 120 "../lib/Widgets/TimePicker.vala"
			_tmp10_ = g_date_time_add_hours (_tmp9_, 12);
#line 120 "../lib/Widgets/TimePicker.vala"
			_tmp11_ = _tmp10_;
#line 120 "../lib/Widgets/TimePicker.vala"
			granite_widgets_time_picker_set_time (self, _tmp11_);
#line 120 "../lib/Widgets/TimePicker.vala"
			_g_date_time_unref0 (_tmp11_);
#line 121 "../lib/Widgets/TimePicker.vala"
			g_signal_emit (self, granite_widgets_time_picker_signals[GRANITE_WIDGETS_TIME_PICKER_TIME_CHANGED_SIGNAL], 0);
#line 1979 "TimePicker.c"
		} else {
#line 123 "../lib/Widgets/TimePicker.vala"
			g_assert_not_reached ();
#line 1983 "TimePicker.c"
		}
	}
#line 126 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_text (self, TRUE);
#line 1988 "TimePicker.c"
}

static void
__granite_widgets_time_picker___lambda84__granite_widgets_mode_button_mode_changed (GraniteWidgetsModeButton* _sender,
                                                                                    GtkWidget* widget,
                                                                                    gpointer self)
{
#line 111 "../lib/Widgets/TimePicker.vala"
	_granite_widgets_time_picker___lambda84_ ((GraniteWidgetsTimePicker*) self, widget);
#line 1998 "TimePicker.c"
}

static void
_granite_widgets_time_picker___lambda85_ (GraniteWidgetsTimePicker* self)
{
#line 137 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_time (self, TRUE);
#line 2006 "TimePicker.c"
}

static void
__granite_widgets_time_picker___lambda85__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                         gpointer self)
{
#line 137 "../lib/Widgets/TimePicker.vala"
	_granite_widgets_time_picker___lambda85_ ((GraniteWidgetsTimePicker*) self);
#line 2015 "TimePicker.c"
}

static void
_granite_widgets_time_picker___lambda86_ (GraniteWidgetsTimePicker* self)
{
#line 142 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_time (self, FALSE);
#line 2023 "TimePicker.c"
}

static void
__granite_widgets_time_picker___lambda86__gtk_spin_button_value_changed (GtkSpinButton* _sender,
                                                                         gpointer self)
{
#line 142 "../lib/Widgets/TimePicker.vala"
	_granite_widgets_time_picker___lambda86_ ((GraniteWidgetsTimePicker*) self);
#line 2032 "TimePicker.c"
}

static gchar*
double_to_string (gdouble self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gint _tmp1__length1;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* result = NULL;
#line 989 "glib-2.0.vapi"
	_tmp0_ = g_new0 (gchar, G_ASCII_DTOSTR_BUF_SIZE);
#line 989 "glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 989 "glib-2.0.vapi"
	_tmp1__length1 = G_ASCII_DTOSTR_BUF_SIZE;
#line 989 "glib-2.0.vapi"
	_tmp2_ = g_ascii_dtostr (_tmp1_, (gint) G_ASCII_DTOSTR_BUF_SIZE, self);
#line 989 "glib-2.0.vapi"
	_tmp3_ = g_strdup (_tmp2_);
#line 989 "glib-2.0.vapi"
	_tmp4_ = _tmp3_;
#line 989 "glib-2.0.vapi"
	_tmp1_ = (g_free (_tmp1_), NULL);
#line 989 "glib-2.0.vapi"
	result = _tmp4_;
#line 989 "glib-2.0.vapi"
	return result;
#line 2063 "TimePicker.c"
}

static gboolean
_granite_widgets_time_picker___lambda87_ (GraniteWidgetsTimePicker* self)
{
	gdouble val = 0.0;
	GtkSpinButton* _tmp0_;
	gboolean result = FALSE;
#line 146 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = self->priv->minutes_spinbutton;
#line 146 "../lib/Widgets/TimePicker.vala"
	val = gtk_spin_button_get_value (_tmp0_);
#line 147 "../lib/Widgets/TimePicker.vala"
	if (val < ((gdouble) 10)) {
#line 2078 "TimePicker.c"
		GtkSpinButton* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
#line 148 "../lib/Widgets/TimePicker.vala"
		_tmp1_ = self->priv->minutes_spinbutton;
#line 148 "../lib/Widgets/TimePicker.vala"
		_tmp2_ = double_to_string (val);
#line 148 "../lib/Widgets/TimePicker.vala"
		_tmp3_ = _tmp2_;
#line 148 "../lib/Widgets/TimePicker.vala"
		_tmp4_ = g_strconcat ("0", _tmp3_, NULL);
#line 148 "../lib/Widgets/TimePicker.vala"
		_tmp5_ = _tmp4_;
#line 148 "../lib/Widgets/TimePicker.vala"
		gtk_entry_set_text ((GtkEntry*) _tmp1_, _tmp5_);
#line 148 "../lib/Widgets/TimePicker.vala"
		_g_free0 (_tmp5_);
#line 148 "../lib/Widgets/TimePicker.vala"
		_g_free0 (_tmp3_);
#line 149 "../lib/Widgets/TimePicker.vala"
		result = TRUE;
#line 149 "../lib/Widgets/TimePicker.vala"
		return result;
#line 2104 "TimePicker.c"
	}
#line 152 "../lib/Widgets/TimePicker.vala"
	result = FALSE;
#line 152 "../lib/Widgets/TimePicker.vala"
	return result;
#line 2110 "TimePicker.c"
}

static gboolean
__granite_widgets_time_picker___lambda87__gtk_spin_button_output (GtkSpinButton* _sender,
                                                                  gpointer self)
{
	gboolean result;
	result = _granite_widgets_time_picker___lambda87_ ((GraniteWidgetsTimePicker*) self);
#line 145 "../lib/Widgets/TimePicker.vala"
	return result;
#line 2121 "TimePicker.c"
}

static gboolean
_granite_widgets_time_picker___lambda88_ (GraniteWidgetsTimePicker* self)
{
	gboolean result = FALSE;
#line 174 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_is_unfocused (self);
#line 175 "../lib/Widgets/TimePicker.vala"
	result = FALSE;
#line 175 "../lib/Widgets/TimePicker.vala"
	return result;
#line 2134 "TimePicker.c"
}

static gboolean
__granite_widgets_time_picker___lambda88__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                      GdkEventFocus* event,
                                                                      gpointer self)
{
	gboolean result;
	result = _granite_widgets_time_picker___lambda88_ ((GraniteWidgetsTimePicker*) self);
#line 173 "../lib/Widgets/TimePicker.vala"
	return result;
#line 2146 "TimePicker.c"
}

static gboolean
_granite_widgets_time_picker___lambda89_ (GraniteWidgetsTimePicker* self,
                                          GdkEventScroll* event)
{
	GdkScrollDirection _tmp0_;
	gboolean result = FALSE;
#line 178 "../lib/Widgets/TimePicker.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 179 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = event->direction;
#line 179 "../lib/Widgets/TimePicker.vala"
	switch (_tmp0_) {
#line 179 "../lib/Widgets/TimePicker.vala"
		case GDK_SCROLL_UP:
#line 179 "../lib/Widgets/TimePicker.vala"
		case GDK_SCROLL_RIGHT:
#line 2165 "TimePicker.c"
		{
			GDateTime* _tmp1_;
			GDateTime* _tmp2_;
#line 182 "../lib/Widgets/TimePicker.vala"
			_tmp1_ = self->priv->_time;
#line 182 "../lib/Widgets/TimePicker.vala"
			_tmp2_ = g_date_time_add_minutes (_tmp1_, 1);
#line 182 "../lib/Widgets/TimePicker.vala"
			_g_date_time_unref0 (self->priv->_time);
#line 182 "../lib/Widgets/TimePicker.vala"
			self->priv->_time = _tmp2_;
#line 183 "../lib/Widgets/TimePicker.vala"
			break;
#line 2179 "TimePicker.c"
		}
#line 179 "../lib/Widgets/TimePicker.vala"
		case GDK_SCROLL_DOWN:
#line 179 "../lib/Widgets/TimePicker.vala"
		case GDK_SCROLL_LEFT:
#line 2185 "TimePicker.c"
		{
			GDateTime* _tmp3_;
			GDateTime* _tmp4_;
#line 186 "../lib/Widgets/TimePicker.vala"
			_tmp3_ = self->priv->_time;
#line 186 "../lib/Widgets/TimePicker.vala"
			_tmp4_ = g_date_time_add_minutes (_tmp3_, -1);
#line 186 "../lib/Widgets/TimePicker.vala"
			_g_date_time_unref0 (self->priv->_time);
#line 186 "../lib/Widgets/TimePicker.vala"
			self->priv->_time = _tmp4_;
#line 187 "../lib/Widgets/TimePicker.vala"
			break;
#line 2199 "TimePicker.c"
		}
		default:
		{
#line 189 "../lib/Widgets/TimePicker.vala"
			break;
#line 2205 "TimePicker.c"
		}
	}
#line 191 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_text (self, FALSE);
#line 192 "../lib/Widgets/TimePicker.vala"
	result = FALSE;
#line 192 "../lib/Widgets/TimePicker.vala"
	return result;
#line 2214 "TimePicker.c"
}

static gboolean
__granite_widgets_time_picker___lambda89__gtk_widget_scroll_event (GtkWidget* _sender,
                                                                   GdkEventScroll* event,
                                                                   gpointer self)
{
	gboolean result;
	result = _granite_widgets_time_picker___lambda89_ ((GraniteWidgetsTimePicker*) self, event);
#line 178 "../lib/Widgets/TimePicker.vala"
	return result;
#line 2226 "TimePicker.c"
}

static void
_granite_widgets_time_picker_is_unfocused_gtk_entry_activate (GtkEntry* _sender,
                                                              gpointer self)
{
#line 195 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_is_unfocused ((GraniteWidgetsTimePicker*) self);
#line 2235 "TimePicker.c"
}

static GObject *
granite_widgets_time_picker_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteWidgetsTimePicker * self;
	const gchar* _tmp0_;
	const gchar* _tmp3_;
	GThemedIcon* _tmp6_;
	GThemedIcon* _tmp7_;
	GraniteWidgetsModeButton* _tmp8_ = NULL;
	GraniteWidgetsModeButton* _tmp9_;
	GraniteWidgetsModeButton* _tmp10_;
	GraniteWidgetsModeButton* _tmp11_;
	GtkSpinButton* _tmp14_;
	GtkSpinButton* _tmp15_;
	GtkSpinButton* _tmp16_;
	GtkSpinButton* _tmp17_;
	GtkSpinButton* _tmp18_;
	GtkSpinButton* _tmp19_;
	GtkSpinButton* _tmp20_;
	GtkSpinButton* _tmp21_;
	GtkLabel* separation_label = NULL;
	GtkLabel* _tmp22_;
	GtkGrid* pop_grid = NULL;
	GtkGrid* _tmp23_;
	GtkGrid* _tmp24_;
	GtkGrid* _tmp25_;
	GtkGrid* _tmp26_;
	GtkSpinButton* _tmp27_;
	GtkGrid* _tmp28_;
	GtkLabel* _tmp29_;
	GtkGrid* _tmp30_;
	GtkSpinButton* _tmp31_;
	GtkGrid* _tmp32_;
	GraniteWidgetsModeButton* _tmp33_;
	GtkGrid* _tmp34_;
	GtkPopover* _tmp35_;
	GtkPopover* _tmp36_;
	GtkPopover* _tmp37_;
	GtkGrid* _tmp38_;
#line 89 "../lib/Widgets/TimePicker.vala"
	parent_class = G_OBJECT_CLASS (granite_widgets_time_picker_parent_class);
#line 89 "../lib/Widgets/TimePicker.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 89 "../lib/Widgets/TimePicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_TIME_PICKER, GraniteWidgetsTimePicker);
#line 90 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = self->priv->_format_12;
#line 90 "../lib/Widgets/TimePicker.vala"
	if (_tmp0_ == NULL) {
#line 2291 "TimePicker.c"
		gchar* _tmp1_;
		gchar* _tmp2_;
#line 91 "../lib/Widgets/TimePicker.vala"
		_tmp1_ = granite_date_time_get_default_time_format (TRUE, FALSE);
#line 91 "../lib/Widgets/TimePicker.vala"
		_tmp2_ = _tmp1_;
#line 91 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_format_12 (self, _tmp2_);
#line 91 "../lib/Widgets/TimePicker.vala"
		_g_free0 (_tmp2_);
#line 2302 "TimePicker.c"
	}
#line 94 "../lib/Widgets/TimePicker.vala"
	_tmp3_ = self->priv->_format_24;
#line 94 "../lib/Widgets/TimePicker.vala"
	if (_tmp3_ == NULL) {
#line 2308 "TimePicker.c"
		gchar* _tmp4_;
		gchar* _tmp5_;
#line 95 "../lib/Widgets/TimePicker.vala"
		_tmp4_ = granite_date_time_get_default_time_format (FALSE, FALSE);
#line 95 "../lib/Widgets/TimePicker.vala"
		_tmp5_ = _tmp4_;
#line 95 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_format_24 (self, _tmp5_);
#line 95 "../lib/Widgets/TimePicker.vala"
		_g_free0 (_tmp5_);
#line 2319 "TimePicker.c"
	}
#line 98 "../lib/Widgets/TimePicker.vala"
	gtk_entry_set_max_length ((GtkEntry*) self, 8);
#line 99 "../lib/Widgets/TimePicker.vala"
	_tmp6_ = (GThemedIcon*) g_themed_icon_new_with_default_fallbacks ("appointment-symbolic");
#line 99 "../lib/Widgets/TimePicker.vala"
	_tmp7_ = _tmp6_;
#line 99 "../lib/Widgets/TimePicker.vala"
	g_object_set ((GtkEntry*) self, "secondary-icon-gicon", (GIcon*) _tmp7_, NULL);
#line 99 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (_tmp7_);
#line 100 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object ((GtkEntry*) self, "icon-release", (GCallback) _granite_widgets_time_picker_on_icon_press_gtk_entry_icon_release, self, 0);
#line 102 "../lib/Widgets/TimePicker.vala"
	_tmp8_ = granite_widgets_mode_button_new ();
#line 102 "../lib/Widgets/TimePicker.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp8_, TRUE);
#line 102 "../lib/Widgets/TimePicker.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp8_, GTK_ORIENTATION_VERTICAL);
#line 102 "../lib/Widgets/TimePicker.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp8_, TRUE);
#line 102 "../lib/Widgets/TimePicker.vala"
	g_object_ref_sink (_tmp8_);
#line 102 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (self->priv->am_pm_modebutton);
#line 102 "../lib/Widgets/TimePicker.vala"
	self->priv->am_pm_modebutton = _tmp8_;
#line 108 "../lib/Widgets/TimePicker.vala"
	_tmp9_ = self->priv->am_pm_modebutton;
#line 108 "../lib/Widgets/TimePicker.vala"
	granite_widgets_mode_button_append_text (_tmp9_, _ ("AM"));
#line 110 "../lib/Widgets/TimePicker.vala"
	_tmp10_ = self->priv->am_pm_modebutton;
#line 110 "../lib/Widgets/TimePicker.vala"
	granite_widgets_mode_button_append_text (_tmp10_, _ ("PM"));
#line 111 "../lib/Widgets/TimePicker.vala"
	_tmp11_ = self->priv->am_pm_modebutton;
#line 111 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object (_tmp11_, "mode-changed", (GCallback) __granite_widgets_time_picker___lambda84__granite_widgets_mode_button_mode_changed, self, 0);
#line 129 "../lib/Widgets/TimePicker.vala"
	if (granite_date_time_is_clock_format_12h ()) {
#line 2361 "TimePicker.c"
		GtkSpinButton* _tmp12_;
#line 130 "../lib/Widgets/TimePicker.vala"
		_tmp12_ = (GtkSpinButton*) gtk_spin_button_new_with_range ((gdouble) 1, (gdouble) 12, (gdouble) 1);
#line 130 "../lib/Widgets/TimePicker.vala"
		g_object_ref_sink (_tmp12_);
#line 130 "../lib/Widgets/TimePicker.vala"
		_g_object_unref0 (self->priv->hours_spinbutton);
#line 130 "../lib/Widgets/TimePicker.vala"
		self->priv->hours_spinbutton = _tmp12_;
#line 2371 "TimePicker.c"
	} else {
		GtkSpinButton* _tmp13_;
#line 132 "../lib/Widgets/TimePicker.vala"
		_tmp13_ = (GtkSpinButton*) gtk_spin_button_new_with_range ((gdouble) 0, (gdouble) 23, (gdouble) 1);
#line 132 "../lib/Widgets/TimePicker.vala"
		g_object_ref_sink (_tmp13_);
#line 132 "../lib/Widgets/TimePicker.vala"
		_g_object_unref0 (self->priv->hours_spinbutton);
#line 132 "../lib/Widgets/TimePicker.vala"
		self->priv->hours_spinbutton = _tmp13_;
#line 2382 "TimePicker.c"
	}
#line 135 "../lib/Widgets/TimePicker.vala"
	_tmp14_ = self->priv->hours_spinbutton;
#line 135 "../lib/Widgets/TimePicker.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp14_, GTK_ORIENTATION_VERTICAL);
#line 136 "../lib/Widgets/TimePicker.vala"
	_tmp15_ = self->priv->hours_spinbutton;
#line 136 "../lib/Widgets/TimePicker.vala"
	gtk_spin_button_set_wrap (_tmp15_, TRUE);
#line 137 "../lib/Widgets/TimePicker.vala"
	_tmp16_ = self->priv->hours_spinbutton;
#line 137 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object (_tmp16_, "value-changed", (GCallback) __granite_widgets_time_picker___lambda85__gtk_spin_button_value_changed, self, 0);
#line 139 "../lib/Widgets/TimePicker.vala"
	_tmp17_ = (GtkSpinButton*) gtk_spin_button_new_with_range ((gdouble) 0, (gdouble) 59, (gdouble) 1);
#line 139 "../lib/Widgets/TimePicker.vala"
	g_object_ref_sink (_tmp17_);
#line 139 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (self->priv->minutes_spinbutton);
#line 139 "../lib/Widgets/TimePicker.vala"
	self->priv->minutes_spinbutton = _tmp17_;
#line 140 "../lib/Widgets/TimePicker.vala"
	_tmp18_ = self->priv->minutes_spinbutton;
#line 140 "../lib/Widgets/TimePicker.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp18_, GTK_ORIENTATION_VERTICAL);
#line 141 "../lib/Widgets/TimePicker.vala"
	_tmp19_ = self->priv->minutes_spinbutton;
#line 141 "../lib/Widgets/TimePicker.vala"
	gtk_spin_button_set_wrap (_tmp19_, TRUE);
#line 142 "../lib/Widgets/TimePicker.vala"
	_tmp20_ = self->priv->minutes_spinbutton;
#line 142 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object (_tmp20_, "value-changed", (GCallback) __granite_widgets_time_picker___lambda86__gtk_spin_button_value_changed, self, 0);
#line 145 "../lib/Widgets/TimePicker.vala"
	_tmp21_ = self->priv->minutes_spinbutton;
#line 145 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object (_tmp21_, "output", (GCallback) __granite_widgets_time_picker___lambda87__gtk_spin_button_output, self, 0);
#line 156 "../lib/Widgets/TimePicker.vala"
	_tmp22_ = (GtkLabel*) gtk_label_new (_ (":"));
#line 156 "../lib/Widgets/TimePicker.vala"
	g_object_ref_sink (_tmp22_);
#line 156 "../lib/Widgets/TimePicker.vala"
	separation_label = _tmp22_;
#line 158 "../lib/Widgets/TimePicker.vala"
	_tmp23_ = (GtkGrid*) gtk_grid_new ();
#line 158 "../lib/Widgets/TimePicker.vala"
	g_object_ref_sink (_tmp23_);
#line 158 "../lib/Widgets/TimePicker.vala"
	pop_grid = _tmp23_;
#line 159 "../lib/Widgets/TimePicker.vala"
	_tmp24_ = pop_grid;
#line 159 "../lib/Widgets/TimePicker.vala"
	gtk_grid_set_column_spacing (_tmp24_, 6);
#line 160 "../lib/Widgets/TimePicker.vala"
	_tmp25_ = pop_grid;
#line 160 "../lib/Widgets/TimePicker.vala"
	gtk_grid_set_row_spacing (_tmp25_, 6);
#line 161 "../lib/Widgets/TimePicker.vala"
	_tmp26_ = pop_grid;
#line 161 "../lib/Widgets/TimePicker.vala"
	_tmp27_ = self->priv->hours_spinbutton;
#line 161 "../lib/Widgets/TimePicker.vala"
	gtk_grid_attach (_tmp26_, (GtkWidget*) _tmp27_, 0, 0, 1, 1);
#line 162 "../lib/Widgets/TimePicker.vala"
	_tmp28_ = pop_grid;
#line 162 "../lib/Widgets/TimePicker.vala"
	_tmp29_ = separation_label;
#line 162 "../lib/Widgets/TimePicker.vala"
	gtk_grid_attach (_tmp28_, (GtkWidget*) _tmp29_, 1, 0, 1, 1);
#line 163 "../lib/Widgets/TimePicker.vala"
	_tmp30_ = pop_grid;
#line 163 "../lib/Widgets/TimePicker.vala"
	_tmp31_ = self->priv->minutes_spinbutton;
#line 163 "../lib/Widgets/TimePicker.vala"
	gtk_grid_attach (_tmp30_, (GtkWidget*) _tmp31_, 2, 0, 1, 1);
#line 164 "../lib/Widgets/TimePicker.vala"
	_tmp32_ = pop_grid;
#line 164 "../lib/Widgets/TimePicker.vala"
	_tmp33_ = self->priv->am_pm_modebutton;
#line 164 "../lib/Widgets/TimePicker.vala"
	gtk_grid_attach (_tmp32_, (GtkWidget*) _tmp33_, 3, 0, 1, 1);
#line 165 "../lib/Widgets/TimePicker.vala"
	_tmp34_ = pop_grid;
#line 165 "../lib/Widgets/TimePicker.vala"
	g_object_set ((GtkWidget*) _tmp34_, "margin", 6, NULL);
#line 167 "../lib/Widgets/TimePicker.vala"
	_tmp35_ = (GtkPopover*) gtk_popover_new ((GtkWidget*) self);
#line 167 "../lib/Widgets/TimePicker.vala"
	g_object_ref_sink (_tmp35_);
#line 167 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (self->priv->popover);
#line 167 "../lib/Widgets/TimePicker.vala"
	self->priv->popover = _tmp35_;
#line 168 "../lib/Widgets/TimePicker.vala"
	_tmp36_ = self->priv->popover;
#line 168 "../lib/Widgets/TimePicker.vala"
	gtk_popover_set_position (_tmp36_, GTK_POS_BOTTOM);
#line 169 "../lib/Widgets/TimePicker.vala"
	_tmp37_ = self->priv->popover;
#line 169 "../lib/Widgets/TimePicker.vala"
	_tmp38_ = pop_grid;
#line 169 "../lib/Widgets/TimePicker.vala"
	gtk_container_add ((GtkContainer*) _tmp37_, (GtkWidget*) _tmp38_);
#line 172 "../lib/Widgets/TimePicker.vala"
	gtk_widget_add_events ((GtkWidget*) self, (gint) (GDK_FOCUS_CHANGE_MASK | GDK_SCROLL_MASK));
#line 173 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object ((GtkWidget*) self, "focus-out-event", (GCallback) __granite_widgets_time_picker___lambda88__gtk_widget_focus_out_event, self, 0);
#line 178 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object ((GtkWidget*) self, "scroll-event", (GCallback) __granite_widgets_time_picker___lambda89__gtk_widget_scroll_event, self, 0);
#line 195 "../lib/Widgets/TimePicker.vala"
	g_signal_connect_object ((GtkEntry*) self, "activate", (GCallback) _granite_widgets_time_picker_is_unfocused_gtk_entry_activate, self, 0);
#line 197 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_update_text (self, FALSE);
#line 89 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (pop_grid);
#line 89 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (separation_label);
#line 89 "../lib/Widgets/TimePicker.vala"
	return obj;
#line 2502 "TimePicker.c"
}

static void
granite_widgets_time_picker_class_init (GraniteWidgetsTimePickerClass * klass,
                                        gpointer klass_data)
{
#line 27 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_parent_class = g_type_class_peek_parent (klass);
#line 27 "../lib/Widgets/TimePicker.vala"
	g_type_class_adjust_private_offset (klass, &GraniteWidgetsTimePicker_private_offset);
#line 27 "../lib/Widgets/TimePicker.vala"
	((GraniteWidgetsTimePickerClass *) klass)->position_dropdown = (void (*) (GraniteWidgetsTimePicker*, gint*, gint*)) granite_widgets_time_picker_real_position_dropdown;
#line 27 "../lib/Widgets/TimePicker.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_widgets_time_picker_get_property;
#line 27 "../lib/Widgets/TimePicker.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_widgets_time_picker_set_property;
#line 27 "../lib/Widgets/TimePicker.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_widgets_time_picker_constructor;
#line 27 "../lib/Widgets/TimePicker.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_widgets_time_picker_finalize;
#line 2523 "TimePicker.c"
	/**
	         * Format used in 12h mode
	         */
#line 27 "../lib/Widgets/TimePicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_TIME_PICKER_FORMAT_12_PROPERTY, granite_widgets_time_picker_properties[GRANITE_WIDGETS_TIME_PICKER_FORMAT_12_PROPERTY] = g_param_spec_string ("format-12", "format-12", "format-12", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2529 "TimePicker.c"
	/**
	         * Format used in 24h mode
	         */
#line 27 "../lib/Widgets/TimePicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_TIME_PICKER_FORMAT_24_PROPERTY, granite_widgets_time_picker_properties[GRANITE_WIDGETS_TIME_PICKER_FORMAT_24_PROPERTY] = g_param_spec_string ("format-24", "format-24", "format-24", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2535 "TimePicker.c"
	/**
	         * Current time
	         */
#line 27 "../lib/Widgets/TimePicker.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_WIDGETS_TIME_PICKER_TIME_PROPERTY, granite_widgets_time_picker_properties[GRANITE_WIDGETS_TIME_PICKER_TIME_PROPERTY] = g_param_spec_boxed ("time", "time", "time", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 2541 "TimePicker.c"
	/**
	         * Sent when the time got changed
	         */
#line 27 "../lib/Widgets/TimePicker.vala"
	granite_widgets_time_picker_signals[GRANITE_WIDGETS_TIME_PICKER_TIME_CHANGED_SIGNAL] = g_signal_new ("time-changed", GRANITE_WIDGETS_TYPE_TIME_PICKER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 2547 "TimePicker.c"
}

static void
granite_widgets_time_picker_instance_init (GraniteWidgetsTimePicker * self,
                                           gpointer klass)
{
	gchar* _tmp0_;
#line 27 "../lib/Widgets/TimePicker.vala"
	self->priv = granite_widgets_time_picker_get_instance_private (self);
#line 43 "../lib/Widgets/TimePicker.vala"
	self->priv->_time = NULL;
#line 72 "../lib/Widgets/TimePicker.vala"
	self->priv->changing_time = FALSE;
#line 73 "../lib/Widgets/TimePicker.vala"
	_tmp0_ = g_strdup ("");
#line 73 "../lib/Widgets/TimePicker.vala"
	self->priv->old_string = _tmp0_;
#line 2565 "TimePicker.c"
}

static void
granite_widgets_time_picker_finalize (GObject * obj)
{
	GraniteWidgetsTimePicker * self;
#line 27 "../lib/Widgets/TimePicker.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_WIDGETS_TYPE_TIME_PICKER, GraniteWidgetsTimePicker);
#line 36 "../lib/Widgets/TimePicker.vala"
	_g_free0 (self->priv->_format_12);
#line 41 "../lib/Widgets/TimePicker.vala"
	_g_free0 (self->priv->_format_24);
#line 43 "../lib/Widgets/TimePicker.vala"
	_g_date_time_unref0 (self->priv->_time);
#line 73 "../lib/Widgets/TimePicker.vala"
	_g_free0 (self->priv->old_string);
#line 74 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (self->priv->popover);
#line 75 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (self->priv->hours_spinbutton);
#line 76 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (self->priv->minutes_spinbutton);
#line 77 "../lib/Widgets/TimePicker.vala"
	_g_object_unref0 (self->priv->am_pm_modebutton);
#line 27 "../lib/Widgets/TimePicker.vala"
	G_OBJECT_CLASS (granite_widgets_time_picker_parent_class)->finalize (obj);
#line 2592 "TimePicker.c"
}

/**
     * This widget allows users to easily pick a time.
     */
static GType
granite_widgets_time_picker_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteWidgetsTimePickerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_widgets_time_picker_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteWidgetsTimePicker), 0, (GInstanceInitFunc) granite_widgets_time_picker_instance_init, NULL };
	GType granite_widgets_time_picker_type_id;
	granite_widgets_time_picker_type_id = g_type_register_static (gtk_entry_get_type (), "GraniteWidgetsTimePicker", &g_define_type_info, 0);
	GraniteWidgetsTimePicker_private_offset = g_type_add_instance_private (granite_widgets_time_picker_type_id, sizeof (GraniteWidgetsTimePickerPrivate));
	return granite_widgets_time_picker_type_id;
}

GType
granite_widgets_time_picker_get_type (void)
{
	static volatile gsize granite_widgets_time_picker_type_id__volatile = 0;
	if (g_once_init_enter (&granite_widgets_time_picker_type_id__volatile)) {
		GType granite_widgets_time_picker_type_id;
		granite_widgets_time_picker_type_id = granite_widgets_time_picker_get_type_once ();
		g_once_init_leave (&granite_widgets_time_picker_type_id__volatile, granite_widgets_time_picker_type_id);
	}
	return granite_widgets_time_picker_type_id__volatile;
}

static void
_vala_granite_widgets_time_picker_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec)
{
	GraniteWidgetsTimePicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_TIME_PICKER, GraniteWidgetsTimePicker);
#line 27 "../lib/Widgets/TimePicker.vala"
	switch (property_id) {
#line 27 "../lib/Widgets/TimePicker.vala"
		case GRANITE_WIDGETS_TIME_PICKER_FORMAT_12_PROPERTY:
#line 27 "../lib/Widgets/TimePicker.vala"
		g_value_set_string (value, granite_widgets_time_picker_get_format_12 (self));
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 27 "../lib/Widgets/TimePicker.vala"
		case GRANITE_WIDGETS_TIME_PICKER_FORMAT_24_PROPERTY:
#line 27 "../lib/Widgets/TimePicker.vala"
		g_value_set_string (value, granite_widgets_time_picker_get_format_24 (self));
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 27 "../lib/Widgets/TimePicker.vala"
		case GRANITE_WIDGETS_TIME_PICKER_TIME_PROPERTY:
#line 27 "../lib/Widgets/TimePicker.vala"
		g_value_set_boxed (value, granite_widgets_time_picker_get_time (self));
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 2648 "TimePicker.c"
		default:
#line 27 "../lib/Widgets/TimePicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 2654 "TimePicker.c"
	}
}

static void
_vala_granite_widgets_time_picker_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec)
{
	GraniteWidgetsTimePicker * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_WIDGETS_TYPE_TIME_PICKER, GraniteWidgetsTimePicker);
#line 27 "../lib/Widgets/TimePicker.vala"
	switch (property_id) {
#line 27 "../lib/Widgets/TimePicker.vala"
		case GRANITE_WIDGETS_TIME_PICKER_FORMAT_12_PROPERTY:
#line 27 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_format_12 (self, g_value_get_string (value));
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 27 "../lib/Widgets/TimePicker.vala"
		case GRANITE_WIDGETS_TIME_PICKER_FORMAT_24_PROPERTY:
#line 27 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_format_24 (self, g_value_get_string (value));
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 27 "../lib/Widgets/TimePicker.vala"
		case GRANITE_WIDGETS_TIME_PICKER_TIME_PROPERTY:
#line 27 "../lib/Widgets/TimePicker.vala"
		granite_widgets_time_picker_set_time (self, g_value_get_boxed (value));
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 2686 "TimePicker.c"
		default:
#line 27 "../lib/Widgets/TimePicker.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 27 "../lib/Widgets/TimePicker.vala"
		break;
#line 2692 "TimePicker.c"
	}
}


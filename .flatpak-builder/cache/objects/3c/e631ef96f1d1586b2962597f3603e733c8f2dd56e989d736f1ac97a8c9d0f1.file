/* Converter.c generated by valac 0.48.14, the Vala compiler
 * generated from Converter.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 */

#include <glib-object.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <granite.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_CONVERTER (pebbles_converter_get_type ())
#define PEBBLES_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_CONVERTER, PebblesConverter))
#define PEBBLES_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_CONVERTER, PebblesConverterClass))
#define PEBBLES_IS_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_CONVERTER))
#define PEBBLES_IS_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_CONVERTER))
#define PEBBLES_CONVERTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_CONVERTER, PebblesConverterClass))

typedef struct _PebblesConverter PebblesConverter;
typedef struct _PebblesConverterClass PebblesConverterClass;
typedef struct _PebblesConverterPrivate PebblesConverterPrivate;

#define PEBBLES_TYPE_SETTINGS (pebbles_settings_get_type ())
#define PEBBLES_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettings))
#define PEBBLES_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))
#define PEBBLES_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))

typedef struct _PebblesSettings PebblesSettings;
typedef struct _PebblesSettingsClass PebblesSettingsClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
typedef struct _PebblesParamSpecConverter PebblesParamSpecConverter;

struct _PebblesConverter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesConverterPrivate * priv;
	gint* precision_structure;
	gint precision_structure_length1;
};

struct _PebblesConverterClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesConverter *self);
};

struct _PebblesConverterPrivate {
	gdouble* unit_multipliers_list;
	gint unit_multipliers_list_length1;
	gint _unit_multipliers_list_size_;
	gboolean _precision_override;
	PebblesSettings* settings;
};

struct _PebblesParamSpecConverter {
	GParamSpec parent_instance;
};

static gint PebblesConverter_private_offset;
static gpointer pebbles_converter_parent_class = NULL;

gpointer pebbles_converter_ref (gpointer instance);
void pebbles_converter_unref (gpointer instance);
GParamSpec* pebbles_param_spec_converter (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void pebbles_value_set_converter (GValue* value,
                                  gpointer v_object);
void pebbles_value_take_converter (GValue* value,
                                   gpointer v_object);
gpointer pebbles_value_get_converter (const GValue* value);
GType pebbles_converter_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesConverter, pebbles_converter_unref)
GType pebbles_settings_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesSettings, g_object_unref)
PebblesConverter* pebbles_converter_new (gdouble* multipliers,
                                         gint multipliers_length1,
                                         gboolean* _precision_override,
                                         gint* _precision_structure,
                                         gint _precision_structure_length1);
PebblesConverter* pebbles_converter_construct (GType object_type,
                                               gdouble* multipliers,
                                               gint multipliers_length1,
                                               gboolean* _precision_override,
                                               gint* _precision_structure,
                                               gint _precision_structure_length1);
static gdouble* _vala_array_dup34 (gdouble* self,
                            gint length);
void pebbles_converter_set_precision_override (PebblesConverter* self,
                                               gboolean value);
gboolean pebbles_converter_get_precision_override (PebblesConverter* self);
static gint* _vala_array_dup35 (gint* self,
                         gint length);
gchar* pebbles_converter_convert (PebblesConverter* self,
                                  const gchar* input_string,
                                  gint unit_a,
                                  gint unit_b);
gchar* pebbles_utils_get_local_separator_symbol (void);
gchar* pebbles_utils_get_local_radix_symbol (void);
PebblesSettings* pebbles_settings_get_default (void);
gchar* pebbles_utils_manage_decimal_places (gdouble _result_,
                                            gint accuracy);
static gint pebbles_converter_get_min (PebblesConverter* self,
                                gint a,
                                gint b);
gint pebbles_settings_get_decimal_places (PebblesSettings* self);
gchar* pebbles_utils_format_result (const gchar* _result_);
void pebbles_converter_update_multipliers (PebblesConverter* self,
                                           gdouble* multipliers,
                                           gint multipliers_length1);
static gdouble* _vala_array_dup36 (gdouble* self,
                            gint length);
static void pebbles_converter_finalize (PebblesConverter * obj);
static GType pebbles_converter_get_type_once (void);

static inline gpointer
pebbles_converter_get_instance_private (PebblesConverter* self)
{
	return G_STRUCT_MEMBER_P (self, PebblesConverter_private_offset);
}

static gdouble*
_vala_array_dup34 (gdouble* self,
                   gint length)
{
#line 28 "../src/Core/Converter.vala"
	if (length > 0) {
#line 28 "../src/Core/Converter.vala"
		return g_memdup (self, length * sizeof (gdouble));
#line 157 "Converter.c"
	}
#line 28 "../src/Core/Converter.vala"
	return NULL;
#line 161 "Converter.c"
}

static gint*
_vala_array_dup35 (gint* self,
                   gint length)
{
#line 31 "../src/Core/Converter.vala"
	if (length > 0) {
#line 31 "../src/Core/Converter.vala"
		return g_memdup (self, length * sizeof (gint));
#line 172 "Converter.c"
	}
#line 31 "../src/Core/Converter.vala"
	return NULL;
#line 176 "Converter.c"
}

PebblesConverter*
pebbles_converter_construct (GType object_type,
                             gdouble* multipliers,
                             gint multipliers_length1,
                             gboolean* _precision_override,
                             gint* _precision_structure,
                             gint _precision_structure_length1)
{
	PebblesConverter* self = NULL;
	gdouble* _tmp0_;
	gint _tmp0__length1;
	gboolean _tmp1_;
#line 27 "../src/Core/Converter.vala"
	self = (PebblesConverter*) g_type_create_instance (object_type);
#line 28 "../src/Core/Converter.vala"
	_tmp0_ = (multipliers != NULL) ? _vala_array_dup34 (multipliers, multipliers_length1) : ((gpointer) multipliers);
#line 28 "../src/Core/Converter.vala"
	_tmp0__length1 = multipliers_length1;
#line 28 "../src/Core/Converter.vala"
	self->priv->unit_multipliers_list = (g_free (self->priv->unit_multipliers_list), NULL);
#line 28 "../src/Core/Converter.vala"
	self->priv->unit_multipliers_list = _tmp0_;
#line 28 "../src/Core/Converter.vala"
	self->priv->unit_multipliers_list_length1 = _tmp0__length1;
#line 28 "../src/Core/Converter.vala"
	self->priv->_unit_multipliers_list_size_ = self->priv->unit_multipliers_list_length1;
#line 29 "../src/Core/Converter.vala"
	pebbles_converter_set_precision_override (self, *_precision_override);
#line 30 "../src/Core/Converter.vala"
	_tmp1_ = self->priv->_precision_override;
#line 30 "../src/Core/Converter.vala"
	if (_tmp1_) {
#line 211 "Converter.c"
		gint* _tmp2_;
		gint _tmp2__length1;
#line 31 "../src/Core/Converter.vala"
		_tmp2_ = (_precision_structure != NULL) ? _vala_array_dup35 (_precision_structure, _precision_structure_length1) : ((gpointer) _precision_structure);
#line 31 "../src/Core/Converter.vala"
		_tmp2__length1 = _precision_structure_length1;
#line 31 "../src/Core/Converter.vala"
		self->precision_structure = (g_free (self->precision_structure), NULL);
#line 31 "../src/Core/Converter.vala"
		self->precision_structure = _tmp2_;
#line 31 "../src/Core/Converter.vala"
		self->precision_structure_length1 = _tmp2__length1;
#line 224 "Converter.c"
	}
#line 27 "../src/Core/Converter.vala"
	return self;
#line 228 "Converter.c"
}

PebblesConverter*
pebbles_converter_new (gdouble* multipliers,
                       gint multipliers_length1,
                       gboolean* _precision_override,
                       gint* _precision_structure,
                       gint _precision_structure_length1)
{
#line 27 "../src/Core/Converter.vala"
	return pebbles_converter_construct (PEBBLES_TYPE_CONVERTER, multipliers, multipliers_length1, _precision_override, _precision_structure, _precision_structure_length1);
#line 240 "Converter.c"
}

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1535 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 262 "Converter.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 266 "Converter.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 272 "Converter.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 276 "Converter.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp0_) {
#line 280 "Converter.c"
		gchar* _tmp2_;
#line 1536 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1536 "glib-2.0.vapi"
		result = _tmp2_;
#line 1536 "glib-2.0.vapi"
		return result;
#line 288 "Converter.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1539 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1539 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1539 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1539 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1539 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1539 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1539 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1539 "glib-2.0.vapi"
			_g_free0 (_tmp7_);
#line 1539 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1539 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 320 "Converter.c"
				goto __catch0_g_regex_error;
			}
#line 1539 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1539 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1539 "glib-2.0.vapi"
			return NULL;
#line 329 "Converter.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1540 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1540 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1540 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1540 "glib-2.0.vapi"
			_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 345 "Converter.c"
				goto __catch0_g_regex_error;
			}
#line 1540 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1540 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1540 "glib-2.0.vapi"
			return NULL;
#line 354 "Converter.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1540 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1540 "glib-2.0.vapi"
		result = _tmp10_;
#line 1540 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
		return result;
#line 368 "Converter.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1538 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1542 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 377 "Converter.c"
	}
	__finally0:
#line 1538 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1538 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1538 "glib-2.0.vapi"
	return NULL;
#line 386 "Converter.c"
}

static gdouble
double_parse (const gchar* str)
{
	gdouble result = 0.0;
#line 995 "glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0.0);
#line 996 "glib-2.0.vapi"
	result = g_ascii_strtod (str, NULL);
#line 996 "glib-2.0.vapi"
	return result;
#line 399 "Converter.c"
}

gchar*
pebbles_converter_convert (PebblesConverter* self,
                           const gchar* input_string,
                           gint unit_a,
                           gint unit_b)
{
	gchar* input_temp = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gdouble input = 0.0;
	const gchar* _tmp8_;
	PebblesSettings* _tmp9_;
	gdouble _result_ = 0.0;
	gdouble* _tmp10_;
	gint _tmp10__length1;
	gdouble _tmp11_;
	gdouble* _tmp12_;
	gint _tmp12__length1;
	gdouble _tmp13_;
	gchar* output = NULL;
	gchar* _tmp14_;
	gboolean _tmp15_ = FALSE;
	gboolean _tmp16_;
	const gchar* _tmp28_;
	gchar* _tmp29_;
	gchar* result = NULL;
#line 35 "../src/Core/Converter.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 35 "../src/Core/Converter.vala"
	g_return_val_if_fail (input_string != NULL, NULL);
#line 36 "../src/Core/Converter.vala"
	_tmp0_ = pebbles_utils_get_local_separator_symbol ();
#line 36 "../src/Core/Converter.vala"
	_tmp1_ = _tmp0_;
#line 36 "../src/Core/Converter.vala"
	_tmp2_ = string_replace (input_string, _tmp1_, "");
#line 36 "../src/Core/Converter.vala"
	_tmp3_ = _tmp2_;
#line 36 "../src/Core/Converter.vala"
	_g_free0 (_tmp1_);
#line 36 "../src/Core/Converter.vala"
	input_temp = _tmp3_;
#line 37 "../src/Core/Converter.vala"
	_tmp4_ = input_temp;
#line 37 "../src/Core/Converter.vala"
	_tmp5_ = pebbles_utils_get_local_radix_symbol ();
#line 37 "../src/Core/Converter.vala"
	_tmp6_ = _tmp5_;
#line 37 "../src/Core/Converter.vala"
	_tmp7_ = string_replace (_tmp4_, _tmp6_, ".");
#line 37 "../src/Core/Converter.vala"
	_g_free0 (input_temp);
#line 37 "../src/Core/Converter.vala"
	input_temp = _tmp7_;
#line 37 "../src/Core/Converter.vala"
	_g_free0 (_tmp6_);
#line 38 "../src/Core/Converter.vala"
	_tmp8_ = input_temp;
#line 38 "../src/Core/Converter.vala"
	input = double_parse (_tmp8_);
#line 39 "../src/Core/Converter.vala"
	_tmp9_ = pebbles_settings_get_default ();
#line 39 "../src/Core/Converter.vala"
	_g_object_unref0 (self->priv->settings);
#line 39 "../src/Core/Converter.vala"
	self->priv->settings = _tmp9_;
#line 40 "../src/Core/Converter.vala"
	_tmp10_ = self->priv->unit_multipliers_list;
#line 40 "../src/Core/Converter.vala"
	_tmp10__length1 = self->priv->unit_multipliers_list_length1;
#line 40 "../src/Core/Converter.vala"
	_tmp11_ = _tmp10_[unit_b];
#line 40 "../src/Core/Converter.vala"
	_tmp12_ = self->priv->unit_multipliers_list;
#line 40 "../src/Core/Converter.vala"
	_tmp12__length1 = self->priv->unit_multipliers_list_length1;
#line 40 "../src/Core/Converter.vala"
	_tmp13_ = _tmp12_[unit_a];
#line 40 "../src/Core/Converter.vala"
	_result_ = input * (_tmp11_ / _tmp13_);
#line 41 "../src/Core/Converter.vala"
	_tmp14_ = g_strdup ("");
#line 41 "../src/Core/Converter.vala"
	output = _tmp14_;
#line 43 "../src/Core/Converter.vala"
	_tmp16_ = self->priv->_precision_override;
#line 43 "../src/Core/Converter.vala"
	if (_tmp16_) {
#line 496 "Converter.c"
		gint* _tmp17_;
		gint _tmp17__length1;
#line 43 "../src/Core/Converter.vala"
		_tmp17_ = self->precision_structure;
#line 43 "../src/Core/Converter.vala"
		_tmp17__length1 = self->precision_structure_length1;
#line 43 "../src/Core/Converter.vala"
		_tmp15_ = _tmp17_ != NULL;
#line 505 "Converter.c"
	} else {
#line 43 "../src/Core/Converter.vala"
		_tmp15_ = FALSE;
#line 509 "Converter.c"
	}
#line 43 "../src/Core/Converter.vala"
	if (_tmp15_) {
#line 513 "Converter.c"
		gint* _tmp18_;
		gint _tmp18__length1;
		gint _tmp19_;
		PebblesSettings* _tmp20_;
		gint _tmp21_;
		gint _tmp22_;
		gchar* _tmp23_;
#line 44 "../src/Core/Converter.vala"
		_tmp18_ = self->precision_structure;
#line 44 "../src/Core/Converter.vala"
		_tmp18__length1 = self->precision_structure_length1;
#line 44 "../src/Core/Converter.vala"
		_tmp19_ = _tmp18_[unit_b];
#line 44 "../src/Core/Converter.vala"
		_tmp20_ = self->priv->settings;
#line 44 "../src/Core/Converter.vala"
		_tmp21_ = pebbles_settings_get_decimal_places (_tmp20_);
#line 44 "../src/Core/Converter.vala"
		_tmp22_ = _tmp21_;
#line 44 "../src/Core/Converter.vala"
		_tmp23_ = pebbles_utils_manage_decimal_places (_result_, pebbles_converter_get_min (self, _tmp19_, _tmp22_));
#line 44 "../src/Core/Converter.vala"
		_g_free0 (output);
#line 44 "../src/Core/Converter.vala"
		output = _tmp23_;
#line 539 "Converter.c"
	} else {
		PebblesSettings* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gchar* _tmp27_;
#line 46 "../src/Core/Converter.vala"
		_tmp24_ = self->priv->settings;
#line 46 "../src/Core/Converter.vala"
		_tmp25_ = pebbles_settings_get_decimal_places (_tmp24_);
#line 46 "../src/Core/Converter.vala"
		_tmp26_ = _tmp25_;
#line 46 "../src/Core/Converter.vala"
		_tmp27_ = pebbles_utils_manage_decimal_places (_result_, _tmp26_);
#line 46 "../src/Core/Converter.vala"
		_g_free0 (output);
#line 46 "../src/Core/Converter.vala"
		output = _tmp27_;
#line 557 "Converter.c"
	}
#line 49 "../src/Core/Converter.vala"
	_tmp28_ = output;
#line 49 "../src/Core/Converter.vala"
	_tmp29_ = pebbles_utils_format_result (_tmp28_);
#line 49 "../src/Core/Converter.vala"
	result = _tmp29_;
#line 49 "../src/Core/Converter.vala"
	_g_free0 (output);
#line 49 "../src/Core/Converter.vala"
	_g_free0 (input_temp);
#line 49 "../src/Core/Converter.vala"
	return result;
#line 571 "Converter.c"
}

static gdouble*
_vala_array_dup36 (gdouble* self,
                   gint length)
{
#line 52 "../src/Core/Converter.vala"
	if (length > 0) {
#line 52 "../src/Core/Converter.vala"
		return g_memdup (self, length * sizeof (gdouble));
#line 582 "Converter.c"
	}
#line 52 "../src/Core/Converter.vala"
	return NULL;
#line 586 "Converter.c"
}

void
pebbles_converter_update_multipliers (PebblesConverter* self,
                                      gdouble* multipliers,
                                      gint multipliers_length1)
{
	gdouble* _tmp0_;
	gint _tmp0__length1;
#line 51 "../src/Core/Converter.vala"
	g_return_if_fail (self != NULL);
#line 52 "../src/Core/Converter.vala"
	_tmp0_ = (multipliers != NULL) ? _vala_array_dup36 (multipliers, multipliers_length1) : ((gpointer) multipliers);
#line 52 "../src/Core/Converter.vala"
	_tmp0__length1 = multipliers_length1;
#line 52 "../src/Core/Converter.vala"
	self->priv->unit_multipliers_list = (g_free (self->priv->unit_multipliers_list), NULL);
#line 52 "../src/Core/Converter.vala"
	self->priv->unit_multipliers_list = _tmp0_;
#line 52 "../src/Core/Converter.vala"
	self->priv->unit_multipliers_list_length1 = _tmp0__length1;
#line 52 "../src/Core/Converter.vala"
	self->priv->_unit_multipliers_list_size_ = self->priv->unit_multipliers_list_length1;
#line 610 "Converter.c"
}

static gint
pebbles_converter_get_min (PebblesConverter* self,
                           gint a,
                           gint b)
{
	gint result = 0;
#line 55 "../src/Core/Converter.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 56 "../src/Core/Converter.vala"
	if (a > b) {
#line 57 "../src/Core/Converter.vala"
		result = b;
#line 57 "../src/Core/Converter.vala"
		return result;
#line 627 "Converter.c"
	} else {
#line 59 "../src/Core/Converter.vala"
		result = a;
#line 59 "../src/Core/Converter.vala"
		return result;
#line 633 "Converter.c"
	}
}

gboolean
pebbles_converter_get_precision_override (PebblesConverter* self)
{
	gboolean result;
#line 24 "../src/Core/Converter.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 24 "../src/Core/Converter.vala"
	result = self->priv->_precision_override;
#line 24 "../src/Core/Converter.vala"
	return result;
#line 647 "Converter.c"
}

void
pebbles_converter_set_precision_override (PebblesConverter* self,
                                          gboolean value)
{
#line 24 "../src/Core/Converter.vala"
	g_return_if_fail (self != NULL);
#line 24 "../src/Core/Converter.vala"
	self->priv->_precision_override = value;
#line 658 "Converter.c"
}

static void
pebbles_value_converter_init (GValue* value)
{
#line 22 "../src/Core/Converter.vala"
	value->data[0].v_pointer = NULL;
#line 666 "Converter.c"
}

static void
pebbles_value_converter_free_value (GValue* value)
{
#line 22 "../src/Core/Converter.vala"
	if (value->data[0].v_pointer) {
#line 22 "../src/Core/Converter.vala"
		pebbles_converter_unref (value->data[0].v_pointer);
#line 676 "Converter.c"
	}
}

static void
pebbles_value_converter_copy_value (const GValue* src_value,
                                    GValue* dest_value)
{
#line 22 "../src/Core/Converter.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "../src/Core/Converter.vala"
		dest_value->data[0].v_pointer = pebbles_converter_ref (src_value->data[0].v_pointer);
#line 688 "Converter.c"
	} else {
#line 22 "../src/Core/Converter.vala"
		dest_value->data[0].v_pointer = NULL;
#line 692 "Converter.c"
	}
}

static gpointer
pebbles_value_converter_peek_pointer (const GValue* value)
{
#line 22 "../src/Core/Converter.vala"
	return value->data[0].v_pointer;
#line 701 "Converter.c"
}

static gchar*
pebbles_value_converter_collect_value (GValue* value,
                                       guint n_collect_values,
                                       GTypeCValue* collect_values,
                                       guint collect_flags)
{
#line 22 "../src/Core/Converter.vala"
	if (collect_values[0].v_pointer) {
#line 712 "Converter.c"
		PebblesConverter * object;
		object = collect_values[0].v_pointer;
#line 22 "../src/Core/Converter.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "../src/Core/Converter.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 719 "Converter.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "../src/Core/Converter.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 723 "Converter.c"
		}
#line 22 "../src/Core/Converter.vala"
		value->data[0].v_pointer = pebbles_converter_ref (object);
#line 727 "Converter.c"
	} else {
#line 22 "../src/Core/Converter.vala"
		value->data[0].v_pointer = NULL;
#line 731 "Converter.c"
	}
#line 22 "../src/Core/Converter.vala"
	return NULL;
#line 735 "Converter.c"
}

static gchar*
pebbles_value_converter_lcopy_value (const GValue* value,
                                     guint n_collect_values,
                                     GTypeCValue* collect_values,
                                     guint collect_flags)
{
	PebblesConverter ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "../src/Core/Converter.vala"
	if (!object_p) {
#line 22 "../src/Core/Converter.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 750 "Converter.c"
	}
#line 22 "../src/Core/Converter.vala"
	if (!value->data[0].v_pointer) {
#line 22 "../src/Core/Converter.vala"
		*object_p = NULL;
#line 756 "Converter.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "../src/Core/Converter.vala"
		*object_p = value->data[0].v_pointer;
#line 760 "Converter.c"
	} else {
#line 22 "../src/Core/Converter.vala"
		*object_p = pebbles_converter_ref (value->data[0].v_pointer);
#line 764 "Converter.c"
	}
#line 22 "../src/Core/Converter.vala"
	return NULL;
#line 768 "Converter.c"
}

GParamSpec*
pebbles_param_spec_converter (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags)
{
	PebblesParamSpecConverter* spec;
#line 22 "../src/Core/Converter.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_CONVERTER), NULL);
#line 22 "../src/Core/Converter.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "../src/Core/Converter.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "../src/Core/Converter.vala"
	return G_PARAM_SPEC (spec);
#line 787 "Converter.c"
}

gpointer
pebbles_value_get_converter (const GValue* value)
{
#line 22 "../src/Core/Converter.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CONVERTER), NULL);
#line 22 "../src/Core/Converter.vala"
	return value->data[0].v_pointer;
#line 797 "Converter.c"
}

void
pebbles_value_set_converter (GValue* value,
                             gpointer v_object)
{
	PebblesConverter * old;
#line 22 "../src/Core/Converter.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CONVERTER));
#line 22 "../src/Core/Converter.vala"
	old = value->data[0].v_pointer;
#line 22 "../src/Core/Converter.vala"
	if (v_object) {
#line 22 "../src/Core/Converter.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_CONVERTER));
#line 22 "../src/Core/Converter.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../src/Core/Converter.vala"
		value->data[0].v_pointer = v_object;
#line 22 "../src/Core/Converter.vala"
		pebbles_converter_ref (value->data[0].v_pointer);
#line 819 "Converter.c"
	} else {
#line 22 "../src/Core/Converter.vala"
		value->data[0].v_pointer = NULL;
#line 823 "Converter.c"
	}
#line 22 "../src/Core/Converter.vala"
	if (old) {
#line 22 "../src/Core/Converter.vala"
		pebbles_converter_unref (old);
#line 829 "Converter.c"
	}
}

void
pebbles_value_take_converter (GValue* value,
                              gpointer v_object)
{
	PebblesConverter * old;
#line 22 "../src/Core/Converter.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CONVERTER));
#line 22 "../src/Core/Converter.vala"
	old = value->data[0].v_pointer;
#line 22 "../src/Core/Converter.vala"
	if (v_object) {
#line 22 "../src/Core/Converter.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_CONVERTER));
#line 22 "../src/Core/Converter.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../src/Core/Converter.vala"
		value->data[0].v_pointer = v_object;
#line 850 "Converter.c"
	} else {
#line 22 "../src/Core/Converter.vala"
		value->data[0].v_pointer = NULL;
#line 854 "Converter.c"
	}
#line 22 "../src/Core/Converter.vala"
	if (old) {
#line 22 "../src/Core/Converter.vala"
		pebbles_converter_unref (old);
#line 860 "Converter.c"
	}
}

static void
pebbles_converter_class_init (PebblesConverterClass * klass,
                              gpointer klass_data)
{
#line 22 "../src/Core/Converter.vala"
	pebbles_converter_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/Core/Converter.vala"
	((PebblesConverterClass *) klass)->finalize = pebbles_converter_finalize;
#line 22 "../src/Core/Converter.vala"
	g_type_class_adjust_private_offset (klass, &PebblesConverter_private_offset);
#line 874 "Converter.c"
}

static void
pebbles_converter_instance_init (PebblesConverter * self,
                                 gpointer klass)
{
#line 22 "../src/Core/Converter.vala"
	self->priv = pebbles_converter_get_instance_private (self);
#line 22 "../src/Core/Converter.vala"
	self->ref_count = 1;
#line 885 "Converter.c"
}

static void
pebbles_converter_finalize (PebblesConverter * obj)
{
	PebblesConverter * self;
#line 22 "../src/Core/Converter.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_CONVERTER, PebblesConverter);
#line 22 "../src/Core/Converter.vala"
	g_signal_handlers_destroy (self);
#line 23 "../src/Core/Converter.vala"
	self->priv->unit_multipliers_list = (g_free (self->priv->unit_multipliers_list), NULL);
#line 25 "../src/Core/Converter.vala"
	self->precision_structure = (g_free (self->precision_structure), NULL);
#line 34 "../src/Core/Converter.vala"
	_g_object_unref0 (self->priv->settings);
#line 902 "Converter.c"
}

static GType
pebbles_converter_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_converter_init, pebbles_value_converter_free_value, pebbles_value_converter_copy_value, pebbles_value_converter_peek_pointer, "p", pebbles_value_converter_collect_value, "p", pebbles_value_converter_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesConverterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_converter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesConverter), 0, (GInstanceInitFunc) pebbles_converter_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_converter_type_id;
	pebbles_converter_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesConverter", &g_define_type_info, &g_define_type_fundamental_info, 0);
	PebblesConverter_private_offset = g_type_add_instance_private (pebbles_converter_type_id, sizeof (PebblesConverterPrivate));
	return pebbles_converter_type_id;
}

GType
pebbles_converter_get_type (void)
{
	static volatile gsize pebbles_converter_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_converter_type_id__volatile)) {
		GType pebbles_converter_type_id;
		pebbles_converter_type_id = pebbles_converter_get_type_once ();
		g_once_init_leave (&pebbles_converter_type_id__volatile, pebbles_converter_type_id);
	}
	return pebbles_converter_type_id__volatile;
}

gpointer
pebbles_converter_ref (gpointer instance)
{
	PebblesConverter * self;
	self = instance;
#line 22 "../src/Core/Converter.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "../src/Core/Converter.vala"
	return instance;
#line 938 "Converter.c"
}

void
pebbles_converter_unref (gpointer instance)
{
	PebblesConverter * self;
	self = instance;
#line 22 "../src/Core/Converter.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "../src/Core/Converter.vala"
		PEBBLES_CONVERTER_GET_CLASS (self)->finalize (self);
#line 22 "../src/Core/Converter.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 952 "Converter.c"
	}
}


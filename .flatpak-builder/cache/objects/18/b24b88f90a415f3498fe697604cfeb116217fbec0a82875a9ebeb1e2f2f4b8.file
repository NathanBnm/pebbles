/* AsyncMutex.c generated by valac 0.48.14, the Vala compiler
 * generated from AsyncMutex.vala, do not modify */

/*
* Copyright 2019 elementary, Inc. (https://elementary.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 3 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
*/

#include <glib-object.h>
#include <gee.h>
#include <glib.h>
#include <gio/gio.h>
#include <gobject/gvaluecollector.h>

#define GRANITE_SERVICES_TYPE_ASYNC_MUTEX (granite_services_async_mutex_get_type ())
#define GRANITE_SERVICES_ASYNC_MUTEX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_TYPE_ASYNC_MUTEX, GraniteServicesAsyncMutex))
#define GRANITE_SERVICES_ASYNC_MUTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_SERVICES_TYPE_ASYNC_MUTEX, GraniteServicesAsyncMutexClass))
#define GRANITE_SERVICES_IS_ASYNC_MUTEX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_TYPE_ASYNC_MUTEX))
#define GRANITE_SERVICES_IS_ASYNC_MUTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_SERVICES_TYPE_ASYNC_MUTEX))
#define GRANITE_SERVICES_ASYNC_MUTEX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_SERVICES_TYPE_ASYNC_MUTEX, GraniteServicesAsyncMutexClass))

typedef struct _GraniteServicesAsyncMutex GraniteServicesAsyncMutex;
typedef struct _GraniteServicesAsyncMutexClass GraniteServicesAsyncMutexClass;
typedef struct _GraniteServicesAsyncMutexPrivate GraniteServicesAsyncMutexPrivate;

#define GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK (granite_services_async_mutex_callback_get_type ())
#define GRANITE_SERVICES_ASYNC_MUTEX_CALLBACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK, GraniteServicesAsyncMutexCallback))
#define GRANITE_SERVICES_ASYNC_MUTEX_CALLBACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK, GraniteServicesAsyncMutexCallbackClass))
#define GRANITE_SERVICES_ASYNC_MUTEX_IS_CALLBACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK))
#define GRANITE_SERVICES_ASYNC_MUTEX_IS_CALLBACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK))
#define GRANITE_SERVICES_ASYNC_MUTEX_CALLBACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK, GraniteServicesAsyncMutexCallbackClass))

typedef struct _GraniteServicesAsyncMutexCallback GraniteServicesAsyncMutexCallback;
typedef struct _GraniteServicesAsyncMutexCallbackClass GraniteServicesAsyncMutexCallbackClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _granite_services_async_mutex_unref0(var) ((var == NULL) ? NULL : (var = (granite_services_async_mutex_unref (var), NULL)))
#define _granite_services_async_mutex_callback_unref0(var) ((var == NULL) ? NULL : (var = (granite_services_async_mutex_callback_unref (var), NULL)))
typedef struct _GraniteServicesAsyncMutexLockData GraniteServicesAsyncMutexLockData;
typedef struct _GraniteServicesAsyncMutexCallbackPrivate GraniteServicesAsyncMutexCallbackPrivate;
typedef struct _GraniteServicesAsyncMutexParamSpecCallback GraniteServicesAsyncMutexParamSpecCallback;
typedef struct _GraniteServicesParamSpecAsyncMutex GraniteServicesParamSpecAsyncMutex;

struct _GraniteServicesAsyncMutex {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GraniteServicesAsyncMutexPrivate * priv;
};

struct _GraniteServicesAsyncMutexClass {
	GTypeClass parent_class;
	void (*finalize) (GraniteServicesAsyncMutex *self);
};

struct _GraniteServicesAsyncMutexPrivate {
	GeeArrayQueue* callbacks;
	gboolean locked;
};

struct _GraniteServicesAsyncMutexLockData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GraniteServicesAsyncMutex* self;
	GSourceFunc cb;
	gpointer cb_target;
	GDestroyNotify cb_target_destroy_notify;
	GeeArrayQueue* _tmp0_;
	GSourceFunc _tmp1_;
	gpointer _tmp1__target;
	GDestroyNotify _tmp1__target_destroy_notify;
	GraniteServicesAsyncMutexCallback* _tmp2_;
	GraniteServicesAsyncMutexCallback* _tmp3_;
};

struct _GraniteServicesAsyncMutexCallback {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GSourceFunc callback;
	gpointer callback_target;
	GDestroyNotify callback_target_destroy_notify;
	GraniteServicesAsyncMutexCallbackPrivate * priv;
};

struct _GraniteServicesAsyncMutexCallbackClass {
	GTypeClass parent_class;
	void (*finalize) (GraniteServicesAsyncMutexCallback *self);
};

struct _GraniteServicesAsyncMutexParamSpecCallback {
	GParamSpec parent_instance;
};

struct _GraniteServicesParamSpecAsyncMutex {
	GParamSpec parent_instance;
};

static gint GraniteServicesAsyncMutex_private_offset;
static gpointer granite_services_async_mutex_parent_class = NULL;
static gpointer granite_services_async_mutex_callback_parent_class = NULL;

G_GNUC_INTERNAL gpointer granite_services_async_mutex_ref (gpointer instance);
G_GNUC_INTERNAL void granite_services_async_mutex_unref (gpointer instance);
G_GNUC_INTERNAL GParamSpec* granite_services_param_spec_async_mutex (const gchar* name,
                                                     const gchar* nick,
                                                     const gchar* blurb,
                                                     GType object_type,
                                                     GParamFlags flags);
G_GNUC_INTERNAL void granite_services_value_set_async_mutex (GValue* value,
                                             gpointer v_object) G_GNUC_UNUSED;
G_GNUC_INTERNAL void granite_services_value_take_async_mutex (GValue* value,
                                              gpointer v_object);
G_GNUC_INTERNAL gpointer granite_services_value_get_async_mutex (const GValue* value) G_GNUC_UNUSED;
G_GNUC_INTERNAL GType granite_services_async_mutex_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteServicesAsyncMutex, granite_services_async_mutex_unref)
static gpointer granite_services_async_mutex_callback_ref (gpointer instance);
static void granite_services_async_mutex_callback_unref (gpointer instance);
static GParamSpec* granite_services_async_mutex_param_spec_callback (const gchar* name,
                                                              const gchar* nick,
                                                              const gchar* blurb,
                                                              GType object_type,
                                                              GParamFlags flags) G_GNUC_UNUSED;
static void granite_services_async_mutex_value_set_callback (GValue* value,
                                                      gpointer v_object) G_GNUC_UNUSED;
static void granite_services_async_mutex_value_take_callback (GValue* value,
                                                       gpointer v_object) G_GNUC_UNUSED;
static gpointer granite_services_async_mutex_value_get_callback (const GValue* value) G_GNUC_UNUSED;
static GType granite_services_async_mutex_callback_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteServicesAsyncMutexCallback, granite_services_async_mutex_callback_unref)
G_GNUC_INTERNAL GraniteServicesAsyncMutex* granite_services_async_mutex_new (void);
G_GNUC_INTERNAL GraniteServicesAsyncMutex* granite_services_async_mutex_construct (GType object_type);
static void granite_services_async_mutex_lock_data_free (gpointer _data);
G_GNUC_INTERNAL void granite_services_async_mutex_lock (GraniteServicesAsyncMutex* self,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
G_GNUC_INTERNAL void granite_services_async_mutex_lock_finish (GraniteServicesAsyncMutex* self,
                                               GAsyncResult* _res_);
static gboolean granite_services_async_mutex_lock_co (GraniteServicesAsyncMutexLockData* _data_);
static gboolean _granite_services_async_mutex_lock_co_gsource_func (gpointer self);
static GraniteServicesAsyncMutexCallback* granite_services_async_mutex_callback_new (GSourceFunc cb,
                                                                              gpointer cb_target,
                                                                              GDestroyNotify cb_target_destroy_notify);
static GraniteServicesAsyncMutexCallback* granite_services_async_mutex_callback_construct (GType object_type,
                                                                                    GSourceFunc cb,
                                                                                    gpointer cb_target,
                                                                                    GDestroyNotify cb_target_destroy_notify);
G_GNUC_INTERNAL void granite_services_async_mutex_unlock (GraniteServicesAsyncMutex* self);
static void granite_services_async_mutex_callback_finalize (GraniteServicesAsyncMutexCallback * obj);
static GType granite_services_async_mutex_callback_get_type_once (void);
static void granite_services_async_mutex_finalize (GraniteServicesAsyncMutex * obj);
static GType granite_services_async_mutex_get_type_once (void);

static inline gpointer
granite_services_async_mutex_get_instance_private (GraniteServicesAsyncMutex* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteServicesAsyncMutex_private_offset);
}

G_GNUC_INTERNAL GraniteServicesAsyncMutex*
granite_services_async_mutex_construct (GType object_type)
{
	GraniteServicesAsyncMutex* self = NULL;
	GeeArrayQueue* _tmp0_;
#line 34 "../lib/Services/AsyncMutex.vala"
	self = (GraniteServicesAsyncMutex*) g_type_create_instance (object_type);
#line 35 "../lib/Services/AsyncMutex.vala"
	self->priv->locked = FALSE;
#line 36 "../lib/Services/AsyncMutex.vala"
	_tmp0_ = gee_array_queue_new (GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK, (GBoxedCopyFunc) granite_services_async_mutex_callback_ref, (GDestroyNotify) granite_services_async_mutex_callback_unref, NULL, NULL, NULL);
#line 36 "../lib/Services/AsyncMutex.vala"
	_g_object_unref0 (self->priv->callbacks);
#line 36 "../lib/Services/AsyncMutex.vala"
	self->priv->callbacks = _tmp0_;
#line 34 "../lib/Services/AsyncMutex.vala"
	return self;
#line 192 "AsyncMutex.c"
}

G_GNUC_INTERNAL GraniteServicesAsyncMutex*
granite_services_async_mutex_new (void)
{
#line 34 "../lib/Services/AsyncMutex.vala"
	return granite_services_async_mutex_construct (GRANITE_SERVICES_TYPE_ASYNC_MUTEX);
#line 200 "AsyncMutex.c"
}

static void
granite_services_async_mutex_lock_data_free (gpointer _data)
{
	GraniteServicesAsyncMutexLockData* _data_;
	_data_ = _data;
#line 22 "../lib/Services/AsyncMutex.vala"
	_granite_services_async_mutex_unref0 (_data_->self);
#line 22 "../lib/Services/AsyncMutex.vala"
	g_slice_free (GraniteServicesAsyncMutexLockData, _data_);
#line 212 "AsyncMutex.c"
}

static gpointer
_granite_services_async_mutex_ref0 (gpointer self)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	return self ? granite_services_async_mutex_ref (self) : NULL;
#line 220 "AsyncMutex.c"
}

G_GNUC_INTERNAL void
granite_services_async_mutex_lock (GraniteServicesAsyncMutex* self,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_)
{
	GraniteServicesAsyncMutexLockData* _data_;
	GraniteServicesAsyncMutex* _tmp0_;
#line 22 "../lib/Services/AsyncMutex.vala"
	_data_ = g_slice_new0 (GraniteServicesAsyncMutexLockData);
#line 22 "../lib/Services/AsyncMutex.vala"
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
#line 22 "../lib/Services/AsyncMutex.vala"
	g_task_set_task_data (_data_->_async_result, _data_, granite_services_async_mutex_lock_data_free);
#line 22 "../lib/Services/AsyncMutex.vala"
	_tmp0_ = _granite_services_async_mutex_ref0 (self);
#line 22 "../lib/Services/AsyncMutex.vala"
	_data_->self = _tmp0_;
#line 22 "../lib/Services/AsyncMutex.vala"
	granite_services_async_mutex_lock_co (_data_);
#line 242 "AsyncMutex.c"
}

G_GNUC_INTERNAL void
granite_services_async_mutex_lock_finish (GraniteServicesAsyncMutex* self,
                                          GAsyncResult* _res_)
{
	GraniteServicesAsyncMutexLockData* _data_;
#line 22 "../lib/Services/AsyncMutex.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 252 "AsyncMutex.c"
}

static gboolean
_granite_services_async_mutex_lock_co_gsource_func (gpointer self)
{
	gboolean result;
	result = granite_services_async_mutex_lock_co (self);
#line 41 "../lib/Services/AsyncMutex.vala"
	return result;
#line 262 "AsyncMutex.c"
}

static gboolean
granite_services_async_mutex_lock_co (GraniteServicesAsyncMutexLockData* _data_)
{
#line 39 "../lib/Services/AsyncMutex.vala"
	switch (_data_->_state_) {
#line 39 "../lib/Services/AsyncMutex.vala"
		case 0:
#line 272 "AsyncMutex.c"
		goto _state_0;
#line 39 "../lib/Services/AsyncMutex.vala"
		case 1:
#line 276 "AsyncMutex.c"
		goto _state_1;
		default:
#line 39 "../lib/Services/AsyncMutex.vala"
		g_assert_not_reached ();
#line 281 "AsyncMutex.c"
	}
	_state_0:
#line 40 "../lib/Services/AsyncMutex.vala"
	while (TRUE) {
#line 40 "../lib/Services/AsyncMutex.vala"
		if (!_data_->self->priv->locked) {
#line 40 "../lib/Services/AsyncMutex.vala"
			break;
#line 290 "AsyncMutex.c"
		}
#line 41 "../lib/Services/AsyncMutex.vala"
		_data_->cb = _granite_services_async_mutex_lock_co_gsource_func;
#line 41 "../lib/Services/AsyncMutex.vala"
		_data_->cb_target = _data_;
#line 41 "../lib/Services/AsyncMutex.vala"
		_data_->cb_target_destroy_notify = NULL;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->_tmp0_ = _data_->self->priv->callbacks;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->_tmp1_ = _data_->cb;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->_tmp1__target = _data_->cb_target;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->_tmp1__target_destroy_notify = _data_->cb_target_destroy_notify;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->cb = NULL;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->cb_target = NULL;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->cb_target_destroy_notify = NULL;
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->_tmp2_ = granite_services_async_mutex_callback_new (_data_->_tmp1_, _data_->_tmp1__target, _data_->_tmp1__target_destroy_notify);
#line 42 "../lib/Services/AsyncMutex.vala"
		_data_->_tmp3_ = _data_->_tmp2_;
#line 42 "../lib/Services/AsyncMutex.vala"
		gee_deque_offer_head ((GeeDeque*) _data_->_tmp0_, _data_->_tmp3_);
#line 42 "../lib/Services/AsyncMutex.vala"
		_granite_services_async_mutex_callback_unref0 (_data_->_tmp3_);
#line 43 "../lib/Services/AsyncMutex.vala"
		_data_->_state_ = 1;
#line 43 "../lib/Services/AsyncMutex.vala"
		return FALSE;
#line 324 "AsyncMutex.c"
		_state_1:
		;
#line 40 "../lib/Services/AsyncMutex.vala"
		(_data_->cb_target_destroy_notify == NULL) ? NULL : (_data_->cb_target_destroy_notify (_data_->cb_target), NULL);
#line 40 "../lib/Services/AsyncMutex.vala"
		_data_->cb = NULL;
#line 40 "../lib/Services/AsyncMutex.vala"
		_data_->cb_target = NULL;
#line 40 "../lib/Services/AsyncMutex.vala"
		_data_->cb_target_destroy_notify = NULL;
#line 335 "AsyncMutex.c"
	}
#line 46 "../lib/Services/AsyncMutex.vala"
	_data_->self->priv->locked = TRUE;
#line 39 "../lib/Services/AsyncMutex.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 39 "../lib/Services/AsyncMutex.vala"
	if (_data_->_state_ != 0) {
#line 39 "../lib/Services/AsyncMutex.vala"
		while (!g_task_get_completed (_data_->_async_result)) {
#line 39 "../lib/Services/AsyncMutex.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 347 "AsyncMutex.c"
		}
	}
#line 39 "../lib/Services/AsyncMutex.vala"
	g_object_unref (_data_->_async_result);
#line 39 "../lib/Services/AsyncMutex.vala"
	return FALSE;
#line 354 "AsyncMutex.c"
}

G_GNUC_INTERNAL void
granite_services_async_mutex_unlock (GraniteServicesAsyncMutex* self)
{
	GraniteServicesAsyncMutexCallback* callback = NULL;
	GeeArrayQueue* _tmp0_;
	gpointer _tmp1_;
	GraniteServicesAsyncMutexCallback* _tmp2_;
#line 49 "../lib/Services/AsyncMutex.vala"
	g_return_if_fail (self != NULL);
#line 50 "../lib/Services/AsyncMutex.vala"
	self->priv->locked = FALSE;
#line 51 "../lib/Services/AsyncMutex.vala"
	_tmp0_ = self->priv->callbacks;
#line 51 "../lib/Services/AsyncMutex.vala"
	_tmp1_ = gee_deque_poll_head ((GeeDeque*) _tmp0_);
#line 51 "../lib/Services/AsyncMutex.vala"
	callback = (GraniteServicesAsyncMutexCallback*) _tmp1_;
#line 52 "../lib/Services/AsyncMutex.vala"
	_tmp2_ = callback;
#line 52 "../lib/Services/AsyncMutex.vala"
	if (_tmp2_ != NULL) {
#line 378 "AsyncMutex.c"
		GraniteServicesAsyncMutexCallback* _tmp3_;
		GSourceFunc _tmp4_;
		gpointer _tmp4__target;
		GDestroyNotify _tmp4__target_destroy_notify;
#line 53 "../lib/Services/AsyncMutex.vala"
		_tmp3_ = callback;
#line 53 "../lib/Services/AsyncMutex.vala"
		_tmp4_ = _tmp3_->callback;
#line 53 "../lib/Services/AsyncMutex.vala"
		_tmp4__target = _tmp3_->callback_target;
#line 53 "../lib/Services/AsyncMutex.vala"
		_tmp4__target_destroy_notify = _tmp3_->callback_target_destroy_notify;
#line 53 "../lib/Services/AsyncMutex.vala"
		_tmp3_->callback = NULL;
#line 53 "../lib/Services/AsyncMutex.vala"
		_tmp3_->callback_target = NULL;
#line 53 "../lib/Services/AsyncMutex.vala"
		_tmp3_->callback_target_destroy_notify = NULL;
#line 53 "../lib/Services/AsyncMutex.vala"
		g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _tmp4_, _tmp4__target, _tmp4__target_destroy_notify);
#line 399 "AsyncMutex.c"
	}
#line 49 "../lib/Services/AsyncMutex.vala"
	_granite_services_async_mutex_callback_unref0 (callback);
#line 403 "AsyncMutex.c"
}

static GraniteServicesAsyncMutexCallback*
granite_services_async_mutex_callback_construct (GType object_type,
                                                 GSourceFunc cb,
                                                 gpointer cb_target,
                                                 GDestroyNotify cb_target_destroy_notify)
{
	GraniteServicesAsyncMutexCallback* self = NULL;
	GSourceFunc _tmp0_;
	gpointer _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
#line 26 "../lib/Services/AsyncMutex.vala"
	self = (GraniteServicesAsyncMutexCallback*) g_type_create_instance (object_type);
#line 27 "../lib/Services/AsyncMutex.vala"
	_tmp0_ = cb;
#line 27 "../lib/Services/AsyncMutex.vala"
	_tmp0__target = cb_target;
#line 27 "../lib/Services/AsyncMutex.vala"
	_tmp0__target_destroy_notify = cb_target_destroy_notify;
#line 27 "../lib/Services/AsyncMutex.vala"
	cb = NULL;
#line 27 "../lib/Services/AsyncMutex.vala"
	cb_target = NULL;
#line 27 "../lib/Services/AsyncMutex.vala"
	cb_target_destroy_notify = NULL;
#line 27 "../lib/Services/AsyncMutex.vala"
	(self->callback_target_destroy_notify == NULL) ? NULL : (self->callback_target_destroy_notify (self->callback_target), NULL);
#line 27 "../lib/Services/AsyncMutex.vala"
	self->callback = NULL;
#line 27 "../lib/Services/AsyncMutex.vala"
	self->callback_target = NULL;
#line 27 "../lib/Services/AsyncMutex.vala"
	self->callback_target_destroy_notify = NULL;
#line 27 "../lib/Services/AsyncMutex.vala"
	self->callback = _tmp0_;
#line 27 "../lib/Services/AsyncMutex.vala"
	self->callback_target = _tmp0__target;
#line 27 "../lib/Services/AsyncMutex.vala"
	self->callback_target_destroy_notify = _tmp0__target_destroy_notify;
#line 26 "../lib/Services/AsyncMutex.vala"
	(cb_target_destroy_notify == NULL) ? NULL : (cb_target_destroy_notify (cb_target), NULL);
#line 26 "../lib/Services/AsyncMutex.vala"
	cb = NULL;
#line 26 "../lib/Services/AsyncMutex.vala"
	cb_target = NULL;
#line 26 "../lib/Services/AsyncMutex.vala"
	cb_target_destroy_notify = NULL;
#line 26 "../lib/Services/AsyncMutex.vala"
	return self;
#line 454 "AsyncMutex.c"
}

static GraniteServicesAsyncMutexCallback*
granite_services_async_mutex_callback_new (GSourceFunc cb,
                                           gpointer cb_target,
                                           GDestroyNotify cb_target_destroy_notify)
{
#line 26 "../lib/Services/AsyncMutex.vala"
	return granite_services_async_mutex_callback_construct (GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK, cb, cb_target, cb_target_destroy_notify);
#line 464 "AsyncMutex.c"
}

static void
granite_services_async_mutex_value_callback_init (GValue* value)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	value->data[0].v_pointer = NULL;
#line 472 "AsyncMutex.c"
}

static void
granite_services_async_mutex_value_callback_free_value (GValue* value)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	if (value->data[0].v_pointer) {
#line 23 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_callback_unref (value->data[0].v_pointer);
#line 482 "AsyncMutex.c"
	}
}

static void
granite_services_async_mutex_value_callback_copy_value (const GValue* src_value,
                                                        GValue* dest_value)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	if (src_value->data[0].v_pointer) {
#line 23 "../lib/Services/AsyncMutex.vala"
		dest_value->data[0].v_pointer = granite_services_async_mutex_callback_ref (src_value->data[0].v_pointer);
#line 494 "AsyncMutex.c"
	} else {
#line 23 "../lib/Services/AsyncMutex.vala"
		dest_value->data[0].v_pointer = NULL;
#line 498 "AsyncMutex.c"
	}
}

static gpointer
granite_services_async_mutex_value_callback_peek_pointer (const GValue* value)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	return value->data[0].v_pointer;
#line 507 "AsyncMutex.c"
}

static gchar*
granite_services_async_mutex_value_callback_collect_value (GValue* value,
                                                           guint n_collect_values,
                                                           GTypeCValue* collect_values,
                                                           guint collect_flags)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	if (collect_values[0].v_pointer) {
#line 518 "AsyncMutex.c"
		GraniteServicesAsyncMutexCallback * object;
		object = collect_values[0].v_pointer;
#line 23 "../lib/Services/AsyncMutex.vala"
		if (object->parent_instance.g_class == NULL) {
#line 23 "../lib/Services/AsyncMutex.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 525 "AsyncMutex.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 23 "../lib/Services/AsyncMutex.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 529 "AsyncMutex.c"
		}
#line 23 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = granite_services_async_mutex_callback_ref (object);
#line 533 "AsyncMutex.c"
	} else {
#line 23 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = NULL;
#line 537 "AsyncMutex.c"
	}
#line 23 "../lib/Services/AsyncMutex.vala"
	return NULL;
#line 541 "AsyncMutex.c"
}

static gchar*
granite_services_async_mutex_value_callback_lcopy_value (const GValue* value,
                                                         guint n_collect_values,
                                                         GTypeCValue* collect_values,
                                                         guint collect_flags)
{
	GraniteServicesAsyncMutexCallback ** object_p;
	object_p = collect_values[0].v_pointer;
#line 23 "../lib/Services/AsyncMutex.vala"
	if (!object_p) {
#line 23 "../lib/Services/AsyncMutex.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 556 "AsyncMutex.c"
	}
#line 23 "../lib/Services/AsyncMutex.vala"
	if (!value->data[0].v_pointer) {
#line 23 "../lib/Services/AsyncMutex.vala"
		*object_p = NULL;
#line 562 "AsyncMutex.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 23 "../lib/Services/AsyncMutex.vala"
		*object_p = value->data[0].v_pointer;
#line 566 "AsyncMutex.c"
	} else {
#line 23 "../lib/Services/AsyncMutex.vala"
		*object_p = granite_services_async_mutex_callback_ref (value->data[0].v_pointer);
#line 570 "AsyncMutex.c"
	}
#line 23 "../lib/Services/AsyncMutex.vala"
	return NULL;
#line 574 "AsyncMutex.c"
}

static GParamSpec*
granite_services_async_mutex_param_spec_callback (const gchar* name,
                                                  const gchar* nick,
                                                  const gchar* blurb,
                                                  GType object_type,
                                                  GParamFlags flags)
{
	GraniteServicesAsyncMutexParamSpecCallback* spec;
#line 23 "../lib/Services/AsyncMutex.vala"
	g_return_val_if_fail (g_type_is_a (object_type, GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK), NULL);
#line 23 "../lib/Services/AsyncMutex.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 23 "../lib/Services/AsyncMutex.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 23 "../lib/Services/AsyncMutex.vala"
	return G_PARAM_SPEC (spec);
#line 593 "AsyncMutex.c"
}

static gpointer
granite_services_async_mutex_value_get_callback (const GValue* value)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK), NULL);
#line 23 "../lib/Services/AsyncMutex.vala"
	return value->data[0].v_pointer;
#line 603 "AsyncMutex.c"
}

static void
granite_services_async_mutex_value_set_callback (GValue* value,
                                                 gpointer v_object)
{
	GraniteServicesAsyncMutexCallback * old;
#line 23 "../lib/Services/AsyncMutex.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK));
#line 23 "../lib/Services/AsyncMutex.vala"
	old = value->data[0].v_pointer;
#line 23 "../lib/Services/AsyncMutex.vala"
	if (v_object) {
#line 23 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK));
#line 23 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = v_object;
#line 23 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_callback_ref (value->data[0].v_pointer);
#line 625 "AsyncMutex.c"
	} else {
#line 23 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = NULL;
#line 629 "AsyncMutex.c"
	}
#line 23 "../lib/Services/AsyncMutex.vala"
	if (old) {
#line 23 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_callback_unref (old);
#line 635 "AsyncMutex.c"
	}
}

static void
granite_services_async_mutex_value_take_callback (GValue* value,
                                                  gpointer v_object)
{
	GraniteServicesAsyncMutexCallback * old;
#line 23 "../lib/Services/AsyncMutex.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK));
#line 23 "../lib/Services/AsyncMutex.vala"
	old = value->data[0].v_pointer;
#line 23 "../lib/Services/AsyncMutex.vala"
	if (v_object) {
#line 23 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK));
#line 23 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = v_object;
#line 656 "AsyncMutex.c"
	} else {
#line 23 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = NULL;
#line 660 "AsyncMutex.c"
	}
#line 23 "../lib/Services/AsyncMutex.vala"
	if (old) {
#line 23 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_callback_unref (old);
#line 666 "AsyncMutex.c"
	}
}

static void
granite_services_async_mutex_callback_class_init (GraniteServicesAsyncMutexCallbackClass * klass,
                                                  gpointer klass_data)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	granite_services_async_mutex_callback_parent_class = g_type_class_peek_parent (klass);
#line 23 "../lib/Services/AsyncMutex.vala"
	((GraniteServicesAsyncMutexCallbackClass *) klass)->finalize = granite_services_async_mutex_callback_finalize;
#line 678 "AsyncMutex.c"
}

static void
granite_services_async_mutex_callback_instance_init (GraniteServicesAsyncMutexCallback * self,
                                                     gpointer klass)
{
#line 23 "../lib/Services/AsyncMutex.vala"
	self->ref_count = 1;
#line 687 "AsyncMutex.c"
}

static void
granite_services_async_mutex_callback_finalize (GraniteServicesAsyncMutexCallback * obj)
{
	GraniteServicesAsyncMutexCallback * self;
#line 23 "../lib/Services/AsyncMutex.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_SERVICES_ASYNC_MUTEX_TYPE_CALLBACK, GraniteServicesAsyncMutexCallback);
#line 23 "../lib/Services/AsyncMutex.vala"
	g_signal_handlers_destroy (self);
#line 24 "../lib/Services/AsyncMutex.vala"
	(self->callback_target_destroy_notify == NULL) ? NULL : (self->callback_target_destroy_notify (self->callback_target), NULL);
#line 24 "../lib/Services/AsyncMutex.vala"
	self->callback = NULL;
#line 24 "../lib/Services/AsyncMutex.vala"
	self->callback_target = NULL;
#line 24 "../lib/Services/AsyncMutex.vala"
	self->callback_target_destroy_notify = NULL;
#line 706 "AsyncMutex.c"
}

static GType
granite_services_async_mutex_callback_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { granite_services_async_mutex_value_callback_init, granite_services_async_mutex_value_callback_free_value, granite_services_async_mutex_value_callback_copy_value, granite_services_async_mutex_value_callback_peek_pointer, "p", granite_services_async_mutex_value_callback_collect_value, "p", granite_services_async_mutex_value_callback_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (GraniteServicesAsyncMutexCallbackClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_services_async_mutex_callback_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteServicesAsyncMutexCallback), 0, (GInstanceInitFunc) granite_services_async_mutex_callback_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType granite_services_async_mutex_callback_type_id;
	granite_services_async_mutex_callback_type_id = g_type_register_fundamental (g_type_fundamental_next (), "GraniteServicesAsyncMutexCallback", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return granite_services_async_mutex_callback_type_id;
}

static GType
granite_services_async_mutex_callback_get_type (void)
{
	static volatile gsize granite_services_async_mutex_callback_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_async_mutex_callback_type_id__volatile)) {
		GType granite_services_async_mutex_callback_type_id;
		granite_services_async_mutex_callback_type_id = granite_services_async_mutex_callback_get_type_once ();
		g_once_init_leave (&granite_services_async_mutex_callback_type_id__volatile, granite_services_async_mutex_callback_type_id);
	}
	return granite_services_async_mutex_callback_type_id__volatile;
}

static gpointer
granite_services_async_mutex_callback_ref (gpointer instance)
{
	GraniteServicesAsyncMutexCallback * self;
	self = instance;
#line 23 "../lib/Services/AsyncMutex.vala"
	g_atomic_int_inc (&self->ref_count);
#line 23 "../lib/Services/AsyncMutex.vala"
	return instance;
#line 741 "AsyncMutex.c"
}

static void
granite_services_async_mutex_callback_unref (gpointer instance)
{
	GraniteServicesAsyncMutexCallback * self;
	self = instance;
#line 23 "../lib/Services/AsyncMutex.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 23 "../lib/Services/AsyncMutex.vala"
		GRANITE_SERVICES_ASYNC_MUTEX_CALLBACK_GET_CLASS (self)->finalize (self);
#line 23 "../lib/Services/AsyncMutex.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 755 "AsyncMutex.c"
	}
}

static void
granite_services_value_async_mutex_init (GValue* value)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	value->data[0].v_pointer = NULL;
#line 764 "AsyncMutex.c"
}

static void
granite_services_value_async_mutex_free_value (GValue* value)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	if (value->data[0].v_pointer) {
#line 22 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_unref (value->data[0].v_pointer);
#line 774 "AsyncMutex.c"
	}
}

static void
granite_services_value_async_mutex_copy_value (const GValue* src_value,
                                               GValue* dest_value)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "../lib/Services/AsyncMutex.vala"
		dest_value->data[0].v_pointer = granite_services_async_mutex_ref (src_value->data[0].v_pointer);
#line 786 "AsyncMutex.c"
	} else {
#line 22 "../lib/Services/AsyncMutex.vala"
		dest_value->data[0].v_pointer = NULL;
#line 790 "AsyncMutex.c"
	}
}

static gpointer
granite_services_value_async_mutex_peek_pointer (const GValue* value)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	return value->data[0].v_pointer;
#line 799 "AsyncMutex.c"
}

static gchar*
granite_services_value_async_mutex_collect_value (GValue* value,
                                                  guint n_collect_values,
                                                  GTypeCValue* collect_values,
                                                  guint collect_flags)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	if (collect_values[0].v_pointer) {
#line 810 "AsyncMutex.c"
		GraniteServicesAsyncMutex * object;
		object = collect_values[0].v_pointer;
#line 22 "../lib/Services/AsyncMutex.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "../lib/Services/AsyncMutex.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 817 "AsyncMutex.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "../lib/Services/AsyncMutex.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 821 "AsyncMutex.c"
		}
#line 22 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = granite_services_async_mutex_ref (object);
#line 825 "AsyncMutex.c"
	} else {
#line 22 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = NULL;
#line 829 "AsyncMutex.c"
	}
#line 22 "../lib/Services/AsyncMutex.vala"
	return NULL;
#line 833 "AsyncMutex.c"
}

static gchar*
granite_services_value_async_mutex_lcopy_value (const GValue* value,
                                                guint n_collect_values,
                                                GTypeCValue* collect_values,
                                                guint collect_flags)
{
	GraniteServicesAsyncMutex ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "../lib/Services/AsyncMutex.vala"
	if (!object_p) {
#line 22 "../lib/Services/AsyncMutex.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 848 "AsyncMutex.c"
	}
#line 22 "../lib/Services/AsyncMutex.vala"
	if (!value->data[0].v_pointer) {
#line 22 "../lib/Services/AsyncMutex.vala"
		*object_p = NULL;
#line 854 "AsyncMutex.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "../lib/Services/AsyncMutex.vala"
		*object_p = value->data[0].v_pointer;
#line 858 "AsyncMutex.c"
	} else {
#line 22 "../lib/Services/AsyncMutex.vala"
		*object_p = granite_services_async_mutex_ref (value->data[0].v_pointer);
#line 862 "AsyncMutex.c"
	}
#line 22 "../lib/Services/AsyncMutex.vala"
	return NULL;
#line 866 "AsyncMutex.c"
}

G_GNUC_INTERNAL GParamSpec*
granite_services_param_spec_async_mutex (const gchar* name,
                                         const gchar* nick,
                                         const gchar* blurb,
                                         GType object_type,
                                         GParamFlags flags)
{
	GraniteServicesParamSpecAsyncMutex* spec;
#line 22 "../lib/Services/AsyncMutex.vala"
	g_return_val_if_fail (g_type_is_a (object_type, GRANITE_SERVICES_TYPE_ASYNC_MUTEX), NULL);
#line 22 "../lib/Services/AsyncMutex.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "../lib/Services/AsyncMutex.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "../lib/Services/AsyncMutex.vala"
	return G_PARAM_SPEC (spec);
#line 885 "AsyncMutex.c"
}

G_GNUC_INTERNAL gpointer
granite_services_value_get_async_mutex (const GValue* value)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_SERVICES_TYPE_ASYNC_MUTEX), NULL);
#line 22 "../lib/Services/AsyncMutex.vala"
	return value->data[0].v_pointer;
#line 895 "AsyncMutex.c"
}

G_GNUC_INTERNAL void
granite_services_value_set_async_mutex (GValue* value,
                                        gpointer v_object)
{
	GraniteServicesAsyncMutex * old;
#line 22 "../lib/Services/AsyncMutex.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_SERVICES_TYPE_ASYNC_MUTEX));
#line 22 "../lib/Services/AsyncMutex.vala"
	old = value->data[0].v_pointer;
#line 22 "../lib/Services/AsyncMutex.vala"
	if (v_object) {
#line 22 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, GRANITE_SERVICES_TYPE_ASYNC_MUTEX));
#line 22 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = v_object;
#line 22 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_ref (value->data[0].v_pointer);
#line 917 "AsyncMutex.c"
	} else {
#line 22 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = NULL;
#line 921 "AsyncMutex.c"
	}
#line 22 "../lib/Services/AsyncMutex.vala"
	if (old) {
#line 22 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_unref (old);
#line 927 "AsyncMutex.c"
	}
}

G_GNUC_INTERNAL void
granite_services_value_take_async_mutex (GValue* value,
                                         gpointer v_object)
{
	GraniteServicesAsyncMutex * old;
#line 22 "../lib/Services/AsyncMutex.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, GRANITE_SERVICES_TYPE_ASYNC_MUTEX));
#line 22 "../lib/Services/AsyncMutex.vala"
	old = value->data[0].v_pointer;
#line 22 "../lib/Services/AsyncMutex.vala"
	if (v_object) {
#line 22 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, GRANITE_SERVICES_TYPE_ASYNC_MUTEX));
#line 22 "../lib/Services/AsyncMutex.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = v_object;
#line 948 "AsyncMutex.c"
	} else {
#line 22 "../lib/Services/AsyncMutex.vala"
		value->data[0].v_pointer = NULL;
#line 952 "AsyncMutex.c"
	}
#line 22 "../lib/Services/AsyncMutex.vala"
	if (old) {
#line 22 "../lib/Services/AsyncMutex.vala"
		granite_services_async_mutex_unref (old);
#line 958 "AsyncMutex.c"
	}
}

static void
granite_services_async_mutex_class_init (GraniteServicesAsyncMutexClass * klass,
                                         gpointer klass_data)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	granite_services_async_mutex_parent_class = g_type_class_peek_parent (klass);
#line 22 "../lib/Services/AsyncMutex.vala"
	((GraniteServicesAsyncMutexClass *) klass)->finalize = granite_services_async_mutex_finalize;
#line 22 "../lib/Services/AsyncMutex.vala"
	g_type_class_adjust_private_offset (klass, &GraniteServicesAsyncMutex_private_offset);
#line 972 "AsyncMutex.c"
}

static void
granite_services_async_mutex_instance_init (GraniteServicesAsyncMutex * self,
                                            gpointer klass)
{
#line 22 "../lib/Services/AsyncMutex.vala"
	self->priv = granite_services_async_mutex_get_instance_private (self);
#line 22 "../lib/Services/AsyncMutex.vala"
	self->ref_count = 1;
#line 983 "AsyncMutex.c"
}

static void
granite_services_async_mutex_finalize (GraniteServicesAsyncMutex * obj)
{
	GraniteServicesAsyncMutex * self;
#line 22 "../lib/Services/AsyncMutex.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_SERVICES_TYPE_ASYNC_MUTEX, GraniteServicesAsyncMutex);
#line 22 "../lib/Services/AsyncMutex.vala"
	g_signal_handlers_destroy (self);
#line 31 "../lib/Services/AsyncMutex.vala"
	_g_object_unref0 (self->priv->callbacks);
#line 996 "AsyncMutex.c"
}

static GType
granite_services_async_mutex_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { granite_services_value_async_mutex_init, granite_services_value_async_mutex_free_value, granite_services_value_async_mutex_copy_value, granite_services_value_async_mutex_peek_pointer, "p", granite_services_value_async_mutex_collect_value, "p", granite_services_value_async_mutex_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (GraniteServicesAsyncMutexClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_services_async_mutex_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteServicesAsyncMutex), 0, (GInstanceInitFunc) granite_services_async_mutex_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType granite_services_async_mutex_type_id;
	granite_services_async_mutex_type_id = g_type_register_fundamental (g_type_fundamental_next (), "GraniteServicesAsyncMutex", &g_define_type_info, &g_define_type_fundamental_info, 0);
	GraniteServicesAsyncMutex_private_offset = g_type_add_instance_private (granite_services_async_mutex_type_id, sizeof (GraniteServicesAsyncMutexPrivate));
	return granite_services_async_mutex_type_id;
}

G_GNUC_INTERNAL GType
granite_services_async_mutex_get_type (void)
{
	static volatile gsize granite_services_async_mutex_type_id__volatile = 0;
	if (g_once_init_enter (&granite_services_async_mutex_type_id__volatile)) {
		GType granite_services_async_mutex_type_id;
		granite_services_async_mutex_type_id = granite_services_async_mutex_get_type_once ();
		g_once_init_leave (&granite_services_async_mutex_type_id__volatile, granite_services_async_mutex_type_id);
	}
	return granite_services_async_mutex_type_id__volatile;
}

G_GNUC_INTERNAL gpointer
granite_services_async_mutex_ref (gpointer instance)
{
	GraniteServicesAsyncMutex * self;
	self = instance;
#line 22 "../lib/Services/AsyncMutex.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "../lib/Services/AsyncMutex.vala"
	return instance;
#line 1032 "AsyncMutex.c"
}

G_GNUC_INTERNAL void
granite_services_async_mutex_unref (gpointer instance)
{
	GraniteServicesAsyncMutex * self;
	self = instance;
#line 22 "../lib/Services/AsyncMutex.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "../lib/Services/AsyncMutex.vala"
		GRANITE_SERVICES_ASYNC_MUTEX_GET_CLASS (self)->finalize (self);
#line 22 "../lib/Services/AsyncMutex.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1046 "AsyncMutex.c"
	}
}


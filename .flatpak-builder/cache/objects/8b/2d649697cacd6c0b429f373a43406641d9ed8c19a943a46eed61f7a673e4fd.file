/* HeaderLabel.c generated by valac 0.48.14, the Vala compiler
 * generated from HeaderLabel.vala, do not modify */

/*
* Copyright (c) 2017 elementary LLC. (https://elementary.io)
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 2.1 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Library General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>

#define GRANITE_TYPE_HEADER_LABEL (granite_header_label_get_type ())
#define GRANITE_HEADER_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_TYPE_HEADER_LABEL, GraniteHeaderLabel))
#define GRANITE_HEADER_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_TYPE_HEADER_LABEL, GraniteHeaderLabelClass))
#define GRANITE_IS_HEADER_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_TYPE_HEADER_LABEL))
#define GRANITE_IS_HEADER_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_TYPE_HEADER_LABEL))
#define GRANITE_HEADER_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_TYPE_HEADER_LABEL, GraniteHeaderLabelClass))

typedef struct _GraniteHeaderLabel GraniteHeaderLabel;
typedef struct _GraniteHeaderLabelClass GraniteHeaderLabelClass;
typedef struct _GraniteHeaderLabelPrivate GraniteHeaderLabelPrivate;
enum  {
	GRANITE_HEADER_LABEL_0_PROPERTY,
	GRANITE_HEADER_LABEL_NUM_PROPERTIES
};
static GParamSpec* granite_header_label_properties[GRANITE_HEADER_LABEL_NUM_PROPERTIES];

struct _GraniteHeaderLabel {
	GtkLabel parent_instance;
	GraniteHeaderLabelPrivate * priv;
};

struct _GraniteHeaderLabelClass {
	GtkLabelClass parent_class;
};

static gpointer granite_header_label_parent_class = NULL;

GType granite_header_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteHeaderLabel, g_object_unref)
GraniteHeaderLabel* granite_header_label_new (const gchar* label);
GraniteHeaderLabel* granite_header_label_construct (GType object_type,
                                                    const gchar* label);
static GObject * granite_header_label_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
#define GRANITE_STYLE_CLASS_H4_LABEL "h4"
static GType granite_header_label_get_type_once (void);

/**
     * Create a new HeaderLabel
     */
GraniteHeaderLabel*
granite_header_label_construct (GType object_type,
                                const gchar* label)
{
	GraniteHeaderLabel * self = NULL;
#line 29 "../lib/Widgets/HeaderLabel.vala"
	g_return_val_if_fail (label != NULL, NULL);
#line 30 "../lib/Widgets/HeaderLabel.vala"
	self = (GraniteHeaderLabel*) g_object_new (object_type, "label", label, NULL);
#line 29 "../lib/Widgets/HeaderLabel.vala"
	return self;
#line 84 "HeaderLabel.c"
}

GraniteHeaderLabel*
granite_header_label_new (const gchar* label)
{
#line 29 "../lib/Widgets/HeaderLabel.vala"
	return granite_header_label_construct (GRANITE_TYPE_HEADER_LABEL, label);
#line 92 "HeaderLabel.c"
}

static GObject *
granite_header_label_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteHeaderLabel * self;
	GtkStyleContext* _tmp0_;
#line 35 "../lib/Widgets/HeaderLabel.vala"
	parent_class = G_OBJECT_CLASS (granite_header_label_parent_class);
#line 35 "../lib/Widgets/HeaderLabel.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 35 "../lib/Widgets/HeaderLabel.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_HEADER_LABEL, GraniteHeaderLabel);
#line 36 "../lib/Widgets/HeaderLabel.vala"
	gtk_widget_set_halign ((GtkWidget*) self, GTK_ALIGN_START);
#line 37 "../lib/Widgets/HeaderLabel.vala"
	gtk_label_set_xalign ((GtkLabel*) self, (gfloat) 0);
#line 38 "../lib/Widgets/HeaderLabel.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 38 "../lib/Widgets/HeaderLabel.vala"
	gtk_style_context_add_class (_tmp0_, GRANITE_STYLE_CLASS_H4_LABEL);
#line 35 "../lib/Widgets/HeaderLabel.vala"
	return obj;
#line 120 "HeaderLabel.c"
}

static void
granite_header_label_class_init (GraniteHeaderLabelClass * klass,
                                 gpointer klass_data)
{
#line 24 "../lib/Widgets/HeaderLabel.vala"
	granite_header_label_parent_class = g_type_class_peek_parent (klass);
#line 24 "../lib/Widgets/HeaderLabel.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_header_label_constructor;
#line 131 "HeaderLabel.c"
}

static void
granite_header_label_instance_init (GraniteHeaderLabel * self,
                                    gpointer klass)
{
}

/**
 * HeaderLabel is a start-aligned Gtk.Label with the Granite H4 style class
 */
static GType
granite_header_label_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteHeaderLabelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_header_label_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteHeaderLabel), 0, (GInstanceInitFunc) granite_header_label_instance_init, NULL };
	GType granite_header_label_type_id;
	granite_header_label_type_id = g_type_register_static (gtk_label_get_type (), "GraniteHeaderLabel", &g_define_type_info, 0);
	return granite_header_label_type_id;
}

GType
granite_header_label_get_type (void)
{
	static volatile gsize granite_header_label_type_id__volatile = 0;
	if (g_once_init_enter (&granite_header_label_type_id__volatile)) {
		GType granite_header_label_type_id;
		granite_header_label_type_id = granite_header_label_get_type_once ();
		g_once_init_leave (&granite_header_label_type_id__volatile, granite_header_label_type_id);
	}
	return granite_header_label_type_id__volatile;
}


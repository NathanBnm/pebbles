/* AccelLabel.c generated by valac 0.48.14, the Vala compiler
 * generated from AccelLabel.vala, do not modify */

/*
* Copyright (c) 2019 elementary, Inc. (https://elementary.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gio/gio.h>
#include <float.h>
#include <math.h>

#define GRANITE_TYPE_ACCEL_LABEL (granite_accel_label_get_type ())
#define GRANITE_ACCEL_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_TYPE_ACCEL_LABEL, GraniteAccelLabel))
#define GRANITE_ACCEL_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_TYPE_ACCEL_LABEL, GraniteAccelLabelClass))
#define GRANITE_IS_ACCEL_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_TYPE_ACCEL_LABEL))
#define GRANITE_IS_ACCEL_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_TYPE_ACCEL_LABEL))
#define GRANITE_ACCEL_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_TYPE_ACCEL_LABEL, GraniteAccelLabelClass))

typedef struct _GraniteAccelLabel GraniteAccelLabel;
typedef struct _GraniteAccelLabelClass GraniteAccelLabelClass;
typedef struct _GraniteAccelLabelPrivate GraniteAccelLabelPrivate;
enum  {
	GRANITE_ACCEL_LABEL_0_PROPERTY,
	GRANITE_ACCEL_LABEL_ACTION_NAME_PROPERTY,
	GRANITE_ACCEL_LABEL_ACCEL_STRING_PROPERTY,
	GRANITE_ACCEL_LABEL_LABEL_PROPERTY,
	GRANITE_ACCEL_LABEL_NUM_PROPERTIES
};
static GParamSpec* granite_accel_label_properties[GRANITE_ACCEL_LABEL_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _GraniteAccelLabel {
	GtkGrid parent_instance;
	GraniteAccelLabelPrivate * priv;
};

struct _GraniteAccelLabelClass {
	GtkGridClass parent_class;
};

struct _GraniteAccelLabelPrivate {
	gchar* _action_name;
	gchar* _accel_string;
	gchar* _label;
};

static gint GraniteAccelLabel_private_offset;
static gpointer granite_accel_label_parent_class = NULL;

GType granite_accel_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteAccelLabel, g_object_unref)
const gchar* granite_accel_label_get_action_name (GraniteAccelLabel* self);
void granite_accel_label_set_action_name (GraniteAccelLabel* self,
                                          const gchar* value);
const gchar* granite_accel_label_get_accel_string (GraniteAccelLabel* self);
void granite_accel_label_set_accel_string (GraniteAccelLabel* self,
                                           const gchar* value);
const gchar* granite_accel_label_get_label (GraniteAccelLabel* self);
void granite_accel_label_set_label (GraniteAccelLabel* self,
                                    const gchar* value);
GraniteAccelLabel* granite_accel_label_new (const gchar* label,
                                            const gchar* accel_string);
GraniteAccelLabel* granite_accel_label_construct (GType object_type,
                                                  const gchar* label,
                                                  const gchar* accel_string);
GraniteAccelLabel* granite_accel_label_new_from_action_name (const gchar* label,
                                                             const gchar* action_name);
GraniteAccelLabel* granite_accel_label_construct_from_action_name (GType object_type,
                                                                   const gchar* label,
                                                                   const gchar* action_name);
static void granite_accel_label_update_accels (GraniteAccelLabel* self);
gchar* granite_accel_to_string (const gchar* accel);
#define GRANITE_STYLE_CLASS_KEYCAP "keycap"
static GObject * granite_accel_label_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
static void _granite_accel_label_update_accels_g_object_notify (GObject* _sender,
                                                         GParamSpec* pspec,
                                                         gpointer self);
static void granite_accel_label_finalize (GObject * obj);
static GType granite_accel_label_get_type_once (void);
static void _vala_granite_accel_label_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_granite_accel_label_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

static inline gpointer
granite_accel_label_get_instance_private (GraniteAccelLabel* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteAccelLabel_private_offset);
}

const gchar*
granite_accel_label_get_action_name (GraniteAccelLabel* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 40 "../lib/Widgets/AccelLabel.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 40 "../lib/Widgets/AccelLabel.vala"
	_tmp0_ = self->priv->_action_name;
#line 40 "../lib/Widgets/AccelLabel.vala"
	result = _tmp0_;
#line 40 "../lib/Widgets/AccelLabel.vala"
	return result;
#line 139 "AccelLabel.c"
}

void
granite_accel_label_set_action_name (GraniteAccelLabel* self,
                                     const gchar* value)
{
	gchar* old_value;
#line 40 "../lib/Widgets/AccelLabel.vala"
	g_return_if_fail (self != NULL);
#line 40 "../lib/Widgets/AccelLabel.vala"
	old_value = granite_accel_label_get_action_name (self);
#line 40 "../lib/Widgets/AccelLabel.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 153 "AccelLabel.c"
		gchar* _tmp0_;
#line 40 "../lib/Widgets/AccelLabel.vala"
		_tmp0_ = g_strdup (value);
#line 40 "../lib/Widgets/AccelLabel.vala"
		_g_free0 (self->priv->_action_name);
#line 40 "../lib/Widgets/AccelLabel.vala"
		self->priv->_action_name = _tmp0_;
#line 40 "../lib/Widgets/AccelLabel.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_accel_label_properties[GRANITE_ACCEL_LABEL_ACTION_NAME_PROPERTY]);
#line 163 "AccelLabel.c"
	}
}

const gchar*
granite_accel_label_get_accel_string (GraniteAccelLabel* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 45 "../lib/Widgets/AccelLabel.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 45 "../lib/Widgets/AccelLabel.vala"
	_tmp0_ = self->priv->_accel_string;
#line 45 "../lib/Widgets/AccelLabel.vala"
	result = _tmp0_;
#line 45 "../lib/Widgets/AccelLabel.vala"
	return result;
#line 180 "AccelLabel.c"
}

void
granite_accel_label_set_accel_string (GraniteAccelLabel* self,
                                      const gchar* value)
{
	gchar* old_value;
#line 45 "../lib/Widgets/AccelLabel.vala"
	g_return_if_fail (self != NULL);
#line 45 "../lib/Widgets/AccelLabel.vala"
	old_value = granite_accel_label_get_accel_string (self);
#line 45 "../lib/Widgets/AccelLabel.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 194 "AccelLabel.c"
		gchar* _tmp0_;
#line 45 "../lib/Widgets/AccelLabel.vala"
		_tmp0_ = g_strdup (value);
#line 45 "../lib/Widgets/AccelLabel.vala"
		_g_free0 (self->priv->_accel_string);
#line 45 "../lib/Widgets/AccelLabel.vala"
		self->priv->_accel_string = _tmp0_;
#line 45 "../lib/Widgets/AccelLabel.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_accel_label_properties[GRANITE_ACCEL_LABEL_ACCEL_STRING_PROPERTY]);
#line 204 "AccelLabel.c"
	}
}

const gchar*
granite_accel_label_get_label (GraniteAccelLabel* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 50 "../lib/Widgets/AccelLabel.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 50 "../lib/Widgets/AccelLabel.vala"
	_tmp0_ = self->priv->_label;
#line 50 "../lib/Widgets/AccelLabel.vala"
	result = _tmp0_;
#line 50 "../lib/Widgets/AccelLabel.vala"
	return result;
#line 221 "AccelLabel.c"
}

void
granite_accel_label_set_label (GraniteAccelLabel* self,
                               const gchar* value)
{
	gchar* old_value;
#line 50 "../lib/Widgets/AccelLabel.vala"
	g_return_if_fail (self != NULL);
#line 50 "../lib/Widgets/AccelLabel.vala"
	old_value = granite_accel_label_get_label (self);
#line 50 "../lib/Widgets/AccelLabel.vala"
	if (g_strcmp0 (value, old_value) != 0) {
#line 235 "AccelLabel.c"
		gchar* _tmp0_;
#line 50 "../lib/Widgets/AccelLabel.vala"
		_tmp0_ = g_strdup (value);
#line 50 "../lib/Widgets/AccelLabel.vala"
		_g_free0 (self->priv->_label);
#line 50 "../lib/Widgets/AccelLabel.vala"
		self->priv->_label = _tmp0_;
#line 50 "../lib/Widgets/AccelLabel.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_accel_label_properties[GRANITE_ACCEL_LABEL_LABEL_PROPERTY]);
#line 245 "AccelLabel.c"
	}
}

/**
     * Creates a new AccelLabel from a label and an accelerator string
     *
     * @param label displayed to the user as the menu item name
     * @param accel an accelerator label like “<Control>a” or “<Super>Right”
     */
GraniteAccelLabel*
granite_accel_label_construct (GType object_type,
                               const gchar* label,
                               const gchar* accel_string)
{
	GraniteAccelLabel * self = NULL;
#line 58 "../lib/Widgets/AccelLabel.vala"
	g_return_val_if_fail (label != NULL, NULL);
#line 59 "../lib/Widgets/AccelLabel.vala"
	self = (GraniteAccelLabel*) g_object_new (object_type, "label", label, "accel-string", accel_string, NULL);
#line 58 "../lib/Widgets/AccelLabel.vala"
	return self;
#line 267 "AccelLabel.c"
}

GraniteAccelLabel*
granite_accel_label_new (const gchar* label,
                         const gchar* accel_string)
{
#line 58 "../lib/Widgets/AccelLabel.vala"
	return granite_accel_label_construct (GRANITE_TYPE_ACCEL_LABEL, label, accel_string);
#line 276 "AccelLabel.c"
}

/**
     * Creates a new AccelLabel from a label and an action name
     *
     * @param label displayed to the user as the menu item name
     * @param action_name name of the {@link GLib.Action} used to retrieve action accelerators
     */
GraniteAccelLabel*
granite_accel_label_construct_from_action_name (GType object_type,
                                                const gchar* label,
                                                const gchar* action_name)
{
	GraniteAccelLabel * self = NULL;
#line 71 "../lib/Widgets/AccelLabel.vala"
	g_return_val_if_fail (label != NULL, NULL);
#line 71 "../lib/Widgets/AccelLabel.vala"
	g_return_val_if_fail (action_name != NULL, NULL);
#line 72 "../lib/Widgets/AccelLabel.vala"
	self = (GraniteAccelLabel*) g_object_new (object_type, "label", label, "action-name", action_name, NULL);
#line 71 "../lib/Widgets/AccelLabel.vala"
	return self;
#line 299 "AccelLabel.c"
}

GraniteAccelLabel*
granite_accel_label_new_from_action_name (const gchar* label,
                                          const gchar* action_name)
{
#line 71 "../lib/Widgets/AccelLabel.vala"
	return granite_accel_label_construct_from_action_name (GRANITE_TYPE_ACCEL_LABEL, label, action_name);
#line 308 "AccelLabel.c"
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 115 "../lib/Widgets/AccelLabel.vala"
	return self ? g_object_ref (self) : NULL;
#line 316 "AccelLabel.c"
}

static void
granite_accel_label_update_accels (GraniteAccelLabel* self)
{
	GList* list = NULL;
	GList* _tmp0_;
	gchar** accels = NULL;
	gchar* _tmp6_;
	gchar** _tmp7_;
	gint accels_length1;
	gint _accels_size_;
	gboolean _tmp8_ = FALSE;
	const gchar* _tmp9_;
	gchar** _tmp25_;
	gint _tmp25__length1;
	const gchar* _tmp26_;
#line 95 "../lib/Widgets/AccelLabel.vala"
	g_return_if_fail (self != NULL);
#line 96 "../lib/Widgets/AccelLabel.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) self);
#line 96 "../lib/Widgets/AccelLabel.vala"
	list = _tmp0_;
#line 340 "AccelLabel.c"
	{
		gint i = 0;
#line 97 "../lib/Widgets/AccelLabel.vala"
		i = 0;
#line 345 "AccelLabel.c"
		{
			gboolean _tmp1_ = FALSE;
#line 97 "../lib/Widgets/AccelLabel.vala"
			_tmp1_ = TRUE;
#line 97 "../lib/Widgets/AccelLabel.vala"
			while (TRUE) {
#line 352 "AccelLabel.c"
				GList* _tmp3_;
				GList* _tmp4_;
				gconstpointer _tmp5_;
#line 97 "../lib/Widgets/AccelLabel.vala"
				if (!_tmp1_) {
#line 358 "AccelLabel.c"
					gint _tmp2_;
#line 97 "../lib/Widgets/AccelLabel.vala"
					_tmp2_ = i;
#line 97 "../lib/Widgets/AccelLabel.vala"
					i = _tmp2_ + 1;
#line 364 "AccelLabel.c"
				}
#line 97 "../lib/Widgets/AccelLabel.vala"
				_tmp1_ = FALSE;
#line 97 "../lib/Widgets/AccelLabel.vala"
				_tmp3_ = list;
#line 97 "../lib/Widgets/AccelLabel.vala"
				if (!(((guint) i) < (g_list_length (_tmp3_) - 1))) {
#line 97 "../lib/Widgets/AccelLabel.vala"
					break;
#line 374 "AccelLabel.c"
				}
#line 98 "../lib/Widgets/AccelLabel.vala"
				_tmp4_ = list;
#line 98 "../lib/Widgets/AccelLabel.vala"
				_tmp5_ = g_list_nth_data (_tmp4_, (guint) i);
#line 98 "../lib/Widgets/AccelLabel.vala"
				gtk_widget_destroy ((GtkWidget*) _tmp5_);
#line 382 "AccelLabel.c"
			}
		}
	}
#line 101 "../lib/Widgets/AccelLabel.vala"
	_tmp6_ = g_strdup ("");
#line 101 "../lib/Widgets/AccelLabel.vala"
	_tmp7_ = g_new0 (gchar*, 1 + 1);
#line 101 "../lib/Widgets/AccelLabel.vala"
	_tmp7_[0] = _tmp6_;
#line 101 "../lib/Widgets/AccelLabel.vala"
	accels = _tmp7_;
#line 101 "../lib/Widgets/AccelLabel.vala"
	accels_length1 = 1;
#line 101 "../lib/Widgets/AccelLabel.vala"
	_accels_size_ = accels_length1;
#line 102 "../lib/Widgets/AccelLabel.vala"
	_tmp9_ = self->priv->_accel_string;
#line 102 "../lib/Widgets/AccelLabel.vala"
	if (_tmp9_ != NULL) {
#line 402 "AccelLabel.c"
		const gchar* _tmp10_;
#line 102 "../lib/Widgets/AccelLabel.vala"
		_tmp10_ = self->priv->_accel_string;
#line 102 "../lib/Widgets/AccelLabel.vala"
		_tmp8_ = g_strcmp0 (_tmp10_, "") != 0;
#line 408 "AccelLabel.c"
	} else {
#line 102 "../lib/Widgets/AccelLabel.vala"
		_tmp8_ = FALSE;
#line 412 "AccelLabel.c"
	}
#line 102 "../lib/Widgets/AccelLabel.vala"
	if (_tmp8_) {
#line 416 "AccelLabel.c"
		const gchar* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
		gchar** _tmp14_;
		gchar** _tmp15_;
#line 103 "../lib/Widgets/AccelLabel.vala"
		_tmp11_ = self->priv->_accel_string;
#line 103 "../lib/Widgets/AccelLabel.vala"
		_tmp12_ = granite_accel_to_string (_tmp11_);
#line 103 "../lib/Widgets/AccelLabel.vala"
		_tmp13_ = _tmp12_;
#line 103 "../lib/Widgets/AccelLabel.vala"
		_tmp15_ = _tmp14_ = g_strsplit (_tmp13_, " + ", 0);
#line 103 "../lib/Widgets/AccelLabel.vala"
		accels = (_vala_array_free (accels, accels_length1, (GDestroyNotify) g_free), NULL);
#line 103 "../lib/Widgets/AccelLabel.vala"
		accels = _tmp15_;
#line 103 "../lib/Widgets/AccelLabel.vala"
		accels_length1 = _vala_array_length (_tmp14_);
#line 103 "../lib/Widgets/AccelLabel.vala"
		_accels_size_ = accels_length1;
#line 103 "../lib/Widgets/AccelLabel.vala"
		_g_free0 (_tmp13_);
#line 440 "AccelLabel.c"
	} else {
		gboolean _tmp16_ = FALSE;
		const gchar* _tmp17_;
#line 104 "../lib/Widgets/AccelLabel.vala"
		_tmp17_ = self->priv->_action_name;
#line 104 "../lib/Widgets/AccelLabel.vala"
		if (_tmp17_ != NULL) {
#line 448 "AccelLabel.c"
			const gchar* _tmp18_;
#line 104 "../lib/Widgets/AccelLabel.vala"
			_tmp18_ = self->priv->_action_name;
#line 104 "../lib/Widgets/AccelLabel.vala"
			_tmp16_ = g_strcmp0 (_tmp18_, "") != 0;
#line 454 "AccelLabel.c"
		} else {
#line 104 "../lib/Widgets/AccelLabel.vala"
			_tmp16_ = FALSE;
#line 458 "AccelLabel.c"
		}
#line 104 "../lib/Widgets/AccelLabel.vala"
		if (_tmp16_) {
#line 462 "AccelLabel.c"
			GApplication* _tmp19_;
			const gchar* _tmp20_;
			gchar** _tmp21_;
			gchar** _tmp22_;
			gchar** _tmp23_;
			gint _tmp23__length1;
			const gchar* _tmp24_;
#line 105 "../lib/Widgets/AccelLabel.vala"
			_tmp19_ = g_application_get_default ();
#line 105 "../lib/Widgets/AccelLabel.vala"
			_tmp20_ = self->priv->_action_name;
#line 105 "../lib/Widgets/AccelLabel.vala"
			_tmp22_ = _tmp21_ = gtk_application_get_accels_for_action (G_TYPE_CHECK_INSTANCE_CAST (_tmp19_, gtk_application_get_type (), GtkApplication), _tmp20_);
#line 105 "../lib/Widgets/AccelLabel.vala"
			_tmp23_ = _tmp22_;
#line 105 "../lib/Widgets/AccelLabel.vala"
			_tmp23__length1 = _vala_array_length (_tmp21_);
#line 105 "../lib/Widgets/AccelLabel.vala"
			_tmp24_ = _tmp23_[0];
#line 105 "../lib/Widgets/AccelLabel.vala"
			granite_accel_label_set_accel_string (self, _tmp24_);
#line 105 "../lib/Widgets/AccelLabel.vala"
			_tmp23_ = (_vala_array_free (_tmp23_, _tmp23__length1, (GDestroyNotify) g_free), NULL);
#line 486 "AccelLabel.c"
		}
	}
#line 108 "../lib/Widgets/AccelLabel.vala"
	_tmp25_ = accels;
#line 108 "../lib/Widgets/AccelLabel.vala"
	_tmp25__length1 = accels_length1;
#line 108 "../lib/Widgets/AccelLabel.vala"
	_tmp26_ = _tmp25_[0];
#line 108 "../lib/Widgets/AccelLabel.vala"
	if (g_strcmp0 (_tmp26_, "") != 0) {
#line 497 "AccelLabel.c"
		gchar** _tmp27_;
		gint _tmp27__length1;
#line 109 "../lib/Widgets/AccelLabel.vala"
		_tmp27_ = accels;
#line 109 "../lib/Widgets/AccelLabel.vala"
		_tmp27__length1 = accels_length1;
#line 504 "AccelLabel.c"
		{
			gchar** accel_collection = NULL;
			gint accel_collection_length1 = 0;
			gint _accel_collection_size_ = 0;
			gint accel_it = 0;
#line 109 "../lib/Widgets/AccelLabel.vala"
			accel_collection = _tmp27_;
#line 109 "../lib/Widgets/AccelLabel.vala"
			accel_collection_length1 = _tmp27__length1;
#line 109 "../lib/Widgets/AccelLabel.vala"
			for (accel_it = 0; accel_it < accel_collection_length1; accel_it = accel_it + 1) {
#line 516 "AccelLabel.c"
				const gchar* accel = NULL;
#line 109 "../lib/Widgets/AccelLabel.vala"
				accel = accel_collection[accel_it];
#line 520 "AccelLabel.c"
				{
					const gchar* _tmp28_;
					GtkLabel* accel_label = NULL;
					const gchar* _tmp29_;
					GtkLabel* _tmp30_;
					GtkStyleContext* accel_label_context = NULL;
					GtkLabel* _tmp31_;
					GtkStyleContext* _tmp32_;
					GtkStyleContext* _tmp33_;
					GtkStyleContext* _tmp34_;
					GtkLabel* _tmp35_;
#line 110 "../lib/Widgets/AccelLabel.vala"
					_tmp28_ = accel;
#line 110 "../lib/Widgets/AccelLabel.vala"
					if (g_strcmp0 (_tmp28_, "") == 0) {
#line 111 "../lib/Widgets/AccelLabel.vala"
						continue;
#line 538 "AccelLabel.c"
					}
#line 113 "../lib/Widgets/AccelLabel.vala"
					_tmp29_ = accel;
#line 113 "../lib/Widgets/AccelLabel.vala"
					_tmp30_ = (GtkLabel*) gtk_label_new (_tmp29_);
#line 113 "../lib/Widgets/AccelLabel.vala"
					g_object_ref_sink (_tmp30_);
#line 113 "../lib/Widgets/AccelLabel.vala"
					accel_label = _tmp30_;
#line 115 "../lib/Widgets/AccelLabel.vala"
					_tmp31_ = accel_label;
#line 115 "../lib/Widgets/AccelLabel.vala"
					_tmp32_ = gtk_widget_get_style_context ((GtkWidget*) _tmp31_);
#line 115 "../lib/Widgets/AccelLabel.vala"
					_tmp33_ = _g_object_ref0 (_tmp32_);
#line 115 "../lib/Widgets/AccelLabel.vala"
					accel_label_context = _tmp33_;
#line 116 "../lib/Widgets/AccelLabel.vala"
					_tmp34_ = accel_label_context;
#line 116 "../lib/Widgets/AccelLabel.vala"
					gtk_style_context_add_class (_tmp34_, GRANITE_STYLE_CLASS_KEYCAP);
#line 118 "../lib/Widgets/AccelLabel.vala"
					_tmp35_ = accel_label;
#line 118 "../lib/Widgets/AccelLabel.vala"
					gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp35_);
#line 109 "../lib/Widgets/AccelLabel.vala"
					_g_object_unref0 (accel_label_context);
#line 109 "../lib/Widgets/AccelLabel.vala"
					_g_object_unref0 (accel_label);
#line 568 "AccelLabel.c"
				}
			}
		}
	}
#line 121 "../lib/Widgets/AccelLabel.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 95 "../lib/Widgets/AccelLabel.vala"
	accels = (_vala_array_free (accels, accels_length1, (GDestroyNotify) g_free), NULL);
#line 95 "../lib/Widgets/AccelLabel.vala"
	(list == NULL) ? NULL : (list = (g_list_free (list), NULL));
#line 579 "AccelLabel.c"
}

static void
_granite_accel_label_update_accels_g_object_notify (GObject* _sender,
                                                    GParamSpec* pspec,
                                                    gpointer self)
{
#line 89 "../lib/Widgets/AccelLabel.vala"
	granite_accel_label_update_accels ((GraniteAccelLabel*) self);
#line 589 "AccelLabel.c"
}

static GObject *
granite_accel_label_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteAccelLabel * self;
	GtkLabel* label = NULL;
	const gchar* _tmp0_;
	GtkLabel* _tmp1_;
	GtkLabel* _tmp2_;
	GtkLabel* _tmp3_;
	GtkLabel* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
#line 78 "../lib/Widgets/AccelLabel.vala"
	parent_class = G_OBJECT_CLASS (granite_accel_label_parent_class);
#line 78 "../lib/Widgets/AccelLabel.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 78 "../lib/Widgets/AccelLabel.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_ACCEL_LABEL, GraniteAccelLabel);
#line 79 "../lib/Widgets/AccelLabel.vala"
	_tmp0_ = self->priv->_label;
#line 79 "../lib/Widgets/AccelLabel.vala"
	_tmp1_ = (GtkLabel*) gtk_label_new (_tmp0_);
#line 79 "../lib/Widgets/AccelLabel.vala"
	g_object_ref_sink (_tmp1_);
#line 79 "../lib/Widgets/AccelLabel.vala"
	label = _tmp1_;
#line 80 "../lib/Widgets/AccelLabel.vala"
	_tmp2_ = label;
#line 80 "../lib/Widgets/AccelLabel.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp2_, TRUE);
#line 81 "../lib/Widgets/AccelLabel.vala"
	_tmp3_ = label;
#line 81 "../lib/Widgets/AccelLabel.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp3_, 6);
#line 82 "../lib/Widgets/AccelLabel.vala"
	_tmp4_ = label;
#line 82 "../lib/Widgets/AccelLabel.vala"
	gtk_label_set_xalign (_tmp4_, (gfloat) 0);
#line 84 "../lib/Widgets/AccelLabel.vala"
	gtk_grid_set_column_spacing ((GtkGrid*) self, 3);
#line 85 "../lib/Widgets/AccelLabel.vala"
	_tmp5_ = label;
#line 85 "../lib/Widgets/AccelLabel.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp5_);
#line 87 "../lib/Widgets/AccelLabel.vala"
	granite_accel_label_update_accels (self);
#line 89 "../lib/Widgets/AccelLabel.vala"
	g_signal_connect_object ((GObject*) self, "notify::accel-string", (GCallback) _granite_accel_label_update_accels_g_object_notify, self, 0);
#line 90 "../lib/Widgets/AccelLabel.vala"
	g_signal_connect_object ((GObject*) self, "notify::action-name", (GCallback) _granite_accel_label_update_accels_g_object_notify, self, 0);
#line 92 "../lib/Widgets/AccelLabel.vala"
	_tmp6_ = label;
#line 92 "../lib/Widgets/AccelLabel.vala"
	g_object_bind_property_with_closures ((GObject*) self, "label", (GObject*) _tmp6_, "label", G_BINDING_DEFAULT, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
#line 78 "../lib/Widgets/AccelLabel.vala"
	_g_object_unref0 (label);
#line 78 "../lib/Widgets/AccelLabel.vala"
	return obj;
#line 654 "AccelLabel.c"
}

static void
granite_accel_label_class_init (GraniteAccelLabelClass * klass,
                                gpointer klass_data)
{
#line 36 "../lib/Widgets/AccelLabel.vala"
	granite_accel_label_parent_class = g_type_class_peek_parent (klass);
#line 36 "../lib/Widgets/AccelLabel.vala"
	g_type_class_adjust_private_offset (klass, &GraniteAccelLabel_private_offset);
#line 36 "../lib/Widgets/AccelLabel.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_accel_label_get_property;
#line 36 "../lib/Widgets/AccelLabel.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_accel_label_set_property;
#line 36 "../lib/Widgets/AccelLabel.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_accel_label_constructor;
#line 36 "../lib/Widgets/AccelLabel.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_accel_label_finalize;
#line 673 "AccelLabel.c"
	/**
	     * The name of the {@link GLib.Action} used to retrieve action accelerators
	     */
#line 36 "../lib/Widgets/AccelLabel.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_ACCEL_LABEL_ACTION_NAME_PROPERTY, granite_accel_label_properties[GRANITE_ACCEL_LABEL_ACTION_NAME_PROPERTY] = g_param_spec_string ("action-name", "action-name", "action-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 679 "AccelLabel.c"
	/**
	     * A {@link Gtk.accelerator_parse} style accel string like “<Control>a” or “<Super>Right”
	     */
#line 36 "../lib/Widgets/AccelLabel.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_ACCEL_LABEL_ACCEL_STRING_PROPERTY, granite_accel_label_properties[GRANITE_ACCEL_LABEL_ACCEL_STRING_PROPERTY] = g_param_spec_string ("accel-string", "accel-string", "accel-string", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 685 "AccelLabel.c"
	/**
	     * The user-facing menu item label
	     */
#line 36 "../lib/Widgets/AccelLabel.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_ACCEL_LABEL_LABEL_PROPERTY, granite_accel_label_properties[GRANITE_ACCEL_LABEL_LABEL_PROPERTY] = g_param_spec_string ("label", "label", "label", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 691 "AccelLabel.c"
}

static void
granite_accel_label_instance_init (GraniteAccelLabel * self,
                                   gpointer klass)
{
#line 36 "../lib/Widgets/AccelLabel.vala"
	self->priv = granite_accel_label_get_instance_private (self);
#line 700 "AccelLabel.c"
}

static void
granite_accel_label_finalize (GObject * obj)
{
	GraniteAccelLabel * self;
#line 36 "../lib/Widgets/AccelLabel.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_ACCEL_LABEL, GraniteAccelLabel);
#line 40 "../lib/Widgets/AccelLabel.vala"
	_g_free0 (self->priv->_action_name);
#line 45 "../lib/Widgets/AccelLabel.vala"
	_g_free0 (self->priv->_accel_string);
#line 50 "../lib/Widgets/AccelLabel.vala"
	_g_free0 (self->priv->_label);
#line 36 "../lib/Widgets/AccelLabel.vala"
	G_OBJECT_CLASS (granite_accel_label_parent_class)->finalize (obj);
#line 717 "AccelLabel.c"
}

/**
 * AccelLabel is meant to be used as a {@link Gtk.MenuItem} child for displaying
 * a {@link GLib.Action}'s accelerator alongside the Menu Item label.
 *
 * The class itself is similar to it's Gtk equivalent {@link Gtk.AccelLabel}
 * but follows elementary OS design conventions. Specifically, this class uses
 * {@link Granite.accel_to_string} for accelerator string parsing.
 *
 * ''Example''<<BR>>
 * {{{
 *   var copy_menuitem = new Gtk.MenuItem ();
 *   copy_menuitem.set_action_name (ACTION_PREFIX + ACTION_COPY);
 *   copy_menuitem.add (new Granite.AccelLabel.from_action_name (_("Copy"), copy_menuitem.action_name));
 * }}}
 *
 */
static GType
granite_accel_label_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteAccelLabelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_accel_label_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteAccelLabel), 0, (GInstanceInitFunc) granite_accel_label_instance_init, NULL };
	GType granite_accel_label_type_id;
	granite_accel_label_type_id = g_type_register_static (gtk_grid_get_type (), "GraniteAccelLabel", &g_define_type_info, 0);
	GraniteAccelLabel_private_offset = g_type_add_instance_private (granite_accel_label_type_id, sizeof (GraniteAccelLabelPrivate));
	return granite_accel_label_type_id;
}

GType
granite_accel_label_get_type (void)
{
	static volatile gsize granite_accel_label_type_id__volatile = 0;
	if (g_once_init_enter (&granite_accel_label_type_id__volatile)) {
		GType granite_accel_label_type_id;
		granite_accel_label_type_id = granite_accel_label_get_type_once ();
		g_once_init_leave (&granite_accel_label_type_id__volatile, granite_accel_label_type_id);
	}
	return granite_accel_label_type_id__volatile;
}

static void
_vala_granite_accel_label_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	GraniteAccelLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_TYPE_ACCEL_LABEL, GraniteAccelLabel);
#line 36 "../lib/Widgets/AccelLabel.vala"
	switch (property_id) {
#line 36 "../lib/Widgets/AccelLabel.vala"
		case GRANITE_ACCEL_LABEL_ACTION_NAME_PROPERTY:
#line 36 "../lib/Widgets/AccelLabel.vala"
		g_value_set_string (value, granite_accel_label_get_action_name (self));
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 36 "../lib/Widgets/AccelLabel.vala"
		case GRANITE_ACCEL_LABEL_ACCEL_STRING_PROPERTY:
#line 36 "../lib/Widgets/AccelLabel.vala"
		g_value_set_string (value, granite_accel_label_get_accel_string (self));
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 36 "../lib/Widgets/AccelLabel.vala"
		case GRANITE_ACCEL_LABEL_LABEL_PROPERTY:
#line 36 "../lib/Widgets/AccelLabel.vala"
		g_value_set_string (value, granite_accel_label_get_label (self));
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 786 "AccelLabel.c"
		default:
#line 36 "../lib/Widgets/AccelLabel.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 792 "AccelLabel.c"
	}
}

static void
_vala_granite_accel_label_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	GraniteAccelLabel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_TYPE_ACCEL_LABEL, GraniteAccelLabel);
#line 36 "../lib/Widgets/AccelLabel.vala"
	switch (property_id) {
#line 36 "../lib/Widgets/AccelLabel.vala"
		case GRANITE_ACCEL_LABEL_ACTION_NAME_PROPERTY:
#line 36 "../lib/Widgets/AccelLabel.vala"
		granite_accel_label_set_action_name (self, g_value_get_string (value));
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 36 "../lib/Widgets/AccelLabel.vala"
		case GRANITE_ACCEL_LABEL_ACCEL_STRING_PROPERTY:
#line 36 "../lib/Widgets/AccelLabel.vala"
		granite_accel_label_set_accel_string (self, g_value_get_string (value));
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 36 "../lib/Widgets/AccelLabel.vala"
		case GRANITE_ACCEL_LABEL_LABEL_PROPERTY:
#line 36 "../lib/Widgets/AccelLabel.vala"
		granite_accel_label_set_label (self, g_value_get_string (value));
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 824 "AccelLabel.c"
		default:
#line 36 "../lib/Widgets/AccelLabel.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 36 "../lib/Widgets/AccelLabel.vala"
		break;
#line 830 "AccelLabel.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


/* Utils.c generated by valac 0.48.14, the Vala compiler
 * generated from Utils.vala, do not modify */

/*
 *  Copyright (C) 2012–2019 elementary, Inc.
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gdk/gdk.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>

typedef enum  {
	GRANITE_TEXT_STYLE_TITLE,
	GRANITE_TEXT_STYLE_H1,
	GRANITE_TEXT_STYLE_H2,
	GRANITE_TEXT_STYLE_H3
} GraniteTextStyle G_GNUC_DEPRECATED;

#define GRANITE_TYPE_TEXT_STYLE (granite_text_style_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))
typedef enum  {
	GRANITE_CLOSE_BUTTON_POSITION_LEFT,
	GRANITE_CLOSE_BUTTON_POSITION_RIGHT
} GraniteCloseButtonPosition;

#define GRANITE_TYPE_CLOSE_BUTTON_POSITION (granite_close_button_position_get_type ())
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_settings_schema_unref0(var) ((var == NULL) ? NULL : (var = (g_settings_schema_unref (var), NULL)))
#define _g_settings_schema_source_unref0(var) ((var == NULL) ? NULL : (var = (g_settings_schema_source_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

GType granite_text_style_get_type (void) G_GNUC_CONST;
gchar* granite_text_style_get_stylesheet (GraniteTextStyle self,
                                          gchar* * style_class);
#define GRANITE_STYLE_CLASS_TITLE_TEXT "title"
#define GRANITE_STYLE_CLASS_H1_TEXT "h1"
#define GRANITE_STYLE_CLASS_H2_TEXT "h2"
#define GRANITE_STYLE_CLASS_H3_TEXT "h3"
GType granite_close_button_position_get_type (void) G_GNUC_CONST;
gchar* granite_accel_to_string (const gchar* accel);
static void _vala_array_add4 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add5 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add6 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add7 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add8 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add9 (gchar** * array,
                       gint* length,
                       gint* size,
                       gchar* value);
static void _vala_array_add10 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add11 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add12 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add13 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add14 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add15 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add16 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add17 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add18 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add19 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add20 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add21 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add22 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add23 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
#define GRANITE_TOOLTIP_SECONDARY_TEXT_MARKUP "<span weight=\"600\" size=\"smaller\" alpha=\"75%\">%s</span>"
gchar* granite_markup_accel_tooltip (gchar** accels,
                                     gint accels_length1,
                                     const gchar* description);
static void _vala_array_add24 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static gboolean _vala_string_array_contains (gchar* * stack,
                                      gint stack_length,
                                      const gchar* needle);
static void _vala_array_add25 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
static void _vala_array_add26 (gchar** * array,
                        gint* length,
                        gint* size,
                        gchar* value);
G_GNUC_INTERNAL gdouble granite_contrast_ratio (GdkRGBA* bg_color,
                                GdkRGBA* fg_color);
G_GNUC_INTERNAL gdouble granite_get_luminance (GdkRGBA* color);
G_GNUC_INTERNAL gdouble granite_sanitize_color (gdouble color);
void granite_contrasting_foreground_color (GdkRGBA* bg_color,
                                           GdkRGBA* result);
GtkCssProvider* granite_widgets_utils_set_color_primary (GtkWidget* window,
                                                         GdkRGBA* color,
                                                         gint priority);
GtkCssProvider* granite_widgets_utils_set_theming_for_screen (GdkScreen* screen,
                                                              const gchar* stylesheet,
                                                              gint priority) G_GNUC_DEPRECATED;
GtkCssProvider* granite_widgets_utils_set_theming (GtkWidget* widget,
                                                   const gchar* stylesheet,
                                                   const gchar* class_name,
                                                   gint priority) G_GNUC_DEPRECATED;
GtkCssProvider* granite_widgets_utils_get_css_provider (const gchar* stylesheet) G_GNUC_DEPRECATED;
void granite_widgets_utils_apply_text_style_to_label (GraniteTextStyle text_style,
                                                      GtkLabel* label) G_GNUC_DEPRECATED;
#define GRANITE_WIDGETS_UTILS_WM_SETTINGS_PATH "org.gnome.desktop.wm.preferences"
#define GRANITE_WIDGETS_UTILS_PANTHEON_SETTINGS_PATH "org.pantheon.desktop.gala.appearance"
#define GRANITE_WIDGETS_UTILS_WM_BUTTON_LAYOUT_KEY "button-layout"
gboolean granite_widgets_utils_get_default_close_button_position (GraniteCloseButtonPosition* position) G_GNUC_DEPRECATED;
gchar* granite_widgets_utils_get_button_layout_schema (void) G_GNUC_DEPRECATED;
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

/**
     * Converts this to a CSS style string that could be used with e.g: {@link Granite.Widgets.Utils.set_theming}.
     *
     * @param style_class the style class used for this
     *
     * @return CSS of text style
     */
static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
#line 1570 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1571 "glib-2.0.vapi"
	result = self;
#line 1571 "glib-2.0.vapi"
	return result;
#line 216 "Utils.c"
}

gchar*
granite_text_style_get_stylesheet (GraniteTextStyle self,
                                   gchar* * style_class)
{
	gchar* _vala_style_class = NULL;
	gchar* result = NULL;
#line 50 "../lib/Widgets/Utils.vala"
	switch (self) {
#line 50 "../lib/Widgets/Utils.vala"
		case GRANITE_TEXT_STYLE_TITLE:
#line 229 "Utils.c"
		{
			gchar* _tmp0_;
			const gchar* _tmp1_;
			const gchar* _tmp2_;
			gchar* _tmp3_;
#line 52 "../lib/Widgets/Utils.vala"
			_tmp0_ = g_strdup (GRANITE_STYLE_CLASS_TITLE_TEXT);
#line 52 "../lib/Widgets/Utils.vala"
			_g_free0 (_vala_style_class);
#line 52 "../lib/Widgets/Utils.vala"
			_vala_style_class = _tmp0_;
#line 53 "../lib/Widgets/Utils.vala"
			_tmp1_ = _vala_style_class;
#line 53 "../lib/Widgets/Utils.vala"
			_tmp2_ = string_to_string (_tmp1_);
#line 53 "../lib/Widgets/Utils.vala"
			_tmp3_ = g_strconcat (".", _tmp2_, " { font: raleway 36; }", NULL);
#line 53 "../lib/Widgets/Utils.vala"
			result = _tmp3_;
#line 53 "../lib/Widgets/Utils.vala"
			if (style_class) {
#line 53 "../lib/Widgets/Utils.vala"
				*style_class = _vala_style_class;
#line 253 "Utils.c"
			} else {
#line 53 "../lib/Widgets/Utils.vala"
				_g_free0 (_vala_style_class);
#line 257 "Utils.c"
			}
#line 53 "../lib/Widgets/Utils.vala"
			return result;
#line 261 "Utils.c"
		}
#line 50 "../lib/Widgets/Utils.vala"
		case GRANITE_TEXT_STYLE_H1:
#line 265 "Utils.c"
		{
			gchar* _tmp4_;
			const gchar* _tmp5_;
			const gchar* _tmp6_;
			gchar* _tmp7_;
#line 55 "../lib/Widgets/Utils.vala"
			_tmp4_ = g_strdup (GRANITE_STYLE_CLASS_H1_TEXT);
#line 55 "../lib/Widgets/Utils.vala"
			_g_free0 (_vala_style_class);
#line 55 "../lib/Widgets/Utils.vala"
			_vala_style_class = _tmp4_;
#line 56 "../lib/Widgets/Utils.vala"
			_tmp5_ = _vala_style_class;
#line 56 "../lib/Widgets/Utils.vala"
			_tmp6_ = string_to_string (_tmp5_);
#line 56 "../lib/Widgets/Utils.vala"
			_tmp7_ = g_strconcat (".", _tmp6_, " { font: open sans bold 24; }", NULL);
#line 56 "../lib/Widgets/Utils.vala"
			result = _tmp7_;
#line 56 "../lib/Widgets/Utils.vala"
			if (style_class) {
#line 56 "../lib/Widgets/Utils.vala"
				*style_class = _vala_style_class;
#line 289 "Utils.c"
			} else {
#line 56 "../lib/Widgets/Utils.vala"
				_g_free0 (_vala_style_class);
#line 293 "Utils.c"
			}
#line 56 "../lib/Widgets/Utils.vala"
			return result;
#line 297 "Utils.c"
		}
#line 50 "../lib/Widgets/Utils.vala"
		case GRANITE_TEXT_STYLE_H2:
#line 301 "Utils.c"
		{
			gchar* _tmp8_;
			const gchar* _tmp9_;
			const gchar* _tmp10_;
			gchar* _tmp11_;
#line 58 "../lib/Widgets/Utils.vala"
			_tmp8_ = g_strdup (GRANITE_STYLE_CLASS_H2_TEXT);
#line 58 "../lib/Widgets/Utils.vala"
			_g_free0 (_vala_style_class);
#line 58 "../lib/Widgets/Utils.vala"
			_vala_style_class = _tmp8_;
#line 59 "../lib/Widgets/Utils.vala"
			_tmp9_ = _vala_style_class;
#line 59 "../lib/Widgets/Utils.vala"
			_tmp10_ = string_to_string (_tmp9_);
#line 59 "../lib/Widgets/Utils.vala"
			_tmp11_ = g_strconcat (".", _tmp10_, " { font: open sans light 18; }", NULL);
#line 59 "../lib/Widgets/Utils.vala"
			result = _tmp11_;
#line 59 "../lib/Widgets/Utils.vala"
			if (style_class) {
#line 59 "../lib/Widgets/Utils.vala"
				*style_class = _vala_style_class;
#line 325 "Utils.c"
			} else {
#line 59 "../lib/Widgets/Utils.vala"
				_g_free0 (_vala_style_class);
#line 329 "Utils.c"
			}
#line 59 "../lib/Widgets/Utils.vala"
			return result;
#line 333 "Utils.c"
		}
#line 50 "../lib/Widgets/Utils.vala"
		case GRANITE_TEXT_STYLE_H3:
#line 337 "Utils.c"
		{
			gchar* _tmp12_;
			const gchar* _tmp13_;
			const gchar* _tmp14_;
			gchar* _tmp15_;
#line 61 "../lib/Widgets/Utils.vala"
			_tmp12_ = g_strdup (GRANITE_STYLE_CLASS_H3_TEXT);
#line 61 "../lib/Widgets/Utils.vala"
			_g_free0 (_vala_style_class);
#line 61 "../lib/Widgets/Utils.vala"
			_vala_style_class = _tmp12_;
#line 62 "../lib/Widgets/Utils.vala"
			_tmp13_ = _vala_style_class;
#line 62 "../lib/Widgets/Utils.vala"
			_tmp14_ = string_to_string (_tmp13_);
#line 62 "../lib/Widgets/Utils.vala"
			_tmp15_ = g_strconcat (".", _tmp14_, " { font: open sans bold 12; }", NULL);
#line 62 "../lib/Widgets/Utils.vala"
			result = _tmp15_;
#line 62 "../lib/Widgets/Utils.vala"
			if (style_class) {
#line 62 "../lib/Widgets/Utils.vala"
				*style_class = _vala_style_class;
#line 361 "Utils.c"
			} else {
#line 62 "../lib/Widgets/Utils.vala"
				_g_free0 (_vala_style_class);
#line 365 "Utils.c"
			}
#line 62 "../lib/Widgets/Utils.vala"
			return result;
#line 369 "Utils.c"
		}
		default:
		{
#line 64 "../lib/Widgets/Utils.vala"
			g_assert_not_reached ();
#line 375 "Utils.c"
		}
	}
#line 49 "../lib/Widgets/Utils.vala"
	if (style_class) {
#line 49 "../lib/Widgets/Utils.vala"
		*style_class = _vala_style_class;
#line 382 "Utils.c"
	} else {
#line 49 "../lib/Widgets/Utils.vala"
		_g_free0 (_vala_style_class);
#line 386 "Utils.c"
	}
}

static GType
granite_text_style_get_type_once (void)
{
	static const GEnumValue values[] = {{GRANITE_TEXT_STYLE_TITLE, "GRANITE_TEXT_STYLE_TITLE", "title"}, {GRANITE_TEXT_STYLE_H1, "GRANITE_TEXT_STYLE_H1", "h1"}, {GRANITE_TEXT_STYLE_H2, "GRANITE_TEXT_STYLE_H2", "h2"}, {GRANITE_TEXT_STYLE_H3, "GRANITE_TEXT_STYLE_H3", "h3"}, {0, NULL, NULL}};
	GType granite_text_style_type_id;
	granite_text_style_type_id = g_enum_register_static ("GraniteTextStyle", values);
	return granite_text_style_type_id;
}

GType
granite_text_style_get_type (void)
{
	static volatile gsize granite_text_style_type_id__volatile = 0;
	if (g_once_init_enter (&granite_text_style_type_id__volatile)) {
		GType granite_text_style_type_id;
		granite_text_style_type_id = granite_text_style_get_type_once ();
		g_once_init_leave (&granite_text_style_type_id__volatile, granite_text_style_type_id);
	}
	return granite_text_style_type_id__volatile;
}

/**
 * An enum used to derermine where the window manager currently displays its close button on windows.
 * Used with {@link Granite.Widgets.Utils.get_default_close_button_position}.
 */
static GType
granite_close_button_position_get_type_once (void)
{
	static const GEnumValue values[] = {{GRANITE_CLOSE_BUTTON_POSITION_LEFT, "GRANITE_CLOSE_BUTTON_POSITION_LEFT", "left"}, {GRANITE_CLOSE_BUTTON_POSITION_RIGHT, "GRANITE_CLOSE_BUTTON_POSITION_RIGHT", "right"}, {0, NULL, NULL}};
	GType granite_close_button_position_type_id;
	granite_close_button_position_type_id = g_enum_register_static ("GraniteCloseButtonPosition", values);
	return granite_close_button_position_type_id;
}

GType
granite_close_button_position_get_type (void)
{
	static volatile gsize granite_close_button_position_type_id__volatile = 0;
	if (g_once_init_enter (&granite_close_button_position_type_id__volatile)) {
		GType granite_close_button_position_type_id;
		granite_close_button_position_type_id = granite_close_button_position_get_type_once ();
		g_once_init_leave (&granite_close_button_position_type_id__volatile, granite_close_button_position_type_id);
	}
	return granite_close_button_position_type_id__volatile;
}

/**
 * Converts a {@link Gtk.accelerator_parse} style accel string to a human-readable string.
 *
 * @param accel an accelerator label like “<Control>a” or “<Super>Right”
 *
 * @return a human-readable string like "Ctrl + A" or "⌘ + →"
 */
static void
_vala_array_add4 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 98 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 98 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 98 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 455 "Utils.c"
	}
#line 98 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 98 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 461 "Utils.c"
}

static void
_vala_array_add5 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 102 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 102 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 102 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 476 "Utils.c"
	}
#line 102 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 102 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 482 "Utils.c"
}

static void
_vala_array_add6 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 106 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 106 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 106 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 497 "Utils.c"
	}
#line 106 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 106 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 503 "Utils.c"
}

static void
_vala_array_add7 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 110 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 110 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 110 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 518 "Utils.c"
	}
#line 110 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 110 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 524 "Utils.c"
}

static void
_vala_array_add8 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 115 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 115 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 115 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 539 "Utils.c"
	}
#line 115 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 115 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 545 "Utils.c"
}

static void
_vala_array_add9 (gchar** * array,
                  gint* length,
                  gint* size,
                  gchar* value)
{
#line 118 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 118 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 118 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 560 "Utils.c"
	}
#line 118 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 118 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 566 "Utils.c"
}

static void
_vala_array_add10 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 121 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 121 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 121 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 581 "Utils.c"
	}
#line 121 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 121 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 587 "Utils.c"
}

static void
_vala_array_add11 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 124 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 124 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 124 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 602 "Utils.c"
	}
#line 124 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 124 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 608 "Utils.c"
}

static void
_vala_array_add12 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 128 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 128 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 128 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 623 "Utils.c"
	}
#line 128 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 128 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 629 "Utils.c"
}

static void
_vala_array_add13 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 132 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 132 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 132 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 644 "Utils.c"
	}
#line 132 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 132 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 650 "Utils.c"
}

static void
_vala_array_add14 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 135 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 135 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 135 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 665 "Utils.c"
	}
#line 135 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 135 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 671 "Utils.c"
}

static void
_vala_array_add15 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 139 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 139 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 139 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 686 "Utils.c"
	}
#line 139 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 139 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 692 "Utils.c"
}

static void
_vala_array_add16 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 143 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 143 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 143 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 707 "Utils.c"
	}
#line 143 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 143 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 713 "Utils.c"
}

static void
_vala_array_add17 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 148 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 148 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 148 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 728 "Utils.c"
	}
#line 148 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 148 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 734 "Utils.c"
}

static void
_vala_array_add18 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 153 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 153 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 153 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 749 "Utils.c"
	}
#line 153 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 153 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 755 "Utils.c"
}

static void
_vala_array_add19 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 158 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 158 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 158 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 770 "Utils.c"
	}
#line 158 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 158 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 776 "Utils.c"
}

static void
_vala_array_add20 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 161 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 161 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 161 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 791 "Utils.c"
	}
#line 161 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 161 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 797 "Utils.c"
}

static void
_vala_array_add21 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 165 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 165 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 165 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 812 "Utils.c"
	}
#line 165 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 165 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 818 "Utils.c"
}

static void
_vala_array_add22 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 169 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 169 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 169 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 833 "Utils.c"
	}
#line 169 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 169 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 839 "Utils.c"
}

static void
_vala_array_add23 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 172 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 172 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 172 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 854 "Utils.c"
	}
#line 172 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 172 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 860 "Utils.c"
}

static gchar*
_vala_g_strjoinv (const gchar* separator,
                  gchar** str_array,
                  gint str_array_length1)
{
	gboolean _tmp0_ = FALSE;
	gchar* result = NULL;
#line 1200 "glib-2.0.vapi"
	if (separator == NULL) {
#line 1201 "glib-2.0.vapi"
		separator = "";
#line 874 "Utils.c"
	}
#line 1203 "glib-2.0.vapi"
	if (str_array != NULL) {
#line 878 "Utils.c"
		gboolean _tmp1_ = FALSE;
#line 1203 "glib-2.0.vapi"
		if (str_array_length1 > 0) {
#line 1203 "glib-2.0.vapi"
			_tmp1_ = TRUE;
#line 884 "Utils.c"
		} else {
			gboolean _tmp2_ = FALSE;
#line 1203 "glib-2.0.vapi"
			if (str_array_length1 == -1) {
#line 889 "Utils.c"
				const gchar* _tmp3_;
#line 1203 "glib-2.0.vapi"
				_tmp3_ = str_array[0];
#line 1203 "glib-2.0.vapi"
				_tmp2_ = _tmp3_ != NULL;
#line 895 "Utils.c"
			} else {
#line 1203 "glib-2.0.vapi"
				_tmp2_ = FALSE;
#line 899 "Utils.c"
			}
#line 1203 "glib-2.0.vapi"
			_tmp1_ = _tmp2_;
#line 903 "Utils.c"
		}
#line 1203 "glib-2.0.vapi"
		_tmp0_ = _tmp1_;
#line 907 "Utils.c"
	} else {
#line 1203 "glib-2.0.vapi"
		_tmp0_ = FALSE;
#line 911 "Utils.c"
	}
#line 1203 "glib-2.0.vapi"
	if (_tmp0_) {
#line 915 "Utils.c"
		gint i = 0;
		gsize len = 0UL;
		gint _tmp16_;
		gint _tmp17_;
		const gchar* res = NULL;
		void* _tmp18_;
		void* ptr = NULL;
		const gchar* _tmp19_;
		const gchar* _tmp20_;
		void* _tmp21_;
		const gchar* _tmp31_;
#line 1205 "glib-2.0.vapi"
		len = (gsize) 1;
#line 929 "Utils.c"
		{
			gboolean _tmp4_ = FALSE;
#line 1206 "glib-2.0.vapi"
			i = 0;
#line 1206 "glib-2.0.vapi"
			_tmp4_ = TRUE;
#line 1206 "glib-2.0.vapi"
			while (TRUE) {
#line 938 "Utils.c"
				gboolean _tmp6_ = FALSE;
				gboolean _tmp7_ = FALSE;
				gint _tmp10_ = 0;
				const gchar* _tmp11_;
#line 1206 "glib-2.0.vapi"
				if (!_tmp4_) {
#line 945 "Utils.c"
					gint _tmp5_;
#line 1206 "glib-2.0.vapi"
					_tmp5_ = i;
#line 1206 "glib-2.0.vapi"
					i = _tmp5_ + 1;
#line 951 "Utils.c"
				}
#line 1206 "glib-2.0.vapi"
				_tmp4_ = FALSE;
#line 1206 "glib-2.0.vapi"
				if (str_array_length1 != -1) {
#line 1206 "glib-2.0.vapi"
					_tmp7_ = i < str_array_length1;
#line 959 "Utils.c"
				} else {
#line 1206 "glib-2.0.vapi"
					_tmp7_ = FALSE;
#line 963 "Utils.c"
				}
#line 1206 "glib-2.0.vapi"
				if (_tmp7_) {
#line 1206 "glib-2.0.vapi"
					_tmp6_ = TRUE;
#line 969 "Utils.c"
				} else {
					gboolean _tmp8_ = FALSE;
#line 1206 "glib-2.0.vapi"
					if (str_array_length1 == -1) {
#line 974 "Utils.c"
						const gchar* _tmp9_;
#line 1206 "glib-2.0.vapi"
						_tmp9_ = str_array[i];
#line 1206 "glib-2.0.vapi"
						_tmp8_ = _tmp9_ != NULL;
#line 980 "Utils.c"
					} else {
#line 1206 "glib-2.0.vapi"
						_tmp8_ = FALSE;
#line 984 "Utils.c"
					}
#line 1206 "glib-2.0.vapi"
					_tmp6_ = _tmp8_;
#line 988 "Utils.c"
				}
#line 1206 "glib-2.0.vapi"
				if (!_tmp6_) {
#line 1206 "glib-2.0.vapi"
					break;
#line 994 "Utils.c"
				}
#line 1207 "glib-2.0.vapi"
				_tmp11_ = str_array[i];
#line 1207 "glib-2.0.vapi"
				if (_tmp11_ != NULL) {
#line 1000 "Utils.c"
					const gchar* _tmp12_;
					gint _tmp13_;
					gint _tmp14_;
#line 1207 "glib-2.0.vapi"
					_tmp12_ = str_array[i];
#line 1207 "glib-2.0.vapi"
					_tmp13_ = strlen ((const gchar*) _tmp12_);
#line 1207 "glib-2.0.vapi"
					_tmp14_ = _tmp13_;
#line 1207 "glib-2.0.vapi"
					_tmp10_ = _tmp14_;
#line 1012 "Utils.c"
				} else {
#line 1207 "glib-2.0.vapi"
					_tmp10_ = 0;
#line 1016 "Utils.c"
				}
#line 1207 "glib-2.0.vapi"
				len += (gsize) _tmp10_;
#line 1020 "Utils.c"
			}
		}
#line 1209 "glib-2.0.vapi"
		if (i == 0) {
#line 1025 "Utils.c"
			gchar* _tmp15_;
#line 1210 "glib-2.0.vapi"
			_tmp15_ = g_strdup ("");
#line 1210 "glib-2.0.vapi"
			result = _tmp15_;
#line 1210 "glib-2.0.vapi"
			return result;
#line 1033 "Utils.c"
		}
#line 1212 "glib-2.0.vapi"
		str_array_length1 = i;
#line 1213 "glib-2.0.vapi"
		_tmp16_ = strlen ((const gchar*) separator);
#line 1213 "glib-2.0.vapi"
		_tmp17_ = _tmp16_;
#line 1213 "glib-2.0.vapi"
		len += (gsize) (_tmp17_ * (i - 1));
#line 1215 "glib-2.0.vapi"
		_tmp18_ = g_malloc (len);
#line 1215 "glib-2.0.vapi"
		res = _tmp18_;
#line 1216 "glib-2.0.vapi"
		_tmp19_ = res;
#line 1216 "glib-2.0.vapi"
		_tmp20_ = str_array[0];
#line 1216 "glib-2.0.vapi"
		_tmp21_ = g_stpcpy ((void*) _tmp19_, (const gchar*) _tmp20_);
#line 1216 "glib-2.0.vapi"
		ptr = _tmp21_;
#line 1055 "Utils.c"
		{
			gboolean _tmp22_ = FALSE;
#line 1217 "glib-2.0.vapi"
			i = 1;
#line 1217 "glib-2.0.vapi"
			_tmp22_ = TRUE;
#line 1217 "glib-2.0.vapi"
			while (TRUE) {
#line 1064 "Utils.c"
				void* _tmp24_;
				void* _tmp25_;
				const gchar* _tmp26_ = NULL;
				const gchar* _tmp27_;
				void* _tmp29_;
				void* _tmp30_;
#line 1217 "glib-2.0.vapi"
				if (!_tmp22_) {
#line 1073 "Utils.c"
					gint _tmp23_;
#line 1217 "glib-2.0.vapi"
					_tmp23_ = i;
#line 1217 "glib-2.0.vapi"
					i = _tmp23_ + 1;
#line 1079 "Utils.c"
				}
#line 1217 "glib-2.0.vapi"
				_tmp22_ = FALSE;
#line 1217 "glib-2.0.vapi"
				if (!(i < str_array_length1)) {
#line 1217 "glib-2.0.vapi"
					break;
#line 1087 "Utils.c"
				}
#line 1218 "glib-2.0.vapi"
				_tmp24_ = ptr;
#line 1218 "glib-2.0.vapi"
				_tmp25_ = g_stpcpy (_tmp24_, (const gchar*) separator);
#line 1218 "glib-2.0.vapi"
				ptr = _tmp25_;
#line 1219 "glib-2.0.vapi"
				_tmp27_ = str_array[i];
#line 1219 "glib-2.0.vapi"
				if (_tmp27_ != NULL) {
#line 1099 "Utils.c"
					const gchar* _tmp28_;
#line 1219 "glib-2.0.vapi"
					_tmp28_ = str_array[i];
#line 1219 "glib-2.0.vapi"
					_tmp26_ = (const gchar*) _tmp28_;
#line 1105 "Utils.c"
				} else {
#line 1219 "glib-2.0.vapi"
					_tmp26_ = "";
#line 1109 "Utils.c"
				}
#line 1219 "glib-2.0.vapi"
				_tmp29_ = ptr;
#line 1219 "glib-2.0.vapi"
				_tmp30_ = g_stpcpy (_tmp29_, _tmp26_);
#line 1219 "glib-2.0.vapi"
				ptr = _tmp30_;
#line 1117 "Utils.c"
			}
		}
#line 1222 "glib-2.0.vapi"
		_tmp31_ = res;
#line 1222 "glib-2.0.vapi"
		res = NULL;
#line 1222 "glib-2.0.vapi"
		result = (gchar*) _tmp31_;
#line 1222 "glib-2.0.vapi"
		return result;
#line 1128 "Utils.c"
	} else {
		gchar* _tmp32_;
#line 1224 "glib-2.0.vapi"
		_tmp32_ = g_strdup ("");
#line 1224 "glib-2.0.vapi"
		result = _tmp32_;
#line 1224 "glib-2.0.vapi"
		return result;
#line 1137 "Utils.c"
	}
}

gchar*
granite_accel_to_string (const gchar* accel)
{
	guint accel_key = 0U;
	GdkModifierType accel_mods = 0U;
	guint _tmp1_ = 0U;
	GdkModifierType _tmp2_ = 0U;
	gchar** arr = NULL;
	gchar** _tmp3_;
	gint arr_length1;
	gint _arr_size_;
	GdkModifierType _tmp4_;
	GdkModifierType _tmp6_;
	GdkModifierType _tmp8_;
	GdkModifierType _tmp10_;
	gchar** _tmp28_;
	gint _tmp28__length1;
	gchar* _tmp29_;
	gchar* result = NULL;
#line 88 "../lib/Widgets/Utils.vala"
	if (accel == NULL) {
#line 1162 "Utils.c"
		gchar* _tmp0_;
#line 89 "../lib/Widgets/Utils.vala"
		_tmp0_ = g_strdup ("");
#line 89 "../lib/Widgets/Utils.vala"
		result = _tmp0_;
#line 89 "../lib/Widgets/Utils.vala"
		return result;
#line 1170 "Utils.c"
	}
#line 94 "../lib/Widgets/Utils.vala"
	gtk_accelerator_parse (accel, &_tmp1_, &_tmp2_);
#line 94 "../lib/Widgets/Utils.vala"
	accel_key = _tmp1_;
#line 94 "../lib/Widgets/Utils.vala"
	accel_mods = _tmp2_;
#line 96 "../lib/Widgets/Utils.vala"
	_tmp3_ = g_new0 (gchar*, 0 + 1);
#line 96 "../lib/Widgets/Utils.vala"
	arr = _tmp3_;
#line 96 "../lib/Widgets/Utils.vala"
	arr_length1 = 0;
#line 96 "../lib/Widgets/Utils.vala"
	_arr_size_ = arr_length1;
#line 97 "../lib/Widgets/Utils.vala"
	_tmp4_ = accel_mods;
#line 97 "../lib/Widgets/Utils.vala"
	if ((_tmp4_ & GDK_SUPER_MASK) == GDK_SUPER_MASK) {
#line 1190 "Utils.c"
		gchar* _tmp5_;
#line 98 "../lib/Widgets/Utils.vala"
		_tmp5_ = g_strdup ("⌘");
#line 98 "../lib/Widgets/Utils.vala"
		_vala_array_add4 (&arr, &arr_length1, &_arr_size_, _tmp5_);
#line 1196 "Utils.c"
	}
#line 101 "../lib/Widgets/Utils.vala"
	_tmp6_ = accel_mods;
#line 101 "../lib/Widgets/Utils.vala"
	if ((_tmp6_ & GDK_SHIFT_MASK) == GDK_SHIFT_MASK) {
#line 1202 "Utils.c"
		gchar* _tmp7_;
#line 102 "../lib/Widgets/Utils.vala"
		_tmp7_ = g_strdup (_ ("Shift"));
#line 102 "../lib/Widgets/Utils.vala"
		_vala_array_add5 (&arr, &arr_length1, &_arr_size_, _tmp7_);
#line 1208 "Utils.c"
	}
#line 105 "../lib/Widgets/Utils.vala"
	_tmp8_ = accel_mods;
#line 105 "../lib/Widgets/Utils.vala"
	if ((_tmp8_ & GDK_CONTROL_MASK) == GDK_CONTROL_MASK) {
#line 1214 "Utils.c"
		gchar* _tmp9_;
#line 106 "../lib/Widgets/Utils.vala"
		_tmp9_ = g_strdup (_ ("Ctrl"));
#line 106 "../lib/Widgets/Utils.vala"
		_vala_array_add6 (&arr, &arr_length1, &_arr_size_, _tmp9_);
#line 1220 "Utils.c"
	}
#line 109 "../lib/Widgets/Utils.vala"
	_tmp10_ = accel_mods;
#line 109 "../lib/Widgets/Utils.vala"
	if ((_tmp10_ & GDK_MOD1_MASK) == GDK_MOD1_MASK) {
#line 1226 "Utils.c"
		gchar* _tmp11_;
#line 110 "../lib/Widgets/Utils.vala"
		_tmp11_ = g_strdup (_ ("Alt"));
#line 110 "../lib/Widgets/Utils.vala"
		_vala_array_add7 (&arr, &arr_length1, &_arr_size_, _tmp11_);
#line 1232 "Utils.c"
	}
#line 113 "../lib/Widgets/Utils.vala"
	switch (accel_key) {
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Up:
#line 1238 "Utils.c"
		{
			gchar* _tmp12_;
#line 115 "../lib/Widgets/Utils.vala"
			_tmp12_ = g_strdup ("↑");
#line 115 "../lib/Widgets/Utils.vala"
			_vala_array_add8 (&arr, &arr_length1, &_arr_size_, _tmp12_);
#line 116 "../lib/Widgets/Utils.vala"
			break;
#line 1247 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Down:
#line 1251 "Utils.c"
		{
			gchar* _tmp13_;
#line 118 "../lib/Widgets/Utils.vala"
			_tmp13_ = g_strdup ("↓");
#line 118 "../lib/Widgets/Utils.vala"
			_vala_array_add9 (&arr, &arr_length1, &_arr_size_, _tmp13_);
#line 119 "../lib/Widgets/Utils.vala"
			break;
#line 1260 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Left:
#line 1264 "Utils.c"
		{
			gchar* _tmp14_;
#line 121 "../lib/Widgets/Utils.vala"
			_tmp14_ = g_strdup ("←");
#line 121 "../lib/Widgets/Utils.vala"
			_vala_array_add10 (&arr, &arr_length1, &_arr_size_, _tmp14_);
#line 122 "../lib/Widgets/Utils.vala"
			break;
#line 1273 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Right:
#line 1277 "Utils.c"
		{
			gchar* _tmp15_;
#line 124 "../lib/Widgets/Utils.vala"
			_tmp15_ = g_strdup ("→");
#line 124 "../lib/Widgets/Utils.vala"
			_vala_array_add11 (&arr, &arr_length1, &_arr_size_, _tmp15_);
#line 125 "../lib/Widgets/Utils.vala"
			break;
#line 1286 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Alt_L:
#line 1290 "Utils.c"
		{
			gchar* _tmp16_;
#line 128 "../lib/Widgets/Utils.vala"
			_tmp16_ = g_strdup (_ ("Left Alt"));
#line 128 "../lib/Widgets/Utils.vala"
			_vala_array_add12 (&arr, &arr_length1, &_arr_size_, _tmp16_);
#line 129 "../lib/Widgets/Utils.vala"
			break;
#line 1299 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Alt_R:
#line 1303 "Utils.c"
		{
			gchar* _tmp17_;
#line 132 "../lib/Widgets/Utils.vala"
			_tmp17_ = g_strdup (_ ("Right Alt"));
#line 132 "../lib/Widgets/Utils.vala"
			_vala_array_add13 (&arr, &arr_length1, &_arr_size_, _tmp17_);
#line 133 "../lib/Widgets/Utils.vala"
			break;
#line 1312 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_backslash:
#line 1316 "Utils.c"
		{
			gchar* _tmp18_;
#line 135 "../lib/Widgets/Utils.vala"
			_tmp18_ = g_strdup ("\\");
#line 135 "../lib/Widgets/Utils.vala"
			_vala_array_add14 (&arr, &arr_length1, &_arr_size_, _tmp18_);
#line 136 "../lib/Widgets/Utils.vala"
			break;
#line 1325 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Control_R:
#line 1329 "Utils.c"
		{
			gchar* _tmp19_;
#line 139 "../lib/Widgets/Utils.vala"
			_tmp19_ = g_strdup (_ ("Right Ctrl"));
#line 139 "../lib/Widgets/Utils.vala"
			_vala_array_add15 (&arr, &arr_length1, &_arr_size_, _tmp19_);
#line 140 "../lib/Widgets/Utils.vala"
			break;
#line 1338 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Control_L:
#line 1342 "Utils.c"
		{
			gchar* _tmp20_;
#line 143 "../lib/Widgets/Utils.vala"
			_tmp20_ = g_strdup (_ ("Left Ctrl"));
#line 143 "../lib/Widgets/Utils.vala"
			_vala_array_add16 (&arr, &arr_length1, &_arr_size_, _tmp20_);
#line 144 "../lib/Widgets/Utils.vala"
			break;
#line 1351 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_minus:
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_KP_Subtract:
#line 1357 "Utils.c"
		{
			gchar* _tmp21_;
#line 148 "../lib/Widgets/Utils.vala"
			_tmp21_ = g_strdup (_ ("Minus"));
#line 148 "../lib/Widgets/Utils.vala"
			_vala_array_add17 (&arr, &arr_length1, &_arr_size_, _tmp21_);
#line 149 "../lib/Widgets/Utils.vala"
			break;
#line 1366 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_KP_Add:
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_plus:
#line 1372 "Utils.c"
		{
			gchar* _tmp22_;
#line 153 "../lib/Widgets/Utils.vala"
			_tmp22_ = g_strdup (_ ("Plus"));
#line 153 "../lib/Widgets/Utils.vala"
			_vala_array_add18 (&arr, &arr_length1, &_arr_size_, _tmp22_);
#line 154 "../lib/Widgets/Utils.vala"
			break;
#line 1381 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_KP_Equal:
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_equal:
#line 1387 "Utils.c"
		{
			gchar* _tmp23_;
#line 158 "../lib/Widgets/Utils.vala"
			_tmp23_ = g_strdup (_ ("Equals"));
#line 158 "../lib/Widgets/Utils.vala"
			_vala_array_add19 (&arr, &arr_length1, &_arr_size_, _tmp23_);
#line 159 "../lib/Widgets/Utils.vala"
			break;
#line 1396 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Return:
#line 1400 "Utils.c"
		{
			gchar* _tmp24_;
#line 161 "../lib/Widgets/Utils.vala"
			_tmp24_ = g_strdup (_ ("Enter"));
#line 161 "../lib/Widgets/Utils.vala"
			_vala_array_add20 (&arr, &arr_length1, &_arr_size_, _tmp24_);
#line 162 "../lib/Widgets/Utils.vala"
			break;
#line 1409 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Shift_L:
#line 1413 "Utils.c"
		{
			gchar* _tmp25_;
#line 165 "../lib/Widgets/Utils.vala"
			_tmp25_ = g_strdup (_ ("Left Shift"));
#line 165 "../lib/Widgets/Utils.vala"
			_vala_array_add21 (&arr, &arr_length1, &_arr_size_, _tmp25_);
#line 166 "../lib/Widgets/Utils.vala"
			break;
#line 1422 "Utils.c"
		}
#line 113 "../lib/Widgets/Utils.vala"
		case GDK_KEY_Shift_R:
#line 1426 "Utils.c"
		{
			gchar* _tmp26_;
#line 169 "../lib/Widgets/Utils.vala"
			_tmp26_ = g_strdup (_ ("Right Shift"));
#line 169 "../lib/Widgets/Utils.vala"
			_vala_array_add22 (&arr, &arr_length1, &_arr_size_, _tmp26_);
#line 170 "../lib/Widgets/Utils.vala"
			break;
#line 1435 "Utils.c"
		}
		default:
		{
			gchar* _tmp27_;
#line 172 "../lib/Widgets/Utils.vala"
			_tmp27_ = gtk_accelerator_get_label (accel_key, 0);
#line 172 "../lib/Widgets/Utils.vala"
			_vala_array_add23 (&arr, &arr_length1, &_arr_size_, _tmp27_);
#line 173 "../lib/Widgets/Utils.vala"
			break;
#line 1446 "Utils.c"
		}
	}
#line 176 "../lib/Widgets/Utils.vala"
	_tmp28_ = arr;
#line 176 "../lib/Widgets/Utils.vala"
	_tmp28__length1 = arr_length1;
#line 176 "../lib/Widgets/Utils.vala"
	_tmp29_ = _vala_g_strjoinv (" + ", _tmp28_, (gint) _tmp28__length1);
#line 176 "../lib/Widgets/Utils.vala"
	result = _tmp29_;
#line 176 "../lib/Widgets/Utils.vala"
	arr = (_vala_array_free (arr, arr_length1, (GDestroyNotify) g_free), NULL);
#line 176 "../lib/Widgets/Utils.vala"
	return result;
#line 1461 "Utils.c"
}

/**
 * Takes a description and an array of accels and returns {@link Pango} markup for use in a {@link Gtk.Tooltip}. This method uses {@link Granite.accel_to_string}.
 *
 * Example:
 *
 * Description
 * Shortcut 1, Shortcut 2
 *
 * @param a string array of accelerator labels like {"<Control>a", "<Super>Right"}
 *
 * @param description a standard tooltip text string
 *
 * @return {@link Pango} markup with the description label on one line and a list of human-readable accels on a new line
 */
static void
_vala_array_add24 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 201 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 201 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 201 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 1490 "Utils.c"
	}
#line 201 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 201 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 1496 "Utils.c"
}

static gboolean
_vala_string_array_contains (gchar* * stack,
                             gint stack_length,
                             const gchar* needle)
{
	gint i;
#line 213 "../lib/Widgets/Utils.vala"
	for (i = 0; i < stack_length; i++) {
#line 213 "../lib/Widgets/Utils.vala"
		if (g_strcmp0 (stack[i], needle) == 0) {
#line 213 "../lib/Widgets/Utils.vala"
			return TRUE;
#line 1511 "Utils.c"
		}
	}
#line 213 "../lib/Widgets/Utils.vala"
	return FALSE;
#line 1516 "Utils.c"
}

static void
_vala_array_add25 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 214 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 214 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 214 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 1531 "Utils.c"
	}
#line 214 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 214 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 1537 "Utils.c"
}

static void
_vala_array_add26 (gchar** * array,
                   gint* length,
                   gint* size,
                   gchar* value)
{
#line 224 "../lib/Widgets/Utils.vala"
	if ((*length) == (*size)) {
#line 224 "../lib/Widgets/Utils.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 224 "../lib/Widgets/Utils.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 1552 "Utils.c"
	}
#line 224 "../lib/Widgets/Utils.vala"
	(*array)[(*length)++] = value;
#line 224 "../lib/Widgets/Utils.vala"
	(*array)[*length] = NULL;
#line 1558 "Utils.c"
}

gchar*
granite_markup_accel_tooltip (gchar** accels,
                              gint accels_length1,
                              const gchar* description)
{
	gchar** parts = NULL;
	gchar** _tmp0_;
	gint parts_length1;
	gint _parts_size_;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp3_ = FALSE;
	gchar** _tmp21_;
	gint _tmp21__length1;
	gchar* _tmp22_;
	gchar* result = NULL;
#line 199 "../lib/Widgets/Utils.vala"
	_tmp0_ = g_new0 (gchar*, 0 + 1);
#line 199 "../lib/Widgets/Utils.vala"
	parts = _tmp0_;
#line 199 "../lib/Widgets/Utils.vala"
	parts_length1 = 0;
#line 199 "../lib/Widgets/Utils.vala"
	_parts_size_ = parts_length1;
#line 200 "../lib/Widgets/Utils.vala"
	if (description != NULL) {
#line 200 "../lib/Widgets/Utils.vala"
		_tmp1_ = g_strcmp0 (description, "") != 0;
#line 1588 "Utils.c"
	} else {
#line 200 "../lib/Widgets/Utils.vala"
		_tmp1_ = FALSE;
#line 1592 "Utils.c"
	}
#line 200 "../lib/Widgets/Utils.vala"
	if (_tmp1_) {
#line 1596 "Utils.c"
		gchar* _tmp2_;
#line 201 "../lib/Widgets/Utils.vala"
		_tmp2_ = g_strdup (description);
#line 201 "../lib/Widgets/Utils.vala"
		_vala_array_add24 (&parts, &parts_length1, &_parts_size_, _tmp2_);
#line 1602 "Utils.c"
	}
#line 204 "../lib/Widgets/Utils.vala"
	if (accels != NULL) {
#line 204 "../lib/Widgets/Utils.vala"
		_tmp3_ = accels_length1 > 0;
#line 1608 "Utils.c"
	} else {
#line 204 "../lib/Widgets/Utils.vala"
		_tmp3_ = FALSE;
#line 1612 "Utils.c"
	}
#line 204 "../lib/Widgets/Utils.vala"
	if (_tmp3_) {
#line 1616 "Utils.c"
		gchar** unique_accels = NULL;
		gchar** _tmp4_;
		gint unique_accels_length1;
		gint _unique_accels_size_;
		gchar** _tmp14_;
		gint _tmp14__length1;
#line 205 "../lib/Widgets/Utils.vala"
		_tmp4_ = g_new0 (gchar*, 0 + 1);
#line 205 "../lib/Widgets/Utils.vala"
		unique_accels = _tmp4_;
#line 205 "../lib/Widgets/Utils.vala"
		unique_accels_length1 = 0;
#line 205 "../lib/Widgets/Utils.vala"
		_unique_accels_size_ = unique_accels_length1;
#line 1631 "Utils.c"
		{
			gint i = 0;
#line 207 "../lib/Widgets/Utils.vala"
			i = 0;
#line 1636 "Utils.c"
			{
				gboolean _tmp5_ = FALSE;
#line 207 "../lib/Widgets/Utils.vala"
				_tmp5_ = TRUE;
#line 207 "../lib/Widgets/Utils.vala"
				while (TRUE) {
#line 1643 "Utils.c"
					const gchar* _tmp7_;
					gchar* accel_string = NULL;
					const gchar* _tmp8_;
					gchar* _tmp9_;
					const gchar* _tmp10_;
					gchar** _tmp11_;
					gint _tmp11__length1;
#line 207 "../lib/Widgets/Utils.vala"
					if (!_tmp5_) {
#line 1653 "Utils.c"
						gint _tmp6_;
#line 207 "../lib/Widgets/Utils.vala"
						_tmp6_ = i;
#line 207 "../lib/Widgets/Utils.vala"
						i = _tmp6_ + 1;
#line 1659 "Utils.c"
					}
#line 207 "../lib/Widgets/Utils.vala"
					_tmp5_ = FALSE;
#line 207 "../lib/Widgets/Utils.vala"
					if (!(i < accels_length1)) {
#line 207 "../lib/Widgets/Utils.vala"
						break;
#line 1667 "Utils.c"
					}
#line 208 "../lib/Widgets/Utils.vala"
					_tmp7_ = accels[i];
#line 208 "../lib/Widgets/Utils.vala"
					if (g_strcmp0 (_tmp7_, "") == 0) {
#line 209 "../lib/Widgets/Utils.vala"
						continue;
#line 1675 "Utils.c"
					}
#line 212 "../lib/Widgets/Utils.vala"
					_tmp8_ = accels[i];
#line 212 "../lib/Widgets/Utils.vala"
					_tmp9_ = granite_accel_to_string (_tmp8_);
#line 212 "../lib/Widgets/Utils.vala"
					accel_string = _tmp9_;
#line 213 "../lib/Widgets/Utils.vala"
					_tmp10_ = accel_string;
#line 213 "../lib/Widgets/Utils.vala"
					_tmp11_ = unique_accels;
#line 213 "../lib/Widgets/Utils.vala"
					_tmp11__length1 = unique_accels_length1;
#line 213 "../lib/Widgets/Utils.vala"
					if (!_vala_string_array_contains (_tmp11_, _tmp11__length1, _tmp10_)) {
#line 1691 "Utils.c"
						const gchar* _tmp12_;
						gchar* _tmp13_;
#line 214 "../lib/Widgets/Utils.vala"
						_tmp12_ = accel_string;
#line 214 "../lib/Widgets/Utils.vala"
						_tmp13_ = g_strdup (_tmp12_);
#line 214 "../lib/Widgets/Utils.vala"
						_vala_array_add25 (&unique_accels, &unique_accels_length1, &_unique_accels_size_, _tmp13_);
#line 1700 "Utils.c"
					}
#line 207 "../lib/Widgets/Utils.vala"
					_g_free0 (accel_string);
#line 1704 "Utils.c"
				}
			}
		}
#line 218 "../lib/Widgets/Utils.vala"
		_tmp14_ = unique_accels;
#line 218 "../lib/Widgets/Utils.vala"
		_tmp14__length1 = unique_accels_length1;
#line 218 "../lib/Widgets/Utils.vala"
		if (_tmp14__length1 > 0) {
#line 1714 "Utils.c"
			gchar* accel_label = NULL;
			gchar** _tmp15_;
			gint _tmp15__length1;
			gchar* _tmp16_;
			gchar* accel_markup = NULL;
			const gchar* _tmp17_;
			gchar* _tmp18_;
			const gchar* _tmp19_;
			gchar* _tmp20_;
#line 220 "../lib/Widgets/Utils.vala"
			_tmp15_ = unique_accels;
#line 220 "../lib/Widgets/Utils.vala"
			_tmp15__length1 = unique_accels_length1;
#line 220 "../lib/Widgets/Utils.vala"
			_tmp16_ = _vala_g_strjoinv (_ (", "), _tmp15_, (gint) _tmp15__length1);
#line 220 "../lib/Widgets/Utils.vala"
			accel_label = _tmp16_;
#line 222 "../lib/Widgets/Utils.vala"
			_tmp17_ = accel_label;
#line 222 "../lib/Widgets/Utils.vala"
			_tmp18_ = g_strdup_printf (GRANITE_TOOLTIP_SECONDARY_TEXT_MARKUP, _tmp17_);
#line 222 "../lib/Widgets/Utils.vala"
			accel_markup = _tmp18_;
#line 224 "../lib/Widgets/Utils.vala"
			_tmp19_ = accel_markup;
#line 224 "../lib/Widgets/Utils.vala"
			_tmp20_ = g_strdup (_tmp19_);
#line 224 "../lib/Widgets/Utils.vala"
			_vala_array_add26 (&parts, &parts_length1, &_parts_size_, _tmp20_);
#line 218 "../lib/Widgets/Utils.vala"
			_g_free0 (accel_markup);
#line 218 "../lib/Widgets/Utils.vala"
			_g_free0 (accel_label);
#line 1748 "Utils.c"
		}
#line 204 "../lib/Widgets/Utils.vala"
		unique_accels = (_vala_array_free (unique_accels, unique_accels_length1, (GDestroyNotify) g_free), NULL);
#line 1752 "Utils.c"
	}
#line 228 "../lib/Widgets/Utils.vala"
	_tmp21_ = parts;
#line 228 "../lib/Widgets/Utils.vala"
	_tmp21__length1 = parts_length1;
#line 228 "../lib/Widgets/Utils.vala"
	_tmp22_ = _vala_g_strjoinv ("\n", _tmp21_, (gint) _tmp21__length1);
#line 228 "../lib/Widgets/Utils.vala"
	result = _tmp22_;
#line 228 "../lib/Widgets/Utils.vala"
	parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 228 "../lib/Widgets/Utils.vala"
	return result;
#line 1766 "Utils.c"
}

G_GNUC_INTERNAL gdouble
granite_contrast_ratio (GdkRGBA* bg_color,
                        GdkRGBA* fg_color)
{
	gdouble bg_luminance = 0.0;
	GdkRGBA _tmp0_;
	gdouble fg_luminance = 0.0;
	GdkRGBA _tmp1_;
	gdouble result = 0.0;
#line 231 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (bg_color != NULL, 0.0);
#line 231 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (fg_color != NULL, 0.0);
#line 233 "../lib/Widgets/Utils.vala"
	_tmp0_ = *bg_color;
#line 233 "../lib/Widgets/Utils.vala"
	bg_luminance = granite_get_luminance (&_tmp0_);
#line 234 "../lib/Widgets/Utils.vala"
	_tmp1_ = *fg_color;
#line 234 "../lib/Widgets/Utils.vala"
	fg_luminance = granite_get_luminance (&_tmp1_);
#line 236 "../lib/Widgets/Utils.vala"
	if (bg_luminance > fg_luminance) {
#line 237 "../lib/Widgets/Utils.vala"
		result = (bg_luminance + 0.05) / (fg_luminance + 0.05);
#line 237 "../lib/Widgets/Utils.vala"
		return result;
#line 1796 "Utils.c"
	}
#line 240 "../lib/Widgets/Utils.vala"
	result = (fg_luminance + 0.05) / (bg_luminance + 0.05);
#line 240 "../lib/Widgets/Utils.vala"
	return result;
#line 1802 "Utils.c"
}

G_GNUC_INTERNAL gdouble
granite_get_luminance (GdkRGBA* color)
{
	gdouble red = 0.0;
	GdkRGBA _tmp0_;
	gdouble green = 0.0;
	GdkRGBA _tmp1_;
	gdouble blue = 0.0;
	GdkRGBA _tmp2_;
	gdouble result = 0.0;
#line 243 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (color != NULL, 0.0);
#line 245 "../lib/Widgets/Utils.vala"
	_tmp0_ = *color;
#line 245 "../lib/Widgets/Utils.vala"
	red = granite_sanitize_color (_tmp0_.red) * 0.2126;
#line 246 "../lib/Widgets/Utils.vala"
	_tmp1_ = *color;
#line 246 "../lib/Widgets/Utils.vala"
	green = granite_sanitize_color (_tmp1_.green) * 0.7152;
#line 247 "../lib/Widgets/Utils.vala"
	_tmp2_ = *color;
#line 247 "../lib/Widgets/Utils.vala"
	blue = granite_sanitize_color (_tmp2_.blue) * 0.0722;
#line 249 "../lib/Widgets/Utils.vala"
	result = (red + green) + blue;
#line 249 "../lib/Widgets/Utils.vala"
	return result;
#line 1833 "Utils.c"
}

G_GNUC_INTERNAL gdouble
granite_sanitize_color (gdouble color)
{
	gdouble result = 0.0;
#line 254 "../lib/Widgets/Utils.vala"
	if (color <= 0.03928) {
#line 255 "../lib/Widgets/Utils.vala"
		result = color / 12.92;
#line 255 "../lib/Widgets/Utils.vala"
		return result;
#line 1846 "Utils.c"
	}
#line 258 "../lib/Widgets/Utils.vala"
	result = pow ((color + 0.055) / 1.055, 2.4);
#line 258 "../lib/Widgets/Utils.vala"
	return result;
#line 1852 "Utils.c"
}

/**
 * Takes a {@link Gdk.RGBA} background color and returns a suitably-contrasting foreground color, i.e. for determining text color on a colored background. There is a slight bias toward returning white, as white generally looks better on a wider range of colored backgrounds than black.
 *
 * @param bg_color any {@link Gdk.RGBA} background color
 *
 * @return a contrasting {@link Gdk.RGBA} foreground color, i.e. white ({ 1.0, 1.0, 1.0, 1.0}) or black ({ 0.0, 0.0, 0.0, 1.0}).
 */
void
granite_contrasting_foreground_color (GdkRGBA* bg_color,
                                      GdkRGBA* result)
{
	GdkRGBA gdk_white = {0};
	GdkRGBA _tmp0_ = {0};
	GdkRGBA gdk_black = {0};
	GdkRGBA _tmp1_ = {0};
	gdouble contrast_with_white = 0.0;
	GdkRGBA _tmp2_;
	GdkRGBA _tmp3_;
	gdouble contrast_with_black = 0.0;
	GdkRGBA _tmp4_;
	GdkRGBA _tmp5_;
	GdkRGBA fg_color = {0};
	GdkRGBA _tmp6_;
#line 268 "../lib/Widgets/Utils.vala"
	g_return_if_fail (bg_color != NULL);
#line 269 "../lib/Widgets/Utils.vala"
	_tmp0_.red = 1.0;
#line 269 "../lib/Widgets/Utils.vala"
	_tmp0_.green = 1.0;
#line 269 "../lib/Widgets/Utils.vala"
	_tmp0_.blue = 1.0;
#line 269 "../lib/Widgets/Utils.vala"
	_tmp0_.alpha = 1.0;
#line 269 "../lib/Widgets/Utils.vala"
	gdk_white = _tmp0_;
#line 270 "../lib/Widgets/Utils.vala"
	_tmp1_.red = 0.0;
#line 270 "../lib/Widgets/Utils.vala"
	_tmp1_.green = 0.0;
#line 270 "../lib/Widgets/Utils.vala"
	_tmp1_.blue = 0.0;
#line 270 "../lib/Widgets/Utils.vala"
	_tmp1_.alpha = 1.0;
#line 270 "../lib/Widgets/Utils.vala"
	gdk_black = _tmp1_;
#line 272 "../lib/Widgets/Utils.vala"
	_tmp2_ = *bg_color;
#line 272 "../lib/Widgets/Utils.vala"
	_tmp3_ = gdk_white;
#line 272 "../lib/Widgets/Utils.vala"
	contrast_with_white = granite_contrast_ratio (&_tmp2_, &_tmp3_);
#line 276 "../lib/Widgets/Utils.vala"
	_tmp4_ = *bg_color;
#line 276 "../lib/Widgets/Utils.vala"
	_tmp5_ = gdk_black;
#line 276 "../lib/Widgets/Utils.vala"
	contrast_with_black = granite_contrast_ratio (&_tmp4_, &_tmp5_);
#line 282 "../lib/Widgets/Utils.vala"
	_tmp6_ = gdk_white;
#line 282 "../lib/Widgets/Utils.vala"
	fg_color = _tmp6_;
#line 286 "../lib/Widgets/Utils.vala"
	if (contrast_with_black > (contrast_with_white + 3)) {
#line 1918 "Utils.c"
		GdkRGBA _tmp7_;
#line 287 "../lib/Widgets/Utils.vala"
		_tmp7_ = gdk_black;
#line 287 "../lib/Widgets/Utils.vala"
		fg_color = _tmp7_;
#line 1924 "Utils.c"
	}
#line 290 "../lib/Widgets/Utils.vala"
	*result = fg_color;
#line 290 "../lib/Widgets/Utils.vala"
	return;
#line 1930 "Utils.c"
}

/**
     * Applies colorPrimary property to the window. The colorPrimary property currently changes
     * the color of the {@link Gtk.HeaderBar} and it's children so that the application window
     * can have a so-called "brand color".
     *
     * Note that this currently only works with the default stylesheet that elementary OS uses.
     *
     * @param window the widget to apply the color, for most cases the widget will be actually the {@link Gtk.Window} itself
     * @param color the color to apply
     * @param priority priorty of change, by default {@link Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION}
     *
     * @return the added {@link Gtk.CssProvider}, or null in case the parsing of
     *         stylesheet failed.
     */
GtkCssProvider*
granite_widgets_utils_set_color_primary (GtkWidget* window,
                                         GdkRGBA* color,
                                         gint priority)
{
	gchar* hex = NULL;
	gchar* _tmp0_;
	GdkScreen* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	GtkCssProvider* _tmp6_;
	GtkCssProvider* _tmp7_;
	GtkCssProvider* result = NULL;
#line 313 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (window != NULL, NULL);
#line 313 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (color != NULL, NULL);
#line 318 "../lib/Widgets/Utils.vala"
	_vala_assert (window != NULL, "window != null");
#line 320 "../lib/Widgets/Utils.vala"
	_tmp0_ = gdk_rgba_to_string (color);
#line 320 "../lib/Widgets/Utils.vala"
	hex = _tmp0_;
#line 321 "../lib/Widgets/Utils.vala"
	_tmp1_ = gtk_widget_get_screen (window);
#line 321 "../lib/Widgets/Utils.vala"
	_tmp2_ = string_to_string (hex);
#line 321 "../lib/Widgets/Utils.vala"
	_tmp3_ = string_to_string (hex);
#line 321 "../lib/Widgets/Utils.vala"
	_tmp4_ = g_strconcat ("@define-color color_primary ", _tmp2_, ";@define-color colorPrimary ", _tmp3_, ";", NULL);
#line 321 "../lib/Widgets/Utils.vala"
	_tmp5_ = _tmp4_;
#line 321 "../lib/Widgets/Utils.vala"
	_tmp6_ = granite_widgets_utils_set_theming_for_screen (_tmp1_, _tmp5_, priority);
#line 321 "../lib/Widgets/Utils.vala"
	_tmp7_ = _tmp6_;
#line 321 "../lib/Widgets/Utils.vala"
	_g_free0 (_tmp5_);
#line 321 "../lib/Widgets/Utils.vala"
	result = _tmp7_;
#line 321 "../lib/Widgets/Utils.vala"
	_g_free0 (hex);
#line 321 "../lib/Widgets/Utils.vala"
	return result;
#line 1994 "Utils.c"
}

/**
     * Applies the //stylesheet// to the widget.
     *
     * @param widget widget to apply style to
     * @param stylesheet CSS style to apply to the widget
     * @param class_name class name to add style to, pass null if no class should be applied to the //widget//
     * @param priority priorty of change, for most cases this will be {@link Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION}
     *
     * @return the {@link Gtk.CssProvider} that was applied to the //widget//.
     */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 339 "../lib/Widgets/Utils.vala"
	return self ? g_object_ref (self) : NULL;
#line 2012 "Utils.c"
}

static gchar*
string_strip (const gchar* self)
{
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	gchar* result = NULL;
#line 1359 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1360 "glib-2.0.vapi"
	_tmp0_ = g_strdup (self);
#line 1360 "glib-2.0.vapi"
	_result_ = _tmp0_;
#line 1361 "glib-2.0.vapi"
	g_strstrip (_result_);
#line 1362 "glib-2.0.vapi"
	result = _result_;
#line 1362 "glib-2.0.vapi"
	return result;
#line 2033 "Utils.c"
}

GtkCssProvider*
granite_widgets_utils_set_theming (GtkWidget* widget,
                                   const gchar* stylesheet,
                                   const gchar* class_name,
                                   gint priority)
{
	GtkCssProvider* css_provider = NULL;
	GtkCssProvider* _tmp0_;
	GtkStyleContext* context = NULL;
	GtkStyleContext* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkCssProvider* _tmp3_;
	gboolean _tmp6_ = FALSE;
	GtkCssProvider* result = NULL;
#line 335 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (widget != NULL, NULL);
#line 335 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (stylesheet != NULL, NULL);
#line 337 "../lib/Widgets/Utils.vala"
	_tmp0_ = granite_widgets_utils_get_css_provider (stylesheet);
#line 337 "../lib/Widgets/Utils.vala"
	css_provider = _tmp0_;
#line 339 "../lib/Widgets/Utils.vala"
	_tmp1_ = gtk_widget_get_style_context (widget);
#line 339 "../lib/Widgets/Utils.vala"
	_tmp2_ = _g_object_ref0 (_tmp1_);
#line 339 "../lib/Widgets/Utils.vala"
	context = _tmp2_;
#line 341 "../lib/Widgets/Utils.vala"
	_tmp3_ = css_provider;
#line 341 "../lib/Widgets/Utils.vala"
	if (_tmp3_ != NULL) {
#line 2068 "Utils.c"
		GtkStyleContext* _tmp4_;
		GtkCssProvider* _tmp5_;
#line 342 "../lib/Widgets/Utils.vala"
		_tmp4_ = context;
#line 342 "../lib/Widgets/Utils.vala"
		_tmp5_ = css_provider;
#line 342 "../lib/Widgets/Utils.vala"
		gtk_style_context_add_provider (_tmp4_, (GtkStyleProvider*) _tmp5_, (guint) priority);
#line 2077 "Utils.c"
	}
#line 344 "../lib/Widgets/Utils.vala"
	if (class_name != NULL) {
#line 2081 "Utils.c"
		gchar* _tmp7_;
		gchar* _tmp8_;
#line 344 "../lib/Widgets/Utils.vala"
		_tmp7_ = string_strip (class_name);
#line 344 "../lib/Widgets/Utils.vala"
		_tmp8_ = _tmp7_;
#line 344 "../lib/Widgets/Utils.vala"
		_tmp6_ = g_strcmp0 (_tmp8_, "") != 0;
#line 344 "../lib/Widgets/Utils.vala"
		_g_free0 (_tmp8_);
#line 2092 "Utils.c"
	} else {
#line 344 "../lib/Widgets/Utils.vala"
		_tmp6_ = FALSE;
#line 2096 "Utils.c"
	}
#line 344 "../lib/Widgets/Utils.vala"
	if (_tmp6_) {
#line 2100 "Utils.c"
		GtkStyleContext* _tmp9_;
#line 345 "../lib/Widgets/Utils.vala"
		_tmp9_ = context;
#line 345 "../lib/Widgets/Utils.vala"
		gtk_style_context_add_class (_tmp9_, class_name);
#line 2106 "Utils.c"
	}
#line 347 "../lib/Widgets/Utils.vala"
	result = css_provider;
#line 347 "../lib/Widgets/Utils.vala"
	_g_object_unref0 (context);
#line 347 "../lib/Widgets/Utils.vala"
	return result;
#line 2114 "Utils.c"
}

/**
     * Applies a stylesheet to the given //screen//. This will affect all the
     * widgets which are part of that screen.
     *
     * @param screen screen to apply style to, use {@link Gtk.Widget.get_screen} in order to get the screen that the widget is on
     * @param stylesheet CSS style to apply to screen
     * @param priority priorty of change, for most cases this will be {@link Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION}
     *
     * @return the {@link Gtk.CssProvider} that was applied to the //screen//.
     */
GtkCssProvider*
granite_widgets_utils_set_theming_for_screen (GdkScreen* screen,
                                              const gchar* stylesheet,
                                              gint priority)
{
	GtkCssProvider* css_provider = NULL;
	GtkCssProvider* _tmp0_;
	GtkCssProvider* _tmp1_;
	GtkCssProvider* result = NULL;
#line 361 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (screen != NULL, NULL);
#line 361 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (stylesheet != NULL, NULL);
#line 362 "../lib/Widgets/Utils.vala"
	_tmp0_ = granite_widgets_utils_get_css_provider (stylesheet);
#line 362 "../lib/Widgets/Utils.vala"
	css_provider = _tmp0_;
#line 364 "../lib/Widgets/Utils.vala"
	_tmp1_ = css_provider;
#line 364 "../lib/Widgets/Utils.vala"
	if (_tmp1_ != NULL) {
#line 2148 "Utils.c"
		GtkCssProvider* _tmp2_;
#line 365 "../lib/Widgets/Utils.vala"
		_tmp2_ = css_provider;
#line 365 "../lib/Widgets/Utils.vala"
		gtk_style_context_add_provider_for_screen (screen, (GtkStyleProvider*) _tmp2_, (guint) priority);
#line 2154 "Utils.c"
	}
#line 367 "../lib/Widgets/Utils.vala"
	result = css_provider;
#line 367 "../lib/Widgets/Utils.vala"
	return result;
#line 2160 "Utils.c"
}

/**
     * Constructs a new {@link Gtk.CssProvider} that will store the //stylesheet// data.
     * This function uses {@link Gtk.CssProvider.load_from_data} internally so if this method fails
     * then a warning will be thrown and null returned as a result.
     *
     * @param stylesheet CSS style to apply to the returned provider
     *
     * @return a new {@link Gtk.CssProvider}, or null in case the parsing of
     *         //stylesheet// failed.
     */
GtkCssProvider*
granite_widgets_utils_get_css_provider (const gchar* stylesheet)
{
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp0_;
	GError* _inner_error0_ = NULL;
	GtkCssProvider* result = NULL;
#line 381 "../lib/Widgets/Utils.vala"
	g_return_val_if_fail (stylesheet != NULL, NULL);
#line 382 "../lib/Widgets/Utils.vala"
	_tmp0_ = gtk_css_provider_new ();
#line 382 "../lib/Widgets/Utils.vala"
	provider = _tmp0_;
#line 2186 "Utils.c"
	{
		GtkCssProvider* _tmp1_;
#line 385 "../lib/Widgets/Utils.vala"
		_tmp1_ = provider;
#line 385 "../lib/Widgets/Utils.vala"
		gtk_css_provider_load_from_data (_tmp1_, stylesheet, (gssize) -1, &_inner_error0_);
#line 385 "../lib/Widgets/Utils.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 2195 "Utils.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp2_;
		const gchar* _tmp3_;
#line 384 "../lib/Widgets/Utils.vala"
		e = _inner_error0_;
#line 384 "../lib/Widgets/Utils.vala"
		_inner_error0_ = NULL;
#line 388 "../lib/Widgets/Utils.vala"
		_tmp2_ = e;
#line 388 "../lib/Widgets/Utils.vala"
		_tmp3_ = _tmp2_->message;
#line 388 "../lib/Widgets/Utils.vala"
		g_warning ("Utils.vala:388: Could not create CSS Provider: %s\nStylesheet:\n%s", _tmp3_, stylesheet);
#line 390 "../lib/Widgets/Utils.vala"
		result = NULL;
#line 390 "../lib/Widgets/Utils.vala"
		_g_error_free0 (e);
#line 390 "../lib/Widgets/Utils.vala"
		_g_object_unref0 (provider);
#line 390 "../lib/Widgets/Utils.vala"
		return result;
#line 2223 "Utils.c"
	}
	__finally0:
#line 384 "../lib/Widgets/Utils.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 384 "../lib/Widgets/Utils.vala"
		_g_object_unref0 (provider);
#line 384 "../lib/Widgets/Utils.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 384 "../lib/Widgets/Utils.vala"
		g_clear_error (&_inner_error0_);
#line 384 "../lib/Widgets/Utils.vala"
		return NULL;
#line 2236 "Utils.c"
	}
#line 393 "../lib/Widgets/Utils.vala"
	result = provider;
#line 393 "../lib/Widgets/Utils.vala"
	return result;
#line 2242 "Utils.c"
}

/**
     * This method applies given text style to given label
     *
     * @param text_style text style to apply
     * @param label label to apply style to
     */
void
granite_widgets_utils_apply_text_style_to_label (GraniteTextStyle text_style,
                                                 GtkLabel* label)
{
	GtkCssProvider* style_provider = NULL;
	GtkCssProvider* _tmp0_;
	GtkStyleContext* style_context = NULL;
	GtkStyleContext* _tmp1_;
	GtkStyleContext* _tmp2_;
	gchar* style_class = NULL;
	gchar* stylesheet = NULL;
	gchar* _tmp3_ = NULL;
	gchar* _tmp4_;
	GtkStyleContext* _tmp5_;
	const gchar* _tmp6_;
	GtkStyleContext* _tmp11_;
	GtkCssProvider* _tmp12_;
	GError* _inner_error0_ = NULL;
#line 403 "../lib/Widgets/Utils.vala"
	g_return_if_fail (label != NULL);
#line 404 "../lib/Widgets/Utils.vala"
	_tmp0_ = gtk_css_provider_new ();
#line 404 "../lib/Widgets/Utils.vala"
	style_provider = _tmp0_;
#line 405 "../lib/Widgets/Utils.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) label);
#line 405 "../lib/Widgets/Utils.vala"
	_tmp2_ = _g_object_ref0 (_tmp1_);
#line 405 "../lib/Widgets/Utils.vala"
	style_context = _tmp2_;
#line 408 "../lib/Widgets/Utils.vala"
	_tmp4_ = granite_text_style_get_stylesheet (text_style, &_tmp3_);
#line 408 "../lib/Widgets/Utils.vala"
	_g_free0 (style_class);
#line 408 "../lib/Widgets/Utils.vala"
	style_class = _tmp3_;
#line 408 "../lib/Widgets/Utils.vala"
	_g_free0 (stylesheet);
#line 408 "../lib/Widgets/Utils.vala"
	stylesheet = _tmp4_;
#line 409 "../lib/Widgets/Utils.vala"
	_tmp5_ = style_context;
#line 409 "../lib/Widgets/Utils.vala"
	_tmp6_ = style_class;
#line 409 "../lib/Widgets/Utils.vala"
	gtk_style_context_add_class (_tmp5_, _tmp6_);
#line 2297 "Utils.c"
	{
		GtkCssProvider* _tmp7_;
		const gchar* _tmp8_;
#line 412 "../lib/Widgets/Utils.vala"
		_tmp7_ = style_provider;
#line 412 "../lib/Widgets/Utils.vala"
		_tmp8_ = stylesheet;
#line 412 "../lib/Widgets/Utils.vala"
		gtk_css_provider_load_from_data (_tmp7_, _tmp8_, (gssize) -1, &_inner_error0_);
#line 412 "../lib/Widgets/Utils.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 2309 "Utils.c"
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* err = NULL;
		GError* _tmp9_;
		const gchar* _tmp10_;
#line 411 "../lib/Widgets/Utils.vala"
		err = _inner_error0_;
#line 411 "../lib/Widgets/Utils.vala"
		_inner_error0_ = NULL;
#line 414 "../lib/Widgets/Utils.vala"
		_tmp9_ = err;
#line 414 "../lib/Widgets/Utils.vala"
		_tmp10_ = _tmp9_->message;
#line 414 "../lib/Widgets/Utils.vala"
		g_warning ("Utils.vala:414: Couldn't apply style to label: %s", _tmp10_);
#line 415 "../lib/Widgets/Utils.vala"
		_g_error_free0 (err);
#line 415 "../lib/Widgets/Utils.vala"
		_g_free0 (stylesheet);
#line 415 "../lib/Widgets/Utils.vala"
		_g_free0 (style_class);
#line 415 "../lib/Widgets/Utils.vala"
		_g_object_unref0 (style_context);
#line 415 "../lib/Widgets/Utils.vala"
		_g_object_unref0 (style_provider);
#line 415 "../lib/Widgets/Utils.vala"
		return;
#line 2341 "Utils.c"
	}
	__finally0:
#line 411 "../lib/Widgets/Utils.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 411 "../lib/Widgets/Utils.vala"
		_g_free0 (stylesheet);
#line 411 "../lib/Widgets/Utils.vala"
		_g_free0 (style_class);
#line 411 "../lib/Widgets/Utils.vala"
		_g_object_unref0 (style_context);
#line 411 "../lib/Widgets/Utils.vala"
		_g_object_unref0 (style_provider);
#line 411 "../lib/Widgets/Utils.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 411 "../lib/Widgets/Utils.vala"
		g_clear_error (&_inner_error0_);
#line 411 "../lib/Widgets/Utils.vala"
		return;
#line 2360 "Utils.c"
	}
#line 418 "../lib/Widgets/Utils.vala"
	_tmp11_ = style_context;
#line 418 "../lib/Widgets/Utils.vala"
	_tmp12_ = style_provider;
#line 418 "../lib/Widgets/Utils.vala"
	gtk_style_context_add_provider (_tmp11_, (GtkStyleProvider*) _tmp12_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 403 "../lib/Widgets/Utils.vala"
	_g_free0 (stylesheet);
#line 403 "../lib/Widgets/Utils.vala"
	_g_free0 (style_class);
#line 403 "../lib/Widgets/Utils.vala"
	_g_object_unref0 (style_context);
#line 403 "../lib/Widgets/Utils.vala"
	_g_object_unref0 (style_provider);
#line 2376 "Utils.c"
}

/**
     * This method detects the close button position as configured for the window manager. If you
     * need to know when this key changed, it's best to listen on the schema returned by
     * {@link Granite.Widgets.Utils.get_button_layout_schema} for changes and then call this method again.
     *
     * @param position a {@link Granite.CloseButtonPosition} indicating where to best put the close button
     * @return if no schema was detected by {@link Granite.Widgets.Utils.get_button_layout_schema}
     *         or there was no close value in the button-layout string, false will be returned. The position
     *         will be LEFT in that case.
     */
static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gchar* _tmp0_;
	gboolean result = FALSE;
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1530 "glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1531 "glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1531 "glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1531 "glib-2.0.vapi"
	return result;
#line 2405 "Utils.c"
}

gboolean
granite_widgets_utils_get_default_close_button_position (GraniteCloseButtonPosition* position)
{
	GraniteCloseButtonPosition _vala_position = 0;
	gchar* schema = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* layout = NULL;
	const gchar* _tmp2_;
	GSettings* _tmp3_;
	GSettings* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar** parts = NULL;
	const gchar* _tmp7_;
	gchar** _tmp8_;
	gchar** _tmp9_;
	gint parts_length1;
	gint _parts_size_;
	gchar** _tmp10_;
	gint _tmp10__length1;
	gchar** _tmp11_;
	gint _tmp11__length1;
	const gchar* _tmp12_;
	gboolean result = FALSE;
#line 438 "../lib/Widgets/Utils.vala"
	_vala_position = GRANITE_CLOSE_BUTTON_POSITION_LEFT;
#line 440 "../lib/Widgets/Utils.vala"
	_tmp0_ = granite_widgets_utils_get_button_layout_schema ();
#line 440 "../lib/Widgets/Utils.vala"
	schema = _tmp0_;
#line 441 "../lib/Widgets/Utils.vala"
	_tmp1_ = schema;
#line 441 "../lib/Widgets/Utils.vala"
	if (_tmp1_ == NULL) {
#line 442 "../lib/Widgets/Utils.vala"
		result = FALSE;
#line 442 "../lib/Widgets/Utils.vala"
		_g_free0 (schema);
#line 442 "../lib/Widgets/Utils.vala"
		if (position) {
#line 442 "../lib/Widgets/Utils.vala"
			*position = _vala_position;
#line 2451 "Utils.c"
		}
#line 442 "../lib/Widgets/Utils.vala"
		return result;
#line 2455 "Utils.c"
	}
#line 445 "../lib/Widgets/Utils.vala"
	_tmp2_ = schema;
#line 445 "../lib/Widgets/Utils.vala"
	_tmp3_ = g_settings_new (_tmp2_);
#line 445 "../lib/Widgets/Utils.vala"
	_tmp4_ = _tmp3_;
#line 445 "../lib/Widgets/Utils.vala"
	_tmp5_ = g_settings_get_string (_tmp4_, GRANITE_WIDGETS_UTILS_WM_BUTTON_LAYOUT_KEY);
#line 445 "../lib/Widgets/Utils.vala"
	_tmp6_ = _tmp5_;
#line 445 "../lib/Widgets/Utils.vala"
	_g_object_unref0 (_tmp4_);
#line 445 "../lib/Widgets/Utils.vala"
	layout = _tmp6_;
#line 446 "../lib/Widgets/Utils.vala"
	_tmp7_ = layout;
#line 446 "../lib/Widgets/Utils.vala"
	_tmp9_ = _tmp8_ = g_strsplit (_tmp7_, ":", 0);
#line 446 "../lib/Widgets/Utils.vala"
	parts = _tmp9_;
#line 446 "../lib/Widgets/Utils.vala"
	parts_length1 = _vala_array_length (_tmp8_);
#line 446 "../lib/Widgets/Utils.vala"
	_parts_size_ = parts_length1;
#line 448 "../lib/Widgets/Utils.vala"
	_tmp10_ = parts;
#line 448 "../lib/Widgets/Utils.vala"
	_tmp10__length1 = parts_length1;
#line 448 "../lib/Widgets/Utils.vala"
	if (_tmp10__length1 < 2) {
#line 449 "../lib/Widgets/Utils.vala"
		result = FALSE;
#line 449 "../lib/Widgets/Utils.vala"
		parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 449 "../lib/Widgets/Utils.vala"
		_g_free0 (layout);
#line 449 "../lib/Widgets/Utils.vala"
		_g_free0 (schema);
#line 449 "../lib/Widgets/Utils.vala"
		if (position) {
#line 449 "../lib/Widgets/Utils.vala"
			*position = _vala_position;
#line 2499 "Utils.c"
		}
#line 449 "../lib/Widgets/Utils.vala"
		return result;
#line 2503 "Utils.c"
	}
#line 452 "../lib/Widgets/Utils.vala"
	_tmp11_ = parts;
#line 452 "../lib/Widgets/Utils.vala"
	_tmp11__length1 = parts_length1;
#line 452 "../lib/Widgets/Utils.vala"
	_tmp12_ = _tmp11_[0];
#line 452 "../lib/Widgets/Utils.vala"
	if (string_contains (_tmp12_, "close")) {
#line 453 "../lib/Widgets/Utils.vala"
		_vala_position = GRANITE_CLOSE_BUTTON_POSITION_LEFT;
#line 454 "../lib/Widgets/Utils.vala"
		result = TRUE;
#line 454 "../lib/Widgets/Utils.vala"
		parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 454 "../lib/Widgets/Utils.vala"
		_g_free0 (layout);
#line 454 "../lib/Widgets/Utils.vala"
		_g_free0 (schema);
#line 454 "../lib/Widgets/Utils.vala"
		if (position) {
#line 454 "../lib/Widgets/Utils.vala"
			*position = _vala_position;
#line 2527 "Utils.c"
		}
#line 454 "../lib/Widgets/Utils.vala"
		return result;
#line 2531 "Utils.c"
	} else {
		gchar** _tmp13_;
		gint _tmp13__length1;
		const gchar* _tmp14_;
#line 455 "../lib/Widgets/Utils.vala"
		_tmp13_ = parts;
#line 455 "../lib/Widgets/Utils.vala"
		_tmp13__length1 = parts_length1;
#line 455 "../lib/Widgets/Utils.vala"
		_tmp14_ = _tmp13_[1];
#line 455 "../lib/Widgets/Utils.vala"
		if (string_contains (_tmp14_, "close")) {
#line 456 "../lib/Widgets/Utils.vala"
			_vala_position = GRANITE_CLOSE_BUTTON_POSITION_RIGHT;
#line 457 "../lib/Widgets/Utils.vala"
			result = TRUE;
#line 457 "../lib/Widgets/Utils.vala"
			parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 457 "../lib/Widgets/Utils.vala"
			_g_free0 (layout);
#line 457 "../lib/Widgets/Utils.vala"
			_g_free0 (schema);
#line 457 "../lib/Widgets/Utils.vala"
			if (position) {
#line 457 "../lib/Widgets/Utils.vala"
				*position = _vala_position;
#line 2558 "Utils.c"
			}
#line 457 "../lib/Widgets/Utils.vala"
			return result;
#line 2562 "Utils.c"
		}
	}
#line 460 "../lib/Widgets/Utils.vala"
	result = FALSE;
#line 460 "../lib/Widgets/Utils.vala"
	parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 460 "../lib/Widgets/Utils.vala"
	_g_free0 (layout);
#line 460 "../lib/Widgets/Utils.vala"
	_g_free0 (schema);
#line 460 "../lib/Widgets/Utils.vala"
	if (position) {
#line 460 "../lib/Widgets/Utils.vala"
		*position = _vala_position;
#line 2577 "Utils.c"
	}
#line 460 "../lib/Widgets/Utils.vala"
	return result;
#line 2581 "Utils.c"
}

/**
     * This methods returns the schema used by {@link Granite.Widgets.Utils.get_default_close_button_position}
     * to determine the close button placement. It will first check for the pantheon/gala schema and then fallback
     * to the default gnome one. If neither is available, null is returned. Make sure to check for this case,
     * as otherwise your program may crash on startup.
     *
     * @return the schema name. If the layout could not be determined, a warning will be thrown and null will be returned
     */
static gpointer
_g_settings_schema_source_ref0 (gpointer self)
{
#line 473 "../lib/Widgets/Utils.vala"
	return self ? g_settings_schema_source_ref (self) : NULL;
#line 2597 "Utils.c"
}

gchar*
granite_widgets_utils_get_button_layout_schema (void)
{
	GSettingsSchemaSource* sss = NULL;
	GSettingsSchemaSource* _tmp0_;
	GSettingsSchemaSource* _tmp1_;
	GSettingsSchemaSource* _tmp2_;
	gchar* result = NULL;
#line 473 "../lib/Widgets/Utils.vala"
	_tmp0_ = g_settings_schema_source_get_default ();
#line 473 "../lib/Widgets/Utils.vala"
	_tmp1_ = _g_settings_schema_source_ref0 (_tmp0_);
#line 473 "../lib/Widgets/Utils.vala"
	sss = _tmp1_;
#line 475 "../lib/Widgets/Utils.vala"
	_tmp2_ = sss;
#line 475 "../lib/Widgets/Utils.vala"
	if (_tmp2_ != NULL) {
#line 2618 "Utils.c"
		GSettingsSchemaSource* _tmp3_;
		GSettingsSchema* _tmp4_;
		GSettingsSchema* _tmp5_;
		gboolean _tmp6_;
#line 476 "../lib/Widgets/Utils.vala"
		_tmp3_ = sss;
#line 476 "../lib/Widgets/Utils.vala"
		_tmp4_ = g_settings_schema_source_lookup (_tmp3_, GRANITE_WIDGETS_UTILS_PANTHEON_SETTINGS_PATH, TRUE);
#line 476 "../lib/Widgets/Utils.vala"
		_tmp5_ = _tmp4_;
#line 476 "../lib/Widgets/Utils.vala"
		_tmp6_ = _tmp5_ != NULL;
#line 476 "../lib/Widgets/Utils.vala"
		_g_settings_schema_unref0 (_tmp5_);
#line 476 "../lib/Widgets/Utils.vala"
		if (_tmp6_) {
#line 2635 "Utils.c"
			gchar* _tmp7_;
#line 477 "../lib/Widgets/Utils.vala"
			_tmp7_ = g_strdup (GRANITE_WIDGETS_UTILS_PANTHEON_SETTINGS_PATH);
#line 477 "../lib/Widgets/Utils.vala"
			result = _tmp7_;
#line 477 "../lib/Widgets/Utils.vala"
			_g_settings_schema_source_unref0 (sss);
#line 477 "../lib/Widgets/Utils.vala"
			return result;
#line 2645 "Utils.c"
		} else {
			GSettingsSchemaSource* _tmp8_;
			GSettingsSchema* _tmp9_;
			GSettingsSchema* _tmp10_;
			gboolean _tmp11_;
#line 478 "../lib/Widgets/Utils.vala"
			_tmp8_ = sss;
#line 478 "../lib/Widgets/Utils.vala"
			_tmp9_ = g_settings_schema_source_lookup (_tmp8_, GRANITE_WIDGETS_UTILS_WM_SETTINGS_PATH, TRUE);
#line 478 "../lib/Widgets/Utils.vala"
			_tmp10_ = _tmp9_;
#line 478 "../lib/Widgets/Utils.vala"
			_tmp11_ = _tmp10_ != NULL;
#line 478 "../lib/Widgets/Utils.vala"
			_g_settings_schema_unref0 (_tmp10_);
#line 478 "../lib/Widgets/Utils.vala"
			if (_tmp11_) {
#line 2663 "Utils.c"
				gchar* _tmp12_;
#line 479 "../lib/Widgets/Utils.vala"
				_tmp12_ = g_strdup (GRANITE_WIDGETS_UTILS_WM_SETTINGS_PATH);
#line 479 "../lib/Widgets/Utils.vala"
				result = _tmp12_;
#line 479 "../lib/Widgets/Utils.vala"
				_g_settings_schema_source_unref0 (sss);
#line 479 "../lib/Widgets/Utils.vala"
				return result;
#line 2673 "Utils.c"
			}
		}
	}
#line 483 "../lib/Widgets/Utils.vala"
	g_warning ("Utils.vala:483: No schema indicating the button-layout is installed.");
#line 484 "../lib/Widgets/Utils.vala"
	result = NULL;
#line 484 "../lib/Widgets/Utils.vala"
	_g_settings_schema_source_unref0 (sss);
#line 484 "../lib/Widgets/Utils.vala"
	return result;
#line 2685 "Utils.c"
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


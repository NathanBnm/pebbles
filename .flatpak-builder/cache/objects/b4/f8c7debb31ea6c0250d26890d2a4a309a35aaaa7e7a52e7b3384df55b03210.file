/* TestUtil.c generated by valac 0.48.14, the Vala compiler
 * generated from TestUtil.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 *              Saunak Biswas  <saunakbis97@gmail.com>
 */

#include <glib-object.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <granite.h>
#include <float.h>
#include <math.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_TEST_UTIL (pebbles_test_util_get_type ())
#define PEBBLES_TEST_UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_TEST_UTIL, PebblesTestUtil))
#define PEBBLES_TEST_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_TEST_UTIL, PebblesTestUtilClass))
#define PEBBLES_IS_TEST_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_TEST_UTIL))
#define PEBBLES_IS_TEST_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_TEST_UTIL))
#define PEBBLES_TEST_UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_TEST_UTIL, PebblesTestUtilClass))

typedef struct _PebblesTestUtil PebblesTestUtil;
typedef struct _PebblesTestUtilClass PebblesTestUtilClass;
typedef struct _PebblesTestUtilPrivate PebblesTestUtilPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef enum  {
	PEBBLES_GLOBAL_ANGLE_UNIT_DEG = 0,
	PEBBLES_GLOBAL_ANGLE_UNIT_RAD = 1,
	PEBBLES_GLOBAL_ANGLE_UNIT_GRAD = 2
} PebblesGlobalAngleUnit;

#define PEBBLES_TYPE_GLOBAL_ANGLE_UNIT (pebbles_global_angle_unit_get_type ())

#define PEBBLES_TYPE_SCIENTIFIC_CALCULATOR (pebbles_scientific_calculator_get_type ())
#define PEBBLES_SCIENTIFIC_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculator))
#define PEBBLES_SCIENTIFIC_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculatorClass))
#define PEBBLES_IS_SCIENTIFIC_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR))
#define PEBBLES_IS_SCIENTIFIC_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR))
#define PEBBLES_SCIENTIFIC_CALCULATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculatorClass))

typedef struct _PebblesScientificCalculator PebblesScientificCalculator;
typedef struct _PebblesScientificCalculatorClass PebblesScientificCalculatorClass;
#define _pebbles_scientific_calculator_unref0(var) ((var == NULL) ? NULL : (var = (pebbles_scientific_calculator_unref (var), NULL)))

#define PEBBLES_TYPE_SETTINGS (pebbles_settings_get_type ())
#define PEBBLES_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettings))
#define PEBBLES_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))
#define PEBBLES_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))

typedef struct _PebblesSettings PebblesSettings;
typedef struct _PebblesSettingsClass PebblesSettingsClass;
typedef enum  {
	PEBBLES_NUMBER_SYSTEM_BINARY,
	PEBBLES_NUMBER_SYSTEM_OCTAL,
	PEBBLES_NUMBER_SYSTEM_DECIMAL,
	PEBBLES_NUMBER_SYSTEM_HEXADECIMAL
} PebblesNumberSystem;

#define PEBBLES_TYPE_NUMBER_SYSTEM (pebbles_number_system_get_type ())

#define PEBBLES_TYPE_PROGRAMMER_CALCULATOR (pebbles_programmer_calculator_get_type ())
#define PEBBLES_PROGRAMMER_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_PROGRAMMER_CALCULATOR, PebblesProgrammerCalculator))
#define PEBBLES_PROGRAMMER_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_PROGRAMMER_CALCULATOR, PebblesProgrammerCalculatorClass))
#define PEBBLES_IS_PROGRAMMER_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_PROGRAMMER_CALCULATOR))
#define PEBBLES_IS_PROGRAMMER_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_PROGRAMMER_CALCULATOR))
#define PEBBLES_PROGRAMMER_CALCULATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_PROGRAMMER_CALCULATOR, PebblesProgrammerCalculatorClass))

typedef struct _PebblesProgrammerCalculator PebblesProgrammerCalculator;
typedef struct _PebblesProgrammerCalculatorClass PebblesProgrammerCalculatorClass;
#define _pebbles_programmer_calculator_unref0(var) ((var == NULL) ? NULL : (var = (pebbles_programmer_calculator_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define PEBBLES_TYPE_PROGRAMMER (pebbles_programmer_get_type ())
#define PEBBLES_PROGRAMMER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_PROGRAMMER, PebblesProgrammer))
#define PEBBLES_PROGRAMMER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_PROGRAMMER, PebblesProgrammerClass))
#define PEBBLES_IS_PROGRAMMER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_PROGRAMMER))
#define PEBBLES_IS_PROGRAMMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_PROGRAMMER))
#define PEBBLES_PROGRAMMER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_PROGRAMMER, PebblesProgrammerClass))

typedef struct _PebblesProgrammer PebblesProgrammer;
typedef struct _PebblesProgrammerClass PebblesProgrammerClass;
typedef enum  {
	PEBBLES_WORD_SIZE_BYTE = 8,
	PEBBLES_WORD_SIZE_WORD = 16,
	PEBBLES_WORD_SIZE_DWORD = 32,
	PEBBLES_WORD_SIZE_QWORD = 64
} PebblesWordSize;

#define PEBBLES_TYPE_WORD_SIZE (pebbles_word_size_get_type ())
typedef struct _PebblesProgrammerPrivate PebblesProgrammerPrivate;
#define _pebbles_programmer_unref0(var) ((var == NULL) ? NULL : (var = (pebbles_programmer_unref (var), NULL)))
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))

#define PEBBLES_TYPE_DATE_CALCULATOR (pebbles_date_calculator_get_type ())
#define PEBBLES_DATE_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_DATE_CALCULATOR, PebblesDateCalculator))
#define PEBBLES_DATE_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_DATE_CALCULATOR, PebblesDateCalculatorClass))
#define PEBBLES_IS_DATE_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_DATE_CALCULATOR))
#define PEBBLES_IS_DATE_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_DATE_CALCULATOR))
#define PEBBLES_DATE_CALCULATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_DATE_CALCULATOR, PebblesDateCalculatorClass))

typedef struct _PebblesDateCalculator PebblesDateCalculator;
typedef struct _PebblesDateCalculatorClass PebblesDateCalculatorClass;

#define PEBBLES_TYPE_DATE_FORMATTED (pebbles_date_formatted_get_type ())
#define PEBBLES_DATE_FORMATTED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_DATE_FORMATTED, PebblesDateFormatted))
#define PEBBLES_DATE_FORMATTED_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_DATE_FORMATTED, PebblesDateFormattedClass))
#define PEBBLES_IS_DATE_FORMATTED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_DATE_FORMATTED))
#define PEBBLES_IS_DATE_FORMATTED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_DATE_FORMATTED))
#define PEBBLES_DATE_FORMATTED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_DATE_FORMATTED, PebblesDateFormattedClass))

typedef struct _PebblesDateFormatted PebblesDateFormatted;
typedef struct _PebblesDateFormattedClass PebblesDateFormattedClass;
typedef struct _PebblesDateFormattedPrivate PebblesDateFormattedPrivate;
#define _pebbles_date_formatted_unref0(var) ((var == NULL) ? NULL : (var = (pebbles_date_formatted_unref (var), NULL)))
#define _pebbles_date_calculator_unref0(var) ((var == NULL) ? NULL : (var = (pebbles_date_calculator_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
typedef struct _PebblesParamSpecTestUtil PebblesParamSpecTestUtil;

struct _PebblesTestUtil {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesTestUtilPrivate * priv;
};

struct _PebblesTestUtilClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesTestUtil *self);
};

struct _PebblesProgrammer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesProgrammerPrivate * priv;
	PebblesWordSize word_size;
	gboolean* output;
	gint output_length1;
	gboolean carry;
	gboolean aux_carry;
	gboolean f0;
	gboolean overflow_flag;
	gboolean parity_flag;
	gboolean zero_flag;
	gboolean negative_flag;
};

struct _PebblesProgrammerClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesProgrammer *self);
};

struct _PebblesDateFormatted {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesDateFormattedPrivate * priv;
	gint day;
	gint week;
	gint month;
	gint year;
};

struct _PebblesDateFormattedClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesDateFormatted *self);
};

struct _PebblesParamSpecTestUtil {
	GParamSpec parent_instance;
};

static gpointer pebbles_test_util_parent_class = NULL;

gpointer pebbles_test_util_ref (gpointer instance);
void pebbles_test_util_unref (gpointer instance);
GParamSpec* pebbles_param_spec_test_util (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void pebbles_value_set_test_util (GValue* value,
                                  gpointer v_object);
void pebbles_value_take_test_util (GValue* value,
                                   gpointer v_object);
gpointer pebbles_value_get_test_util (const GValue* value);
GType pebbles_test_util_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesTestUtil, pebbles_test_util_unref)
void pebbles_test_util_show_greeter (void);
static void pebbles_test_util_test_tokenize (const gchar* exp);
gchar* pebbles_utils_st_tokenize (const gchar* input);
GType pebbles_global_angle_unit_get_type (void) G_GNUC_CONST;
static void pebbles_test_util_test_scientific (const gchar* exp,
                                        const gchar* what_i_should_get,
                                        PebblesGlobalAngleUnit* angle_type);
gpointer pebbles_scientific_calculator_ref (gpointer instance);
void pebbles_scientific_calculator_unref (gpointer instance);
GParamSpec* pebbles_param_spec_scientific_calculator (const gchar* name,
                                                      const gchar* nick,
                                                      const gchar* blurb,
                                                      GType object_type,
                                                      GParamFlags flags);
void pebbles_value_set_scientific_calculator (GValue* value,
                                              gpointer v_object);
void pebbles_value_take_scientific_calculator (GValue* value,
                                               gpointer v_object);
gpointer pebbles_value_get_scientific_calculator (const GValue* value);
GType pebbles_scientific_calculator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesScientificCalculator, pebbles_scientific_calculator_unref)
PebblesScientificCalculator* pebbles_scientific_calculator_new (void);
PebblesScientificCalculator* pebbles_scientific_calculator_construct (GType object_type);
gchar* pebbles_scientific_calculator_get_result (PebblesScientificCalculator* self,
                                                 const gchar* exp,
                                                 PebblesGlobalAngleUnit angle_mode_in,
                                                 gint* float_accuracy,
                                                 gboolean* tokenize);
static void pebbles_test_util_test_programmer_integration (void);
GType pebbles_settings_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesSettings, g_object_unref)
PebblesSettings* pebbles_settings_get_default (void);
GType pebbles_number_system_get_type (void) G_GNUC_CONST;
void pebbles_settings_set_number_system (PebblesSettings* self,
                                         PebblesNumberSystem value);
gpointer pebbles_programmer_calculator_ref (gpointer instance);
void pebbles_programmer_calculator_unref (gpointer instance);
GParamSpec* pebbles_param_spec_programmer_calculator (const gchar* name,
                                                      const gchar* nick,
                                                      const gchar* blurb,
                                                      GType object_type,
                                                      GParamFlags flags);
void pebbles_value_set_programmer_calculator (GValue* value,
                                              gpointer v_object);
void pebbles_value_take_programmer_calculator (GValue* value,
                                               gpointer v_object);
gpointer pebbles_value_get_programmer_calculator (const GValue* value);
GType pebbles_programmer_calculator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesProgrammerCalculator, pebbles_programmer_calculator_unref)
PebblesProgrammerCalculator* pebbles_programmer_calculator_new (void);
PebblesProgrammerCalculator* pebbles_programmer_calculator_construct (GType object_type);
static void pebbles_test_util_test_programmer (const gchar* input1,
                                        const gchar* input2);
gpointer pebbles_programmer_ref (gpointer instance);
void pebbles_programmer_unref (gpointer instance);
GParamSpec* pebbles_param_spec_programmer (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void pebbles_value_set_programmer (GValue* value,
                                   gpointer v_object);
void pebbles_value_take_programmer (GValue* value,
                                    gpointer v_object);
gpointer pebbles_value_get_programmer (const GValue* value);
GType pebbles_programmer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesProgrammer, pebbles_programmer_unref)
PebblesProgrammer* pebbles_programmer_new (void);
PebblesProgrammer* pebbles_programmer_construct (GType object_type);
GType pebbles_word_size_get_type (void) G_GNUC_CONST;
gboolean* pebbles_programmer_ones_complement (PebblesProgrammer* self,
                                              gboolean* input,
                                              gint input_length1,
                                              gint* word_size,
                                              gint* result_length1);
static gboolean* _vala_array_dup1 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_twos_complement (PebblesProgrammer* self,
                                              gboolean* input,
                                              gint input_length1,
                                              gint* word_size,
                                              gint* result_length1);
static gboolean* _vala_array_dup2 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_add (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup3 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_subtract (PebblesProgrammer* self,
                                       gboolean* input_a,
                                       gint input_a_length1,
                                       gboolean* input_b,
                                       gint input_b_length1,
                                       gint* word_size,
                                       gint* result_length1);
static gboolean* _vala_array_dup4 (gboolean* self,
                            gint length);
gchar* pebbles_programmer_multiply (PebblesProgrammer* self,
                                    gboolean* input_a,
                                    gint input_a_length1,
                                    gboolean* input_b,
                                    gint input_b_length1,
                                    gint* word_size);
static gboolean* _vala_array_dup5 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_division_quotient (PebblesProgrammer* self,
                                                gboolean* input_a,
                                                gint input_a_length1,
                                                gboolean* input_b,
                                                gint input_b_length1,
                                                gint* word_size,
                                                gint* result_length1);
static gboolean* _vala_array_dup6 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_and (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup7 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_nand (PebblesProgrammer* self,
                                   gboolean* input_a,
                                   gint input_a_length1,
                                   gboolean* input_b,
                                   gint input_b_length1,
                                   gint* word_size,
                                   gint* result_length1);
static gboolean* _vala_array_dup8 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_or (PebblesProgrammer* self,
                                 gboolean* input_a,
                                 gint input_a_length1,
                                 gboolean* input_b,
                                 gint input_b_length1,
                                 gint* word_size,
                                 gint* result_length1);
static gboolean* _vala_array_dup9 (gboolean* self,
                            gint length);
gboolean* pebbles_programmer_nor (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup10 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_xor (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup11 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_xnor (PebblesProgrammer* self,
                                   gboolean* input_a,
                                   gint input_a_length1,
                                   gboolean* input_b,
                                   gint input_b_length1,
                                   gint* word_size,
                                   gint* result_length1);
static gboolean* _vala_array_dup12 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_not (PebblesProgrammer* self,
                                  gboolean* input,
                                  gint input_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup13 (gboolean* self,
                             gint length);
static void pebbles_test_util_test_date_difference (gint d1,
                                             gint m1,
                                             gint y1,
                                             gint d2,
                                             gint m2,
                                             gint y2,
                                             const gchar* days,
                                             const gchar* year,
                                             const gchar* month,
                                             const gchar* week,
                                             const gchar* day);
gpointer pebbles_date_calculator_ref (gpointer instance);
void pebbles_date_calculator_unref (gpointer instance);
GParamSpec* pebbles_param_spec_date_calculator (const gchar* name,
                                                const gchar* nick,
                                                const gchar* blurb,
                                                GType object_type,
                                                GParamFlags flags);
void pebbles_value_set_date_calculator (GValue* value,
                                        gpointer v_object);
void pebbles_value_take_date_calculator (GValue* value,
                                         gpointer v_object);
gpointer pebbles_value_get_date_calculator (const GValue* value);
GType pebbles_date_calculator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesDateCalculator, pebbles_date_calculator_unref)
PebblesDateCalculator* pebbles_date_calculator_new (void);
PebblesDateCalculator* pebbles_date_calculator_construct (GType object_type);
gchar* pebbles_date_calculator_date_difference (PebblesDateCalculator* self,
                                                GDateTime* start_date_time,
                                                GDateTime* end_date_time);
gpointer pebbles_date_formatted_ref (gpointer instance);
void pebbles_date_formatted_unref (gpointer instance);
GParamSpec* pebbles_param_spec_date_formatted (const gchar* name,
                                               const gchar* nick,
                                               const gchar* blurb,
                                               GType object_type,
                                               GParamFlags flags);
void pebbles_value_set_date_formatted (GValue* value,
                                       gpointer v_object);
void pebbles_value_take_date_formatted (GValue* value,
                                        gpointer v_object);
gpointer pebbles_value_get_date_formatted (const GValue* value);
GType pebbles_date_formatted_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesDateFormatted, pebbles_date_formatted_unref)
PebblesDateFormatted* pebbles_date_calculator_difference_formatter (PebblesDateCalculator* self,
                                                                    GDateTime* start_date_time,
                                                                    GDateTime* end_date_time);
void pebbles_test_util_run_test (void);
PebblesTestUtil* pebbles_test_util_new (void);
PebblesTestUtil* pebbles_test_util_construct (GType object_type);
static void pebbles_test_util_finalize (PebblesTestUtil * obj);
static GType pebbles_test_util_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

void
pebbles_test_util_show_greeter (void)
{
	FILE* _tmp0_;
	FILE* _tmp1_;
	FILE* _tmp2_;
	FILE* _tmp3_;
	FILE* _tmp4_;
#line 25 "../src/Test/TestUtil.vala"
	_tmp0_ = stdout;
#line 25 "../src/Test/TestUtil.vala"
	fprintf (_tmp0_, "                             \n" \
" _____     _   _   _         \n" \
"|  _  |___| |_| |_| |___ ___ \n" \
"|   __| -_| . | . | | -_|_ -|\n" \
"|__|  |___|___|___|_|___|___|\n" \
"                             \n");
#line 31 "../src/Test/TestUtil.vala"
	_tmp1_ = stdout;
#line 31 "../src/Test/TestUtil.vala"
	fprintf (_tmp1_, "=============================================================\n\n");
#line 32 "../src/Test/TestUtil.vala"
	_tmp2_ = stdout;
#line 32 "../src/Test/TestUtil.vala"
	fprintf (_tmp2_, "Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>\n");
#line 33 "../src/Test/TestUtil.vala"
	_tmp3_ = stdout;
#line 33 "../src/Test/TestUtil.vala"
	fprintf (_tmp3_, "\n=============================================================\n\n");
#line 34 "../src/Test/TestUtil.vala"
	_tmp4_ = stdout;
#line 34 "../src/Test/TestUtil.vala"
	fprintf (_tmp4_, "Running Automatic Tests...\n");
#line 477 "TestUtil.c"
}

static void
pebbles_test_util_test_tokenize (const gchar* exp)
{
	FILE* _tmp0_;
	FILE* _tmp1_;
	gchar* _result_ = NULL;
	gchar* _tmp2_;
	FILE* _tmp3_;
#line 36 "../src/Test/TestUtil.vala"
	g_return_if_fail (exp != NULL);
#line 37 "../src/Test/TestUtil.vala"
	_tmp0_ = stdout;
#line 37 "../src/Test/TestUtil.vala"
	fprintf (_tmp0_, "\n'%s'", exp);
#line 38 "../src/Test/TestUtil.vala"
	_tmp1_ = stdout;
#line 38 "../src/Test/TestUtil.vala"
	fprintf (_tmp1_, "\n -> ");
#line 39 "../src/Test/TestUtil.vala"
	_tmp2_ = pebbles_utils_st_tokenize (exp);
#line 39 "../src/Test/TestUtil.vala"
	_result_ = _tmp2_;
#line 40 "../src/Test/TestUtil.vala"
	_tmp3_ = stdout;
#line 40 "../src/Test/TestUtil.vala"
	fprintf (_tmp3_, "'%s'\n", _result_);
#line 36 "../src/Test/TestUtil.vala"
	_g_free0 (_result_);
#line 508 "TestUtil.c"
}

static void
pebbles_test_util_test_scientific (const gchar* exp,
                                   const gchar* what_i_should_get,
                                   PebblesGlobalAngleUnit* angle_type)
{
	PebblesScientificCalculator* sci_calc = NULL;
	PebblesScientificCalculator* _tmp0_;
	gchar* what_i_got = NULL;
	PebblesScientificCalculator* _tmp1_;
	gint _tmp2_;
	gboolean _tmp3_;
	gchar* _tmp4_;
	const gchar* _tmp5_;
#line 42 "../src/Test/TestUtil.vala"
	g_return_if_fail (exp != NULL);
#line 42 "../src/Test/TestUtil.vala"
	g_return_if_fail (what_i_should_get != NULL);
#line 43 "../src/Test/TestUtil.vala"
	_tmp0_ = pebbles_scientific_calculator_new ();
#line 43 "../src/Test/TestUtil.vala"
	sci_calc = _tmp0_;
#line 44 "../src/Test/TestUtil.vala"
	_tmp1_ = sci_calc;
#line 44 "../src/Test/TestUtil.vala"
	_tmp2_ = -1;
#line 44 "../src/Test/TestUtil.vala"
	_tmp3_ = TRUE;
#line 44 "../src/Test/TestUtil.vala"
	_tmp4_ = pebbles_scientific_calculator_get_result (_tmp1_, exp, *angle_type, &_tmp2_, &_tmp3_);
#line 44 "../src/Test/TestUtil.vala"
	what_i_got = _tmp4_;
#line 45 "../src/Test/TestUtil.vala"
	_tmp5_ = what_i_got;
#line 45 "../src/Test/TestUtil.vala"
	if (g_strcmp0 (_tmp5_, what_i_should_get) != 0) {
#line 546 "TestUtil.c"
		FILE* _tmp6_;
		FILE* _tmp7_;
		const gchar* _tmp8_;
#line 46 "../src/Test/TestUtil.vala"
		_tmp6_ = stdout;
#line 46 "../src/Test/TestUtil.vala"
		fprintf (_tmp6_, "[ERROR] Given '%s':,\n", exp);
#line 47 "../src/Test/TestUtil.vala"
		_tmp7_ = stdout;
#line 47 "../src/Test/TestUtil.vala"
		_tmp8_ = what_i_got;
#line 47 "../src/Test/TestUtil.vala"
		fprintf (_tmp7_, "        I should get '%s', but I got '%s'!\n", what_i_should_get, _tmp8_);
#line 560 "TestUtil.c"
	}
#line 42 "../src/Test/TestUtil.vala"
	_g_free0 (what_i_got);
#line 42 "../src/Test/TestUtil.vala"
	_pebbles_scientific_calculator_unref0 (sci_calc);
#line 566 "TestUtil.c"
}

static void
pebbles_test_util_test_programmer_integration (void)
{
	PebblesSettings* settings = NULL;
	PebblesSettings* _tmp0_;
	PebblesProgrammerCalculator* prog_calc_front = NULL;
	PebblesProgrammerCalculator* _tmp1_;
#line 51 "../src/Test/TestUtil.vala"
	_tmp0_ = pebbles_settings_get_default ();
#line 51 "../src/Test/TestUtil.vala"
	settings = _tmp0_;
#line 52 "../src/Test/TestUtil.vala"
	pebbles_settings_set_number_system (settings, PEBBLES_NUMBER_SYSTEM_DECIMAL);
#line 53 "../src/Test/TestUtil.vala"
	_tmp1_ = pebbles_programmer_calculator_new ();
#line 53 "../src/Test/TestUtil.vala"
	prog_calc_front = _tmp1_;
#line 50 "../src/Test/TestUtil.vala"
	_pebbles_programmer_calculator_unref0 (prog_calc_front);
#line 50 "../src/Test/TestUtil.vala"
	_g_object_unref0 (settings);
#line 590 "TestUtil.c"
}

static gboolean*
_vala_array_dup1 (gboolean* self,
                  gint length)
{
#line 81 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 81 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 601 "TestUtil.c"
	}
#line 81 "../src/Test/TestUtil.vala"
	return NULL;
#line 605 "TestUtil.c"
}

static gboolean*
_vala_array_dup2 (gboolean* self,
                  gint length)
{
#line 90 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 90 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 616 "TestUtil.c"
	}
#line 90 "../src/Test/TestUtil.vala"
	return NULL;
#line 620 "TestUtil.c"
}

static gboolean*
_vala_array_dup3 (gboolean* self,
                  gint length)
{
#line 99 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 99 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 631 "TestUtil.c"
	}
#line 99 "../src/Test/TestUtil.vala"
	return NULL;
#line 635 "TestUtil.c"
}

static gboolean*
_vala_array_dup4 (gboolean* self,
                  gint length)
{
#line 107 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 107 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 646 "TestUtil.c"
	}
#line 107 "../src/Test/TestUtil.vala"
	return NULL;
#line 650 "TestUtil.c"
}

static gboolean*
_vala_array_dup5 (gboolean* self,
                  gint length)
{
#line 116 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 116 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 661 "TestUtil.c"
	}
#line 116 "../src/Test/TestUtil.vala"
	return NULL;
#line 665 "TestUtil.c"
}

static gboolean*
_vala_array_dup6 (gboolean* self,
                  gint length)
{
#line 124 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 124 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 676 "TestUtil.c"
	}
#line 124 "../src/Test/TestUtil.vala"
	return NULL;
#line 680 "TestUtil.c"
}

static gboolean*
_vala_array_dup7 (gboolean* self,
                  gint length)
{
#line 133 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 133 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 691 "TestUtil.c"
	}
#line 133 "../src/Test/TestUtil.vala"
	return NULL;
#line 695 "TestUtil.c"
}

static gboolean*
_vala_array_dup8 (gboolean* self,
                  gint length)
{
#line 142 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 142 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 706 "TestUtil.c"
	}
#line 142 "../src/Test/TestUtil.vala"
	return NULL;
#line 710 "TestUtil.c"
}

static gboolean*
_vala_array_dup9 (gboolean* self,
                  gint length)
{
#line 151 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 151 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 721 "TestUtil.c"
	}
#line 151 "../src/Test/TestUtil.vala"
	return NULL;
#line 725 "TestUtil.c"
}

static gboolean*
_vala_array_dup10 (gboolean* self,
                   gint length)
{
#line 160 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 160 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 736 "TestUtil.c"
	}
#line 160 "../src/Test/TestUtil.vala"
	return NULL;
#line 740 "TestUtil.c"
}

static gboolean*
_vala_array_dup11 (gboolean* self,
                   gint length)
{
#line 169 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 169 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 751 "TestUtil.c"
	}
#line 169 "../src/Test/TestUtil.vala"
	return NULL;
#line 755 "TestUtil.c"
}

static gboolean*
_vala_array_dup12 (gboolean* self,
                   gint length)
{
#line 178 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 178 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 766 "TestUtil.c"
	}
#line 178 "../src/Test/TestUtil.vala"
	return NULL;
#line 770 "TestUtil.c"
}

static gboolean*
_vala_array_dup13 (gboolean* self,
                   gint length)
{
#line 187 "../src/Test/TestUtil.vala"
	if (length > 0) {
#line 187 "../src/Test/TestUtil.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 781 "TestUtil.c"
	}
#line 187 "../src/Test/TestUtil.vala"
	return NULL;
#line 785 "TestUtil.c"
}

static void
pebbles_test_util_test_programmer (const gchar* input1,
                                   const gchar* input2)
{
	PebblesProgrammer* prog_calc = NULL;
	PebblesProgrammer* _tmp0_;
	gchar** input1_arr = NULL;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint input1_arr_length1;
	gint _input1_arr_size_;
	gchar** input2_arr = NULL;
	gchar** _tmp3_;
	gchar** _tmp4_;
	gint input2_arr_length1;
	gint _input2_arr_size_;
	gboolean* input_a = NULL;
	gboolean* _tmp5_;
	gint input_a_length1;
	gint _input_a_size_;
	gboolean* input_b = NULL;
	gboolean* _tmp6_;
	gint input_b_length1;
	gint _input_b_size_;
	gboolean* output = NULL;
	gint output_length1 = 0;
	gint _output_size_ = 0;
	PebblesProgrammer* _tmp17_;
	PebblesProgrammer* _tmp18_;
	gboolean* _tmp19_;
	gint _tmp19__length1;
	gint _tmp20_;
	gint _tmp21_ = 0;
	gboolean* _tmp22_;
	gboolean* _tmp23_;
	gint _tmp23__length1;
	PebblesProgrammer* _tmp24_;
	gboolean* _tmp25_;
	gint _tmp25__length1;
	gboolean* _tmp26_;
	gint _tmp26__length1;
	PebblesProgrammer* _tmp32_;
	PebblesProgrammer* _tmp33_;
	gboolean* _tmp34_;
	gint _tmp34__length1;
	gint _tmp35_;
	gint _tmp36_ = 0;
	gboolean* _tmp37_;
	gboolean* _tmp38_;
	gint _tmp38__length1;
	PebblesProgrammer* _tmp39_;
	gboolean* _tmp40_;
	gint _tmp40__length1;
	gboolean* _tmp41_;
	gint _tmp41__length1;
	PebblesProgrammer* _tmp47_;
	PebblesProgrammer* _tmp48_;
	gboolean* _tmp49_;
	gint _tmp49__length1;
	gboolean* _tmp50_;
	gint _tmp50__length1;
	gint _tmp51_;
	gint _tmp52_ = 0;
	gboolean* _tmp53_;
	gboolean* _tmp54_;
	gint _tmp54__length1;
	PebblesProgrammer* _tmp55_;
	gboolean* _tmp56_;
	gint _tmp56__length1;
	gboolean* _tmp57_;
	gint _tmp57__length1;
	PebblesProgrammer* _tmp63_;
	gboolean* _tmp64_;
	gint _tmp64__length1;
	gboolean* _tmp65_;
	gint _tmp65__length1;
	gint _tmp66_;
	gint _tmp67_ = 0;
	gboolean* _tmp68_;
	gboolean* _tmp69_;
	gint _tmp69__length1;
	PebblesProgrammer* _tmp70_;
	gboolean* _tmp71_;
	gint _tmp71__length1;
	gboolean* _tmp72_;
	gint _tmp72__length1;
	PebblesProgrammer* _tmp78_;
	gboolean* _tmp79_;
	gint _tmp79__length1;
	gboolean* _tmp80_;
	gint _tmp80__length1;
	gint _tmp81_;
	gchar* _tmp82_;
	gchar* _tmp83_;
	PebblesProgrammer* _tmp84_;
	gboolean* _tmp85_;
	gint _tmp85__length1;
	gboolean* _tmp86_;
	gint _tmp86__length1;
	PebblesProgrammer* _tmp92_;
	gboolean* _tmp93_;
	gint _tmp93__length1;
	gboolean* _tmp94_;
	gint _tmp94__length1;
	gint _tmp95_;
	gint _tmp96_ = 0;
	gboolean* _tmp97_;
	gboolean* _tmp98_;
	gint _tmp98__length1;
	PebblesProgrammer* _tmp99_;
	gboolean* _tmp100_;
	gint _tmp100__length1;
	gboolean* _tmp101_;
	gint _tmp101__length1;
	PebblesProgrammer* _tmp107_;
	PebblesProgrammer* _tmp108_;
	gboolean* _tmp109_;
	gint _tmp109__length1;
	gboolean* _tmp110_;
	gint _tmp110__length1;
	gint _tmp111_;
	gint _tmp112_ = 0;
	gboolean* _tmp113_;
	gboolean* _tmp114_;
	gint _tmp114__length1;
	PebblesProgrammer* _tmp115_;
	gboolean* _tmp116_;
	gint _tmp116__length1;
	gboolean* _tmp117_;
	gint _tmp117__length1;
	PebblesProgrammer* _tmp123_;
	PebblesProgrammer* _tmp124_;
	gboolean* _tmp125_;
	gint _tmp125__length1;
	gboolean* _tmp126_;
	gint _tmp126__length1;
	gint _tmp127_;
	gint _tmp128_ = 0;
	gboolean* _tmp129_;
	gboolean* _tmp130_;
	gint _tmp130__length1;
	PebblesProgrammer* _tmp131_;
	gboolean* _tmp132_;
	gint _tmp132__length1;
	gboolean* _tmp133_;
	gint _tmp133__length1;
	PebblesProgrammer* _tmp139_;
	PebblesProgrammer* _tmp140_;
	gboolean* _tmp141_;
	gint _tmp141__length1;
	gboolean* _tmp142_;
	gint _tmp142__length1;
	gint _tmp143_;
	gint _tmp144_ = 0;
	gboolean* _tmp145_;
	gboolean* _tmp146_;
	gint _tmp146__length1;
	PebblesProgrammer* _tmp147_;
	gboolean* _tmp148_;
	gint _tmp148__length1;
	gboolean* _tmp149_;
	gint _tmp149__length1;
	PebblesProgrammer* _tmp155_;
	PebblesProgrammer* _tmp156_;
	gboolean* _tmp157_;
	gint _tmp157__length1;
	gboolean* _tmp158_;
	gint _tmp158__length1;
	gint _tmp159_;
	gint _tmp160_ = 0;
	gboolean* _tmp161_;
	gboolean* _tmp162_;
	gint _tmp162__length1;
	PebblesProgrammer* _tmp163_;
	gboolean* _tmp164_;
	gint _tmp164__length1;
	gboolean* _tmp165_;
	gint _tmp165__length1;
	PebblesProgrammer* _tmp171_;
	PebblesProgrammer* _tmp172_;
	gboolean* _tmp173_;
	gint _tmp173__length1;
	gboolean* _tmp174_;
	gint _tmp174__length1;
	gint _tmp175_;
	gint _tmp176_ = 0;
	gboolean* _tmp177_;
	gboolean* _tmp178_;
	gint _tmp178__length1;
	PebblesProgrammer* _tmp179_;
	gboolean* _tmp180_;
	gint _tmp180__length1;
	gboolean* _tmp181_;
	gint _tmp181__length1;
	PebblesProgrammer* _tmp187_;
	PebblesProgrammer* _tmp188_;
	gboolean* _tmp189_;
	gint _tmp189__length1;
	gboolean* _tmp190_;
	gint _tmp190__length1;
	gint _tmp191_;
	gint _tmp192_ = 0;
	gboolean* _tmp193_;
	gboolean* _tmp194_;
	gint _tmp194__length1;
	PebblesProgrammer* _tmp195_;
	gboolean* _tmp196_;
	gint _tmp196__length1;
	gboolean* _tmp197_;
	gint _tmp197__length1;
	PebblesProgrammer* _tmp203_;
	PebblesProgrammer* _tmp204_;
	gboolean* _tmp205_;
	gint _tmp205__length1;
	gint _tmp206_;
	gint _tmp207_ = 0;
	gboolean* _tmp208_;
	gboolean* _tmp209_;
	gint _tmp209__length1;
	PebblesProgrammer* _tmp210_;
	gboolean* _tmp211_;
	gint _tmp211__length1;
	gboolean* _tmp212_;
	gint _tmp212__length1;
#line 55 "../src/Test/TestUtil.vala"
	g_return_if_fail (input1 != NULL);
#line 55 "../src/Test/TestUtil.vala"
	g_return_if_fail (input2 != NULL);
#line 56 "../src/Test/TestUtil.vala"
	_tmp0_ = pebbles_programmer_new ();
#line 56 "../src/Test/TestUtil.vala"
	prog_calc = _tmp0_;
#line 57 "../src/Test/TestUtil.vala"
	_tmp2_ = _tmp1_ = g_strsplit (input1, " ", 0);
#line 57 "../src/Test/TestUtil.vala"
	input1_arr = _tmp2_;
#line 57 "../src/Test/TestUtil.vala"
	input1_arr_length1 = _vala_array_length (_tmp1_);
#line 57 "../src/Test/TestUtil.vala"
	_input1_arr_size_ = input1_arr_length1;
#line 58 "../src/Test/TestUtil.vala"
	_tmp4_ = _tmp3_ = g_strsplit (input2, " ", 0);
#line 58 "../src/Test/TestUtil.vala"
	input2_arr = _tmp4_;
#line 58 "../src/Test/TestUtil.vala"
	input2_arr_length1 = _vala_array_length (_tmp3_);
#line 58 "../src/Test/TestUtil.vala"
	_input2_arr_size_ = input2_arr_length1;
#line 59 "../src/Test/TestUtil.vala"
	_tmp5_ = g_new0 (gboolean, 64);
#line 59 "../src/Test/TestUtil.vala"
	input_a = _tmp5_;
#line 59 "../src/Test/TestUtil.vala"
	input_a_length1 = 64;
#line 59 "../src/Test/TestUtil.vala"
	_input_a_size_ = input_a_length1;
#line 60 "../src/Test/TestUtil.vala"
	_tmp6_ = g_new0 (gboolean, 64);
#line 60 "../src/Test/TestUtil.vala"
	input_b = _tmp6_;
#line 60 "../src/Test/TestUtil.vala"
	input_b_length1 = 64;
#line 60 "../src/Test/TestUtil.vala"
	_input_b_size_ = input_b_length1;
#line 1052 "TestUtil.c"
	{
		gint i = 0;
#line 62 "../src/Test/TestUtil.vala"
		i = 0;
#line 1057 "TestUtil.c"
		{
			gboolean _tmp7_ = FALSE;
#line 62 "../src/Test/TestUtil.vala"
			_tmp7_ = TRUE;
#line 62 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1064 "TestUtil.c"
				gchar** _tmp9_;
				gint _tmp9__length1;
				const gchar* _tmp10_;
				gchar** _tmp13_;
				gint _tmp13__length1;
				const gchar* _tmp14_;
#line 62 "../src/Test/TestUtil.vala"
				if (!_tmp7_) {
#line 1073 "TestUtil.c"
					gint _tmp8_;
#line 62 "../src/Test/TestUtil.vala"
					_tmp8_ = i;
#line 62 "../src/Test/TestUtil.vala"
					i = _tmp8_ + 1;
#line 1079 "TestUtil.c"
				}
#line 62 "../src/Test/TestUtil.vala"
				_tmp7_ = FALSE;
#line 62 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 62 "../src/Test/TestUtil.vala"
					break;
#line 1087 "TestUtil.c"
				}
#line 63 "../src/Test/TestUtil.vala"
				_tmp9_ = input1_arr;
#line 63 "../src/Test/TestUtil.vala"
				_tmp9__length1 = input1_arr_length1;
#line 63 "../src/Test/TestUtil.vala"
				_tmp10_ = _tmp9_[i];
#line 63 "../src/Test/TestUtil.vala"
				if (g_strcmp0 (_tmp10_, "0") == 0) {
#line 1097 "TestUtil.c"
					gboolean* _tmp11_;
					gint _tmp11__length1;
#line 64 "../src/Test/TestUtil.vala"
					_tmp11_ = input_a;
#line 64 "../src/Test/TestUtil.vala"
					_tmp11__length1 = input_a_length1;
#line 64 "../src/Test/TestUtil.vala"
					_tmp11_[i] = FALSE;
#line 1106 "TestUtil.c"
				} else {
					gboolean* _tmp12_;
					gint _tmp12__length1;
#line 67 "../src/Test/TestUtil.vala"
					_tmp12_ = input_a;
#line 67 "../src/Test/TestUtil.vala"
					_tmp12__length1 = input_a_length1;
#line 67 "../src/Test/TestUtil.vala"
					_tmp12_[i] = TRUE;
#line 1116 "TestUtil.c"
				}
#line 70 "../src/Test/TestUtil.vala"
				_tmp13_ = input2_arr;
#line 70 "../src/Test/TestUtil.vala"
				_tmp13__length1 = input2_arr_length1;
#line 70 "../src/Test/TestUtil.vala"
				_tmp14_ = _tmp13_[i];
#line 70 "../src/Test/TestUtil.vala"
				if (g_strcmp0 (_tmp14_, "0") == 0) {
#line 1126 "TestUtil.c"
					gboolean* _tmp15_;
					gint _tmp15__length1;
#line 71 "../src/Test/TestUtil.vala"
					_tmp15_ = input_b;
#line 71 "../src/Test/TestUtil.vala"
					_tmp15__length1 = input_b_length1;
#line 71 "../src/Test/TestUtil.vala"
					_tmp15_[i] = FALSE;
#line 1135 "TestUtil.c"
				} else {
					gboolean* _tmp16_;
					gint _tmp16__length1;
#line 74 "../src/Test/TestUtil.vala"
					_tmp16_ = input_b;
#line 74 "../src/Test/TestUtil.vala"
					_tmp16__length1 = input_b_length1;
#line 74 "../src/Test/TestUtil.vala"
					_tmp16_[i] = TRUE;
#line 1145 "TestUtil.c"
				}
			}
		}
	}
#line 78 "../src/Test/TestUtil.vala"
	_tmp17_ = prog_calc;
#line 78 "../src/Test/TestUtil.vala"
	_tmp17_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 79 "../src/Test/TestUtil.vala"
	g_print ("Binary 1's complement operation:");
#line 80 "../src/Test/TestUtil.vala"
	_tmp18_ = prog_calc;
#line 80 "../src/Test/TestUtil.vala"
	_tmp19_ = input_a;
#line 80 "../src/Test/TestUtil.vala"
	_tmp19__length1 = input_a_length1;
#line 80 "../src/Test/TestUtil.vala"
	_tmp20_ = 8;
#line 80 "../src/Test/TestUtil.vala"
	_tmp22_ = pebbles_programmer_ones_complement (_tmp18_, _tmp19_, (gint) _tmp19__length1, &_tmp20_, &_tmp21_);
#line 80 "../src/Test/TestUtil.vala"
	_tmp23_ = _tmp22_;
#line 80 "../src/Test/TestUtil.vala"
	_tmp23__length1 = _tmp21_;
#line 80 "../src/Test/TestUtil.vala"
	_tmp23_ = (g_free (_tmp23_), NULL);
#line 81 "../src/Test/TestUtil.vala"
	_tmp24_ = prog_calc;
#line 81 "../src/Test/TestUtil.vala"
	_tmp25_ = _tmp24_->output;
#line 81 "../src/Test/TestUtil.vala"
	_tmp25__length1 = _tmp24_->output_length1;
#line 81 "../src/Test/TestUtil.vala"
	_tmp26_ = (_tmp25_ != NULL) ? _vala_array_dup1 (_tmp25_, _tmp25__length1) : ((gpointer) _tmp25_);
#line 81 "../src/Test/TestUtil.vala"
	_tmp26__length1 = _tmp25__length1;
#line 81 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 81 "../src/Test/TestUtil.vala"
	output = _tmp26_;
#line 81 "../src/Test/TestUtil.vala"
	output_length1 = _tmp26__length1;
#line 81 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1190 "TestUtil.c"
	{
		gint i = 0;
#line 82 "../src/Test/TestUtil.vala"
		i = 0;
#line 1195 "TestUtil.c"
		{
			gboolean _tmp27_ = FALSE;
#line 82 "../src/Test/TestUtil.vala"
			_tmp27_ = TRUE;
#line 82 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1202 "TestUtil.c"
				const gchar* _tmp29_ = NULL;
				gboolean* _tmp30_;
				gint _tmp30__length1;
				gboolean _tmp31_;
#line 82 "../src/Test/TestUtil.vala"
				if (!_tmp27_) {
#line 1209 "TestUtil.c"
					gint _tmp28_;
#line 82 "../src/Test/TestUtil.vala"
					_tmp28_ = i;
#line 82 "../src/Test/TestUtil.vala"
					i = _tmp28_ + 1;
#line 1215 "TestUtil.c"
				}
#line 82 "../src/Test/TestUtil.vala"
				_tmp27_ = FALSE;
#line 82 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 82 "../src/Test/TestUtil.vala"
					break;
#line 1223 "TestUtil.c"
				}
#line 83 "../src/Test/TestUtil.vala"
				_tmp30_ = output;
#line 83 "../src/Test/TestUtil.vala"
				_tmp30__length1 = output_length1;
#line 83 "../src/Test/TestUtil.vala"
				_tmp31_ = _tmp30_[i];
#line 83 "../src/Test/TestUtil.vala"
				if (_tmp31_) {
#line 83 "../src/Test/TestUtil.vala"
					_tmp29_ = "1";
#line 1235 "TestUtil.c"
				} else {
#line 83 "../src/Test/TestUtil.vala"
					_tmp29_ = "0";
#line 1239 "TestUtil.c"
				}
#line 83 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp29_);
#line 1243 "TestUtil.c"
			}
		}
	}
#line 85 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 87 "../src/Test/TestUtil.vala"
	_tmp32_ = prog_calc;
#line 87 "../src/Test/TestUtil.vala"
	_tmp32_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 88 "../src/Test/TestUtil.vala"
	g_print ("Binary 2's complement operation:");
#line 89 "../src/Test/TestUtil.vala"
	_tmp33_ = prog_calc;
#line 89 "../src/Test/TestUtil.vala"
	_tmp34_ = input_a;
#line 89 "../src/Test/TestUtil.vala"
	_tmp34__length1 = input_a_length1;
#line 89 "../src/Test/TestUtil.vala"
	_tmp35_ = 8;
#line 89 "../src/Test/TestUtil.vala"
	_tmp37_ = pebbles_programmer_twos_complement (_tmp33_, _tmp34_, (gint) _tmp34__length1, &_tmp35_, &_tmp36_);
#line 89 "../src/Test/TestUtil.vala"
	_tmp38_ = _tmp37_;
#line 89 "../src/Test/TestUtil.vala"
	_tmp38__length1 = _tmp36_;
#line 89 "../src/Test/TestUtil.vala"
	_tmp38_ = (g_free (_tmp38_), NULL);
#line 90 "../src/Test/TestUtil.vala"
	_tmp39_ = prog_calc;
#line 90 "../src/Test/TestUtil.vala"
	_tmp40_ = _tmp39_->output;
#line 90 "../src/Test/TestUtil.vala"
	_tmp40__length1 = _tmp39_->output_length1;
#line 90 "../src/Test/TestUtil.vala"
	_tmp41_ = (_tmp40_ != NULL) ? _vala_array_dup2 (_tmp40_, _tmp40__length1) : ((gpointer) _tmp40_);
#line 90 "../src/Test/TestUtil.vala"
	_tmp41__length1 = _tmp40__length1;
#line 90 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 90 "../src/Test/TestUtil.vala"
	output = _tmp41_;
#line 90 "../src/Test/TestUtil.vala"
	output_length1 = _tmp41__length1;
#line 90 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1289 "TestUtil.c"
	{
		gint i = 0;
#line 91 "../src/Test/TestUtil.vala"
		i = 0;
#line 1294 "TestUtil.c"
		{
			gboolean _tmp42_ = FALSE;
#line 91 "../src/Test/TestUtil.vala"
			_tmp42_ = TRUE;
#line 91 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1301 "TestUtil.c"
				const gchar* _tmp44_ = NULL;
				gboolean* _tmp45_;
				gint _tmp45__length1;
				gboolean _tmp46_;
#line 91 "../src/Test/TestUtil.vala"
				if (!_tmp42_) {
#line 1308 "TestUtil.c"
					gint _tmp43_;
#line 91 "../src/Test/TestUtil.vala"
					_tmp43_ = i;
#line 91 "../src/Test/TestUtil.vala"
					i = _tmp43_ + 1;
#line 1314 "TestUtil.c"
				}
#line 91 "../src/Test/TestUtil.vala"
				_tmp42_ = FALSE;
#line 91 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 91 "../src/Test/TestUtil.vala"
					break;
#line 1322 "TestUtil.c"
				}
#line 92 "../src/Test/TestUtil.vala"
				_tmp45_ = output;
#line 92 "../src/Test/TestUtil.vala"
				_tmp45__length1 = output_length1;
#line 92 "../src/Test/TestUtil.vala"
				_tmp46_ = _tmp45_[i];
#line 92 "../src/Test/TestUtil.vala"
				if (_tmp46_) {
#line 92 "../src/Test/TestUtil.vala"
					_tmp44_ = "1";
#line 1334 "TestUtil.c"
				} else {
#line 92 "../src/Test/TestUtil.vala"
					_tmp44_ = "0";
#line 1338 "TestUtil.c"
				}
#line 92 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp44_);
#line 1342 "TestUtil.c"
			}
		}
	}
#line 94 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 96 "../src/Test/TestUtil.vala"
	_tmp47_ = prog_calc;
#line 96 "../src/Test/TestUtil.vala"
	_tmp47_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 97 "../src/Test/TestUtil.vala"
	g_print ("Binary Addition operation:");
#line 98 "../src/Test/TestUtil.vala"
	_tmp48_ = prog_calc;
#line 98 "../src/Test/TestUtil.vala"
	_tmp49_ = input_a;
#line 98 "../src/Test/TestUtil.vala"
	_tmp49__length1 = input_a_length1;
#line 98 "../src/Test/TestUtil.vala"
	_tmp50_ = input_b;
#line 98 "../src/Test/TestUtil.vala"
	_tmp50__length1 = input_b_length1;
#line 98 "../src/Test/TestUtil.vala"
	_tmp51_ = 8;
#line 98 "../src/Test/TestUtil.vala"
	_tmp53_ = pebbles_programmer_add (_tmp48_, _tmp49_, (gint) _tmp49__length1, _tmp50_, (gint) _tmp50__length1, &_tmp51_, &_tmp52_);
#line 98 "../src/Test/TestUtil.vala"
	_tmp54_ = _tmp53_;
#line 98 "../src/Test/TestUtil.vala"
	_tmp54__length1 = _tmp52_;
#line 98 "../src/Test/TestUtil.vala"
	_tmp54_ = (g_free (_tmp54_), NULL);
#line 99 "../src/Test/TestUtil.vala"
	_tmp55_ = prog_calc;
#line 99 "../src/Test/TestUtil.vala"
	_tmp56_ = _tmp55_->output;
#line 99 "../src/Test/TestUtil.vala"
	_tmp56__length1 = _tmp55_->output_length1;
#line 99 "../src/Test/TestUtil.vala"
	_tmp57_ = (_tmp56_ != NULL) ? _vala_array_dup3 (_tmp56_, _tmp56__length1) : ((gpointer) _tmp56_);
#line 99 "../src/Test/TestUtil.vala"
	_tmp57__length1 = _tmp56__length1;
#line 99 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 99 "../src/Test/TestUtil.vala"
	output = _tmp57_;
#line 99 "../src/Test/TestUtil.vala"
	output_length1 = _tmp57__length1;
#line 99 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1392 "TestUtil.c"
	{
		gint i = 0;
#line 100 "../src/Test/TestUtil.vala"
		i = 0;
#line 1397 "TestUtil.c"
		{
			gboolean _tmp58_ = FALSE;
#line 100 "../src/Test/TestUtil.vala"
			_tmp58_ = TRUE;
#line 100 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1404 "TestUtil.c"
				const gchar* _tmp60_ = NULL;
				gboolean* _tmp61_;
				gint _tmp61__length1;
				gboolean _tmp62_;
#line 100 "../src/Test/TestUtil.vala"
				if (!_tmp58_) {
#line 1411 "TestUtil.c"
					gint _tmp59_;
#line 100 "../src/Test/TestUtil.vala"
					_tmp59_ = i;
#line 100 "../src/Test/TestUtil.vala"
					i = _tmp59_ + 1;
#line 1417 "TestUtil.c"
				}
#line 100 "../src/Test/TestUtil.vala"
				_tmp58_ = FALSE;
#line 100 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 100 "../src/Test/TestUtil.vala"
					break;
#line 1425 "TestUtil.c"
				}
#line 101 "../src/Test/TestUtil.vala"
				_tmp61_ = output;
#line 101 "../src/Test/TestUtil.vala"
				_tmp61__length1 = output_length1;
#line 101 "../src/Test/TestUtil.vala"
				_tmp62_ = _tmp61_[i];
#line 101 "../src/Test/TestUtil.vala"
				if (_tmp62_) {
#line 101 "../src/Test/TestUtil.vala"
					_tmp60_ = "1";
#line 1437 "TestUtil.c"
				} else {
#line 101 "../src/Test/TestUtil.vala"
					_tmp60_ = "0";
#line 1441 "TestUtil.c"
				}
#line 101 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp60_);
#line 1445 "TestUtil.c"
			}
		}
	}
#line 103 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 105 "../src/Test/TestUtil.vala"
	g_print ("Binary Subtraction operation:");
#line 106 "../src/Test/TestUtil.vala"
	_tmp63_ = prog_calc;
#line 106 "../src/Test/TestUtil.vala"
	_tmp64_ = input_a;
#line 106 "../src/Test/TestUtil.vala"
	_tmp64__length1 = input_a_length1;
#line 106 "../src/Test/TestUtil.vala"
	_tmp65_ = input_b;
#line 106 "../src/Test/TestUtil.vala"
	_tmp65__length1 = input_b_length1;
#line 106 "../src/Test/TestUtil.vala"
	_tmp66_ = 8;
#line 106 "../src/Test/TestUtil.vala"
	_tmp68_ = pebbles_programmer_subtract (_tmp63_, _tmp64_, (gint) _tmp64__length1, _tmp65_, (gint) _tmp65__length1, &_tmp66_, &_tmp67_);
#line 106 "../src/Test/TestUtil.vala"
	_tmp69_ = _tmp68_;
#line 106 "../src/Test/TestUtil.vala"
	_tmp69__length1 = _tmp67_;
#line 106 "../src/Test/TestUtil.vala"
	_tmp69_ = (g_free (_tmp69_), NULL);
#line 107 "../src/Test/TestUtil.vala"
	_tmp70_ = prog_calc;
#line 107 "../src/Test/TestUtil.vala"
	_tmp71_ = _tmp70_->output;
#line 107 "../src/Test/TestUtil.vala"
	_tmp71__length1 = _tmp70_->output_length1;
#line 107 "../src/Test/TestUtil.vala"
	_tmp72_ = (_tmp71_ != NULL) ? _vala_array_dup4 (_tmp71_, _tmp71__length1) : ((gpointer) _tmp71_);
#line 107 "../src/Test/TestUtil.vala"
	_tmp72__length1 = _tmp71__length1;
#line 107 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 107 "../src/Test/TestUtil.vala"
	output = _tmp72_;
#line 107 "../src/Test/TestUtil.vala"
	output_length1 = _tmp72__length1;
#line 107 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 108 "../src/Test/TestUtil.vala"
	g_print ("sub\n");
#line 1493 "TestUtil.c"
	{
		gint i = 0;
#line 109 "../src/Test/TestUtil.vala"
		i = 0;
#line 1498 "TestUtil.c"
		{
			gboolean _tmp73_ = FALSE;
#line 109 "../src/Test/TestUtil.vala"
			_tmp73_ = TRUE;
#line 109 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1505 "TestUtil.c"
				const gchar* _tmp75_ = NULL;
				gboolean* _tmp76_;
				gint _tmp76__length1;
				gboolean _tmp77_;
#line 109 "../src/Test/TestUtil.vala"
				if (!_tmp73_) {
#line 1512 "TestUtil.c"
					gint _tmp74_;
#line 109 "../src/Test/TestUtil.vala"
					_tmp74_ = i;
#line 109 "../src/Test/TestUtil.vala"
					i = _tmp74_ + 1;
#line 1518 "TestUtil.c"
				}
#line 109 "../src/Test/TestUtil.vala"
				_tmp73_ = FALSE;
#line 109 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 109 "../src/Test/TestUtil.vala"
					break;
#line 1526 "TestUtil.c"
				}
#line 110 "../src/Test/TestUtil.vala"
				_tmp76_ = output;
#line 110 "../src/Test/TestUtil.vala"
				_tmp76__length1 = output_length1;
#line 110 "../src/Test/TestUtil.vala"
				_tmp77_ = _tmp76_[i];
#line 110 "../src/Test/TestUtil.vala"
				if (_tmp77_) {
#line 110 "../src/Test/TestUtil.vala"
					_tmp75_ = "1";
#line 1538 "TestUtil.c"
				} else {
#line 110 "../src/Test/TestUtil.vala"
					_tmp75_ = "0";
#line 1542 "TestUtil.c"
				}
#line 110 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp75_);
#line 1546 "TestUtil.c"
			}
		}
	}
#line 112 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 114 "../src/Test/TestUtil.vala"
	g_print ("Binary Multiplication operation:");
#line 115 "../src/Test/TestUtil.vala"
	_tmp78_ = prog_calc;
#line 115 "../src/Test/TestUtil.vala"
	_tmp79_ = input_a;
#line 115 "../src/Test/TestUtil.vala"
	_tmp79__length1 = input_a_length1;
#line 115 "../src/Test/TestUtil.vala"
	_tmp80_ = input_b;
#line 115 "../src/Test/TestUtil.vala"
	_tmp80__length1 = input_b_length1;
#line 115 "../src/Test/TestUtil.vala"
	_tmp81_ = 8;
#line 115 "../src/Test/TestUtil.vala"
	_tmp82_ = pebbles_programmer_multiply (_tmp78_, _tmp79_, (gint) _tmp79__length1, _tmp80_, (gint) _tmp80__length1, &_tmp81_);
#line 115 "../src/Test/TestUtil.vala"
	_tmp83_ = _tmp82_;
#line 115 "../src/Test/TestUtil.vala"
	_g_free0 (_tmp83_);
#line 116 "../src/Test/TestUtil.vala"
	_tmp84_ = prog_calc;
#line 116 "../src/Test/TestUtil.vala"
	_tmp85_ = _tmp84_->output;
#line 116 "../src/Test/TestUtil.vala"
	_tmp85__length1 = _tmp84_->output_length1;
#line 116 "../src/Test/TestUtil.vala"
	_tmp86_ = (_tmp85_ != NULL) ? _vala_array_dup5 (_tmp85_, _tmp85__length1) : ((gpointer) _tmp85_);
#line 116 "../src/Test/TestUtil.vala"
	_tmp86__length1 = _tmp85__length1;
#line 116 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 116 "../src/Test/TestUtil.vala"
	output = _tmp86_;
#line 116 "../src/Test/TestUtil.vala"
	output_length1 = _tmp86__length1;
#line 116 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1590 "TestUtil.c"
	{
		gint i = 0;
#line 117 "../src/Test/TestUtil.vala"
		i = 0;
#line 1595 "TestUtil.c"
		{
			gboolean _tmp87_ = FALSE;
#line 117 "../src/Test/TestUtil.vala"
			_tmp87_ = TRUE;
#line 117 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1602 "TestUtil.c"
				const gchar* _tmp89_ = NULL;
				gboolean* _tmp90_;
				gint _tmp90__length1;
				gboolean _tmp91_;
#line 117 "../src/Test/TestUtil.vala"
				if (!_tmp87_) {
#line 1609 "TestUtil.c"
					gint _tmp88_;
#line 117 "../src/Test/TestUtil.vala"
					_tmp88_ = i;
#line 117 "../src/Test/TestUtil.vala"
					i = _tmp88_ + 1;
#line 1615 "TestUtil.c"
				}
#line 117 "../src/Test/TestUtil.vala"
				_tmp87_ = FALSE;
#line 117 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 117 "../src/Test/TestUtil.vala"
					break;
#line 1623 "TestUtil.c"
				}
#line 118 "../src/Test/TestUtil.vala"
				_tmp90_ = output;
#line 118 "../src/Test/TestUtil.vala"
				_tmp90__length1 = output_length1;
#line 118 "../src/Test/TestUtil.vala"
				_tmp91_ = _tmp90_[i];
#line 118 "../src/Test/TestUtil.vala"
				if (_tmp91_) {
#line 118 "../src/Test/TestUtil.vala"
					_tmp89_ = "1";
#line 1635 "TestUtil.c"
				} else {
#line 118 "../src/Test/TestUtil.vala"
					_tmp89_ = "0";
#line 1639 "TestUtil.c"
				}
#line 118 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp89_);
#line 1643 "TestUtil.c"
			}
		}
	}
#line 120 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 122 "../src/Test/TestUtil.vala"
	g_print ("Binary Division quotient operation:");
#line 123 "../src/Test/TestUtil.vala"
	_tmp92_ = prog_calc;
#line 123 "../src/Test/TestUtil.vala"
	_tmp93_ = input_a;
#line 123 "../src/Test/TestUtil.vala"
	_tmp93__length1 = input_a_length1;
#line 123 "../src/Test/TestUtil.vala"
	_tmp94_ = input_b;
#line 123 "../src/Test/TestUtil.vala"
	_tmp94__length1 = input_b_length1;
#line 123 "../src/Test/TestUtil.vala"
	_tmp95_ = 8;
#line 123 "../src/Test/TestUtil.vala"
	_tmp97_ = pebbles_programmer_division_quotient (_tmp92_, _tmp93_, (gint) _tmp93__length1, _tmp94_, (gint) _tmp94__length1, &_tmp95_, &_tmp96_);
#line 123 "../src/Test/TestUtil.vala"
	_tmp98_ = _tmp97_;
#line 123 "../src/Test/TestUtil.vala"
	_tmp98__length1 = _tmp96_;
#line 123 "../src/Test/TestUtil.vala"
	_tmp98_ = (g_free (_tmp98_), NULL);
#line 124 "../src/Test/TestUtil.vala"
	_tmp99_ = prog_calc;
#line 124 "../src/Test/TestUtil.vala"
	_tmp100_ = _tmp99_->output;
#line 124 "../src/Test/TestUtil.vala"
	_tmp100__length1 = _tmp99_->output_length1;
#line 124 "../src/Test/TestUtil.vala"
	_tmp101_ = (_tmp100_ != NULL) ? _vala_array_dup6 (_tmp100_, _tmp100__length1) : ((gpointer) _tmp100_);
#line 124 "../src/Test/TestUtil.vala"
	_tmp101__length1 = _tmp100__length1;
#line 124 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 124 "../src/Test/TestUtil.vala"
	output = _tmp101_;
#line 124 "../src/Test/TestUtil.vala"
	output_length1 = _tmp101__length1;
#line 124 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1689 "TestUtil.c"
	{
		gint i = 0;
#line 125 "../src/Test/TestUtil.vala"
		i = 0;
#line 1694 "TestUtil.c"
		{
			gboolean _tmp102_ = FALSE;
#line 125 "../src/Test/TestUtil.vala"
			_tmp102_ = TRUE;
#line 125 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1701 "TestUtil.c"
				const gchar* _tmp104_ = NULL;
				gboolean* _tmp105_;
				gint _tmp105__length1;
				gboolean _tmp106_;
#line 125 "../src/Test/TestUtil.vala"
				if (!_tmp102_) {
#line 1708 "TestUtil.c"
					gint _tmp103_;
#line 125 "../src/Test/TestUtil.vala"
					_tmp103_ = i;
#line 125 "../src/Test/TestUtil.vala"
					i = _tmp103_ + 1;
#line 1714 "TestUtil.c"
				}
#line 125 "../src/Test/TestUtil.vala"
				_tmp102_ = FALSE;
#line 125 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 125 "../src/Test/TestUtil.vala"
					break;
#line 1722 "TestUtil.c"
				}
#line 126 "../src/Test/TestUtil.vala"
				_tmp105_ = output;
#line 126 "../src/Test/TestUtil.vala"
				_tmp105__length1 = output_length1;
#line 126 "../src/Test/TestUtil.vala"
				_tmp106_ = _tmp105_[i];
#line 126 "../src/Test/TestUtil.vala"
				if (_tmp106_) {
#line 126 "../src/Test/TestUtil.vala"
					_tmp104_ = "1";
#line 1734 "TestUtil.c"
				} else {
#line 126 "../src/Test/TestUtil.vala"
					_tmp104_ = "0";
#line 1738 "TestUtil.c"
				}
#line 126 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp104_);
#line 1742 "TestUtil.c"
			}
		}
	}
#line 128 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 130 "../src/Test/TestUtil.vala"
	_tmp107_ = prog_calc;
#line 130 "../src/Test/TestUtil.vala"
	_tmp107_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 131 "../src/Test/TestUtil.vala"
	g_print ("Binary And operation:");
#line 132 "../src/Test/TestUtil.vala"
	_tmp108_ = prog_calc;
#line 132 "../src/Test/TestUtil.vala"
	_tmp109_ = input_a;
#line 132 "../src/Test/TestUtil.vala"
	_tmp109__length1 = input_a_length1;
#line 132 "../src/Test/TestUtil.vala"
	_tmp110_ = input_b;
#line 132 "../src/Test/TestUtil.vala"
	_tmp110__length1 = input_b_length1;
#line 132 "../src/Test/TestUtil.vala"
	_tmp111_ = 8;
#line 132 "../src/Test/TestUtil.vala"
	_tmp113_ = pebbles_programmer_and (_tmp108_, _tmp109_, (gint) _tmp109__length1, _tmp110_, (gint) _tmp110__length1, &_tmp111_, &_tmp112_);
#line 132 "../src/Test/TestUtil.vala"
	_tmp114_ = _tmp113_;
#line 132 "../src/Test/TestUtil.vala"
	_tmp114__length1 = _tmp112_;
#line 132 "../src/Test/TestUtil.vala"
	_tmp114_ = (g_free (_tmp114_), NULL);
#line 133 "../src/Test/TestUtil.vala"
	_tmp115_ = prog_calc;
#line 133 "../src/Test/TestUtil.vala"
	_tmp116_ = _tmp115_->output;
#line 133 "../src/Test/TestUtil.vala"
	_tmp116__length1 = _tmp115_->output_length1;
#line 133 "../src/Test/TestUtil.vala"
	_tmp117_ = (_tmp116_ != NULL) ? _vala_array_dup7 (_tmp116_, _tmp116__length1) : ((gpointer) _tmp116_);
#line 133 "../src/Test/TestUtil.vala"
	_tmp117__length1 = _tmp116__length1;
#line 133 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 133 "../src/Test/TestUtil.vala"
	output = _tmp117_;
#line 133 "../src/Test/TestUtil.vala"
	output_length1 = _tmp117__length1;
#line 133 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1792 "TestUtil.c"
	{
		gint i = 0;
#line 134 "../src/Test/TestUtil.vala"
		i = 0;
#line 1797 "TestUtil.c"
		{
			gboolean _tmp118_ = FALSE;
#line 134 "../src/Test/TestUtil.vala"
			_tmp118_ = TRUE;
#line 134 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1804 "TestUtil.c"
				const gchar* _tmp120_ = NULL;
				gboolean* _tmp121_;
				gint _tmp121__length1;
				gboolean _tmp122_;
#line 134 "../src/Test/TestUtil.vala"
				if (!_tmp118_) {
#line 1811 "TestUtil.c"
					gint _tmp119_;
#line 134 "../src/Test/TestUtil.vala"
					_tmp119_ = i;
#line 134 "../src/Test/TestUtil.vala"
					i = _tmp119_ + 1;
#line 1817 "TestUtil.c"
				}
#line 134 "../src/Test/TestUtil.vala"
				_tmp118_ = FALSE;
#line 134 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 134 "../src/Test/TestUtil.vala"
					break;
#line 1825 "TestUtil.c"
				}
#line 135 "../src/Test/TestUtil.vala"
				_tmp121_ = output;
#line 135 "../src/Test/TestUtil.vala"
				_tmp121__length1 = output_length1;
#line 135 "../src/Test/TestUtil.vala"
				_tmp122_ = _tmp121_[i];
#line 135 "../src/Test/TestUtil.vala"
				if (_tmp122_) {
#line 135 "../src/Test/TestUtil.vala"
					_tmp120_ = "1";
#line 1837 "TestUtil.c"
				} else {
#line 135 "../src/Test/TestUtil.vala"
					_tmp120_ = "0";
#line 1841 "TestUtil.c"
				}
#line 135 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp120_);
#line 1845 "TestUtil.c"
			}
		}
	}
#line 137 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 139 "../src/Test/TestUtil.vala"
	_tmp123_ = prog_calc;
#line 139 "../src/Test/TestUtil.vala"
	_tmp123_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 140 "../src/Test/TestUtil.vala"
	g_print ("Binary Nand operation:");
#line 141 "../src/Test/TestUtil.vala"
	_tmp124_ = prog_calc;
#line 141 "../src/Test/TestUtil.vala"
	_tmp125_ = input_a;
#line 141 "../src/Test/TestUtil.vala"
	_tmp125__length1 = input_a_length1;
#line 141 "../src/Test/TestUtil.vala"
	_tmp126_ = input_b;
#line 141 "../src/Test/TestUtil.vala"
	_tmp126__length1 = input_b_length1;
#line 141 "../src/Test/TestUtil.vala"
	_tmp127_ = 8;
#line 141 "../src/Test/TestUtil.vala"
	_tmp129_ = pebbles_programmer_nand (_tmp124_, _tmp125_, (gint) _tmp125__length1, _tmp126_, (gint) _tmp126__length1, &_tmp127_, &_tmp128_);
#line 141 "../src/Test/TestUtil.vala"
	_tmp130_ = _tmp129_;
#line 141 "../src/Test/TestUtil.vala"
	_tmp130__length1 = _tmp128_;
#line 141 "../src/Test/TestUtil.vala"
	_tmp130_ = (g_free (_tmp130_), NULL);
#line 142 "../src/Test/TestUtil.vala"
	_tmp131_ = prog_calc;
#line 142 "../src/Test/TestUtil.vala"
	_tmp132_ = _tmp131_->output;
#line 142 "../src/Test/TestUtil.vala"
	_tmp132__length1 = _tmp131_->output_length1;
#line 142 "../src/Test/TestUtil.vala"
	_tmp133_ = (_tmp132_ != NULL) ? _vala_array_dup8 (_tmp132_, _tmp132__length1) : ((gpointer) _tmp132_);
#line 142 "../src/Test/TestUtil.vala"
	_tmp133__length1 = _tmp132__length1;
#line 142 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 142 "../src/Test/TestUtil.vala"
	output = _tmp133_;
#line 142 "../src/Test/TestUtil.vala"
	output_length1 = _tmp133__length1;
#line 142 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1895 "TestUtil.c"
	{
		gint i = 0;
#line 143 "../src/Test/TestUtil.vala"
		i = 0;
#line 1900 "TestUtil.c"
		{
			gboolean _tmp134_ = FALSE;
#line 143 "../src/Test/TestUtil.vala"
			_tmp134_ = TRUE;
#line 143 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 1907 "TestUtil.c"
				const gchar* _tmp136_ = NULL;
				gboolean* _tmp137_;
				gint _tmp137__length1;
				gboolean _tmp138_;
#line 143 "../src/Test/TestUtil.vala"
				if (!_tmp134_) {
#line 1914 "TestUtil.c"
					gint _tmp135_;
#line 143 "../src/Test/TestUtil.vala"
					_tmp135_ = i;
#line 143 "../src/Test/TestUtil.vala"
					i = _tmp135_ + 1;
#line 1920 "TestUtil.c"
				}
#line 143 "../src/Test/TestUtil.vala"
				_tmp134_ = FALSE;
#line 143 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 143 "../src/Test/TestUtil.vala"
					break;
#line 1928 "TestUtil.c"
				}
#line 144 "../src/Test/TestUtil.vala"
				_tmp137_ = output;
#line 144 "../src/Test/TestUtil.vala"
				_tmp137__length1 = output_length1;
#line 144 "../src/Test/TestUtil.vala"
				_tmp138_ = _tmp137_[i];
#line 144 "../src/Test/TestUtil.vala"
				if (_tmp138_) {
#line 144 "../src/Test/TestUtil.vala"
					_tmp136_ = "1";
#line 1940 "TestUtil.c"
				} else {
#line 144 "../src/Test/TestUtil.vala"
					_tmp136_ = "0";
#line 1944 "TestUtil.c"
				}
#line 144 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp136_);
#line 1948 "TestUtil.c"
			}
		}
	}
#line 146 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 148 "../src/Test/TestUtil.vala"
	_tmp139_ = prog_calc;
#line 148 "../src/Test/TestUtil.vala"
	_tmp139_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 149 "../src/Test/TestUtil.vala"
	g_print ("Binary Or operation:");
#line 150 "../src/Test/TestUtil.vala"
	_tmp140_ = prog_calc;
#line 150 "../src/Test/TestUtil.vala"
	_tmp141_ = input_a;
#line 150 "../src/Test/TestUtil.vala"
	_tmp141__length1 = input_a_length1;
#line 150 "../src/Test/TestUtil.vala"
	_tmp142_ = input_b;
#line 150 "../src/Test/TestUtil.vala"
	_tmp142__length1 = input_b_length1;
#line 150 "../src/Test/TestUtil.vala"
	_tmp143_ = 8;
#line 150 "../src/Test/TestUtil.vala"
	_tmp145_ = pebbles_programmer_or (_tmp140_, _tmp141_, (gint) _tmp141__length1, _tmp142_, (gint) _tmp142__length1, &_tmp143_, &_tmp144_);
#line 150 "../src/Test/TestUtil.vala"
	_tmp146_ = _tmp145_;
#line 150 "../src/Test/TestUtil.vala"
	_tmp146__length1 = _tmp144_;
#line 150 "../src/Test/TestUtil.vala"
	_tmp146_ = (g_free (_tmp146_), NULL);
#line 151 "../src/Test/TestUtil.vala"
	_tmp147_ = prog_calc;
#line 151 "../src/Test/TestUtil.vala"
	_tmp148_ = _tmp147_->output;
#line 151 "../src/Test/TestUtil.vala"
	_tmp148__length1 = _tmp147_->output_length1;
#line 151 "../src/Test/TestUtil.vala"
	_tmp149_ = (_tmp148_ != NULL) ? _vala_array_dup9 (_tmp148_, _tmp148__length1) : ((gpointer) _tmp148_);
#line 151 "../src/Test/TestUtil.vala"
	_tmp149__length1 = _tmp148__length1;
#line 151 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 151 "../src/Test/TestUtil.vala"
	output = _tmp149_;
#line 151 "../src/Test/TestUtil.vala"
	output_length1 = _tmp149__length1;
#line 151 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 1998 "TestUtil.c"
	{
		gint i = 0;
#line 152 "../src/Test/TestUtil.vala"
		i = 0;
#line 2003 "TestUtil.c"
		{
			gboolean _tmp150_ = FALSE;
#line 152 "../src/Test/TestUtil.vala"
			_tmp150_ = TRUE;
#line 152 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 2010 "TestUtil.c"
				const gchar* _tmp152_ = NULL;
				gboolean* _tmp153_;
				gint _tmp153__length1;
				gboolean _tmp154_;
#line 152 "../src/Test/TestUtil.vala"
				if (!_tmp150_) {
#line 2017 "TestUtil.c"
					gint _tmp151_;
#line 152 "../src/Test/TestUtil.vala"
					_tmp151_ = i;
#line 152 "../src/Test/TestUtil.vala"
					i = _tmp151_ + 1;
#line 2023 "TestUtil.c"
				}
#line 152 "../src/Test/TestUtil.vala"
				_tmp150_ = FALSE;
#line 152 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 152 "../src/Test/TestUtil.vala"
					break;
#line 2031 "TestUtil.c"
				}
#line 153 "../src/Test/TestUtil.vala"
				_tmp153_ = output;
#line 153 "../src/Test/TestUtil.vala"
				_tmp153__length1 = output_length1;
#line 153 "../src/Test/TestUtil.vala"
				_tmp154_ = _tmp153_[i];
#line 153 "../src/Test/TestUtil.vala"
				if (_tmp154_) {
#line 153 "../src/Test/TestUtil.vala"
					_tmp152_ = "1";
#line 2043 "TestUtil.c"
				} else {
#line 153 "../src/Test/TestUtil.vala"
					_tmp152_ = "0";
#line 2047 "TestUtil.c"
				}
#line 153 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp152_);
#line 2051 "TestUtil.c"
			}
		}
	}
#line 155 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 157 "../src/Test/TestUtil.vala"
	_tmp155_ = prog_calc;
#line 157 "../src/Test/TestUtil.vala"
	_tmp155_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 158 "../src/Test/TestUtil.vala"
	g_print ("Binary Nor operation:");
#line 159 "../src/Test/TestUtil.vala"
	_tmp156_ = prog_calc;
#line 159 "../src/Test/TestUtil.vala"
	_tmp157_ = input_a;
#line 159 "../src/Test/TestUtil.vala"
	_tmp157__length1 = input_a_length1;
#line 159 "../src/Test/TestUtil.vala"
	_tmp158_ = input_b;
#line 159 "../src/Test/TestUtil.vala"
	_tmp158__length1 = input_b_length1;
#line 159 "../src/Test/TestUtil.vala"
	_tmp159_ = 8;
#line 159 "../src/Test/TestUtil.vala"
	_tmp161_ = pebbles_programmer_nor (_tmp156_, _tmp157_, (gint) _tmp157__length1, _tmp158_, (gint) _tmp158__length1, &_tmp159_, &_tmp160_);
#line 159 "../src/Test/TestUtil.vala"
	_tmp162_ = _tmp161_;
#line 159 "../src/Test/TestUtil.vala"
	_tmp162__length1 = _tmp160_;
#line 159 "../src/Test/TestUtil.vala"
	_tmp162_ = (g_free (_tmp162_), NULL);
#line 160 "../src/Test/TestUtil.vala"
	_tmp163_ = prog_calc;
#line 160 "../src/Test/TestUtil.vala"
	_tmp164_ = _tmp163_->output;
#line 160 "../src/Test/TestUtil.vala"
	_tmp164__length1 = _tmp163_->output_length1;
#line 160 "../src/Test/TestUtil.vala"
	_tmp165_ = (_tmp164_ != NULL) ? _vala_array_dup10 (_tmp164_, _tmp164__length1) : ((gpointer) _tmp164_);
#line 160 "../src/Test/TestUtil.vala"
	_tmp165__length1 = _tmp164__length1;
#line 160 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 160 "../src/Test/TestUtil.vala"
	output = _tmp165_;
#line 160 "../src/Test/TestUtil.vala"
	output_length1 = _tmp165__length1;
#line 160 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 2101 "TestUtil.c"
	{
		gint i = 0;
#line 161 "../src/Test/TestUtil.vala"
		i = 0;
#line 2106 "TestUtil.c"
		{
			gboolean _tmp166_ = FALSE;
#line 161 "../src/Test/TestUtil.vala"
			_tmp166_ = TRUE;
#line 161 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 2113 "TestUtil.c"
				const gchar* _tmp168_ = NULL;
				gboolean* _tmp169_;
				gint _tmp169__length1;
				gboolean _tmp170_;
#line 161 "../src/Test/TestUtil.vala"
				if (!_tmp166_) {
#line 2120 "TestUtil.c"
					gint _tmp167_;
#line 161 "../src/Test/TestUtil.vala"
					_tmp167_ = i;
#line 161 "../src/Test/TestUtil.vala"
					i = _tmp167_ + 1;
#line 2126 "TestUtil.c"
				}
#line 161 "../src/Test/TestUtil.vala"
				_tmp166_ = FALSE;
#line 161 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 161 "../src/Test/TestUtil.vala"
					break;
#line 2134 "TestUtil.c"
				}
#line 162 "../src/Test/TestUtil.vala"
				_tmp169_ = output;
#line 162 "../src/Test/TestUtil.vala"
				_tmp169__length1 = output_length1;
#line 162 "../src/Test/TestUtil.vala"
				_tmp170_ = _tmp169_[i];
#line 162 "../src/Test/TestUtil.vala"
				if (_tmp170_) {
#line 162 "../src/Test/TestUtil.vala"
					_tmp168_ = "1";
#line 2146 "TestUtil.c"
				} else {
#line 162 "../src/Test/TestUtil.vala"
					_tmp168_ = "0";
#line 2150 "TestUtil.c"
				}
#line 162 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp168_);
#line 2154 "TestUtil.c"
			}
		}
	}
#line 164 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 166 "../src/Test/TestUtil.vala"
	_tmp171_ = prog_calc;
#line 166 "../src/Test/TestUtil.vala"
	_tmp171_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 167 "../src/Test/TestUtil.vala"
	g_print ("Binary Xor operation:");
#line 168 "../src/Test/TestUtil.vala"
	_tmp172_ = prog_calc;
#line 168 "../src/Test/TestUtil.vala"
	_tmp173_ = input_a;
#line 168 "../src/Test/TestUtil.vala"
	_tmp173__length1 = input_a_length1;
#line 168 "../src/Test/TestUtil.vala"
	_tmp174_ = input_b;
#line 168 "../src/Test/TestUtil.vala"
	_tmp174__length1 = input_b_length1;
#line 168 "../src/Test/TestUtil.vala"
	_tmp175_ = 8;
#line 168 "../src/Test/TestUtil.vala"
	_tmp177_ = pebbles_programmer_xor (_tmp172_, _tmp173_, (gint) _tmp173__length1, _tmp174_, (gint) _tmp174__length1, &_tmp175_, &_tmp176_);
#line 168 "../src/Test/TestUtil.vala"
	_tmp178_ = _tmp177_;
#line 168 "../src/Test/TestUtil.vala"
	_tmp178__length1 = _tmp176_;
#line 168 "../src/Test/TestUtil.vala"
	_tmp178_ = (g_free (_tmp178_), NULL);
#line 169 "../src/Test/TestUtil.vala"
	_tmp179_ = prog_calc;
#line 169 "../src/Test/TestUtil.vala"
	_tmp180_ = _tmp179_->output;
#line 169 "../src/Test/TestUtil.vala"
	_tmp180__length1 = _tmp179_->output_length1;
#line 169 "../src/Test/TestUtil.vala"
	_tmp181_ = (_tmp180_ != NULL) ? _vala_array_dup11 (_tmp180_, _tmp180__length1) : ((gpointer) _tmp180_);
#line 169 "../src/Test/TestUtil.vala"
	_tmp181__length1 = _tmp180__length1;
#line 169 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 169 "../src/Test/TestUtil.vala"
	output = _tmp181_;
#line 169 "../src/Test/TestUtil.vala"
	output_length1 = _tmp181__length1;
#line 169 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 2204 "TestUtil.c"
	{
		gint i = 0;
#line 170 "../src/Test/TestUtil.vala"
		i = 0;
#line 2209 "TestUtil.c"
		{
			gboolean _tmp182_ = FALSE;
#line 170 "../src/Test/TestUtil.vala"
			_tmp182_ = TRUE;
#line 170 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 2216 "TestUtil.c"
				const gchar* _tmp184_ = NULL;
				gboolean* _tmp185_;
				gint _tmp185__length1;
				gboolean _tmp186_;
#line 170 "../src/Test/TestUtil.vala"
				if (!_tmp182_) {
#line 2223 "TestUtil.c"
					gint _tmp183_;
#line 170 "../src/Test/TestUtil.vala"
					_tmp183_ = i;
#line 170 "../src/Test/TestUtil.vala"
					i = _tmp183_ + 1;
#line 2229 "TestUtil.c"
				}
#line 170 "../src/Test/TestUtil.vala"
				_tmp182_ = FALSE;
#line 170 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 170 "../src/Test/TestUtil.vala"
					break;
#line 2237 "TestUtil.c"
				}
#line 171 "../src/Test/TestUtil.vala"
				_tmp185_ = output;
#line 171 "../src/Test/TestUtil.vala"
				_tmp185__length1 = output_length1;
#line 171 "../src/Test/TestUtil.vala"
				_tmp186_ = _tmp185_[i];
#line 171 "../src/Test/TestUtil.vala"
				if (_tmp186_) {
#line 171 "../src/Test/TestUtil.vala"
					_tmp184_ = "1";
#line 2249 "TestUtil.c"
				} else {
#line 171 "../src/Test/TestUtil.vala"
					_tmp184_ = "0";
#line 2253 "TestUtil.c"
				}
#line 171 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp184_);
#line 2257 "TestUtil.c"
			}
		}
	}
#line 173 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 175 "../src/Test/TestUtil.vala"
	_tmp187_ = prog_calc;
#line 175 "../src/Test/TestUtil.vala"
	_tmp187_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 176 "../src/Test/TestUtil.vala"
	g_print ("Binary Xnor operation:");
#line 177 "../src/Test/TestUtil.vala"
	_tmp188_ = prog_calc;
#line 177 "../src/Test/TestUtil.vala"
	_tmp189_ = input_a;
#line 177 "../src/Test/TestUtil.vala"
	_tmp189__length1 = input_a_length1;
#line 177 "../src/Test/TestUtil.vala"
	_tmp190_ = input_b;
#line 177 "../src/Test/TestUtil.vala"
	_tmp190__length1 = input_b_length1;
#line 177 "../src/Test/TestUtil.vala"
	_tmp191_ = 8;
#line 177 "../src/Test/TestUtil.vala"
	_tmp193_ = pebbles_programmer_xnor (_tmp188_, _tmp189_, (gint) _tmp189__length1, _tmp190_, (gint) _tmp190__length1, &_tmp191_, &_tmp192_);
#line 177 "../src/Test/TestUtil.vala"
	_tmp194_ = _tmp193_;
#line 177 "../src/Test/TestUtil.vala"
	_tmp194__length1 = _tmp192_;
#line 177 "../src/Test/TestUtil.vala"
	_tmp194_ = (g_free (_tmp194_), NULL);
#line 178 "../src/Test/TestUtil.vala"
	_tmp195_ = prog_calc;
#line 178 "../src/Test/TestUtil.vala"
	_tmp196_ = _tmp195_->output;
#line 178 "../src/Test/TestUtil.vala"
	_tmp196__length1 = _tmp195_->output_length1;
#line 178 "../src/Test/TestUtil.vala"
	_tmp197_ = (_tmp196_ != NULL) ? _vala_array_dup12 (_tmp196_, _tmp196__length1) : ((gpointer) _tmp196_);
#line 178 "../src/Test/TestUtil.vala"
	_tmp197__length1 = _tmp196__length1;
#line 178 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 178 "../src/Test/TestUtil.vala"
	output = _tmp197_;
#line 178 "../src/Test/TestUtil.vala"
	output_length1 = _tmp197__length1;
#line 178 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 2307 "TestUtil.c"
	{
		gint i = 0;
#line 179 "../src/Test/TestUtil.vala"
		i = 0;
#line 2312 "TestUtil.c"
		{
			gboolean _tmp198_ = FALSE;
#line 179 "../src/Test/TestUtil.vala"
			_tmp198_ = TRUE;
#line 179 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 2319 "TestUtil.c"
				const gchar* _tmp200_ = NULL;
				gboolean* _tmp201_;
				gint _tmp201__length1;
				gboolean _tmp202_;
#line 179 "../src/Test/TestUtil.vala"
				if (!_tmp198_) {
#line 2326 "TestUtil.c"
					gint _tmp199_;
#line 179 "../src/Test/TestUtil.vala"
					_tmp199_ = i;
#line 179 "../src/Test/TestUtil.vala"
					i = _tmp199_ + 1;
#line 2332 "TestUtil.c"
				}
#line 179 "../src/Test/TestUtil.vala"
				_tmp198_ = FALSE;
#line 179 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 179 "../src/Test/TestUtil.vala"
					break;
#line 2340 "TestUtil.c"
				}
#line 180 "../src/Test/TestUtil.vala"
				_tmp201_ = output;
#line 180 "../src/Test/TestUtil.vala"
				_tmp201__length1 = output_length1;
#line 180 "../src/Test/TestUtil.vala"
				_tmp202_ = _tmp201_[i];
#line 180 "../src/Test/TestUtil.vala"
				if (_tmp202_) {
#line 180 "../src/Test/TestUtil.vala"
					_tmp200_ = "1";
#line 2352 "TestUtil.c"
				} else {
#line 180 "../src/Test/TestUtil.vala"
					_tmp200_ = "0";
#line 2356 "TestUtil.c"
				}
#line 180 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp200_);
#line 2360 "TestUtil.c"
			}
		}
	}
#line 182 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 184 "../src/Test/TestUtil.vala"
	_tmp203_ = prog_calc;
#line 184 "../src/Test/TestUtil.vala"
	_tmp203_->word_size = PEBBLES_WORD_SIZE_BYTE;
#line 185 "../src/Test/TestUtil.vala"
	g_print ("Binary Not operation:");
#line 186 "../src/Test/TestUtil.vala"
	_tmp204_ = prog_calc;
#line 186 "../src/Test/TestUtil.vala"
	_tmp205_ = input_a;
#line 186 "../src/Test/TestUtil.vala"
	_tmp205__length1 = input_a_length1;
#line 186 "../src/Test/TestUtil.vala"
	_tmp206_ = 8;
#line 186 "../src/Test/TestUtil.vala"
	_tmp208_ = pebbles_programmer_not (_tmp204_, _tmp205_, (gint) _tmp205__length1, &_tmp206_, &_tmp207_);
#line 186 "../src/Test/TestUtil.vala"
	_tmp209_ = _tmp208_;
#line 186 "../src/Test/TestUtil.vala"
	_tmp209__length1 = _tmp207_;
#line 186 "../src/Test/TestUtil.vala"
	_tmp209_ = (g_free (_tmp209_), NULL);
#line 187 "../src/Test/TestUtil.vala"
	_tmp210_ = prog_calc;
#line 187 "../src/Test/TestUtil.vala"
	_tmp211_ = _tmp210_->output;
#line 187 "../src/Test/TestUtil.vala"
	_tmp211__length1 = _tmp210_->output_length1;
#line 187 "../src/Test/TestUtil.vala"
	_tmp212_ = (_tmp211_ != NULL) ? _vala_array_dup13 (_tmp211_, _tmp211__length1) : ((gpointer) _tmp211_);
#line 187 "../src/Test/TestUtil.vala"
	_tmp212__length1 = _tmp211__length1;
#line 187 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 187 "../src/Test/TestUtil.vala"
	output = _tmp212_;
#line 187 "../src/Test/TestUtil.vala"
	output_length1 = _tmp212__length1;
#line 187 "../src/Test/TestUtil.vala"
	_output_size_ = output_length1;
#line 2406 "TestUtil.c"
	{
		gint i = 0;
#line 188 "../src/Test/TestUtil.vala"
		i = 0;
#line 2411 "TestUtil.c"
		{
			gboolean _tmp213_ = FALSE;
#line 188 "../src/Test/TestUtil.vala"
			_tmp213_ = TRUE;
#line 188 "../src/Test/TestUtil.vala"
			while (TRUE) {
#line 2418 "TestUtil.c"
				const gchar* _tmp215_ = NULL;
				gboolean* _tmp216_;
				gint _tmp216__length1;
				gboolean _tmp217_;
#line 188 "../src/Test/TestUtil.vala"
				if (!_tmp213_) {
#line 2425 "TestUtil.c"
					gint _tmp214_;
#line 188 "../src/Test/TestUtil.vala"
					_tmp214_ = i;
#line 188 "../src/Test/TestUtil.vala"
					i = _tmp214_ + 1;
#line 2431 "TestUtil.c"
				}
#line 188 "../src/Test/TestUtil.vala"
				_tmp213_ = FALSE;
#line 188 "../src/Test/TestUtil.vala"
				if (!(i < 64)) {
#line 188 "../src/Test/TestUtil.vala"
					break;
#line 2439 "TestUtil.c"
				}
#line 189 "../src/Test/TestUtil.vala"
				_tmp216_ = output;
#line 189 "../src/Test/TestUtil.vala"
				_tmp216__length1 = output_length1;
#line 189 "../src/Test/TestUtil.vala"
				_tmp217_ = _tmp216_[i];
#line 189 "../src/Test/TestUtil.vala"
				if (_tmp217_) {
#line 189 "../src/Test/TestUtil.vala"
					_tmp215_ = "1";
#line 2451 "TestUtil.c"
				} else {
#line 189 "../src/Test/TestUtil.vala"
					_tmp215_ = "0";
#line 2455 "TestUtil.c"
				}
#line 189 "../src/Test/TestUtil.vala"
				g_print ("%s", _tmp215_);
#line 2459 "TestUtil.c"
			}
		}
	}
#line 191 "../src/Test/TestUtil.vala"
	g_print ("\n");
#line 55 "../src/Test/TestUtil.vala"
	output = (g_free (output), NULL);
#line 55 "../src/Test/TestUtil.vala"
	input_b = (g_free (input_b), NULL);
#line 55 "../src/Test/TestUtil.vala"
	input_a = (g_free (input_a), NULL);
#line 55 "../src/Test/TestUtil.vala"
	input2_arr = (_vala_array_free (input2_arr, input2_arr_length1, (GDestroyNotify) g_free), NULL);
#line 55 "../src/Test/TestUtil.vala"
	input1_arr = (_vala_array_free (input1_arr, input1_arr_length1, (GDestroyNotify) g_free), NULL);
#line 55 "../src/Test/TestUtil.vala"
	_pebbles_programmer_unref0 (prog_calc);
#line 2477 "TestUtil.c"
}

static void
pebbles_test_util_test_date_difference (gint d1,
                                        gint m1,
                                        gint y1,
                                        gint d2,
                                        gint m2,
                                        gint y2,
                                        const gchar* days,
                                        const gchar* year,
                                        const gchar* month,
                                        const gchar* week,
                                        const gchar* day)
{
	GDateTime* start_date_time = NULL;
	GTimeZone* _tmp0_;
	GTimeZone* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
	GDateTime* end_date_time = NULL;
	GTimeZone* _tmp4_;
	GTimeZone* _tmp5_;
	GDateTime* _tmp6_;
	GDateTime* _tmp7_;
	PebblesDateCalculator* date_calculator_object = NULL;
	PebblesDateCalculator* _tmp8_;
	gchar* _result_ = NULL;
	PebblesDateCalculator* _tmp9_;
	GDateTime* _tmp10_;
	GDateTime* _tmp11_;
	gchar* _tmp12_;
	const gchar* _tmp13_;
	PebblesDateFormatted* formatted_date_difference = NULL;
	PebblesDateCalculator* _tmp16_;
	GDateTime* _tmp17_;
	GDateTime* _tmp18_;
	PebblesDateFormatted* _tmp19_;
	gchar* res_day = NULL;
	PebblesDateFormatted* _tmp20_;
	gchar* _tmp21_;
	gchar* res_wek = NULL;
	PebblesDateFormatted* _tmp22_;
	gchar* _tmp23_;
	gchar* res_mon = NULL;
	PebblesDateFormatted* _tmp24_;
	gchar* _tmp25_;
	gchar* res_yar = NULL;
	PebblesDateFormatted* _tmp26_;
	gchar* _tmp27_;
	gboolean _tmp28_ = FALSE;
	gboolean _tmp29_ = FALSE;
	gboolean _tmp30_ = FALSE;
	const gchar* _tmp31_;
#line 193 "../src/Test/TestUtil.vala"
	g_return_if_fail (days != NULL);
#line 193 "../src/Test/TestUtil.vala"
	g_return_if_fail (year != NULL);
#line 193 "../src/Test/TestUtil.vala"
	g_return_if_fail (month != NULL);
#line 193 "../src/Test/TestUtil.vala"
	g_return_if_fail (week != NULL);
#line 193 "../src/Test/TestUtil.vala"
	g_return_if_fail (day != NULL);
#line 194 "../src/Test/TestUtil.vala"
	_tmp0_ = g_time_zone_new_local ();
#line 194 "../src/Test/TestUtil.vala"
	_tmp1_ = _tmp0_;
#line 194 "../src/Test/TestUtil.vala"
	_tmp2_ = g_date_time_new (_tmp1_, y1, m1, d1, 0, 0, (gdouble) 0);
#line 194 "../src/Test/TestUtil.vala"
	_tmp3_ = _tmp2_;
#line 194 "../src/Test/TestUtil.vala"
	_g_time_zone_unref0 (_tmp1_);
#line 194 "../src/Test/TestUtil.vala"
	start_date_time = _tmp3_;
#line 195 "../src/Test/TestUtil.vala"
	_tmp4_ = g_time_zone_new_local ();
#line 195 "../src/Test/TestUtil.vala"
	_tmp5_ = _tmp4_;
#line 195 "../src/Test/TestUtil.vala"
	_tmp6_ = g_date_time_new (_tmp5_, y2, m2, d2, 0, 0, (gdouble) 0);
#line 195 "../src/Test/TestUtil.vala"
	_tmp7_ = _tmp6_;
#line 195 "../src/Test/TestUtil.vala"
	_g_time_zone_unref0 (_tmp5_);
#line 195 "../src/Test/TestUtil.vala"
	end_date_time = _tmp7_;
#line 196 "../src/Test/TestUtil.vala"
	_tmp8_ = pebbles_date_calculator_new ();
#line 196 "../src/Test/TestUtil.vala"
	date_calculator_object = _tmp8_;
#line 197 "../src/Test/TestUtil.vala"
	_tmp9_ = date_calculator_object;
#line 197 "../src/Test/TestUtil.vala"
	_tmp10_ = start_date_time;
#line 197 "../src/Test/TestUtil.vala"
	_tmp11_ = end_date_time;
#line 197 "../src/Test/TestUtil.vala"
	_tmp12_ = pebbles_date_calculator_date_difference (_tmp9_, _tmp10_, _tmp11_);
#line 197 "../src/Test/TestUtil.vala"
	_result_ = _tmp12_;
#line 198 "../src/Test/TestUtil.vala"
	_tmp13_ = _result_;
#line 198 "../src/Test/TestUtil.vala"
	if (g_strcmp0 (_tmp13_, days) != 0) {
#line 2584 "TestUtil.c"
		FILE* _tmp14_;
		const gchar* _tmp15_;
#line 199 "../src/Test/TestUtil.vala"
		_tmp14_ = stdout;
#line 199 "../src/Test/TestUtil.vala"
		_tmp15_ = _result_;
#line 199 "../src/Test/TestUtil.vala"
		fprintf (_tmp14_, "[ERROR] Given %d/%d/%d to %d/%d/%d, we are getting %s, we should get %" \
"s\n", d1, m1, y1, d2, m2, y2, _tmp15_, days);
#line 2593 "TestUtil.c"
	}
#line 201 "../src/Test/TestUtil.vala"
	_tmp16_ = date_calculator_object;
#line 201 "../src/Test/TestUtil.vala"
	_tmp17_ = start_date_time;
#line 201 "../src/Test/TestUtil.vala"
	_tmp18_ = end_date_time;
#line 201 "../src/Test/TestUtil.vala"
	_tmp19_ = pebbles_date_calculator_difference_formatter (_tmp16_, _tmp17_, _tmp18_);
#line 201 "../src/Test/TestUtil.vala"
	formatted_date_difference = _tmp19_;
#line 202 "../src/Test/TestUtil.vala"
	_tmp20_ = formatted_date_difference;
#line 202 "../src/Test/TestUtil.vala"
	_tmp21_ = g_strdup_printf ("%i", _tmp20_->day);
#line 202 "../src/Test/TestUtil.vala"
	res_day = _tmp21_;
#line 203 "../src/Test/TestUtil.vala"
	_tmp22_ = formatted_date_difference;
#line 203 "../src/Test/TestUtil.vala"
	_tmp23_ = g_strdup_printf ("%i", _tmp22_->week);
#line 203 "../src/Test/TestUtil.vala"
	res_wek = _tmp23_;
#line 204 "../src/Test/TestUtil.vala"
	_tmp24_ = formatted_date_difference;
#line 204 "../src/Test/TestUtil.vala"
	_tmp25_ = g_strdup_printf ("%i", _tmp24_->month);
#line 204 "../src/Test/TestUtil.vala"
	res_mon = _tmp25_;
#line 205 "../src/Test/TestUtil.vala"
	_tmp26_ = formatted_date_difference;
#line 205 "../src/Test/TestUtil.vala"
	_tmp27_ = g_strdup_printf ("%i", _tmp26_->year);
#line 205 "../src/Test/TestUtil.vala"
	res_yar = _tmp27_;
#line 206 "../src/Test/TestUtil.vala"
	_tmp31_ = res_day;
#line 206 "../src/Test/TestUtil.vala"
	if (g_strcmp0 (_tmp31_, day) != 0) {
#line 206 "../src/Test/TestUtil.vala"
		_tmp30_ = TRUE;
#line 2635 "TestUtil.c"
	} else {
		const gchar* _tmp32_;
#line 206 "../src/Test/TestUtil.vala"
		_tmp32_ = res_wek;
#line 206 "../src/Test/TestUtil.vala"
		_tmp30_ = g_strcmp0 (_tmp32_, week) != 0;
#line 2642 "TestUtil.c"
	}
#line 206 "../src/Test/TestUtil.vala"
	if (_tmp30_) {
#line 206 "../src/Test/TestUtil.vala"
		_tmp29_ = TRUE;
#line 2648 "TestUtil.c"
	} else {
		const gchar* _tmp33_;
#line 206 "../src/Test/TestUtil.vala"
		_tmp33_ = res_mon;
#line 206 "../src/Test/TestUtil.vala"
		_tmp29_ = g_strcmp0 (_tmp33_, month) != 0;
#line 2655 "TestUtil.c"
	}
#line 206 "../src/Test/TestUtil.vala"
	if (_tmp29_) {
#line 206 "../src/Test/TestUtil.vala"
		_tmp28_ = TRUE;
#line 2661 "TestUtil.c"
	} else {
		const gchar* _tmp34_;
#line 206 "../src/Test/TestUtil.vala"
		_tmp34_ = res_yar;
#line 206 "../src/Test/TestUtil.vala"
		_tmp28_ = g_strcmp0 (_tmp34_, year) != 0;
#line 2668 "TestUtil.c"
	}
#line 206 "../src/Test/TestUtil.vala"
	if (_tmp28_) {
#line 2672 "TestUtil.c"
		FILE* _tmp35_;
		const gchar* _tmp36_;
		const gchar* _tmp37_;
		const gchar* _tmp38_;
		const gchar* _tmp39_;
		FILE* _tmp40_;
#line 207 "../src/Test/TestUtil.vala"
		_tmp35_ = stdout;
#line 207 "../src/Test/TestUtil.vala"
		_tmp36_ = res_yar;
#line 207 "../src/Test/TestUtil.vala"
		_tmp37_ = res_mon;
#line 207 "../src/Test/TestUtil.vala"
		_tmp38_ = res_wek;
#line 207 "../src/Test/TestUtil.vala"
		_tmp39_ = res_day;
#line 207 "../src/Test/TestUtil.vala"
		fprintf (_tmp35_, "[ERROR] Given %d/%d/%d to %d/%d/%d, we are getting %s years %s months " \
"%s weeks %s days,\n", d1, m1, y1, d2, m2, y2, _tmp36_, _tmp37_, _tmp38_, _tmp39_);
#line 208 "../src/Test/TestUtil.vala"
		_tmp40_ = stdout;
#line 208 "../src/Test/TestUtil.vala"
		fprintf (_tmp40_, "        we should get %s years %s months %s weeks %s days.\n", year, month, week, day);
#line 2695 "TestUtil.c"
	}
#line 193 "../src/Test/TestUtil.vala"
	_g_free0 (res_yar);
#line 193 "../src/Test/TestUtil.vala"
	_g_free0 (res_mon);
#line 193 "../src/Test/TestUtil.vala"
	_g_free0 (res_wek);
#line 193 "../src/Test/TestUtil.vala"
	_g_free0 (res_day);
#line 193 "../src/Test/TestUtil.vala"
	_pebbles_date_formatted_unref0 (formatted_date_difference);
#line 193 "../src/Test/TestUtil.vala"
	_g_free0 (_result_);
#line 193 "../src/Test/TestUtil.vala"
	_pebbles_date_calculator_unref0 (date_calculator_object);
#line 193 "../src/Test/TestUtil.vala"
	_g_date_time_unref0 (end_date_time);
#line 193 "../src/Test/TestUtil.vala"
	_g_date_time_unref0 (start_date_time);
#line 2715 "TestUtil.c"
}

void
pebbles_test_util_run_test (void)
{
	FILE* _tmp0_;
	FILE* _tmp1_;
	FILE* _tmp2_;
	FILE* _tmp3_;
	FILE* _tmp4_;
	FILE* _tmp5_;
	PebblesGlobalAngleUnit _tmp6_;
	PebblesGlobalAngleUnit _tmp7_;
	PebblesGlobalAngleUnit _tmp8_;
	PebblesGlobalAngleUnit _tmp9_;
	PebblesGlobalAngleUnit _tmp10_;
	PebblesGlobalAngleUnit _tmp11_;
	PebblesGlobalAngleUnit _tmp12_;
	PebblesGlobalAngleUnit _tmp13_;
	PebblesGlobalAngleUnit _tmp14_;
	PebblesGlobalAngleUnit _tmp15_;
	PebblesGlobalAngleUnit _tmp16_;
	PebblesGlobalAngleUnit _tmp17_;
	PebblesGlobalAngleUnit _tmp18_;
	PebblesGlobalAngleUnit _tmp19_;
	PebblesGlobalAngleUnit _tmp20_;
	PebblesGlobalAngleUnit _tmp21_;
	PebblesGlobalAngleUnit _tmp22_;
	PebblesGlobalAngleUnit _tmp23_;
	PebblesGlobalAngleUnit _tmp24_;
	PebblesGlobalAngleUnit _tmp25_;
	PebblesGlobalAngleUnit _tmp26_;
	PebblesGlobalAngleUnit _tmp27_;
	PebblesGlobalAngleUnit _tmp28_;
	PebblesGlobalAngleUnit _tmp29_;
	PebblesGlobalAngleUnit _tmp30_;
	PebblesGlobalAngleUnit _tmp31_;
	PebblesGlobalAngleUnit _tmp32_;
	PebblesGlobalAngleUnit _tmp33_;
	PebblesGlobalAngleUnit _tmp34_;
	PebblesGlobalAngleUnit _tmp35_;
	PebblesGlobalAngleUnit _tmp36_;
	PebblesGlobalAngleUnit _tmp37_;
	PebblesGlobalAngleUnit _tmp38_;
	PebblesGlobalAngleUnit _tmp39_;
	PebblesGlobalAngleUnit _tmp40_;
	PebblesGlobalAngleUnit _tmp41_;
	PebblesGlobalAngleUnit _tmp42_;
	PebblesGlobalAngleUnit _tmp43_;
	PebblesGlobalAngleUnit _tmp44_;
	PebblesGlobalAngleUnit _tmp45_;
	PebblesGlobalAngleUnit _tmp46_;
	PebblesGlobalAngleUnit _tmp47_;
	PebblesGlobalAngleUnit _tmp48_;
	PebblesGlobalAngleUnit _tmp49_;
	PebblesGlobalAngleUnit _tmp50_;
	PebblesGlobalAngleUnit _tmp51_;
	PebblesGlobalAngleUnit _tmp52_;
	FILE* _tmp53_;
	FILE* _tmp54_;
	FILE* _tmp55_;
	FILE* _tmp56_;
	FILE* _tmp57_;
	FILE* _tmp58_;
#line 212 "../src/Test/TestUtil.vala"
	pebbles_test_util_show_greeter ();
#line 213 "../src/Test/TestUtil.vala"
	_tmp0_ = stdout;
#line 213 "../src/Test/TestUtil.vala"
	fprintf (_tmp0_, "\nTesting Tokenization...\n");
#line 214 "../src/Test/TestUtil.vala"
	_tmp1_ = stdout;
#line 214 "../src/Test/TestUtil.vala"
	fprintf (_tmp1_, "-------------------------------------------------------------\n");
#line 224 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_tokenize ("sin60 + (tan 30)");
#line 225 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_tokenize ("4\xC3\xB7 2");
#line 226 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_tokenize ("sin60 + (tan 30)\xC3\x97 cos\xCF\x80 \xC3\xB7 2 + (isin 0.5 - itan 0.3" \
"5 ^ icos0.854)");
#line 227 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_tokenize ("sin 45+5 \xC3\x97 isin 80 + 9 sinh \xF0\x9D\x9B\xBE + \xCF\x86 - isinh" \
" \xF0\x9D\x9B\x87(3)");
#line 228 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_tokenize ("log e\xC3\xB7 (ln K - 8P2 - 10C7)");
#line 229 "../src/Test/TestUtil.vala"
	_tmp2_ = stdout;
#line 229 "../src/Test/TestUtil.vala"
	fprintf (_tmp2_, "\nTesting Bracket Balance Check...\n");
#line 230 "../src/Test/TestUtil.vala"
	_tmp3_ = stdout;
#line 230 "../src/Test/TestUtil.vala"
	fprintf (_tmp3_, "-------------------------------------------------------------");
#line 231 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_tokenize ("2 + (9 - 5)\xC3\x97 5  - (8-7))");
#line 233 "../src/Test/TestUtil.vala"
	_tmp4_ = stdout;
#line 233 "../src/Test/TestUtil.vala"
	fprintf (_tmp4_, "\nTesting Scientific Calculator\n");
#line 234 "../src/Test/TestUtil.vala"
	_tmp5_ = stdout;
#line 234 "../src/Test/TestUtil.vala"
	fprintf (_tmp5_, "-------------------------------------------------------------\n");
#line 236 "../src/Test/TestUtil.vala"
	_tmp6_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 236 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("2+2", "4", &_tmp6_);
#line 237 "../src/Test/TestUtil.vala"
	_tmp7_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 237 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("4.23+    1.11", "5.34", &_tmp7_);
#line 238 "../src/Test/TestUtil.vala"
	_tmp8_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 238 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific (".13+.51", "0.64", &_tmp8_);
#line 239 "../src/Test/TestUtil.vala"
	_tmp9_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 239 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("25.123 - 234.2", "-209.077", &_tmp9_);
#line 240 "../src/Test/TestUtil.vala"
	_tmp10_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 240 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("1*1", "1", &_tmp10_);
#line 241 "../src/Test/TestUtil.vala"
	_tmp11_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 241 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("11 *1.1", "12.1", &_tmp11_);
#line 242 "../src/Test/TestUtil.vala"
	_tmp12_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 242 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("5*-1", "-5", &_tmp12_);
#line 243 "../src/Test/TestUtil.vala"
	_tmp13_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 243 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("5* - 3.000", "-15", &_tmp13_);
#line 244 "../src/Test/TestUtil.vala"
	_tmp14_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 244 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("-1/-1", "1", &_tmp14_);
#line 245 "../src/Test/TestUtil.vala"
	_tmp15_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 245 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("4\xC3\xB7 2", "2", &_tmp15_);
#line 246 "../src/Test/TestUtil.vala"
	_tmp16_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 246 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("44÷2", "22", &_tmp16_);
#line 247 "../src/Test/TestUtil.vala"
	_tmp17_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 247 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("4/2", "2", &_tmp17_);
#line 248 "../src/Test/TestUtil.vala"
	_tmp18_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 248 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("89×5", "445", &_tmp18_);
#line 249 "../src/Test/TestUtil.vala"
	_tmp19_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 249 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("69×52", "3,588", &_tmp19_);
#line 250 "../src/Test/TestUtil.vala"
	_tmp20_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 250 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("-1 / (−1)", "1", &_tmp20_);
#line 251 "../src/Test/TestUtil.vala"
	_tmp21_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 251 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("144 / 15", "9.6", &_tmp21_);
#line 252 "../src/Test/TestUtil.vala"
	_tmp22_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 252 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("14400 / 12", "1,200", &_tmp22_);
#line 253 "../src/Test/TestUtil.vala"
	_tmp23_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 253 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("144000 / 12", "12,000", &_tmp23_);
#line 254 "../src/Test/TestUtil.vala"
	_tmp24_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 254 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("3456^0.5 - sqrt(3456)", "0", &_tmp24_);
#line 255 "../src/Test/TestUtil.vala"
	_tmp25_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 255 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("3456^-0.5 * sqrt(3456)", "1", &_tmp25_);
#line 256 "../src/Test/TestUtil.vala"
	_tmp26_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 256 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("723 mod 5", "3", &_tmp26_);
#line 257 "../src/Test/TestUtil.vala"
	_tmp27_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 257 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("2%", "0.02", &_tmp27_);
#line 258 "../src/Test/TestUtil.vala"
	_tmp28_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 258 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("(2 + 2)% - 0.04", "0", &_tmp28_);
#line 259 "../src/Test/TestUtil.vala"
	_tmp29_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 259 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("14E-2", "0.14", &_tmp29_);
#line 260 "../src/Test/TestUtil.vala"
	_tmp30_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 260 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("1.1E2 - 1E1", "100", &_tmp30_);
#line 262 "../src/Test/TestUtil.vala"
	_tmp31_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 262 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("2 * pi", "6.283185307", &_tmp31_);
#line 263 "../src/Test/TestUtil.vala"
	_tmp32_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 263 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("pi - 2", "1.141592654", &_tmp32_);
#line 264 "../src/Test/TestUtil.vala"
	_tmp33_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 264 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("(π)", "3.141592654", &_tmp33_);
#line 265 "../src/Test/TestUtil.vala"
	_tmp34_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 265 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("e", "2.718281828", &_tmp34_);
#line 267 "../src/Test/TestUtil.vala"
	_tmp35_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 267 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sqrt (144)", "12", &_tmp35_);
#line 268 "../src/Test/TestUtil.vala"
	_tmp36_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 268 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sqr 2", "4", &_tmp36_);
#line 269 "../src/Test/TestUtil.vala"
	_tmp37_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 269 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("√423", "20.566963801", &_tmp37_);
#line 270 "../src/Test/TestUtil.vala"
	_tmp38_ = PEBBLES_GLOBAL_ANGLE_UNIT_RAD;
#line 270 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sin(pi ÷ 2)", "1", &_tmp38_);
#line 271 "../src/Test/TestUtil.vala"
	_tmp39_ = PEBBLES_GLOBAL_ANGLE_UNIT_RAD;
#line 271 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sin(-pi)", "0", &_tmp39_);
#line 272 "../src/Test/TestUtil.vala"
	_tmp40_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 272 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("cos(90)", "0", &_tmp40_);
#line 273 "../src/Test/TestUtil.vala"
	_tmp41_ = PEBBLES_GLOBAL_ANGLE_UNIT_RAD;
#line 273 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sinh(2)", "3.626860408", &_tmp41_);
#line 274 "../src/Test/TestUtil.vala"
	_tmp42_ = PEBBLES_GLOBAL_ANGLE_UNIT_RAD;
#line 274 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("cosh2", "3.762195691", &_tmp42_);
#line 275 "../src/Test/TestUtil.vala"
	_tmp43_ = PEBBLES_GLOBAL_ANGLE_UNIT_RAD;
#line 275 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sin(0.123)^2 + cos(0.123)^2", "4", &_tmp43_);
#line 276 "../src/Test/TestUtil.vala"
	_tmp44_ = PEBBLES_GLOBAL_ANGLE_UNIT_RAD;
#line 276 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("tan(0.245) - sin(0.245) / cos(0.245)", "4", &_tmp44_);
#line 278 "../src/Test/TestUtil.vala"
	_tmp45_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 278 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sqrt(5^2 - 4^2)", "3", &_tmp45_);
#line 279 "../src/Test/TestUtil.vala"
	_tmp46_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 279 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sqrt(423) + (3.23 * 8.56) - 1E2", "-51.784236199", &_tmp46_);
#line 280 "../src/Test/TestUtil.vala"
	_tmp47_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 280 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("sqrt(-1 + 423 + 1) + (3.23 * 8.56) - sin(90 + 0.2)", "47.428606036", &_tmp47_);
#line 281 "../src/Test/TestUtil.vala"
	_tmp48_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 281 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("e^5.25 / exp(5.25)", "1", &_tmp48_);
#line 282 "../src/Test/TestUtil.vala"
	_tmp49_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 282 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("pi * pi", "9.869604401", &_tmp49_);
#line 283 "../src/Test/TestUtil.vala"
	_tmp50_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 283 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("10 + 5 - 10%", "14.9", &_tmp50_);
#line 284 "../src/Test/TestUtil.vala"
	_tmp51_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 284 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("100 + 20%", "120", &_tmp51_);
#line 285 "../src/Test/TestUtil.vala"
	_tmp52_ = PEBBLES_GLOBAL_ANGLE_UNIT_DEG;
#line 285 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_scientific ("20% + 100", "100.2", &_tmp52_);
#line 287 "../src/Test/TestUtil.vala"
	_tmp53_ = stdout;
#line 287 "../src/Test/TestUtil.vala"
	fprintf (_tmp53_, "\nIntegration Testing Programmer Calculator\n");
#line 288 "../src/Test/TestUtil.vala"
	_tmp54_ = stdout;
#line 288 "../src/Test/TestUtil.vala"
	fprintf (_tmp54_, "-------------------------------------------------------------\n");
#line 290 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_programmer_integration ();
#line 292 "../src/Test/TestUtil.vala"
	_tmp55_ = stdout;
#line 292 "../src/Test/TestUtil.vala"
	fprintf (_tmp55_, "\nTesting Programmer New Calculator\n");
#line 293 "../src/Test/TestUtil.vala"
	_tmp56_ = stdout;
#line 293 "../src/Test/TestUtil.vala"
	fprintf (_tmp56_, "-------------------------------------------------------------\n");
#line 295 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_programmer ("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1");
#line 296 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_programmer ("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1");
#line 297 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_programmer ("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"1 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1");
#line 298 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_programmer ("0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 " \
"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1");
#line 300 "../src/Test/TestUtil.vala"
	_tmp57_ = stdout;
#line 300 "../src/Test/TestUtil.vala"
	fprintf (_tmp57_, "\nTesting Date Difference Calculator\n");
#line 301 "../src/Test/TestUtil.vala"
	_tmp58_ = stdout;
#line 301 "../src/Test/TestUtil.vala"
	fprintf (_tmp58_, "-------------------------------------------------------------\n");
#line 303 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_date_difference (20, 11, 2018, 30, 11, 2018, "10", "0", "0", "1", "3");
#line 304 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_date_difference (17, 1, 2019, 7, 2, 2042, "8422", "23", "0", "3", "0");
#line 305 "../src/Test/TestUtil.vala"
	pebbles_test_util_test_date_difference (20, 11, 2018, 20, 11, 2018, "0", "0", "0", "0", "0");
#line 3046 "TestUtil.c"
}

PebblesTestUtil*
pebbles_test_util_construct (GType object_type)
{
	PebblesTestUtil* self = NULL;
#line 23 "../src/Test/TestUtil.vala"
	self = (PebblesTestUtil*) g_type_create_instance (object_type);
#line 23 "../src/Test/TestUtil.vala"
	return self;
#line 3057 "TestUtil.c"
}

PebblesTestUtil*
pebbles_test_util_new (void)
{
#line 23 "../src/Test/TestUtil.vala"
	return pebbles_test_util_construct (PEBBLES_TYPE_TEST_UTIL);
#line 3065 "TestUtil.c"
}

static void
pebbles_value_test_util_init (GValue* value)
{
#line 23 "../src/Test/TestUtil.vala"
	value->data[0].v_pointer = NULL;
#line 3073 "TestUtil.c"
}

static void
pebbles_value_test_util_free_value (GValue* value)
{
#line 23 "../src/Test/TestUtil.vala"
	if (value->data[0].v_pointer) {
#line 23 "../src/Test/TestUtil.vala"
		pebbles_test_util_unref (value->data[0].v_pointer);
#line 3083 "TestUtil.c"
	}
}

static void
pebbles_value_test_util_copy_value (const GValue* src_value,
                                    GValue* dest_value)
{
#line 23 "../src/Test/TestUtil.vala"
	if (src_value->data[0].v_pointer) {
#line 23 "../src/Test/TestUtil.vala"
		dest_value->data[0].v_pointer = pebbles_test_util_ref (src_value->data[0].v_pointer);
#line 3095 "TestUtil.c"
	} else {
#line 23 "../src/Test/TestUtil.vala"
		dest_value->data[0].v_pointer = NULL;
#line 3099 "TestUtil.c"
	}
}

static gpointer
pebbles_value_test_util_peek_pointer (const GValue* value)
{
#line 23 "../src/Test/TestUtil.vala"
	return value->data[0].v_pointer;
#line 3108 "TestUtil.c"
}

static gchar*
pebbles_value_test_util_collect_value (GValue* value,
                                       guint n_collect_values,
                                       GTypeCValue* collect_values,
                                       guint collect_flags)
{
#line 23 "../src/Test/TestUtil.vala"
	if (collect_values[0].v_pointer) {
#line 3119 "TestUtil.c"
		PebblesTestUtil * object;
		object = collect_values[0].v_pointer;
#line 23 "../src/Test/TestUtil.vala"
		if (object->parent_instance.g_class == NULL) {
#line 23 "../src/Test/TestUtil.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3126 "TestUtil.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 23 "../src/Test/TestUtil.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3130 "TestUtil.c"
		}
#line 23 "../src/Test/TestUtil.vala"
		value->data[0].v_pointer = pebbles_test_util_ref (object);
#line 3134 "TestUtil.c"
	} else {
#line 23 "../src/Test/TestUtil.vala"
		value->data[0].v_pointer = NULL;
#line 3138 "TestUtil.c"
	}
#line 23 "../src/Test/TestUtil.vala"
	return NULL;
#line 3142 "TestUtil.c"
}

static gchar*
pebbles_value_test_util_lcopy_value (const GValue* value,
                                     guint n_collect_values,
                                     GTypeCValue* collect_values,
                                     guint collect_flags)
{
	PebblesTestUtil ** object_p;
	object_p = collect_values[0].v_pointer;
#line 23 "../src/Test/TestUtil.vala"
	if (!object_p) {
#line 23 "../src/Test/TestUtil.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 3157 "TestUtil.c"
	}
#line 23 "../src/Test/TestUtil.vala"
	if (!value->data[0].v_pointer) {
#line 23 "../src/Test/TestUtil.vala"
		*object_p = NULL;
#line 3163 "TestUtil.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 23 "../src/Test/TestUtil.vala"
		*object_p = value->data[0].v_pointer;
#line 3167 "TestUtil.c"
	} else {
#line 23 "../src/Test/TestUtil.vala"
		*object_p = pebbles_test_util_ref (value->data[0].v_pointer);
#line 3171 "TestUtil.c"
	}
#line 23 "../src/Test/TestUtil.vala"
	return NULL;
#line 3175 "TestUtil.c"
}

GParamSpec*
pebbles_param_spec_test_util (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags)
{
	PebblesParamSpecTestUtil* spec;
#line 23 "../src/Test/TestUtil.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_TEST_UTIL), NULL);
#line 23 "../src/Test/TestUtil.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 23 "../src/Test/TestUtil.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 23 "../src/Test/TestUtil.vala"
	return G_PARAM_SPEC (spec);
#line 3194 "TestUtil.c"
}

gpointer
pebbles_value_get_test_util (const GValue* value)
{
#line 23 "../src/Test/TestUtil.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_TEST_UTIL), NULL);
#line 23 "../src/Test/TestUtil.vala"
	return value->data[0].v_pointer;
#line 3204 "TestUtil.c"
}

void
pebbles_value_set_test_util (GValue* value,
                             gpointer v_object)
{
	PebblesTestUtil * old;
#line 23 "../src/Test/TestUtil.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_TEST_UTIL));
#line 23 "../src/Test/TestUtil.vala"
	old = value->data[0].v_pointer;
#line 23 "../src/Test/TestUtil.vala"
	if (v_object) {
#line 23 "../src/Test/TestUtil.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_TEST_UTIL));
#line 23 "../src/Test/TestUtil.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../src/Test/TestUtil.vala"
		value->data[0].v_pointer = v_object;
#line 23 "../src/Test/TestUtil.vala"
		pebbles_test_util_ref (value->data[0].v_pointer);
#line 3226 "TestUtil.c"
	} else {
#line 23 "../src/Test/TestUtil.vala"
		value->data[0].v_pointer = NULL;
#line 3230 "TestUtil.c"
	}
#line 23 "../src/Test/TestUtil.vala"
	if (old) {
#line 23 "../src/Test/TestUtil.vala"
		pebbles_test_util_unref (old);
#line 3236 "TestUtil.c"
	}
}

void
pebbles_value_take_test_util (GValue* value,
                              gpointer v_object)
{
	PebblesTestUtil * old;
#line 23 "../src/Test/TestUtil.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_TEST_UTIL));
#line 23 "../src/Test/TestUtil.vala"
	old = value->data[0].v_pointer;
#line 23 "../src/Test/TestUtil.vala"
	if (v_object) {
#line 23 "../src/Test/TestUtil.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_TEST_UTIL));
#line 23 "../src/Test/TestUtil.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 23 "../src/Test/TestUtil.vala"
		value->data[0].v_pointer = v_object;
#line 3257 "TestUtil.c"
	} else {
#line 23 "../src/Test/TestUtil.vala"
		value->data[0].v_pointer = NULL;
#line 3261 "TestUtil.c"
	}
#line 23 "../src/Test/TestUtil.vala"
	if (old) {
#line 23 "../src/Test/TestUtil.vala"
		pebbles_test_util_unref (old);
#line 3267 "TestUtil.c"
	}
}

static void
pebbles_test_util_class_init (PebblesTestUtilClass * klass,
                              gpointer klass_data)
{
#line 23 "../src/Test/TestUtil.vala"
	pebbles_test_util_parent_class = g_type_class_peek_parent (klass);
#line 23 "../src/Test/TestUtil.vala"
	((PebblesTestUtilClass *) klass)->finalize = pebbles_test_util_finalize;
#line 3279 "TestUtil.c"
}

static void
pebbles_test_util_instance_init (PebblesTestUtil * self,
                                 gpointer klass)
{
#line 23 "../src/Test/TestUtil.vala"
	self->ref_count = 1;
#line 3288 "TestUtil.c"
}

static void
pebbles_test_util_finalize (PebblesTestUtil * obj)
{
	PebblesTestUtil * self;
#line 23 "../src/Test/TestUtil.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_TEST_UTIL, PebblesTestUtil);
#line 23 "../src/Test/TestUtil.vala"
	g_signal_handlers_destroy (self);
#line 3299 "TestUtil.c"
}

static GType
pebbles_test_util_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_test_util_init, pebbles_value_test_util_free_value, pebbles_value_test_util_copy_value, pebbles_value_test_util_peek_pointer, "p", pebbles_value_test_util_collect_value, "p", pebbles_value_test_util_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesTestUtilClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_test_util_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesTestUtil), 0, (GInstanceInitFunc) pebbles_test_util_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_test_util_type_id;
	pebbles_test_util_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesTestUtil", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_test_util_type_id;
}

GType
pebbles_test_util_get_type (void)
{
	static volatile gsize pebbles_test_util_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_test_util_type_id__volatile)) {
		GType pebbles_test_util_type_id;
		pebbles_test_util_type_id = pebbles_test_util_get_type_once ();
		g_once_init_leave (&pebbles_test_util_type_id__volatile, pebbles_test_util_type_id);
	}
	return pebbles_test_util_type_id__volatile;
}

gpointer
pebbles_test_util_ref (gpointer instance)
{
	PebblesTestUtil * self;
	self = instance;
#line 23 "../src/Test/TestUtil.vala"
	g_atomic_int_inc (&self->ref_count);
#line 23 "../src/Test/TestUtil.vala"
	return instance;
#line 3334 "TestUtil.c"
}

void
pebbles_test_util_unref (gpointer instance)
{
	PebblesTestUtil * self;
	self = instance;
#line 23 "../src/Test/TestUtil.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 23 "../src/Test/TestUtil.vala"
		PEBBLES_TEST_UTIL_GET_CLASS (self)->finalize (self);
#line 23 "../src/Test/TestUtil.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 3348 "TestUtil.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


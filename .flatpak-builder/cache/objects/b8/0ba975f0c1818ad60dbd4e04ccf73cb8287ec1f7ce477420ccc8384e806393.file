/* BoolArrayStack.c generated by valac 0.48.14, the Vala compiler
 * generated from BoolArrayStack.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#define TYPE_BOOL_ARRAY_STACK (bool_array_stack_get_type ())
#define BOOL_ARRAY_STACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BOOL_ARRAY_STACK, BoolArrayStack))
#define BOOL_ARRAY_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BOOL_ARRAY_STACK, BoolArrayStackClass))
#define IS_BOOL_ARRAY_STACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BOOL_ARRAY_STACK))
#define IS_BOOL_ARRAY_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BOOL_ARRAY_STACK))
#define BOOL_ARRAY_STACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BOOL_ARRAY_STACK, BoolArrayStackClass))

typedef struct _BoolArrayStack BoolArrayStack;
typedef struct _BoolArrayStackClass BoolArrayStackClass;
typedef struct _BoolArrayStackPrivate BoolArrayStackPrivate;
typedef struct _ParamSpecBoolArrayStack ParamSpecBoolArrayStack;

struct _BoolArrayStack {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BoolArrayStackPrivate * priv;
	gboolean* stack;
	gint stack_length1;
	gint stack_length2;
};

struct _BoolArrayStackClass {
	GTypeClass parent_class;
	void (*finalize) (BoolArrayStack *self);
};

struct _BoolArrayStackPrivate {
	gint tp;
	gint n;
	gboolean* temp;
	gint temp_length1;
	gint _temp_size_;
};

struct _ParamSpecBoolArrayStack {
	GParamSpec parent_instance;
};

static gint BoolArrayStack_private_offset;
static gpointer bool_array_stack_parent_class = NULL;

gpointer bool_array_stack_ref (gpointer instance);
void bool_array_stack_unref (gpointer instance);
GParamSpec* param_spec_bool_array_stack (const gchar* name,
                                         const gchar* nick,
                                         const gchar* blurb,
                                         GType object_type,
                                         GParamFlags flags);
void value_set_bool_array_stack (GValue* value,
                                 gpointer v_object);
void value_take_bool_array_stack (GValue* value,
                                  gpointer v_object);
gpointer value_get_bool_array_stack (const GValue* value);
GType bool_array_stack_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BoolArrayStack, bool_array_stack_unref)
BoolArrayStack* bool_array_stack_new (gint num);
BoolArrayStack* bool_array_stack_construct (GType object_type,
                                            gint num);
gboolean bool_array_stack_push (BoolArrayStack* self,
                                gboolean* elem,
                                gint elem_length1);
gboolean* bool_array_stack_pop (BoolArrayStack* self,
                                gint* result_length1);
static gboolean* _vala_array_dup37 (gboolean* self,
                             gint length);
static void bool_array_stack_finalize (BoolArrayStack * obj);
static GType bool_array_stack_get_type_once (void);

static inline gpointer
bool_array_stack_get_instance_private (BoolArrayStack* self)
{
	return G_STRUCT_MEMBER_P (self, BoolArrayStack_private_offset);
}

BoolArrayStack*
bool_array_stack_construct (GType object_type,
                            gint num)
{
	BoolArrayStack* self = NULL;
	gboolean* _tmp0_;
#line 6 "../src/Core/BoolArrayStack.vala"
	self = (BoolArrayStack*) g_type_create_instance (object_type);
#line 7 "../src/Core/BoolArrayStack.vala"
	self->priv->n = num;
#line 8 "../src/Core/BoolArrayStack.vala"
	_tmp0_ = g_new0 (gboolean, num * 64);
#line 8 "../src/Core/BoolArrayStack.vala"
	self->stack = (g_free (self->stack), NULL);
#line 8 "../src/Core/BoolArrayStack.vala"
	self->stack = _tmp0_;
#line 8 "../src/Core/BoolArrayStack.vala"
	self->stack_length1 = num;
#line 8 "../src/Core/BoolArrayStack.vala"
	self->stack_length2 = 64;
#line 9 "../src/Core/BoolArrayStack.vala"
	self->priv->tp = -1;
#line 6 "../src/Core/BoolArrayStack.vala"
	return self;
#line 107 "BoolArrayStack.c"
}

BoolArrayStack*
bool_array_stack_new (gint num)
{
#line 6 "../src/Core/BoolArrayStack.vala"
	return bool_array_stack_construct (TYPE_BOOL_ARRAY_STACK, num);
#line 115 "BoolArrayStack.c"
}

gboolean
bool_array_stack_push (BoolArrayStack* self,
                       gboolean* elem,
                       gint elem_length1)
{
	gboolean result = FALSE;
#line 11 "../src/Core/BoolArrayStack.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 12 "../src/Core/BoolArrayStack.vala"
	if (self->priv->tp < self->priv->n) {
#line 128 "BoolArrayStack.c"
		gint _tmp0_;
#line 13 "../src/Core/BoolArrayStack.vala"
		_tmp0_ = self->priv->tp;
#line 13 "../src/Core/BoolArrayStack.vala"
		self->priv->tp = _tmp0_ + 1;
#line 134 "BoolArrayStack.c"
		{
			gint i = 0;
#line 14 "../src/Core/BoolArrayStack.vala"
			i = 0;
#line 139 "BoolArrayStack.c"
			{
				gboolean _tmp1_ = FALSE;
#line 14 "../src/Core/BoolArrayStack.vala"
				_tmp1_ = TRUE;
#line 14 "../src/Core/BoolArrayStack.vala"
				while (TRUE) {
#line 146 "BoolArrayStack.c"
					gboolean* _tmp3_;
					gint _tmp3__length1;
					gint _tmp3__length2;
					gboolean _tmp4_;
#line 14 "../src/Core/BoolArrayStack.vala"
					if (!_tmp1_) {
#line 153 "BoolArrayStack.c"
						gint _tmp2_;
#line 14 "../src/Core/BoolArrayStack.vala"
						_tmp2_ = i;
#line 14 "../src/Core/BoolArrayStack.vala"
						i = _tmp2_ + 1;
#line 159 "BoolArrayStack.c"
					}
#line 14 "../src/Core/BoolArrayStack.vala"
					_tmp1_ = FALSE;
#line 14 "../src/Core/BoolArrayStack.vala"
					if (!(i < 64)) {
#line 14 "../src/Core/BoolArrayStack.vala"
						break;
#line 167 "BoolArrayStack.c"
					}
#line 15 "../src/Core/BoolArrayStack.vala"
					_tmp3_ = self->stack;
#line 15 "../src/Core/BoolArrayStack.vala"
					_tmp3__length1 = self->stack_length1;
#line 15 "../src/Core/BoolArrayStack.vala"
					_tmp3__length2 = self->stack_length2;
#line 15 "../src/Core/BoolArrayStack.vala"
					_tmp4_ = elem[i];
#line 15 "../src/Core/BoolArrayStack.vala"
					_tmp3_[(self->priv->tp * _tmp3__length2) + i] = _tmp4_;
#line 179 "BoolArrayStack.c"
				}
			}
		}
#line 17 "../src/Core/BoolArrayStack.vala"
		result = TRUE;
#line 17 "../src/Core/BoolArrayStack.vala"
		return result;
#line 187 "BoolArrayStack.c"
	} else {
#line 20 "../src/Core/BoolArrayStack.vala"
		result = FALSE;
#line 20 "../src/Core/BoolArrayStack.vala"
		return result;
#line 193 "BoolArrayStack.c"
	}
}

static gboolean*
_vala_array_dup37 (gboolean* self,
                   gint length)
{
#line 30 "../src/Core/BoolArrayStack.vala"
	if (length > 0) {
#line 30 "../src/Core/BoolArrayStack.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 205 "BoolArrayStack.c"
	}
#line 30 "../src/Core/BoolArrayStack.vala"
	return NULL;
#line 209 "BoolArrayStack.c"
}

gboolean*
bool_array_stack_pop (BoolArrayStack* self,
                      gint* result_length1)
{
	gboolean* _tmp0_;
	gboolean* temp_bool = NULL;
	gboolean* _tmp10_;
	gint temp_bool_length1;
	gint _temp_bool_size_;
	gboolean* _tmp11_;
	gint _tmp11__length1;
	gboolean* result = NULL;
#line 23 "../src/Core/BoolArrayStack.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "../src/Core/BoolArrayStack.vala"
	_tmp0_ = g_new0 (gboolean, 64);
#line 24 "../src/Core/BoolArrayStack.vala"
	self->priv->temp = (g_free (self->priv->temp), NULL);
#line 24 "../src/Core/BoolArrayStack.vala"
	self->priv->temp = _tmp0_;
#line 24 "../src/Core/BoolArrayStack.vala"
	self->priv->temp_length1 = 64;
#line 24 "../src/Core/BoolArrayStack.vala"
	self->priv->_temp_size_ = self->priv->temp_length1;
#line 25 "../src/Core/BoolArrayStack.vala"
	if (self->priv->tp >= 0) {
#line 238 "BoolArrayStack.c"
		gint _tmp6_;
		gboolean* _tmp7_;
		gint _tmp7__length1;
		gboolean* _tmp8_;
		gint _tmp8__length1;
		gboolean* _tmp9_;
		gint _tmp9__length1;
		{
			gint i = 0;
#line 26 "../src/Core/BoolArrayStack.vala"
			i = 0;
#line 250 "BoolArrayStack.c"
			{
				gboolean _tmp1_ = FALSE;
#line 26 "../src/Core/BoolArrayStack.vala"
				_tmp1_ = TRUE;
#line 26 "../src/Core/BoolArrayStack.vala"
				while (TRUE) {
#line 257 "BoolArrayStack.c"
					gboolean* _tmp3_;
					gint _tmp3__length1;
					gboolean* _tmp4_;
					gint _tmp4__length1;
					gint _tmp4__length2;
					gboolean _tmp5_;
#line 26 "../src/Core/BoolArrayStack.vala"
					if (!_tmp1_) {
#line 266 "BoolArrayStack.c"
						gint _tmp2_;
#line 26 "../src/Core/BoolArrayStack.vala"
						_tmp2_ = i;
#line 26 "../src/Core/BoolArrayStack.vala"
						i = _tmp2_ + 1;
#line 272 "BoolArrayStack.c"
					}
#line 26 "../src/Core/BoolArrayStack.vala"
					_tmp1_ = FALSE;
#line 26 "../src/Core/BoolArrayStack.vala"
					if (!(i < 64)) {
#line 26 "../src/Core/BoolArrayStack.vala"
						break;
#line 280 "BoolArrayStack.c"
					}
#line 27 "../src/Core/BoolArrayStack.vala"
					_tmp3_ = self->priv->temp;
#line 27 "../src/Core/BoolArrayStack.vala"
					_tmp3__length1 = self->priv->temp_length1;
#line 27 "../src/Core/BoolArrayStack.vala"
					_tmp4_ = self->stack;
#line 27 "../src/Core/BoolArrayStack.vala"
					_tmp4__length1 = self->stack_length1;
#line 27 "../src/Core/BoolArrayStack.vala"
					_tmp4__length2 = self->stack_length2;
#line 27 "../src/Core/BoolArrayStack.vala"
					_tmp5_ = _tmp4_[(self->priv->tp * _tmp4__length2) + i];
#line 27 "../src/Core/BoolArrayStack.vala"
					_tmp3_[i] = _tmp5_;
#line 296 "BoolArrayStack.c"
				}
			}
		}
#line 29 "../src/Core/BoolArrayStack.vala"
		_tmp6_ = self->priv->tp;
#line 29 "../src/Core/BoolArrayStack.vala"
		self->priv->tp = _tmp6_ - 1;
#line 30 "../src/Core/BoolArrayStack.vala"
		_tmp7_ = self->priv->temp;
#line 30 "../src/Core/BoolArrayStack.vala"
		_tmp7__length1 = self->priv->temp_length1;
#line 30 "../src/Core/BoolArrayStack.vala"
		_tmp8_ = (_tmp7_ != NULL) ? _vala_array_dup37 (_tmp7_, _tmp7__length1) : ((gpointer) _tmp7_);
#line 30 "../src/Core/BoolArrayStack.vala"
		_tmp8__length1 = _tmp7__length1;
#line 30 "../src/Core/BoolArrayStack.vala"
		_tmp9_ = _tmp8_;
#line 30 "../src/Core/BoolArrayStack.vala"
		_tmp9__length1 = _tmp8__length1;
#line 30 "../src/Core/BoolArrayStack.vala"
		if (result_length1) {
#line 30 "../src/Core/BoolArrayStack.vala"
			*result_length1 = _tmp9__length1;
#line 320 "BoolArrayStack.c"
		}
#line 30 "../src/Core/BoolArrayStack.vala"
		result = _tmp9_;
#line 30 "../src/Core/BoolArrayStack.vala"
		return result;
#line 326 "BoolArrayStack.c"
	}
#line 32 "../src/Core/BoolArrayStack.vala"
	_tmp10_ = g_new0 (gboolean, 64);
#line 32 "../src/Core/BoolArrayStack.vala"
	temp_bool = _tmp10_;
#line 32 "../src/Core/BoolArrayStack.vala"
	temp_bool_length1 = 64;
#line 32 "../src/Core/BoolArrayStack.vala"
	_temp_bool_size_ = temp_bool_length1;
#line 33 "../src/Core/BoolArrayStack.vala"
	_tmp11_ = temp_bool;
#line 33 "../src/Core/BoolArrayStack.vala"
	_tmp11__length1 = temp_bool_length1;
#line 33 "../src/Core/BoolArrayStack.vala"
	if (result_length1) {
#line 33 "../src/Core/BoolArrayStack.vala"
		*result_length1 = _tmp11__length1;
#line 344 "BoolArrayStack.c"
	}
#line 33 "../src/Core/BoolArrayStack.vala"
	result = _tmp11_;
#line 33 "../src/Core/BoolArrayStack.vala"
	return result;
#line 350 "BoolArrayStack.c"
}

static void
value_bool_array_stack_init (GValue* value)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	value->data[0].v_pointer = NULL;
#line 358 "BoolArrayStack.c"
}

static void
value_bool_array_stack_free_value (GValue* value)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	if (value->data[0].v_pointer) {
#line 1 "../src/Core/BoolArrayStack.vala"
		bool_array_stack_unref (value->data[0].v_pointer);
#line 368 "BoolArrayStack.c"
	}
}

static void
value_bool_array_stack_copy_value (const GValue* src_value,
                                   GValue* dest_value)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	if (src_value->data[0].v_pointer) {
#line 1 "../src/Core/BoolArrayStack.vala"
		dest_value->data[0].v_pointer = bool_array_stack_ref (src_value->data[0].v_pointer);
#line 380 "BoolArrayStack.c"
	} else {
#line 1 "../src/Core/BoolArrayStack.vala"
		dest_value->data[0].v_pointer = NULL;
#line 384 "BoolArrayStack.c"
	}
}

static gpointer
value_bool_array_stack_peek_pointer (const GValue* value)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	return value->data[0].v_pointer;
#line 393 "BoolArrayStack.c"
}

static gchar*
value_bool_array_stack_collect_value (GValue* value,
                                      guint n_collect_values,
                                      GTypeCValue* collect_values,
                                      guint collect_flags)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	if (collect_values[0].v_pointer) {
#line 404 "BoolArrayStack.c"
		BoolArrayStack * object;
		object = collect_values[0].v_pointer;
#line 1 "../src/Core/BoolArrayStack.vala"
		if (object->parent_instance.g_class == NULL) {
#line 1 "../src/Core/BoolArrayStack.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 411 "BoolArrayStack.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 1 "../src/Core/BoolArrayStack.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 415 "BoolArrayStack.c"
		}
#line 1 "../src/Core/BoolArrayStack.vala"
		value->data[0].v_pointer = bool_array_stack_ref (object);
#line 419 "BoolArrayStack.c"
	} else {
#line 1 "../src/Core/BoolArrayStack.vala"
		value->data[0].v_pointer = NULL;
#line 423 "BoolArrayStack.c"
	}
#line 1 "../src/Core/BoolArrayStack.vala"
	return NULL;
#line 427 "BoolArrayStack.c"
}

static gchar*
value_bool_array_stack_lcopy_value (const GValue* value,
                                    guint n_collect_values,
                                    GTypeCValue* collect_values,
                                    guint collect_flags)
{
	BoolArrayStack ** object_p;
	object_p = collect_values[0].v_pointer;
#line 1 "../src/Core/BoolArrayStack.vala"
	if (!object_p) {
#line 1 "../src/Core/BoolArrayStack.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 442 "BoolArrayStack.c"
	}
#line 1 "../src/Core/BoolArrayStack.vala"
	if (!value->data[0].v_pointer) {
#line 1 "../src/Core/BoolArrayStack.vala"
		*object_p = NULL;
#line 448 "BoolArrayStack.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 1 "../src/Core/BoolArrayStack.vala"
		*object_p = value->data[0].v_pointer;
#line 452 "BoolArrayStack.c"
	} else {
#line 1 "../src/Core/BoolArrayStack.vala"
		*object_p = bool_array_stack_ref (value->data[0].v_pointer);
#line 456 "BoolArrayStack.c"
	}
#line 1 "../src/Core/BoolArrayStack.vala"
	return NULL;
#line 460 "BoolArrayStack.c"
}

GParamSpec*
param_spec_bool_array_stack (const gchar* name,
                             const gchar* nick,
                             const gchar* blurb,
                             GType object_type,
                             GParamFlags flags)
{
	ParamSpecBoolArrayStack* spec;
#line 1 "../src/Core/BoolArrayStack.vala"
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_BOOL_ARRAY_STACK), NULL);
#line 1 "../src/Core/BoolArrayStack.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 1 "../src/Core/BoolArrayStack.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 1 "../src/Core/BoolArrayStack.vala"
	return G_PARAM_SPEC (spec);
#line 479 "BoolArrayStack.c"
}

gpointer
value_get_bool_array_stack (const GValue* value)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BOOL_ARRAY_STACK), NULL);
#line 1 "../src/Core/BoolArrayStack.vala"
	return value->data[0].v_pointer;
#line 489 "BoolArrayStack.c"
}

void
value_set_bool_array_stack (GValue* value,
                            gpointer v_object)
{
	BoolArrayStack * old;
#line 1 "../src/Core/BoolArrayStack.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BOOL_ARRAY_STACK));
#line 1 "../src/Core/BoolArrayStack.vala"
	old = value->data[0].v_pointer;
#line 1 "../src/Core/BoolArrayStack.vala"
	if (v_object) {
#line 1 "../src/Core/BoolArrayStack.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BOOL_ARRAY_STACK));
#line 1 "../src/Core/BoolArrayStack.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 1 "../src/Core/BoolArrayStack.vala"
		value->data[0].v_pointer = v_object;
#line 1 "../src/Core/BoolArrayStack.vala"
		bool_array_stack_ref (value->data[0].v_pointer);
#line 511 "BoolArrayStack.c"
	} else {
#line 1 "../src/Core/BoolArrayStack.vala"
		value->data[0].v_pointer = NULL;
#line 515 "BoolArrayStack.c"
	}
#line 1 "../src/Core/BoolArrayStack.vala"
	if (old) {
#line 1 "../src/Core/BoolArrayStack.vala"
		bool_array_stack_unref (old);
#line 521 "BoolArrayStack.c"
	}
}

void
value_take_bool_array_stack (GValue* value,
                             gpointer v_object)
{
	BoolArrayStack * old;
#line 1 "../src/Core/BoolArrayStack.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BOOL_ARRAY_STACK));
#line 1 "../src/Core/BoolArrayStack.vala"
	old = value->data[0].v_pointer;
#line 1 "../src/Core/BoolArrayStack.vala"
	if (v_object) {
#line 1 "../src/Core/BoolArrayStack.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BOOL_ARRAY_STACK));
#line 1 "../src/Core/BoolArrayStack.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 1 "../src/Core/BoolArrayStack.vala"
		value->data[0].v_pointer = v_object;
#line 542 "BoolArrayStack.c"
	} else {
#line 1 "../src/Core/BoolArrayStack.vala"
		value->data[0].v_pointer = NULL;
#line 546 "BoolArrayStack.c"
	}
#line 1 "../src/Core/BoolArrayStack.vala"
	if (old) {
#line 1 "../src/Core/BoolArrayStack.vala"
		bool_array_stack_unref (old);
#line 552 "BoolArrayStack.c"
	}
}

static void
bool_array_stack_class_init (BoolArrayStackClass * klass,
                             gpointer klass_data)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	bool_array_stack_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Core/BoolArrayStack.vala"
	((BoolArrayStackClass *) klass)->finalize = bool_array_stack_finalize;
#line 1 "../src/Core/BoolArrayStack.vala"
	g_type_class_adjust_private_offset (klass, &BoolArrayStack_private_offset);
#line 566 "BoolArrayStack.c"
}

static void
bool_array_stack_instance_init (BoolArrayStack * self,
                                gpointer klass)
{
#line 1 "../src/Core/BoolArrayStack.vala"
	self->priv = bool_array_stack_get_instance_private (self);
#line 1 "../src/Core/BoolArrayStack.vala"
	self->ref_count = 1;
#line 577 "BoolArrayStack.c"
}

static void
bool_array_stack_finalize (BoolArrayStack * obj)
{
	BoolArrayStack * self;
#line 1 "../src/Core/BoolArrayStack.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BOOL_ARRAY_STACK, BoolArrayStack);
#line 1 "../src/Core/BoolArrayStack.vala"
	g_signal_handlers_destroy (self);
#line 2 "../src/Core/BoolArrayStack.vala"
	self->stack = (g_free (self->stack), NULL);
#line 5 "../src/Core/BoolArrayStack.vala"
	self->priv->temp = (g_free (self->priv->temp), NULL);
#line 592 "BoolArrayStack.c"
}

static GType
bool_array_stack_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_bool_array_stack_init, value_bool_array_stack_free_value, value_bool_array_stack_copy_value, value_bool_array_stack_peek_pointer, "p", value_bool_array_stack_collect_value, "p", value_bool_array_stack_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BoolArrayStackClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bool_array_stack_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (BoolArrayStack), 0, (GInstanceInitFunc) bool_array_stack_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType bool_array_stack_type_id;
	bool_array_stack_type_id = g_type_register_fundamental (g_type_fundamental_next (), "BoolArrayStack", &g_define_type_info, &g_define_type_fundamental_info, 0);
	BoolArrayStack_private_offset = g_type_add_instance_private (bool_array_stack_type_id, sizeof (BoolArrayStackPrivate));
	return bool_array_stack_type_id;
}

GType
bool_array_stack_get_type (void)
{
	static volatile gsize bool_array_stack_type_id__volatile = 0;
	if (g_once_init_enter (&bool_array_stack_type_id__volatile)) {
		GType bool_array_stack_type_id;
		bool_array_stack_type_id = bool_array_stack_get_type_once ();
		g_once_init_leave (&bool_array_stack_type_id__volatile, bool_array_stack_type_id);
	}
	return bool_array_stack_type_id__volatile;
}

gpointer
bool_array_stack_ref (gpointer instance)
{
	BoolArrayStack * self;
	self = instance;
#line 1 "../src/Core/BoolArrayStack.vala"
	g_atomic_int_inc (&self->ref_count);
#line 1 "../src/Core/BoolArrayStack.vala"
	return instance;
#line 628 "BoolArrayStack.c"
}

void
bool_array_stack_unref (gpointer instance)
{
	BoolArrayStack * self;
	self = instance;
#line 1 "../src/Core/BoolArrayStack.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 1 "../src/Core/BoolArrayStack.vala"
		BOOL_ARRAY_STACK_GET_CLASS (self)->finalize (self);
#line 1 "../src/Core/BoolArrayStack.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 642 "BoolArrayStack.c"
	}
}


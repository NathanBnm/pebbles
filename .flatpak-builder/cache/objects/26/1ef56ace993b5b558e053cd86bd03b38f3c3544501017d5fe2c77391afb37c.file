/* ValidatedEntry.c generated by valac 0.48.14, the Vala compiler
 * generated from ValidatedEntry.vala, do not modify */

/*
* Copyright 2020 elementary, Inc. (https://elementary.io)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*/

#include <gtk/gtk.h>
#include <glib-object.h>
#include <glib.h>

#define GRANITE_TYPE_VALIDATED_ENTRY (granite_validated_entry_get_type ())
#define GRANITE_VALIDATED_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_TYPE_VALIDATED_ENTRY, GraniteValidatedEntry))
#define GRANITE_VALIDATED_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_TYPE_VALIDATED_ENTRY, GraniteValidatedEntryClass))
#define GRANITE_IS_VALIDATED_ENTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_TYPE_VALIDATED_ENTRY))
#define GRANITE_IS_VALIDATED_ENTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_TYPE_VALIDATED_ENTRY))
#define GRANITE_VALIDATED_ENTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_TYPE_VALIDATED_ENTRY, GraniteValidatedEntryClass))

typedef struct _GraniteValidatedEntry GraniteValidatedEntry;
typedef struct _GraniteValidatedEntryClass GraniteValidatedEntryClass;
typedef struct _GraniteValidatedEntryPrivate GraniteValidatedEntryPrivate;
enum  {
	GRANITE_VALIDATED_ENTRY_0_PROPERTY,
	GRANITE_VALIDATED_ENTRY_IS_VALID_PROPERTY,
	GRANITE_VALIDATED_ENTRY_NUM_PROPERTIES
};
static GParamSpec* granite_validated_entry_properties[GRANITE_VALIDATED_ENTRY_NUM_PROPERTIES];
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
typedef struct _Block14Data Block14Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _GraniteValidatedEntry {
	GtkEntry parent_instance;
	GraniteValidatedEntryPrivate * priv;
};

struct _GraniteValidatedEntryClass {
	GtkEntryClass parent_class;
};

struct _GraniteValidatedEntryPrivate {
	gboolean _is_valid;
};

struct _Block14Data {
	int _ref_count_;
	GraniteValidatedEntry* self;
	GRegex* regex;
};

static gint GraniteValidatedEntry_private_offset;
static gpointer granite_validated_entry_parent_class = NULL;

GType granite_validated_entry_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteValidatedEntry, g_object_unref)
gboolean granite_validated_entry_get_is_valid (GraniteValidatedEntry* self);
void granite_validated_entry_set_is_valid (GraniteValidatedEntry* self,
                                           gboolean value);
GraniteValidatedEntry* granite_validated_entry_new_from_regex (GRegex* regex);
GraniteValidatedEntry* granite_validated_entry_construct_from_regex (GType object_type,
                                                                     GRegex* regex);
static Block14Data* block14_data_ref (Block14Data* _data14_);
static void block14_data_unref (void * _userdata_);
static void __lambda95_ (Block14Data* _data14_);
static void ___lambda95__gtk_editable_changed (GtkEditable* _sender,
                                        gpointer self);
GraniteValidatedEntry* granite_validated_entry_new (void);
GraniteValidatedEntry* granite_validated_entry_construct (GType object_type);
static GObject * granite_validated_entry_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties);
static void _granite_validated_entry___lambda96_ (GraniteValidatedEntry* self);
static void __granite_validated_entry___lambda96__gtk_editable_changed (GtkEditable* _sender,
                                                                 gpointer self);
static void granite_validated_entry_finalize (GObject * obj);
static GType granite_validated_entry_get_type_once (void);
static void _vala_granite_validated_entry_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec);
static void _vala_granite_validated_entry_set_property (GObject * object,
                                                 guint property_id,
                                                 const GValue * value,
                                                 GParamSpec * pspec);

static inline gpointer
granite_validated_entry_get_instance_private (GraniteValidatedEntry* self)
{
	return G_STRUCT_MEMBER_P (self, GraniteValidatedEntry_private_offset);
}

gboolean
granite_validated_entry_get_is_valid (GraniteValidatedEntry* self)
{
	gboolean result;
#line 55 "../lib/Widgets/ValidatedEntry.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 55 "../lib/Widgets/ValidatedEntry.vala"
	result = self->priv->_is_valid;
#line 55 "../lib/Widgets/ValidatedEntry.vala"
	return result;
#line 118 "ValidatedEntry.c"
}

void
granite_validated_entry_set_is_valid (GraniteValidatedEntry* self,
                                      gboolean value)
{
	gboolean old_value;
#line 55 "../lib/Widgets/ValidatedEntry.vala"
	g_return_if_fail (self != NULL);
#line 55 "../lib/Widgets/ValidatedEntry.vala"
	old_value = granite_validated_entry_get_is_valid (self);
#line 55 "../lib/Widgets/ValidatedEntry.vala"
	if (old_value != value) {
#line 55 "../lib/Widgets/ValidatedEntry.vala"
		self->priv->_is_valid = value;
#line 55 "../lib/Widgets/ValidatedEntry.vala"
		g_object_notify_by_pspec ((GObject *) self, granite_validated_entry_properties[GRANITE_VALIDATED_ENTRY_IS_VALID_PROPERTY]);
#line 136 "ValidatedEntry.c"
	}
}

static gpointer
_g_regex_ref0 (gpointer self)
{
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	return self ? g_regex_ref (self) : NULL;
#line 145 "ValidatedEntry.c"
}

static Block14Data*
block14_data_ref (Block14Data* _data14_)
{
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	g_atomic_int_inc (&_data14_->_ref_count_);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	return _data14_;
#line 155 "ValidatedEntry.c"
}

static void
block14_data_unref (void * _userdata_)
{
	Block14Data* _data14_;
	_data14_ = (Block14Data*) _userdata_;
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	if (g_atomic_int_dec_and_test (&_data14_->_ref_count_)) {
#line 165 "ValidatedEntry.c"
		GraniteValidatedEntry* self;
#line 57 "../lib/Widgets/ValidatedEntry.vala"
		self = _data14_->self;
#line 57 "../lib/Widgets/ValidatedEntry.vala"
		_g_regex_unref0 (_data14_->regex);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
		_g_object_unref0 (self);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
		g_slice_free (Block14Data, _data14_);
#line 175 "ValidatedEntry.c"
	}
}

static void
__lambda95_ (Block14Data* _data14_)
{
	GraniteValidatedEntry* self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 58 "../lib/Widgets/ValidatedEntry.vala"
	self = _data14_->self;
#line 59 "../lib/Widgets/ValidatedEntry.vala"
	_tmp0_ = gtk_entry_get_text ((GtkEntry*) self);
#line 59 "../lib/Widgets/ValidatedEntry.vala"
	_tmp1_ = _tmp0_;
#line 59 "../lib/Widgets/ValidatedEntry.vala"
	granite_validated_entry_set_is_valid (self, g_regex_match (_data14_->regex, _tmp1_, 0, NULL));
#line 193 "ValidatedEntry.c"
}

static void
___lambda95__gtk_editable_changed (GtkEditable* _sender,
                                   gpointer self)
{
#line 58 "../lib/Widgets/ValidatedEntry.vala"
	__lambda95_ (self);
#line 202 "ValidatedEntry.c"
}

GraniteValidatedEntry*
granite_validated_entry_construct_from_regex (GType object_type,
                                              GRegex* regex)
{
	GraniteValidatedEntry * self = NULL;
	Block14Data* _data14_;
	GRegex* _tmp0_;
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	g_return_val_if_fail (regex != NULL, NULL);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	_data14_ = g_slice_new0 (Block14Data);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	_data14_->_ref_count_ = 1;
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	_tmp0_ = _g_regex_ref0 (regex);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	_g_regex_unref0 (_data14_->regex);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	_data14_->regex = _tmp0_;
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	self = (GraniteValidatedEntry*) g_object_new (object_type, NULL);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	_data14_->self = g_object_ref (self);
#line 58 "../lib/Widgets/ValidatedEntry.vala"
	g_signal_connect_data ((GtkEditable*) self, "changed", (GCallback) ___lambda95__gtk_editable_changed, block14_data_ref (_data14_), (GClosureNotify) block14_data_unref, 0);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	block14_data_unref (_data14_);
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	_data14_ = NULL;
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	return self;
#line 236 "ValidatedEntry.c"
}

GraniteValidatedEntry*
granite_validated_entry_new_from_regex (GRegex* regex)
{
#line 57 "../lib/Widgets/ValidatedEntry.vala"
	return granite_validated_entry_construct_from_regex (GRANITE_TYPE_VALIDATED_ENTRY, regex);
#line 244 "ValidatedEntry.c"
}

GraniteValidatedEntry*
granite_validated_entry_construct (GType object_type)
{
	GraniteValidatedEntry * self = NULL;
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	self = (GraniteValidatedEntry*) g_object_new (object_type, NULL);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	return self;
#line 255 "ValidatedEntry.c"
}

GraniteValidatedEntry*
granite_validated_entry_new (void)
{
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	return granite_validated_entry_construct (GRANITE_TYPE_VALIDATED_ENTRY);
#line 263 "ValidatedEntry.c"
}

static void
_granite_validated_entry___lambda96_ (GraniteValidatedEntry* self)
{
	GtkStyleContext* style_context = NULL;
	GtkStyleContext* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 67 "../lib/Widgets/ValidatedEntry.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 67 "../lib/Widgets/ValidatedEntry.vala"
	style_context = _tmp0_;
#line 69 "../lib/Widgets/ValidatedEntry.vala"
	_tmp1_ = gtk_entry_get_text ((GtkEntry*) self);
#line 69 "../lib/Widgets/ValidatedEntry.vala"
	_tmp2_ = _tmp1_;
#line 69 "../lib/Widgets/ValidatedEntry.vala"
	if (g_strcmp0 (_tmp2_, "") == 0) {
#line 283 "ValidatedEntry.c"
		GtkStyleContext* _tmp3_;
#line 70 "../lib/Widgets/ValidatedEntry.vala"
		g_object_set ((GtkEntry*) self, "secondary-icon-name", NULL, NULL);
#line 71 "../lib/Widgets/ValidatedEntry.vala"
		_tmp3_ = style_context;
#line 71 "../lib/Widgets/ValidatedEntry.vala"
		gtk_style_context_remove_class (_tmp3_, GTK_STYLE_CLASS_ERROR);
#line 291 "ValidatedEntry.c"
	} else {
		gboolean _tmp4_;
#line 72 "../lib/Widgets/ValidatedEntry.vala"
		_tmp4_ = self->priv->_is_valid;
#line 72 "../lib/Widgets/ValidatedEntry.vala"
		if (_tmp4_) {
#line 298 "ValidatedEntry.c"
			GtkStyleContext* _tmp5_;
#line 73 "../lib/Widgets/ValidatedEntry.vala"
			g_object_set ((GtkEntry*) self, "secondary-icon-name", "process-completed-symbolic", NULL);
#line 74 "../lib/Widgets/ValidatedEntry.vala"
			_tmp5_ = style_context;
#line 74 "../lib/Widgets/ValidatedEntry.vala"
			gtk_style_context_remove_class (_tmp5_, GTK_STYLE_CLASS_ERROR);
#line 306 "ValidatedEntry.c"
		} else {
			GtkStyleContext* _tmp6_;
#line 76 "../lib/Widgets/ValidatedEntry.vala"
			g_object_set ((GtkEntry*) self, "secondary-icon-name", "process-error-symbolic", NULL);
#line 77 "../lib/Widgets/ValidatedEntry.vala"
			_tmp6_ = style_context;
#line 77 "../lib/Widgets/ValidatedEntry.vala"
			gtk_style_context_add_class (_tmp6_, GTK_STYLE_CLASS_ERROR);
#line 315 "ValidatedEntry.c"
		}
	}
}

static void
__granite_validated_entry___lambda96__gtk_editable_changed (GtkEditable* _sender,
                                                            gpointer self)
{
#line 66 "../lib/Widgets/ValidatedEntry.vala"
	_granite_validated_entry___lambda96_ ((GraniteValidatedEntry*) self);
#line 326 "ValidatedEntry.c"
}

static GObject *
granite_validated_entry_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	GraniteValidatedEntry * self;
#line 63 "../lib/Widgets/ValidatedEntry.vala"
	parent_class = G_OBJECT_CLASS (granite_validated_entry_parent_class);
#line 63 "../lib/Widgets/ValidatedEntry.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 63 "../lib/Widgets/ValidatedEntry.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_VALIDATED_ENTRY, GraniteValidatedEntry);
#line 64 "../lib/Widgets/ValidatedEntry.vala"
	gtk_entry_set_activates_default ((GtkEntry*) self, TRUE);
#line 66 "../lib/Widgets/ValidatedEntry.vala"
	g_signal_connect_object ((GtkEditable*) self, "changed", (GCallback) __granite_validated_entry___lambda96__gtk_editable_changed, self, G_CONNECT_AFTER);
#line 63 "../lib/Widgets/ValidatedEntry.vala"
	return obj;
#line 349 "ValidatedEntry.c"
}

static void
granite_validated_entry_class_init (GraniteValidatedEntryClass * klass,
                                    gpointer klass_data)
{
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	granite_validated_entry_parent_class = g_type_class_peek_parent (klass);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	g_type_class_adjust_private_offset (klass, &GraniteValidatedEntry_private_offset);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_granite_validated_entry_get_property;
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_granite_validated_entry_set_property;
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	G_OBJECT_CLASS (klass)->constructor = granite_validated_entry_constructor;
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_validated_entry_finalize;
#line 368 "ValidatedEntry.c"
	/**
	     * Whether or not text is considered valid input
	     */
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), GRANITE_VALIDATED_ENTRY_IS_VALID_PROPERTY, granite_validated_entry_properties[GRANITE_VALIDATED_ENTRY_IS_VALID_PROPERTY] = g_param_spec_boolean ("is-valid", "is-valid", "is-valid", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 374 "ValidatedEntry.c"
}

static void
granite_validated_entry_instance_init (GraniteValidatedEntry * self,
                                       gpointer klass)
{
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	self->priv = granite_validated_entry_get_instance_private (self);
#line 55 "../lib/Widgets/ValidatedEntry.vala"
	self->priv->_is_valid = FALSE;
#line 385 "ValidatedEntry.c"
}

static void
granite_validated_entry_finalize (GObject * obj)
{
	GraniteValidatedEntry * self;
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_TYPE_VALIDATED_ENTRY, GraniteValidatedEntry);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	G_OBJECT_CLASS (granite_validated_entry_parent_class)->finalize (obj);
#line 396 "ValidatedEntry.c"
}

/**
 * ValidatedEntry is a {@link Gtk.Entry} subclass that is meant to be used in
 * forms where input must be validated before the form can be submitted. It
 * provides feedback to users about the state of input validation and keeps
 * track of its own validation state. By default, input is considered invalid.
 *
 * ''Example''<<BR>>
 * {{{
 *   var validated_entry = new Granite.ValidatedEntry ();
 *   username_entry.changed.connect (() => {
 *       username_entry.is_valid = username_entry.text == "valid input";
 *   });
 * }}}
 *
 * If the ValidatedEntry.from_regex () constructor is used then the entry automatically
 * sets its validity status. A valid regex must be passed to this constructor.
 *
 * ''Example''<<BR>>
 * {{{
 *   Regex? regex = null;
 *   ValidatedEntry only_lower_case_letters_entry;
 *   try {
 *       regex = new Regex ("^[a-z]*$");
 *       only_lower_case_letters_entry = new ValidatedEntry.from_regex (regex);
 *   } catch (Error e) {
 *       critical (e.message);
 *       // Provide a fallback entry
 *   }
 * }}}

 */
static GType
granite_validated_entry_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteValidatedEntryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_validated_entry_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteValidatedEntry), 0, (GInstanceInitFunc) granite_validated_entry_instance_init, NULL };
	GType granite_validated_entry_type_id;
	granite_validated_entry_type_id = g_type_register_static (gtk_entry_get_type (), "GraniteValidatedEntry", &g_define_type_info, 0);
	GraniteValidatedEntry_private_offset = g_type_add_instance_private (granite_validated_entry_type_id, sizeof (GraniteValidatedEntryPrivate));
	return granite_validated_entry_type_id;
}

GType
granite_validated_entry_get_type (void)
{
	static volatile gsize granite_validated_entry_type_id__volatile = 0;
	if (g_once_init_enter (&granite_validated_entry_type_id__volatile)) {
		GType granite_validated_entry_type_id;
		granite_validated_entry_type_id = granite_validated_entry_get_type_once ();
		g_once_init_leave (&granite_validated_entry_type_id__volatile, granite_validated_entry_type_id);
	}
	return granite_validated_entry_type_id__volatile;
}

static void
_vala_granite_validated_entry_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec)
{
	GraniteValidatedEntry * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_TYPE_VALIDATED_ENTRY, GraniteValidatedEntry);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	switch (property_id) {
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		case GRANITE_VALIDATED_ENTRY_IS_VALID_PROPERTY:
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		g_value_set_boolean (value, granite_validated_entry_get_is_valid (self));
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		break;
#line 468 "ValidatedEntry.c"
		default:
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		break;
#line 474 "ValidatedEntry.c"
	}
}

static void
_vala_granite_validated_entry_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec)
{
	GraniteValidatedEntry * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, GRANITE_TYPE_VALIDATED_ENTRY, GraniteValidatedEntry);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
	switch (property_id) {
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		case GRANITE_VALIDATED_ENTRY_IS_VALID_PROPERTY:
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		granite_validated_entry_set_is_valid (self, g_value_get_boolean (value));
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		break;
#line 494 "ValidatedEntry.c"
		default:
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 51 "../lib/Widgets/ValidatedEntry.vala"
		break;
#line 500 "ValidatedEntry.c"
	}
}


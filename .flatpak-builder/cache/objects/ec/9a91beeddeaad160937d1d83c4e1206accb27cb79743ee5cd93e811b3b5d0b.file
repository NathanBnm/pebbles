/* KeyboardHandler.c generated by valac 0.48.14, the Vala compiler
 * generated from KeyboardHandler.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_KEYBOARD_HANDLER (pebbles_keyboard_handler_get_type ())
#define PEBBLES_KEYBOARD_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_KEYBOARD_HANDLER, PebblesKeyboardHandler))
#define PEBBLES_KEYBOARD_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_KEYBOARD_HANDLER, PebblesKeyboardHandlerClass))
#define PEBBLES_IS_KEYBOARD_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_KEYBOARD_HANDLER))
#define PEBBLES_IS_KEYBOARD_HANDLER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_KEYBOARD_HANDLER))
#define PEBBLES_KEYBOARD_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_KEYBOARD_HANDLER, PebblesKeyboardHandlerClass))

typedef struct _PebblesKeyboardHandler PebblesKeyboardHandler;
typedef struct _PebblesKeyboardHandlerClass PebblesKeyboardHandlerClass;
typedef struct _PebblesKeyboardHandlerPrivate PebblesKeyboardHandlerPrivate;
typedef enum  {
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_0 = 65456,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_1 = 65457,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_2 = 65458,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_3 = 65459,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_4 = 65460,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_5 = 65461,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_6 = 65462,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_7 = 65463,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_8 = 65464,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_9 = 65465,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_RADIX = 65454,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_0 = 48,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_1 = 49,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_2 = 50,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_3 = 51,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_4 = 52,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_5 = 53,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_6 = 54,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_7 = 55,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_8 = 56,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_9 = 57,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_RADIX = 46,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_COMMA = 44,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F1 = 65470,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F2 = 65471,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F3 = 65472,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F4 = 65473,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F5 = 65474,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F6 = 65475,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F7 = 65476,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F8 = 65477,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F9 = 65478,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F10 = 65479,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F11 = 65480,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F12 = 65481,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_BACKSPACE = 65288,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_DELETE = 65535,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_TAB = 65289,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SHIFT_TAB = 65056,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PAGE_UP = 65365,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PAGE_DOWN = 65366,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_HOME = 65360,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_END = 65367,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_A_LOWER = 97,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_B_LOWER = 98,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_C_LOWER = 99,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_D_LOWER = 100,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_E_LOWER = 101,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F_LOWER = 102,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_G_LOWER = 103,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_H_LOWER = 104,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_I_LOWER = 105,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_J_LOWER = 106,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_K_LOWER = 107,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_L_LOWER = 108,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_M_LOWER = 109,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_N_LOWER = 110,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_O_LOWER = 111,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_P_LOWER = 112,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Q_LOWER = 113,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_R_LOWER = 114,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_S_LOWER = 115,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_T_LOWER = 116,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_U_LOWER = 117,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_V_LOWER = 118,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_W_LOWER = 119,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_X_LOWER = 120,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Y_LOWER = 121,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Z_LOWER = 122,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_A_UPPER = 65,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_B_UPPER = 66,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_C_UPPER = 67,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_D_UPPER = 68,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_E_UPPER = 69,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F_UPPER = 70,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_G_UPPER = 71,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_H_UPPER = 72,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_I_UPPER = 73,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_J_UPPER = 74,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_K_UPPER = 75,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_L_UPPER = 76,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_M_UPPER = 77,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_N_UPPER = 78,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_O_UPPER = 79,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_P_UPPER = 80,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Q_UPPER = 81,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_R_UPPER = 82,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_S_UPPER = 83,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_T_UPPER = 84,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_U_UPPER = 85,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_V_UPPER = 86,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_W_UPPER = 87,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_X_UPPER = 88,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Y_UPPER = 89,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Z_UPPER = 90,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PLUS_NUMPAD = 65451,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_MINUS_NUMPAD = 65453,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SLASH_NUMPAD = 65455,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_STAR_NUMPAD = 65450,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PLUS_KEYPAD = 43,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_MINUS_KEYPAD = 45,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SLASH_KEYPAD = 47,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_STAR_KEYPAD = 42,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PARENTHESIS_L = 40,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PARENTHESIS_R = 41,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SQ_BRACKETS_L = 91,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SQ_BRACKETS_R = 93,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_FL_BRACKETS_L = 123,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_FL_BRACKETS_R = 125,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EQUAL_TO = 61,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PERCENTAGE = 37,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EXP_CAP = 94,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EXCLAMATION = 33,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_LT = 60,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_GT = 62,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_LEFT = 65361,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_RIGHT = 65363,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_UP = 65362,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_DOWN = 65364,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_RETURN = 65293,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_RETURN_NUMPAD = 65421,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_ESCAPE = 65307,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SPACE_BAR = 32,
	PEBBLES_KEYBOARD_HANDLER_KEY_MAP_CTRL = 65507
} PebblesKeyboardHandlerKeyMap;

#define PEBBLES_KEYBOARD_HANDLER_TYPE_KEY_MAP (pebbles_keyboard_handler_key_map_get_type ())
typedef struct _PebblesParamSpecKeyboardHandler PebblesParamSpecKeyboardHandler;

struct _PebblesKeyboardHandler {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesKeyboardHandlerPrivate * priv;
};

struct _PebblesKeyboardHandlerClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesKeyboardHandler *self);
};

struct _PebblesParamSpecKeyboardHandler {
	GParamSpec parent_instance;
};

static gpointer pebbles_keyboard_handler_parent_class = NULL;

gpointer pebbles_keyboard_handler_ref (gpointer instance);
void pebbles_keyboard_handler_unref (gpointer instance);
GParamSpec* pebbles_param_spec_keyboard_handler (const gchar* name,
                                                 const gchar* nick,
                                                 const gchar* blurb,
                                                 GType object_type,
                                                 GParamFlags flags);
void pebbles_value_set_keyboard_handler (GValue* value,
                                         gpointer v_object);
void pebbles_value_take_keyboard_handler (GValue* value,
                                          gpointer v_object);
gpointer pebbles_value_get_keyboard_handler (const GValue* value);
GType pebbles_keyboard_handler_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesKeyboardHandler, pebbles_keyboard_handler_unref)
GType pebbles_keyboard_handler_key_map_get_type (void) G_GNUC_CONST;
gboolean pebbles_keyboard_handler_key_is_number (guint key);
PebblesKeyboardHandler* pebbles_keyboard_handler_new (void);
PebblesKeyboardHandler* pebbles_keyboard_handler_construct (GType object_type);
static void pebbles_keyboard_handler_finalize (PebblesKeyboardHandler * obj);
static GType pebbles_keyboard_handler_get_type_once (void);

static GType
pebbles_keyboard_handler_key_map_get_type_once (void)
{
	static const GEnumValue values[] = {{PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_0, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_0", "numpad-0"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_1, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_1", "numpad-1"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_2, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_2", "numpad-2"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_3, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_3", "numpad-3"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_4, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_4", "numpad-4"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_5, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_5", "numpad-5"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_6, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_6", "numpad-6"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_7, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_7", "numpad-7"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_8, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_8", "numpad-8"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_9, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_9", "numpad-9"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_RADIX, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_RADIX", "numpad-radix"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_0, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_0", "keypad-0"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_1, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_1", "keypad-1"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_2, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_2", "keypad-2"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_3, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_3", "keypad-3"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_4, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_4", "keypad-4"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_5, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_5", "keypad-5"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_6, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_6", "keypad-6"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_7, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_7", "keypad-7"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_8, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_8", "keypad-8"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_9, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_9", "keypad-9"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_RADIX, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_RADIX", "keypad-radix"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_COMMA, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_COMMA", "keypad-comma"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F1, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F1", "f1"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F2, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F2", "f2"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F3, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F3", "f3"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F4, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F4", "f4"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F5, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F5", "f5"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F6, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F6", "f6"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F7, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F7", "f7"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F8, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F8", "f8"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F9, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F9", "f9"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F10, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F10", "f10"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F11, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F11", "f11"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F12, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F12", "f12"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_BACKSPACE, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_BACKSPACE", "backspace"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_DELETE, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_DELETE", "delete"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_TAB, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_TAB", "tab"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SHIFT_TAB, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SHIFT_TAB", "shift-tab"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PAGE_UP, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PAGE_UP", "page-up"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PAGE_DOWN, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PAGE_DOWN", "page-down"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_HOME, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_HOME", "numpad-home"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_END, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_END", "numpad-end"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_A_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_A_LOWER", "a-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_B_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_B_LOWER", "b-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_C_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_C_LOWER", "c-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_D_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_D_LOWER", "d-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_E_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_E_LOWER", "e-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F_LOWER", "f-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_G_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_G_LOWER", "g-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_H_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_H_LOWER", "h-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_I_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_I_LOWER", "i-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_J_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_J_LOWER", "j-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_K_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_K_LOWER", "k-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_L_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_L_LOWER", "l-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_M_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_M_LOWER", "m-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_N_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_N_LOWER", "n-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_O_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_O_LOWER", "o-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_P_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_P_LOWER", "p-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Q_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Q_LOWER", "q-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_R_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_R_LOWER", "r-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_S_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_S_LOWER", "s-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_T_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_T_LOWER", "t-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_U_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_U_LOWER", "u-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_V_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_V_LOWER", "v-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_W_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_W_LOWER", "w-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_X_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_X_LOWER", "x-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Y_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Y_LOWER", "y-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Z_LOWER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Z_LOWER", "z-lower"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_A_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_A_UPPER", "a-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_B_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_B_UPPER", "b-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_C_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_C_UPPER", "c-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_D_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_D_UPPER", "d-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_E_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_E_UPPER", "e-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_F_UPPER", "f-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_G_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_G_UPPER", "g-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_H_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_H_UPPER", "h-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_I_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_I_UPPER", "i-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_J_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_J_UPPER", "j-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_K_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_K_UPPER", "k-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_L_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_L_UPPER", "l-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_M_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_M_UPPER", "m-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_N_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_N_UPPER", "n-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_O_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_O_UPPER", "o-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_P_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_P_UPPER", "p-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Q_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Q_UPPER", "q-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_R_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_R_UPPER", "r-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_S_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_S_UPPER", "s-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_T_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_T_UPPER", "t-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_U_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_U_UPPER", "u-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_V_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_V_UPPER", "v-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_W_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_W_UPPER", "w-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_X_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_X_UPPER", "x-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Y_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Y_UPPER", "y-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Z_UPPER, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_Z_UPPER", "z-upper"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PLUS_NUMPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PLUS_NUMPAD", "plus-numpad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_MINUS_NUMPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_MINUS_NUMPAD", "minus-numpad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SLASH_NUMPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SLASH_NUMPAD", "slash-numpad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_STAR_NUMPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_STAR_NUMPAD", "star-numpad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PLUS_KEYPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PLUS_KEYPAD", "plus-keypad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_MINUS_KEYPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_MINUS_KEYPAD", "minus-keypad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SLASH_KEYPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SLASH_KEYPAD", "slash-keypad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_STAR_KEYPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_STAR_KEYPAD", "star-keypad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PARENTHESIS_L, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PARENTHESIS_L", "parenthesis-l"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PARENTHESIS_R, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PARENTHESIS_R", "parenthesis-r"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SQ_BRACKETS_L, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SQ_BRACKETS_L", "sq-brackets-l"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SQ_BRACKETS_R, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SQ_BRACKETS_R", "sq-brackets-r"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_FL_BRACKETS_L, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_FL_BRACKETS_L", "fl-brackets-l"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_FL_BRACKETS_R, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_FL_BRACKETS_R", "fl-brackets-r"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EQUAL_TO, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EQUAL_TO", "equal-to"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PERCENTAGE, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_PERCENTAGE", "percentage"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EXP_CAP, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EXP_CAP", "exp-cap"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EXCLAMATION, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_EXCLAMATION", "exclamation"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_LT, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_LT", "lt"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_GT, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_GT", "gt"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_LEFT, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_LEFT", "nav-left"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_RIGHT, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_RIGHT", "nav-right"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_UP, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_UP", "nav-up"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_DOWN, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NAV_DOWN", "nav-down"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_RETURN, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_RETURN", "return"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_RETURN_NUMPAD, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_RETURN_NUMPAD", "return-numpad"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_ESCAPE, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_ESCAPE", "escape"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SPACE_BAR, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_SPACE_BAR", "space-bar"}, {PEBBLES_KEYBOARD_HANDLER_KEY_MAP_CTRL, "PEBBLES_KEYBOARD_HANDLER_KEY_MAP_CTRL", "ctrl"}, {0, NULL, NULL}};
	GType pebbles_keyboard_handler_key_map_type_id;
	pebbles_keyboard_handler_key_map_type_id = g_enum_register_static ("PebblesKeyboardHandlerKeyMap", values);
	return pebbles_keyboard_handler_key_map_type_id;
}

GType
pebbles_keyboard_handler_key_map_get_type (void)
{
	static volatile gsize pebbles_keyboard_handler_key_map_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_keyboard_handler_key_map_type_id__volatile)) {
		GType pebbles_keyboard_handler_key_map_type_id;
		pebbles_keyboard_handler_key_map_type_id = pebbles_keyboard_handler_key_map_get_type_once ();
		g_once_init_leave (&pebbles_keyboard_handler_key_map_type_id__volatile, pebbles_keyboard_handler_key_map_type_id);
	}
	return pebbles_keyboard_handler_key_map_type_id__volatile;
}

gboolean
pebbles_keyboard_handler_key_is_number (guint key)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean result = FALSE;
#line 154 "../src/KeyboardHandler.vala"
	if (key >= ((guint) PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_0)) {
#line 154 "../src/KeyboardHandler.vala"
		_tmp1_ = key <= ((guint) PEBBLES_KEYBOARD_HANDLER_KEY_MAP_NUMPAD_9);
#line 238 "KeyboardHandler.c"
	} else {
#line 154 "../src/KeyboardHandler.vala"
		_tmp1_ = FALSE;
#line 242 "KeyboardHandler.c"
	}
#line 154 "../src/KeyboardHandler.vala"
	if (_tmp1_) {
#line 154 "../src/KeyboardHandler.vala"
		_tmp0_ = TRUE;
#line 248 "KeyboardHandler.c"
	} else {
		gboolean _tmp2_ = FALSE;
#line 155 "../src/KeyboardHandler.vala"
		if (key >= ((guint) PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_0)) {
#line 155 "../src/KeyboardHandler.vala"
			_tmp2_ = key <= ((guint) PEBBLES_KEYBOARD_HANDLER_KEY_MAP_KEYPAD_9);
#line 255 "KeyboardHandler.c"
		} else {
#line 155 "../src/KeyboardHandler.vala"
			_tmp2_ = FALSE;
#line 259 "KeyboardHandler.c"
		}
#line 155 "../src/KeyboardHandler.vala"
		_tmp0_ = _tmp2_;
#line 263 "KeyboardHandler.c"
	}
#line 154 "../src/KeyboardHandler.vala"
	if (_tmp0_) {
#line 156 "../src/KeyboardHandler.vala"
		result = TRUE;
#line 156 "../src/KeyboardHandler.vala"
		return result;
#line 271 "KeyboardHandler.c"
	}
#line 157 "../src/KeyboardHandler.vala"
	result = FALSE;
#line 157 "../src/KeyboardHandler.vala"
	return result;
#line 277 "KeyboardHandler.c"
}

PebblesKeyboardHandler*
pebbles_keyboard_handler_construct (GType object_type)
{
	PebblesKeyboardHandler* self = NULL;
#line 22 "../src/KeyboardHandler.vala"
	self = (PebblesKeyboardHandler*) g_type_create_instance (object_type);
#line 22 "../src/KeyboardHandler.vala"
	return self;
#line 288 "KeyboardHandler.c"
}

PebblesKeyboardHandler*
pebbles_keyboard_handler_new (void)
{
#line 22 "../src/KeyboardHandler.vala"
	return pebbles_keyboard_handler_construct (PEBBLES_TYPE_KEYBOARD_HANDLER);
#line 296 "KeyboardHandler.c"
}

static void
pebbles_value_keyboard_handler_init (GValue* value)
{
#line 22 "../src/KeyboardHandler.vala"
	value->data[0].v_pointer = NULL;
#line 304 "KeyboardHandler.c"
}

static void
pebbles_value_keyboard_handler_free_value (GValue* value)
{
#line 22 "../src/KeyboardHandler.vala"
	if (value->data[0].v_pointer) {
#line 22 "../src/KeyboardHandler.vala"
		pebbles_keyboard_handler_unref (value->data[0].v_pointer);
#line 314 "KeyboardHandler.c"
	}
}

static void
pebbles_value_keyboard_handler_copy_value (const GValue* src_value,
                                           GValue* dest_value)
{
#line 22 "../src/KeyboardHandler.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "../src/KeyboardHandler.vala"
		dest_value->data[0].v_pointer = pebbles_keyboard_handler_ref (src_value->data[0].v_pointer);
#line 326 "KeyboardHandler.c"
	} else {
#line 22 "../src/KeyboardHandler.vala"
		dest_value->data[0].v_pointer = NULL;
#line 330 "KeyboardHandler.c"
	}
}

static gpointer
pebbles_value_keyboard_handler_peek_pointer (const GValue* value)
{
#line 22 "../src/KeyboardHandler.vala"
	return value->data[0].v_pointer;
#line 339 "KeyboardHandler.c"
}

static gchar*
pebbles_value_keyboard_handler_collect_value (GValue* value,
                                              guint n_collect_values,
                                              GTypeCValue* collect_values,
                                              guint collect_flags)
{
#line 22 "../src/KeyboardHandler.vala"
	if (collect_values[0].v_pointer) {
#line 350 "KeyboardHandler.c"
		PebblesKeyboardHandler * object;
		object = collect_values[0].v_pointer;
#line 22 "../src/KeyboardHandler.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "../src/KeyboardHandler.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 357 "KeyboardHandler.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "../src/KeyboardHandler.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 361 "KeyboardHandler.c"
		}
#line 22 "../src/KeyboardHandler.vala"
		value->data[0].v_pointer = pebbles_keyboard_handler_ref (object);
#line 365 "KeyboardHandler.c"
	} else {
#line 22 "../src/KeyboardHandler.vala"
		value->data[0].v_pointer = NULL;
#line 369 "KeyboardHandler.c"
	}
#line 22 "../src/KeyboardHandler.vala"
	return NULL;
#line 373 "KeyboardHandler.c"
}

static gchar*
pebbles_value_keyboard_handler_lcopy_value (const GValue* value,
                                            guint n_collect_values,
                                            GTypeCValue* collect_values,
                                            guint collect_flags)
{
	PebblesKeyboardHandler ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "../src/KeyboardHandler.vala"
	if (!object_p) {
#line 22 "../src/KeyboardHandler.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 388 "KeyboardHandler.c"
	}
#line 22 "../src/KeyboardHandler.vala"
	if (!value->data[0].v_pointer) {
#line 22 "../src/KeyboardHandler.vala"
		*object_p = NULL;
#line 394 "KeyboardHandler.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "../src/KeyboardHandler.vala"
		*object_p = value->data[0].v_pointer;
#line 398 "KeyboardHandler.c"
	} else {
#line 22 "../src/KeyboardHandler.vala"
		*object_p = pebbles_keyboard_handler_ref (value->data[0].v_pointer);
#line 402 "KeyboardHandler.c"
	}
#line 22 "../src/KeyboardHandler.vala"
	return NULL;
#line 406 "KeyboardHandler.c"
}

GParamSpec*
pebbles_param_spec_keyboard_handler (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags)
{
	PebblesParamSpecKeyboardHandler* spec;
#line 22 "../src/KeyboardHandler.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_KEYBOARD_HANDLER), NULL);
#line 22 "../src/KeyboardHandler.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "../src/KeyboardHandler.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "../src/KeyboardHandler.vala"
	return G_PARAM_SPEC (spec);
#line 425 "KeyboardHandler.c"
}

gpointer
pebbles_value_get_keyboard_handler (const GValue* value)
{
#line 22 "../src/KeyboardHandler.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_KEYBOARD_HANDLER), NULL);
#line 22 "../src/KeyboardHandler.vala"
	return value->data[0].v_pointer;
#line 435 "KeyboardHandler.c"
}

void
pebbles_value_set_keyboard_handler (GValue* value,
                                    gpointer v_object)
{
	PebblesKeyboardHandler * old;
#line 22 "../src/KeyboardHandler.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_KEYBOARD_HANDLER));
#line 22 "../src/KeyboardHandler.vala"
	old = value->data[0].v_pointer;
#line 22 "../src/KeyboardHandler.vala"
	if (v_object) {
#line 22 "../src/KeyboardHandler.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_KEYBOARD_HANDLER));
#line 22 "../src/KeyboardHandler.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../src/KeyboardHandler.vala"
		value->data[0].v_pointer = v_object;
#line 22 "../src/KeyboardHandler.vala"
		pebbles_keyboard_handler_ref (value->data[0].v_pointer);
#line 457 "KeyboardHandler.c"
	} else {
#line 22 "../src/KeyboardHandler.vala"
		value->data[0].v_pointer = NULL;
#line 461 "KeyboardHandler.c"
	}
#line 22 "../src/KeyboardHandler.vala"
	if (old) {
#line 22 "../src/KeyboardHandler.vala"
		pebbles_keyboard_handler_unref (old);
#line 467 "KeyboardHandler.c"
	}
}

void
pebbles_value_take_keyboard_handler (GValue* value,
                                     gpointer v_object)
{
	PebblesKeyboardHandler * old;
#line 22 "../src/KeyboardHandler.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_KEYBOARD_HANDLER));
#line 22 "../src/KeyboardHandler.vala"
	old = value->data[0].v_pointer;
#line 22 "../src/KeyboardHandler.vala"
	if (v_object) {
#line 22 "../src/KeyboardHandler.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_KEYBOARD_HANDLER));
#line 22 "../src/KeyboardHandler.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../src/KeyboardHandler.vala"
		value->data[0].v_pointer = v_object;
#line 488 "KeyboardHandler.c"
	} else {
#line 22 "../src/KeyboardHandler.vala"
		value->data[0].v_pointer = NULL;
#line 492 "KeyboardHandler.c"
	}
#line 22 "../src/KeyboardHandler.vala"
	if (old) {
#line 22 "../src/KeyboardHandler.vala"
		pebbles_keyboard_handler_unref (old);
#line 498 "KeyboardHandler.c"
	}
}

static void
pebbles_keyboard_handler_class_init (PebblesKeyboardHandlerClass * klass,
                                     gpointer klass_data)
{
#line 22 "../src/KeyboardHandler.vala"
	pebbles_keyboard_handler_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/KeyboardHandler.vala"
	((PebblesKeyboardHandlerClass *) klass)->finalize = pebbles_keyboard_handler_finalize;
#line 510 "KeyboardHandler.c"
}

static void
pebbles_keyboard_handler_instance_init (PebblesKeyboardHandler * self,
                                        gpointer klass)
{
#line 22 "../src/KeyboardHandler.vala"
	self->ref_count = 1;
#line 519 "KeyboardHandler.c"
}

static void
pebbles_keyboard_handler_finalize (PebblesKeyboardHandler * obj)
{
	PebblesKeyboardHandler * self;
#line 22 "../src/KeyboardHandler.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_KEYBOARD_HANDLER, PebblesKeyboardHandler);
#line 22 "../src/KeyboardHandler.vala"
	g_signal_handlers_destroy (self);
#line 530 "KeyboardHandler.c"
}

static GType
pebbles_keyboard_handler_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_keyboard_handler_init, pebbles_value_keyboard_handler_free_value, pebbles_value_keyboard_handler_copy_value, pebbles_value_keyboard_handler_peek_pointer, "p", pebbles_value_keyboard_handler_collect_value, "p", pebbles_value_keyboard_handler_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesKeyboardHandlerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_keyboard_handler_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesKeyboardHandler), 0, (GInstanceInitFunc) pebbles_keyboard_handler_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_keyboard_handler_type_id;
	pebbles_keyboard_handler_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesKeyboardHandler", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_keyboard_handler_type_id;
}

GType
pebbles_keyboard_handler_get_type (void)
{
	static volatile gsize pebbles_keyboard_handler_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_keyboard_handler_type_id__volatile)) {
		GType pebbles_keyboard_handler_type_id;
		pebbles_keyboard_handler_type_id = pebbles_keyboard_handler_get_type_once ();
		g_once_init_leave (&pebbles_keyboard_handler_type_id__volatile, pebbles_keyboard_handler_type_id);
	}
	return pebbles_keyboard_handler_type_id__volatile;
}

gpointer
pebbles_keyboard_handler_ref (gpointer instance)
{
	PebblesKeyboardHandler * self;
	self = instance;
#line 22 "../src/KeyboardHandler.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "../src/KeyboardHandler.vala"
	return instance;
#line 565 "KeyboardHandler.c"
}

void
pebbles_keyboard_handler_unref (gpointer instance)
{
	PebblesKeyboardHandler * self;
	self = instance;
#line 22 "../src/KeyboardHandler.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "../src/KeyboardHandler.vala"
		PEBBLES_KEYBOARD_HANDLER_GET_CLASS (self)->finalize (self);
#line 22 "../src/KeyboardHandler.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 579 "KeyboardHandler.c"
	}
}


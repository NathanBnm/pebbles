/* Programmer.c generated by valac 0.48.14, the Vala compiler
 * generated from Programmer.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 *              Saunak Biswas  <saunakbis97@gmail.com>
 */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

typedef enum  {
	PEBBLES_WORD_SIZE_BYTE = 8,
	PEBBLES_WORD_SIZE_WORD = 16,
	PEBBLES_WORD_SIZE_DWORD = 32,
	PEBBLES_WORD_SIZE_QWORD = 64
} PebblesWordSize;

#define PEBBLES_TYPE_WORD_SIZE (pebbles_word_size_get_type ())

#define PEBBLES_TYPE_PROGRAMMER (pebbles_programmer_get_type ())
#define PEBBLES_PROGRAMMER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_PROGRAMMER, PebblesProgrammer))
#define PEBBLES_PROGRAMMER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_PROGRAMMER, PebblesProgrammerClass))
#define PEBBLES_IS_PROGRAMMER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_PROGRAMMER))
#define PEBBLES_IS_PROGRAMMER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_PROGRAMMER))
#define PEBBLES_PROGRAMMER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_PROGRAMMER, PebblesProgrammerClass))

typedef struct _PebblesProgrammer PebblesProgrammer;
typedef struct _PebblesProgrammerClass PebblesProgrammerClass;
typedef struct _PebblesProgrammerPrivate PebblesProgrammerPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _PebblesParamSpecProgrammer PebblesParamSpecProgrammer;

typedef enum  {
	PEBBLES_CALC_ERROR_DIVIDE_BY_ZERO
} PebblesCalcError;
#define PEBBLES_CALC_ERROR pebbles_calc_error_quark ()
struct _PebblesProgrammer {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesProgrammerPrivate * priv;
	PebblesWordSize word_size;
	gboolean* output;
	gint output_length1;
	gboolean carry;
	gboolean aux_carry;
	gboolean f0;
	gboolean overflow_flag;
	gboolean parity_flag;
	gboolean zero_flag;
	gboolean negative_flag;
};

struct _PebblesProgrammerClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesProgrammer *self);
};

struct _PebblesParamSpecProgrammer {
	GParamSpec parent_instance;
};

static gpointer pebbles_programmer_parent_class = NULL;

GType pebbles_word_size_get_type (void) G_GNUC_CONST;
GQuark pebbles_calc_error_quark (void);
gpointer pebbles_programmer_ref (gpointer instance);
void pebbles_programmer_unref (gpointer instance);
GParamSpec* pebbles_param_spec_programmer (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void pebbles_value_set_programmer (GValue* value,
                                   gpointer v_object);
void pebbles_value_take_programmer (GValue* value,
                                    gpointer v_object);
gpointer pebbles_value_get_programmer (const GValue* value);
GType pebbles_programmer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesProgrammer, pebbles_programmer_unref)
PebblesProgrammer* pebbles_programmer_new (void);
PebblesProgrammer* pebbles_programmer_construct (GType object_type);
gboolean pebbles_programmer_xor_each_bit (PebblesProgrammer* self,
                                          gboolean a,
                                          gboolean b);
gboolean pebbles_programmer_full_add (PebblesProgrammer* self,
                                      gboolean a,
                                      gboolean b);
gboolean* pebbles_programmer_add (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup20 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_ones_complement (PebblesProgrammer* self,
                                              gboolean* input,
                                              gint input_length1,
                                              gint* word_size,
                                              gint* result_length1);
static gboolean* _vala_array_dup21 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_twos_complement (PebblesProgrammer* self,
                                              gboolean* input,
                                              gint input_length1,
                                              gint* word_size,
                                              gint* result_length1);
static gboolean* _vala_array_dup22 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_subtract (PebblesProgrammer* self,
                                       gboolean* input_a,
                                       gint input_a_length1,
                                       gboolean* input_b,
                                       gint input_b_length1,
                                       gint* word_size,
                                       gint* result_length1);
static gboolean* _vala_array_dup23 (gboolean* self,
                             gint length);
gboolean pebbles_programmer_multiply_two_bits (PebblesProgrammer* self,
                                               gboolean a,
                                               gboolean b);
gchar* pebbles_programmer_multiply (PebblesProgrammer* self,
                                    gboolean* input_a,
                                    gint input_a_length1,
                                    gboolean* input_b,
                                    gint input_b_length1,
                                    gint* word_size);
gchar* pebbles_programmer_division_signed_integer (PebblesProgrammer* self,
                                                   gboolean* input_a,
                                                   gint input_a_length1,
                                                   gboolean* input_b,
                                                   gint input_b_length1,
                                                   gint* word_size);
gchar* pebbles_programmer_mod_signed_integer (PebblesProgrammer* self,
                                              gboolean* input_a,
                                              gint input_a_length1,
                                              gboolean* input_b,
                                              gint input_b_length1,
                                              gint* word_size);
gboolean* pebbles_programmer_division_quotient (PebblesProgrammer* self,
                                                gboolean* input_a,
                                                gint input_a_length1,
                                                gboolean* input_b,
                                                gint input_b_length1,
                                                gint* word_size,
                                                gint* result_length1);
static gint pebbles_programmer_find_right_most_one (PebblesProgrammer* self,
                                             gboolean* input,
                                             gint input_length1);
gboolean* pebbles_programmer_left_shift (PebblesProgrammer* self,
                                         gboolean* input_a,
                                         gint input_a_length1,
                                         gboolean* input_b,
                                         gint input_b_length1,
                                         gboolean fill_bits,
                                         gint* word_size,
                                         gint* result_length1);
gint pebbles_programmer_comparator (PebblesProgrammer* self,
                                    gboolean* input_a,
                                    gint input_a_length1,
                                    gboolean* input_b,
                                    gint input_b_length1,
                                    gint* word_size);
static gboolean* _vala_array_dup24 (gboolean* self,
                             gint length);
static gboolean* _vala_array_dup25 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_right_shift (PebblesProgrammer* self,
                                          gboolean* input_a,
                                          gint input_a_length1,
                                          gboolean* input_b,
                                          gint input_b_length1,
                                          gboolean fill_bits,
                                          gint* word_size,
                                          gint* result_length1);
static gboolean* _vala_array_dup26 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_and (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup27 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_nand (PebblesProgrammer* self,
                                   gboolean* input_a,
                                   gint input_a_length1,
                                   gboolean* input_b,
                                   gint input_b_length1,
                                   gint* word_size,
                                   gint* result_length1);
static gboolean* _vala_array_dup28 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_or (PebblesProgrammer* self,
                                 gboolean* input_a,
                                 gint input_a_length1,
                                 gboolean* input_b,
                                 gint input_b_length1,
                                 gint* word_size,
                                 gint* result_length1);
static gboolean* _vala_array_dup29 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_nor (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup30 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_xor (PebblesProgrammer* self,
                                  gboolean* input_a,
                                  gint input_a_length1,
                                  gboolean* input_b,
                                  gint input_b_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup31 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_xnor (PebblesProgrammer* self,
                                   gboolean* input_a,
                                   gint input_a_length1,
                                   gboolean* input_b,
                                   gint input_b_length1,
                                   gint* word_size,
                                   gint* result_length1);
static gboolean* _vala_array_dup32 (gboolean* self,
                             gint length);
gboolean* pebbles_programmer_not (PebblesProgrammer* self,
                                  gboolean* input,
                                  gint input_length1,
                                  gint* word_size,
                                  gint* result_length1);
static gboolean* _vala_array_dup33 (gboolean* self,
                             gint length);
static void pebbles_programmer_finalize (PebblesProgrammer * obj);
static GType pebbles_programmer_get_type_once (void);

static GType
pebbles_word_size_get_type_once (void)
{
	static const GEnumValue values[] = {{PEBBLES_WORD_SIZE_BYTE, "PEBBLES_WORD_SIZE_BYTE", "byte"}, {PEBBLES_WORD_SIZE_WORD, "PEBBLES_WORD_SIZE_WORD", "word"}, {PEBBLES_WORD_SIZE_DWORD, "PEBBLES_WORD_SIZE_DWORD", "dword"}, {PEBBLES_WORD_SIZE_QWORD, "PEBBLES_WORD_SIZE_QWORD", "qword"}, {0, NULL, NULL}};
	GType pebbles_word_size_type_id;
	pebbles_word_size_type_id = g_enum_register_static ("PebblesWordSize", values);
	return pebbles_word_size_type_id;
}

GType
pebbles_word_size_get_type (void)
{
	static volatile gsize pebbles_word_size_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_word_size_type_id__volatile)) {
		GType pebbles_word_size_type_id;
		pebbles_word_size_type_id = pebbles_word_size_get_type_once ();
		g_once_init_leave (&pebbles_word_size_type_id__volatile, pebbles_word_size_type_id);
	}
	return pebbles_word_size_type_id__volatile;
}

GQuark
pebbles_calc_error_quark (void)
{
	return g_quark_from_static_string ("pebbles-calc-error-quark");
}

PebblesProgrammer*
pebbles_programmer_construct (GType object_type)
{
	PebblesProgrammer* self = NULL;
	gboolean* _tmp0_;
#line 42 "../src/Core/Programmer.vala"
	self = (PebblesProgrammer*) g_type_create_instance (object_type);
#line 43 "../src/Core/Programmer.vala"
	_tmp0_ = g_new0 (gboolean, 64);
#line 43 "../src/Core/Programmer.vala"
	self->output = (g_free (self->output), NULL);
#line 43 "../src/Core/Programmer.vala"
	self->output = _tmp0_;
#line 43 "../src/Core/Programmer.vala"
	self->output_length1 = 64;
#line 42 "../src/Core/Programmer.vala"
	return self;
#line 308 "Programmer.c"
}

PebblesProgrammer*
pebbles_programmer_new (void)
{
#line 42 "../src/Core/Programmer.vala"
	return pebbles_programmer_construct (PEBBLES_TYPE_PROGRAMMER);
#line 316 "Programmer.c"
}

gboolean
pebbles_programmer_xor_each_bit (PebblesProgrammer* self,
                                 gboolean a,
                                 gboolean b)
{
	gboolean result = FALSE;
#line 45 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 46 "../src/Core/Programmer.vala"
	if (a == b) {
#line 47 "../src/Core/Programmer.vala"
		result = FALSE;
#line 47 "../src/Core/Programmer.vala"
		return result;
#line 333 "Programmer.c"
	}
#line 49 "../src/Core/Programmer.vala"
	result = TRUE;
#line 49 "../src/Core/Programmer.vala"
	return result;
#line 339 "Programmer.c"
}

gboolean
pebbles_programmer_full_add (PebblesProgrammer* self,
                             gboolean a,
                             gboolean b)
{
	gboolean c = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean result = FALSE;
#line 51 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 52 "../src/Core/Programmer.vala"
	c = self->carry;
#line 53 "../src/Core/Programmer.vala"
	if (a) {
#line 53 "../src/Core/Programmer.vala"
		_tmp2_ = b;
#line 360 "Programmer.c"
	} else {
#line 53 "../src/Core/Programmer.vala"
		_tmp2_ = FALSE;
#line 364 "Programmer.c"
	}
#line 53 "../src/Core/Programmer.vala"
	if (_tmp2_) {
#line 53 "../src/Core/Programmer.vala"
		_tmp1_ = TRUE;
#line 370 "Programmer.c"
	} else {
		gboolean _tmp3_ = FALSE;
#line 53 "../src/Core/Programmer.vala"
		if (b) {
#line 53 "../src/Core/Programmer.vala"
			_tmp3_ = self->carry;
#line 377 "Programmer.c"
		} else {
#line 53 "../src/Core/Programmer.vala"
			_tmp3_ = FALSE;
#line 381 "Programmer.c"
		}
#line 53 "../src/Core/Programmer.vala"
		_tmp1_ = _tmp3_;
#line 385 "Programmer.c"
	}
#line 53 "../src/Core/Programmer.vala"
	if (_tmp1_) {
#line 53 "../src/Core/Programmer.vala"
		_tmp0_ = TRUE;
#line 391 "Programmer.c"
	} else {
		gboolean _tmp4_ = FALSE;
#line 53 "../src/Core/Programmer.vala"
		if (a) {
#line 53 "../src/Core/Programmer.vala"
			_tmp4_ = self->carry;
#line 398 "Programmer.c"
		} else {
#line 53 "../src/Core/Programmer.vala"
			_tmp4_ = FALSE;
#line 402 "Programmer.c"
		}
#line 53 "../src/Core/Programmer.vala"
		_tmp0_ = _tmp4_;
#line 406 "Programmer.c"
	}
#line 53 "../src/Core/Programmer.vala"
	self->carry = _tmp0_;
#line 54 "../src/Core/Programmer.vala"
	result = pebbles_programmer_xor_each_bit (self, c, pebbles_programmer_xor_each_bit (self, a, b));
#line 54 "../src/Core/Programmer.vala"
	return result;
#line 414 "Programmer.c"
}

static gboolean*
_vala_array_dup20 (gboolean* self,
                   gint length)
{
#line 60 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 60 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 425 "Programmer.c"
	}
#line 60 "../src/Core/Programmer.vala"
	return NULL;
#line 429 "Programmer.c"
}

gboolean*
pebbles_programmer_add (PebblesProgrammer* self,
                        gboolean* input_a,
                        gint input_a_length1,
                        gboolean* input_b,
                        gint input_b_length1,
                        gint* word_size,
                        gint* result_length1)
{
	gboolean* _tmp5_;
	gint _tmp5__length1;
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* result = NULL;
#line 56 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 450 "Programmer.c"
	{
		gint i = 0;
#line 57 "../src/Core/Programmer.vala"
		i = 63;
#line 455 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 57 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 57 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 462 "Programmer.c"
				gboolean* _tmp2_;
				gint _tmp2__length1;
				gboolean _tmp3_;
				gboolean _tmp4_;
#line 57 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 469 "Programmer.c"
					gint _tmp1_;
#line 57 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 57 "../src/Core/Programmer.vala"
					i = _tmp1_ - 1;
#line 475 "Programmer.c"
				}
#line 57 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 57 "../src/Core/Programmer.vala"
				if (!(i > (63 - (*word_size)))) {
#line 57 "../src/Core/Programmer.vala"
					break;
#line 483 "Programmer.c"
				}
#line 58 "../src/Core/Programmer.vala"
				_tmp2_ = self->output;
#line 58 "../src/Core/Programmer.vala"
				_tmp2__length1 = self->output_length1;
#line 58 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 58 "../src/Core/Programmer.vala"
				_tmp4_ = input_b[i];
#line 58 "../src/Core/Programmer.vala"
				_tmp2_[i] = pebbles_programmer_full_add (self, _tmp3_, _tmp4_);
#line 495 "Programmer.c"
			}
		}
	}
#line 60 "../src/Core/Programmer.vala"
	_tmp5_ = self->output;
#line 60 "../src/Core/Programmer.vala"
	_tmp5__length1 = self->output_length1;
#line 60 "../src/Core/Programmer.vala"
	_tmp6_ = (_tmp5_ != NULL) ? _vala_array_dup20 (_tmp5_, _tmp5__length1) : ((gpointer) _tmp5_);
#line 60 "../src/Core/Programmer.vala"
	_tmp6__length1 = _tmp5__length1;
#line 60 "../src/Core/Programmer.vala"
	_tmp7_ = _tmp6_;
#line 60 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 60 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 60 "../src/Core/Programmer.vala"
		*result_length1 = _tmp7__length1;
#line 515 "Programmer.c"
	}
#line 60 "../src/Core/Programmer.vala"
	result = _tmp7_;
#line 60 "../src/Core/Programmer.vala"
	return result;
#line 521 "Programmer.c"
}

static gboolean*
_vala_array_dup21 (gboolean* self,
                   gint length)
{
#line 66 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 66 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 532 "Programmer.c"
	}
#line 66 "../src/Core/Programmer.vala"
	return NULL;
#line 536 "Programmer.c"
}

gboolean*
pebbles_programmer_ones_complement (PebblesProgrammer* self,
                                    gboolean* input,
                                    gint input_length1,
                                    gint* word_size,
                                    gint* result_length1)
{
	gboolean* _tmp4_;
	gint _tmp4__length1;
	gboolean* _tmp5_;
	gint _tmp5__length1;
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* result = NULL;
#line 62 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 555 "Programmer.c"
	{
		gint i = 0;
#line 63 "../src/Core/Programmer.vala"
		i = 64 - (*word_size);
#line 560 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 63 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 63 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 567 "Programmer.c"
				gboolean* _tmp2_;
				gint _tmp2__length1;
				gboolean _tmp3_;
#line 63 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 573 "Programmer.c"
					gint _tmp1_;
#line 63 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 63 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 579 "Programmer.c"
				}
#line 63 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 63 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 63 "../src/Core/Programmer.vala"
					break;
#line 587 "Programmer.c"
				}
#line 64 "../src/Core/Programmer.vala"
				_tmp2_ = self->output;
#line 64 "../src/Core/Programmer.vala"
				_tmp2__length1 = self->output_length1;
#line 64 "../src/Core/Programmer.vala"
				_tmp3_ = input[i];
#line 64 "../src/Core/Programmer.vala"
				_tmp2_[i] = !_tmp3_;
#line 597 "Programmer.c"
			}
		}
	}
#line 66 "../src/Core/Programmer.vala"
	_tmp4_ = self->output;
#line 66 "../src/Core/Programmer.vala"
	_tmp4__length1 = self->output_length1;
#line 66 "../src/Core/Programmer.vala"
	_tmp5_ = (_tmp4_ != NULL) ? _vala_array_dup21 (_tmp4_, _tmp4__length1) : ((gpointer) _tmp4_);
#line 66 "../src/Core/Programmer.vala"
	_tmp5__length1 = _tmp4__length1;
#line 66 "../src/Core/Programmer.vala"
	_tmp6_ = _tmp5_;
#line 66 "../src/Core/Programmer.vala"
	_tmp6__length1 = _tmp5__length1;
#line 66 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 66 "../src/Core/Programmer.vala"
		*result_length1 = _tmp6__length1;
#line 617 "Programmer.c"
	}
#line 66 "../src/Core/Programmer.vala"
	result = _tmp6_;
#line 66 "../src/Core/Programmer.vala"
	return result;
#line 623 "Programmer.c"
}

static gboolean*
_vala_array_dup22 (gboolean* self,
                   gint length)
{
#line 73 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 73 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 634 "Programmer.c"
	}
#line 73 "../src/Core/Programmer.vala"
	return NULL;
#line 638 "Programmer.c"
}

gboolean*
pebbles_programmer_twos_complement (PebblesProgrammer* self,
                                    gboolean* input,
                                    gint input_length1,
                                    gint* word_size,
                                    gint* result_length1)
{
	gboolean* input_copy = NULL;
	gint _tmp0_ = 0;
	gboolean* _tmp1_;
	gint input_copy_length1;
	gint _input_copy_size_;
	gboolean* binary_one = NULL;
	gboolean* _tmp2_;
	gint binary_one_length1;
	gint _binary_one_size_;
	gint _tmp3_ = 0;
	gboolean* _tmp4_;
	gboolean* _tmp5_;
	gint _tmp5__length1;
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* _tmp8_;
	gint _tmp8__length1;
	gboolean* result = NULL;
#line 68 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 69 "../src/Core/Programmer.vala"
	_tmp1_ = pebbles_programmer_ones_complement (self, input, (gint) input_length1, word_size, &_tmp0_);
#line 69 "../src/Core/Programmer.vala"
	input_copy = _tmp1_;
#line 69 "../src/Core/Programmer.vala"
	input_copy_length1 = _tmp0_;
#line 69 "../src/Core/Programmer.vala"
	_input_copy_size_ = input_copy_length1;
#line 70 "../src/Core/Programmer.vala"
	_tmp2_ = g_new0 (gboolean, 64);
#line 70 "../src/Core/Programmer.vala"
	binary_one = _tmp2_;
#line 70 "../src/Core/Programmer.vala"
	binary_one_length1 = 64;
#line 70 "../src/Core/Programmer.vala"
	_binary_one_size_ = binary_one_length1;
#line 71 "../src/Core/Programmer.vala"
	binary_one[63] = TRUE;
#line 72 "../src/Core/Programmer.vala"
	_tmp4_ = pebbles_programmer_add (self, input_copy, (gint) input_copy_length1, binary_one, (gint) binary_one_length1, word_size, &_tmp3_);
#line 72 "../src/Core/Programmer.vala"
	_tmp5_ = _tmp4_;
#line 72 "../src/Core/Programmer.vala"
	_tmp5__length1 = _tmp3_;
#line 72 "../src/Core/Programmer.vala"
	_tmp5_ = (g_free (_tmp5_), NULL);
#line 73 "../src/Core/Programmer.vala"
	_tmp6_ = self->output;
#line 73 "../src/Core/Programmer.vala"
	_tmp6__length1 = self->output_length1;
#line 73 "../src/Core/Programmer.vala"
	_tmp7_ = (_tmp6_ != NULL) ? _vala_array_dup22 (_tmp6_, _tmp6__length1) : ((gpointer) _tmp6_);
#line 73 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 73 "../src/Core/Programmer.vala"
	_tmp8_ = _tmp7_;
#line 73 "../src/Core/Programmer.vala"
	_tmp8__length1 = _tmp7__length1;
#line 73 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 73 "../src/Core/Programmer.vala"
		*result_length1 = _tmp8__length1;
#line 712 "Programmer.c"
	}
#line 73 "../src/Core/Programmer.vala"
	result = _tmp8_;
#line 73 "../src/Core/Programmer.vala"
	binary_one = (g_free (binary_one), NULL);
#line 73 "../src/Core/Programmer.vala"
	input_copy = (g_free (input_copy), NULL);
#line 73 "../src/Core/Programmer.vala"
	return result;
#line 722 "Programmer.c"
}

static gboolean*
_vala_array_dup23 (gboolean* self,
                   gint length)
{
#line 78 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 78 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 733 "Programmer.c"
	}
#line 78 "../src/Core/Programmer.vala"
	return NULL;
#line 737 "Programmer.c"
}

gboolean*
pebbles_programmer_subtract (PebblesProgrammer* self,
                             gboolean* input_a,
                             gint input_a_length1,
                             gboolean* input_b,
                             gint input_b_length1,
                             gint* word_size,
                             gint* result_length1)
{
	gboolean* input_b_copy = NULL;
	gint _tmp0_ = 0;
	gboolean* _tmp1_;
	gint input_b_copy_length1;
	gint _input_b_copy_size_;
	gint _tmp2_ = 0;
	gboolean* _tmp3_;
	gboolean* _tmp4_;
	gint _tmp4__length1;
	gboolean* _tmp5_;
	gint _tmp5__length1;
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* result = NULL;
#line 75 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 76 "../src/Core/Programmer.vala"
	_tmp1_ = pebbles_programmer_twos_complement (self, input_b, (gint) input_b_length1, word_size, &_tmp0_);
#line 76 "../src/Core/Programmer.vala"
	input_b_copy = _tmp1_;
#line 76 "../src/Core/Programmer.vala"
	input_b_copy_length1 = _tmp0_;
#line 76 "../src/Core/Programmer.vala"
	_input_b_copy_size_ = input_b_copy_length1;
#line 77 "../src/Core/Programmer.vala"
	_tmp3_ = pebbles_programmer_add (self, input_a, (gint) input_a_length1, input_b_copy, (gint) input_b_copy_length1, word_size, &_tmp2_);
#line 77 "../src/Core/Programmer.vala"
	_tmp4_ = _tmp3_;
#line 77 "../src/Core/Programmer.vala"
	_tmp4__length1 = _tmp2_;
#line 77 "../src/Core/Programmer.vala"
	_tmp4_ = (g_free (_tmp4_), NULL);
#line 78 "../src/Core/Programmer.vala"
	_tmp5_ = self->output;
#line 78 "../src/Core/Programmer.vala"
	_tmp5__length1 = self->output_length1;
#line 78 "../src/Core/Programmer.vala"
	_tmp6_ = (_tmp5_ != NULL) ? _vala_array_dup23 (_tmp5_, _tmp5__length1) : ((gpointer) _tmp5_);
#line 78 "../src/Core/Programmer.vala"
	_tmp6__length1 = _tmp5__length1;
#line 78 "../src/Core/Programmer.vala"
	_tmp7_ = _tmp6_;
#line 78 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 78 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 78 "../src/Core/Programmer.vala"
		*result_length1 = _tmp7__length1;
#line 799 "Programmer.c"
	}
#line 78 "../src/Core/Programmer.vala"
	result = _tmp7_;
#line 78 "../src/Core/Programmer.vala"
	input_b_copy = (g_free (input_b_copy), NULL);
#line 78 "../src/Core/Programmer.vala"
	return result;
#line 807 "Programmer.c"
}

gboolean
pebbles_programmer_multiply_two_bits (PebblesProgrammer* self,
                                      gboolean a,
                                      gboolean b)
{
	gboolean _tmp0_ = FALSE;
	gboolean result = FALSE;
#line 80 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 81 "../src/Core/Programmer.vala"
	if (a == TRUE) {
#line 81 "../src/Core/Programmer.vala"
		_tmp0_ = b == TRUE;
#line 823 "Programmer.c"
	} else {
#line 81 "../src/Core/Programmer.vala"
		_tmp0_ = FALSE;
#line 827 "Programmer.c"
	}
#line 81 "../src/Core/Programmer.vala"
	if (_tmp0_) {
#line 82 "../src/Core/Programmer.vala"
		result = TRUE;
#line 82 "../src/Core/Programmer.vala"
		return result;
#line 835 "Programmer.c"
	}
#line 84 "../src/Core/Programmer.vala"
	result = FALSE;
#line 84 "../src/Core/Programmer.vala"
	return result;
#line 841 "Programmer.c"
}

gchar*
pebbles_programmer_multiply (PebblesProgrammer* self,
                             gboolean* input_a,
                             gint input_a_length1,
                             gboolean* input_b,
                             gint input_b_length1,
                             gint* word_size)
{
	gchar* input_a_s = NULL;
	gchar* _tmp0_;
	gchar* input_b_s = NULL;
	gchar* _tmp1_;
	gint64 int_dividend = 0LL;
	const gchar* _tmp12_;
	gint64 _tmp13_ = 0LL;
	gint64 int_divisor = 0LL;
	const gchar* _tmp14_;
	gint64 _tmp15_ = 0LL;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	gint64 product = 0LL;
	gchar* _tmp20_;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 86 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 117 "../src/Core/Programmer.vala"
	_tmp0_ = g_strdup ("");
#line 117 "../src/Core/Programmer.vala"
	input_a_s = _tmp0_;
#line 118 "../src/Core/Programmer.vala"
	_tmp1_ = g_strdup ("");
#line 118 "../src/Core/Programmer.vala"
	input_b_s = _tmp1_;
#line 880 "Programmer.c"
	{
		gint i = 0;
#line 119 "../src/Core/Programmer.vala"
		i = 63;
#line 885 "Programmer.c"
		{
			gboolean _tmp2_ = FALSE;
#line 119 "../src/Core/Programmer.vala"
			_tmp2_ = TRUE;
#line 119 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 892 "Programmer.c"
				const gchar* _tmp4_ = NULL;
				gboolean _tmp5_;
				const gchar* _tmp6_;
				gchar* _tmp7_;
				const gchar* _tmp8_ = NULL;
				gboolean _tmp9_;
				const gchar* _tmp10_;
				gchar* _tmp11_;
#line 119 "../src/Core/Programmer.vala"
				if (!_tmp2_) {
#line 903 "Programmer.c"
					gint _tmp3_;
#line 119 "../src/Core/Programmer.vala"
					_tmp3_ = i;
#line 119 "../src/Core/Programmer.vala"
					i = _tmp3_ - 1;
#line 909 "Programmer.c"
				}
#line 119 "../src/Core/Programmer.vala"
				_tmp2_ = FALSE;
#line 119 "../src/Core/Programmer.vala"
				if (!(i >= 0)) {
#line 119 "../src/Core/Programmer.vala"
					break;
#line 917 "Programmer.c"
				}
#line 120 "../src/Core/Programmer.vala"
				_tmp5_ = input_a[i];
#line 120 "../src/Core/Programmer.vala"
				if (_tmp5_) {
#line 120 "../src/Core/Programmer.vala"
					_tmp4_ = "1";
#line 925 "Programmer.c"
				} else {
#line 120 "../src/Core/Programmer.vala"
					_tmp4_ = "0";
#line 929 "Programmer.c"
				}
#line 120 "../src/Core/Programmer.vala"
				_tmp6_ = input_a_s;
#line 120 "../src/Core/Programmer.vala"
				_tmp7_ = g_strconcat (_tmp4_, _tmp6_, NULL);
#line 120 "../src/Core/Programmer.vala"
				_g_free0 (input_a_s);
#line 120 "../src/Core/Programmer.vala"
				input_a_s = _tmp7_;
#line 121 "../src/Core/Programmer.vala"
				_tmp9_ = input_b[i];
#line 121 "../src/Core/Programmer.vala"
				if (_tmp9_) {
#line 121 "../src/Core/Programmer.vala"
					_tmp8_ = "1";
#line 945 "Programmer.c"
				} else {
#line 121 "../src/Core/Programmer.vala"
					_tmp8_ = "0";
#line 949 "Programmer.c"
				}
#line 121 "../src/Core/Programmer.vala"
				_tmp10_ = input_b_s;
#line 121 "../src/Core/Programmer.vala"
				_tmp11_ = g_strconcat (_tmp8_, _tmp10_, NULL);
#line 121 "../src/Core/Programmer.vala"
				_g_free0 (input_b_s);
#line 121 "../src/Core/Programmer.vala"
				input_b_s = _tmp11_;
#line 959 "Programmer.c"
			}
		}
	}
#line 124 "../src/Core/Programmer.vala"
	_tmp12_ = input_a_s;
#line 124 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp12_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp13_, &_inner_error0_);
#line 124 "../src/Core/Programmer.vala"
	int_dividend = _tmp13_;
#line 124 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 124 "../src/Core/Programmer.vala"
		_g_free0 (input_b_s);
#line 124 "../src/Core/Programmer.vala"
		_g_free0 (input_a_s);
#line 124 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 124 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 124 "../src/Core/Programmer.vala"
		return NULL;
#line 981 "Programmer.c"
	}
#line 126 "../src/Core/Programmer.vala"
	_tmp14_ = input_b_s;
#line 126 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp14_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp15_, &_inner_error0_);
#line 126 "../src/Core/Programmer.vala"
	int_divisor = _tmp15_;
#line 126 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 126 "../src/Core/Programmer.vala"
		_g_free0 (input_b_s);
#line 126 "../src/Core/Programmer.vala"
		_g_free0 (input_a_s);
#line 126 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 126 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 126 "../src/Core/Programmer.vala"
		return NULL;
#line 1001 "Programmer.c"
	}
#line 127 "../src/Core/Programmer.vala"
	_tmp16_ = g_strdup_printf ("%" G_GINT64_FORMAT, int_dividend);
#line 127 "../src/Core/Programmer.vala"
	_tmp17_ = _tmp16_;
#line 127 "../src/Core/Programmer.vala"
	_tmp18_ = g_strdup_printf ("%" G_GINT64_FORMAT, int_divisor);
#line 127 "../src/Core/Programmer.vala"
	_tmp19_ = _tmp18_;
#line 127 "../src/Core/Programmer.vala"
	g_print ("%s * %s", _tmp17_, _tmp19_);
#line 127 "../src/Core/Programmer.vala"
	_g_free0 (_tmp19_);
#line 127 "../src/Core/Programmer.vala"
	_g_free0 (_tmp17_);
#line 128 "../src/Core/Programmer.vala"
	product = int_dividend * int_divisor;
#line 129 "../src/Core/Programmer.vala"
	_tmp20_ = g_strdup_printf ("%" G_GINT64_FORMAT, product);
#line 129 "../src/Core/Programmer.vala"
	result = _tmp20_;
#line 129 "../src/Core/Programmer.vala"
	_g_free0 (input_b_s);
#line 129 "../src/Core/Programmer.vala"
	_g_free0 (input_a_s);
#line 129 "../src/Core/Programmer.vala"
	return result;
#line 1029 "Programmer.c"
}

gchar*
pebbles_programmer_division_signed_integer (PebblesProgrammer* self,
                                            gboolean* input_a,
                                            gint input_a_length1,
                                            gboolean* input_b,
                                            gint input_b_length1,
                                            gint* word_size)
{
	gchar* dividend = NULL;
	gchar* _tmp0_;
	gchar* divisor = NULL;
	gchar* _tmp1_;
	gint64 int_dividend = 0LL;
	const gchar* _tmp12_;
	gint64 _tmp13_ = 0LL;
	gint64 int_divisor = 0LL;
	const gchar* _tmp14_;
	gint64 _tmp15_ = 0LL;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	gint64 quotient = 0LL;
	gchar* _tmp21_;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 133 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 134 "../src/Core/Programmer.vala"
	_tmp0_ = g_strdup ("");
#line 134 "../src/Core/Programmer.vala"
	dividend = _tmp0_;
#line 135 "../src/Core/Programmer.vala"
	_tmp1_ = g_strdup ("");
#line 135 "../src/Core/Programmer.vala"
	divisor = _tmp1_;
#line 1068 "Programmer.c"
	{
		gint i = 0;
#line 136 "../src/Core/Programmer.vala"
		i = 63;
#line 1073 "Programmer.c"
		{
			gboolean _tmp2_ = FALSE;
#line 136 "../src/Core/Programmer.vala"
			_tmp2_ = TRUE;
#line 136 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 1080 "Programmer.c"
				const gchar* _tmp4_ = NULL;
				gboolean _tmp5_;
				const gchar* _tmp6_;
				gchar* _tmp7_;
				const gchar* _tmp8_ = NULL;
				gboolean _tmp9_;
				const gchar* _tmp10_;
				gchar* _tmp11_;
#line 136 "../src/Core/Programmer.vala"
				if (!_tmp2_) {
#line 1091 "Programmer.c"
					gint _tmp3_;
#line 136 "../src/Core/Programmer.vala"
					_tmp3_ = i;
#line 136 "../src/Core/Programmer.vala"
					i = _tmp3_ - 1;
#line 1097 "Programmer.c"
				}
#line 136 "../src/Core/Programmer.vala"
				_tmp2_ = FALSE;
#line 136 "../src/Core/Programmer.vala"
				if (!(i >= 0)) {
#line 136 "../src/Core/Programmer.vala"
					break;
#line 1105 "Programmer.c"
				}
#line 137 "../src/Core/Programmer.vala"
				_tmp5_ = input_a[i];
#line 137 "../src/Core/Programmer.vala"
				if (_tmp5_) {
#line 137 "../src/Core/Programmer.vala"
					_tmp4_ = "1";
#line 1113 "Programmer.c"
				} else {
#line 137 "../src/Core/Programmer.vala"
					_tmp4_ = "0";
#line 1117 "Programmer.c"
				}
#line 137 "../src/Core/Programmer.vala"
				_tmp6_ = dividend;
#line 137 "../src/Core/Programmer.vala"
				_tmp7_ = g_strconcat (_tmp4_, _tmp6_, NULL);
#line 137 "../src/Core/Programmer.vala"
				_g_free0 (dividend);
#line 137 "../src/Core/Programmer.vala"
				dividend = _tmp7_;
#line 138 "../src/Core/Programmer.vala"
				_tmp9_ = input_b[i];
#line 138 "../src/Core/Programmer.vala"
				if (_tmp9_) {
#line 138 "../src/Core/Programmer.vala"
					_tmp8_ = "1";
#line 1133 "Programmer.c"
				} else {
#line 138 "../src/Core/Programmer.vala"
					_tmp8_ = "0";
#line 1137 "Programmer.c"
				}
#line 138 "../src/Core/Programmer.vala"
				_tmp10_ = divisor;
#line 138 "../src/Core/Programmer.vala"
				_tmp11_ = g_strconcat (_tmp8_, _tmp10_, NULL);
#line 138 "../src/Core/Programmer.vala"
				_g_free0 (divisor);
#line 138 "../src/Core/Programmer.vala"
				divisor = _tmp11_;
#line 1147 "Programmer.c"
			}
		}
	}
#line 141 "../src/Core/Programmer.vala"
	_tmp12_ = dividend;
#line 141 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp12_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp13_, &_inner_error0_);
#line 141 "../src/Core/Programmer.vala"
	int_dividend = _tmp13_;
#line 141 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 141 "../src/Core/Programmer.vala"
		_g_free0 (divisor);
#line 141 "../src/Core/Programmer.vala"
		_g_free0 (dividend);
#line 141 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 141 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 141 "../src/Core/Programmer.vala"
		return NULL;
#line 1169 "Programmer.c"
	}
#line 143 "../src/Core/Programmer.vala"
	_tmp14_ = divisor;
#line 143 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp14_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp15_, &_inner_error0_);
#line 143 "../src/Core/Programmer.vala"
	int_divisor = _tmp15_;
#line 143 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 143 "../src/Core/Programmer.vala"
		_g_free0 (divisor);
#line 143 "../src/Core/Programmer.vala"
		_g_free0 (dividend);
#line 143 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 143 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 143 "../src/Core/Programmer.vala"
		return NULL;
#line 1189 "Programmer.c"
	}
#line 144 "../src/Core/Programmer.vala"
	_tmp16_ = g_strdup_printf ("%" G_GINT64_FORMAT, int_dividend);
#line 144 "../src/Core/Programmer.vala"
	_tmp17_ = _tmp16_;
#line 144 "../src/Core/Programmer.vala"
	_tmp18_ = g_strdup_printf ("%" G_GINT64_FORMAT, int_divisor);
#line 144 "../src/Core/Programmer.vala"
	_tmp19_ = _tmp18_;
#line 144 "../src/Core/Programmer.vala"
	g_print ("%s / %s\n", _tmp17_, _tmp19_);
#line 144 "../src/Core/Programmer.vala"
	_g_free0 (_tmp19_);
#line 144 "../src/Core/Programmer.vala"
	_g_free0 (_tmp17_);
#line 145 "../src/Core/Programmer.vala"
	if (int_divisor == ((gint64) 0)) {
#line 1207 "Programmer.c"
		gchar* _tmp20_;
#line 146 "../src/Core/Programmer.vala"
		_tmp20_ = g_strdup ("Error");
#line 146 "../src/Core/Programmer.vala"
		result = _tmp20_;
#line 146 "../src/Core/Programmer.vala"
		_g_free0 (divisor);
#line 146 "../src/Core/Programmer.vala"
		_g_free0 (dividend);
#line 146 "../src/Core/Programmer.vala"
		return result;
#line 1219 "Programmer.c"
	}
#line 148 "../src/Core/Programmer.vala"
	quotient = int_dividend / int_divisor;
#line 149 "../src/Core/Programmer.vala"
	_tmp21_ = g_strdup_printf ("%" G_GINT64_FORMAT, quotient);
#line 149 "../src/Core/Programmer.vala"
	result = _tmp21_;
#line 149 "../src/Core/Programmer.vala"
	_g_free0 (divisor);
#line 149 "../src/Core/Programmer.vala"
	_g_free0 (dividend);
#line 149 "../src/Core/Programmer.vala"
	return result;
#line 1233 "Programmer.c"
}

gchar*
pebbles_programmer_mod_signed_integer (PebblesProgrammer* self,
                                       gboolean* input_a,
                                       gint input_a_length1,
                                       gboolean* input_b,
                                       gint input_b_length1,
                                       gint* word_size)
{
	gchar* dividend = NULL;
	gchar* _tmp0_;
	gchar* divisor = NULL;
	gchar* _tmp1_;
	gint64 int_dividend = 0LL;
	const gchar* _tmp12_;
	gint64 _tmp13_ = 0LL;
	gint64 int_divisor = 0LL;
	const gchar* _tmp14_;
	gint64 _tmp15_ = 0LL;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	gint64 remainder = 0LL;
	gchar* _tmp21_;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 152 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 153 "../src/Core/Programmer.vala"
	_tmp0_ = g_strdup ("");
#line 153 "../src/Core/Programmer.vala"
	dividend = _tmp0_;
#line 154 "../src/Core/Programmer.vala"
	_tmp1_ = g_strdup ("");
#line 154 "../src/Core/Programmer.vala"
	divisor = _tmp1_;
#line 1272 "Programmer.c"
	{
		gint i = 0;
#line 155 "../src/Core/Programmer.vala"
		i = 63;
#line 1277 "Programmer.c"
		{
			gboolean _tmp2_ = FALSE;
#line 155 "../src/Core/Programmer.vala"
			_tmp2_ = TRUE;
#line 155 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 1284 "Programmer.c"
				const gchar* _tmp4_ = NULL;
				gboolean _tmp5_;
				const gchar* _tmp6_;
				gchar* _tmp7_;
				const gchar* _tmp8_ = NULL;
				gboolean _tmp9_;
				const gchar* _tmp10_;
				gchar* _tmp11_;
#line 155 "../src/Core/Programmer.vala"
				if (!_tmp2_) {
#line 1295 "Programmer.c"
					gint _tmp3_;
#line 155 "../src/Core/Programmer.vala"
					_tmp3_ = i;
#line 155 "../src/Core/Programmer.vala"
					i = _tmp3_ - 1;
#line 1301 "Programmer.c"
				}
#line 155 "../src/Core/Programmer.vala"
				_tmp2_ = FALSE;
#line 155 "../src/Core/Programmer.vala"
				if (!(i >= 0)) {
#line 155 "../src/Core/Programmer.vala"
					break;
#line 1309 "Programmer.c"
				}
#line 156 "../src/Core/Programmer.vala"
				_tmp5_ = input_a[i];
#line 156 "../src/Core/Programmer.vala"
				if (_tmp5_) {
#line 156 "../src/Core/Programmer.vala"
					_tmp4_ = "1";
#line 1317 "Programmer.c"
				} else {
#line 156 "../src/Core/Programmer.vala"
					_tmp4_ = "0";
#line 1321 "Programmer.c"
				}
#line 156 "../src/Core/Programmer.vala"
				_tmp6_ = dividend;
#line 156 "../src/Core/Programmer.vala"
				_tmp7_ = g_strconcat (_tmp4_, _tmp6_, NULL);
#line 156 "../src/Core/Programmer.vala"
				_g_free0 (dividend);
#line 156 "../src/Core/Programmer.vala"
				dividend = _tmp7_;
#line 157 "../src/Core/Programmer.vala"
				_tmp9_ = input_b[i];
#line 157 "../src/Core/Programmer.vala"
				if (_tmp9_) {
#line 157 "../src/Core/Programmer.vala"
					_tmp8_ = "1";
#line 1337 "Programmer.c"
				} else {
#line 157 "../src/Core/Programmer.vala"
					_tmp8_ = "0";
#line 1341 "Programmer.c"
				}
#line 157 "../src/Core/Programmer.vala"
				_tmp10_ = divisor;
#line 157 "../src/Core/Programmer.vala"
				_tmp11_ = g_strconcat (_tmp8_, _tmp10_, NULL);
#line 157 "../src/Core/Programmer.vala"
				_g_free0 (divisor);
#line 157 "../src/Core/Programmer.vala"
				divisor = _tmp11_;
#line 1351 "Programmer.c"
			}
		}
	}
#line 160 "../src/Core/Programmer.vala"
	_tmp12_ = dividend;
#line 160 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp12_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp13_, &_inner_error0_);
#line 160 "../src/Core/Programmer.vala"
	int_dividend = _tmp13_;
#line 160 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 160 "../src/Core/Programmer.vala"
		_g_free0 (divisor);
#line 160 "../src/Core/Programmer.vala"
		_g_free0 (dividend);
#line 160 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 160 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 160 "../src/Core/Programmer.vala"
		return NULL;
#line 1373 "Programmer.c"
	}
#line 162 "../src/Core/Programmer.vala"
	_tmp14_ = divisor;
#line 162 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp14_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp15_, &_inner_error0_);
#line 162 "../src/Core/Programmer.vala"
	int_divisor = _tmp15_;
#line 162 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 162 "../src/Core/Programmer.vala"
		_g_free0 (divisor);
#line 162 "../src/Core/Programmer.vala"
		_g_free0 (dividend);
#line 162 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 162 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 162 "../src/Core/Programmer.vala"
		return NULL;
#line 1393 "Programmer.c"
	}
#line 163 "../src/Core/Programmer.vala"
	_tmp16_ = g_strdup_printf ("%" G_GINT64_FORMAT, int_dividend);
#line 163 "../src/Core/Programmer.vala"
	_tmp17_ = _tmp16_;
#line 163 "../src/Core/Programmer.vala"
	_tmp18_ = g_strdup_printf ("%" G_GINT64_FORMAT, int_divisor);
#line 163 "../src/Core/Programmer.vala"
	_tmp19_ = _tmp18_;
#line 163 "../src/Core/Programmer.vala"
	g_print ("%s / %s\n", _tmp17_, _tmp19_);
#line 163 "../src/Core/Programmer.vala"
	_g_free0 (_tmp19_);
#line 163 "../src/Core/Programmer.vala"
	_g_free0 (_tmp17_);
#line 164 "../src/Core/Programmer.vala"
	if (int_divisor == ((gint64) 0)) {
#line 1411 "Programmer.c"
		gchar* _tmp20_;
#line 165 "../src/Core/Programmer.vala"
		_tmp20_ = g_strdup ("Error");
#line 165 "../src/Core/Programmer.vala"
		result = _tmp20_;
#line 165 "../src/Core/Programmer.vala"
		_g_free0 (divisor);
#line 165 "../src/Core/Programmer.vala"
		_g_free0 (dividend);
#line 165 "../src/Core/Programmer.vala"
		return result;
#line 1423 "Programmer.c"
	}
#line 167 "../src/Core/Programmer.vala"
	remainder = int_dividend % int_divisor;
#line 168 "../src/Core/Programmer.vala"
	_tmp21_ = g_strdup_printf ("%" G_GINT64_FORMAT, remainder);
#line 168 "../src/Core/Programmer.vala"
	result = _tmp21_;
#line 168 "../src/Core/Programmer.vala"
	_g_free0 (divisor);
#line 168 "../src/Core/Programmer.vala"
	_g_free0 (dividend);
#line 168 "../src/Core/Programmer.vala"
	return result;
#line 1437 "Programmer.c"
}

static gboolean*
_vala_array_dup24 (gboolean* self,
                   gint length)
{
#line 212 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 212 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 1448 "Programmer.c"
	}
#line 212 "../src/Core/Programmer.vala"
	return NULL;
#line 1452 "Programmer.c"
}

gboolean*
pebbles_programmer_division_quotient (PebblesProgrammer* self,
                                      gboolean* input_a,
                                      gint input_a_length1,
                                      gboolean* input_b,
                                      gint input_b_length1,
                                      gint* word_size,
                                      gint* result_length1)
{
	gboolean* dividend = NULL;
	gboolean* _tmp8_;
	gint dividend_length1;
	gint _dividend_size_;
	gint comparator_result = 0;
	gboolean* shift_size = NULL;
	gboolean* _tmp13_;
	gint shift_size_length1;
	gint _shift_size_size_;
	gboolean* _tmp14_;
	gint _tmp14__length1;
	gboolean* _tmp15_;
	gint right_most = 0;
	gboolean* _tmp51_;
	gint _tmp51__length1;
	gboolean* _tmp52_;
	gint _tmp52__length1;
	gboolean* _tmp53_;
	gint _tmp53__length1;
	gboolean* result = NULL;
#line 172 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 173 "../src/Core/Programmer.vala"
	g_print ("Inputs for division:");
#line 1488 "Programmer.c"
	{
		gint j = 0;
#line 174 "../src/Core/Programmer.vala"
		j = 0;
#line 1493 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 174 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 174 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 1500 "Programmer.c"
				const gchar* _tmp2_ = NULL;
				gboolean _tmp3_;
#line 174 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 1505 "Programmer.c"
					gint _tmp1_;
#line 174 "../src/Core/Programmer.vala"
					_tmp1_ = j;
#line 174 "../src/Core/Programmer.vala"
					j = _tmp1_ + 1;
#line 1511 "Programmer.c"
				}
#line 174 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 174 "../src/Core/Programmer.vala"
				if (!(j < 64)) {
#line 174 "../src/Core/Programmer.vala"
					break;
#line 1519 "Programmer.c"
				}
#line 174 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[j];
#line 174 "../src/Core/Programmer.vala"
				if (_tmp3_) {
#line 174 "../src/Core/Programmer.vala"
					_tmp2_ = "1";
#line 1527 "Programmer.c"
				} else {
#line 174 "../src/Core/Programmer.vala"
					_tmp2_ = "0";
#line 1531 "Programmer.c"
				}
#line 174 "../src/Core/Programmer.vala"
				g_print ("%s", _tmp2_);
#line 1535 "Programmer.c"
			}
		}
	}
#line 175 "../src/Core/Programmer.vala"
	g_print ("\n");
#line 1541 "Programmer.c"
	{
		gint j = 0;
#line 176 "../src/Core/Programmer.vala"
		j = 0;
#line 1546 "Programmer.c"
		{
			gboolean _tmp4_ = FALSE;
#line 176 "../src/Core/Programmer.vala"
			_tmp4_ = TRUE;
#line 176 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 1553 "Programmer.c"
				const gchar* _tmp6_ = NULL;
				gboolean _tmp7_;
#line 176 "../src/Core/Programmer.vala"
				if (!_tmp4_) {
#line 1558 "Programmer.c"
					gint _tmp5_;
#line 176 "../src/Core/Programmer.vala"
					_tmp5_ = j;
#line 176 "../src/Core/Programmer.vala"
					j = _tmp5_ + 1;
#line 1564 "Programmer.c"
				}
#line 176 "../src/Core/Programmer.vala"
				_tmp4_ = FALSE;
#line 176 "../src/Core/Programmer.vala"
				if (!(j < 64)) {
#line 176 "../src/Core/Programmer.vala"
					break;
#line 1572 "Programmer.c"
				}
#line 176 "../src/Core/Programmer.vala"
				_tmp7_ = input_b[j];
#line 176 "../src/Core/Programmer.vala"
				if (_tmp7_) {
#line 176 "../src/Core/Programmer.vala"
					_tmp6_ = "1";
#line 1580 "Programmer.c"
				} else {
#line 176 "../src/Core/Programmer.vala"
					_tmp6_ = "0";
#line 1584 "Programmer.c"
				}
#line 176 "../src/Core/Programmer.vala"
				g_print ("%s", _tmp6_);
#line 1588 "Programmer.c"
			}
		}
	}
#line 177 "../src/Core/Programmer.vala"
	g_print ("\n");
#line 178 "../src/Core/Programmer.vala"
	_tmp8_ = g_new0 (gboolean, 64);
#line 178 "../src/Core/Programmer.vala"
	dividend = _tmp8_;
#line 178 "../src/Core/Programmer.vala"
	dividend_length1 = 64;
#line 178 "../src/Core/Programmer.vala"
	_dividend_size_ = dividend_length1;
#line 1602 "Programmer.c"
	{
		gint i = 0;
#line 179 "../src/Core/Programmer.vala"
		i = 63;
#line 1607 "Programmer.c"
		{
			gboolean _tmp9_ = FALSE;
#line 179 "../src/Core/Programmer.vala"
			_tmp9_ = TRUE;
#line 179 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 1614 "Programmer.c"
				gboolean* _tmp11_;
				gint _tmp11__length1;
				gboolean _tmp12_;
#line 179 "../src/Core/Programmer.vala"
				if (!_tmp9_) {
#line 1620 "Programmer.c"
					gint _tmp10_;
#line 179 "../src/Core/Programmer.vala"
					_tmp10_ = i;
#line 179 "../src/Core/Programmer.vala"
					i = _tmp10_ - 1;
#line 1626 "Programmer.c"
				}
#line 179 "../src/Core/Programmer.vala"
				_tmp9_ = FALSE;
#line 179 "../src/Core/Programmer.vala"
				if (!(i >= (64 - input_a_length1))) {
#line 179 "../src/Core/Programmer.vala"
					break;
#line 1634 "Programmer.c"
				}
#line 180 "../src/Core/Programmer.vala"
				_tmp11_ = dividend;
#line 180 "../src/Core/Programmer.vala"
				_tmp11__length1 = dividend_length1;
#line 180 "../src/Core/Programmer.vala"
				_tmp12_ = input_a[i];
#line 180 "../src/Core/Programmer.vala"
				_tmp11_[i] = _tmp12_;
#line 1644 "Programmer.c"
			}
		}
	}
#line 184 "../src/Core/Programmer.vala"
	_tmp13_ = g_new0 (gboolean, 64);
#line 184 "../src/Core/Programmer.vala"
	shift_size = _tmp13_;
#line 184 "../src/Core/Programmer.vala"
	shift_size_length1 = 64;
#line 184 "../src/Core/Programmer.vala"
	_shift_size_size_ = shift_size_length1;
#line 185 "../src/Core/Programmer.vala"
	_tmp14_ = shift_size;
#line 185 "../src/Core/Programmer.vala"
	_tmp14__length1 = shift_size_length1;
#line 185 "../src/Core/Programmer.vala"
	_tmp14_[63] = TRUE;
#line 186 "../src/Core/Programmer.vala"
	_tmp15_ = g_new0 (gboolean, 64);
#line 186 "../src/Core/Programmer.vala"
	self->output = (g_free (self->output), NULL);
#line 186 "../src/Core/Programmer.vala"
	self->output = _tmp15_;
#line 186 "../src/Core/Programmer.vala"
	self->output_length1 = 64;
#line 187 "../src/Core/Programmer.vala"
	right_most = pebbles_programmer_find_right_most_one (self, input_a, (gint) input_a_length1);
#line 188 "../src/Core/Programmer.vala"
	g_print ("rightmost: %d", right_most);
#line 1674 "Programmer.c"
	{
		gint i = 0;
#line 189 "../src/Core/Programmer.vala"
		i = (64 - ((gint) (*word_size))) + right_most;
#line 1679 "Programmer.c"
		{
			gboolean _tmp16_ = FALSE;
#line 189 "../src/Core/Programmer.vala"
			_tmp16_ = TRUE;
#line 189 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 1686 "Programmer.c"
				gboolean* _tmp18_;
				gint _tmp18__length1;
				gboolean* _tmp19_;
				gint _tmp19__length1;
				gboolean* _tmp20_;
				gint _tmp20__length1;
				gboolean _tmp21_;
				gint _tmp22_ = 0;
				gboolean* _tmp23_;
				gboolean* _tmp29_;
				gint _tmp29__length1;
				gboolean _tmp30_;
				gboolean* _tmp31_;
				gint _tmp31__length1;
#line 189 "../src/Core/Programmer.vala"
				if (!_tmp16_) {
#line 1703 "Programmer.c"
					gint _tmp17_;
#line 189 "../src/Core/Programmer.vala"
					_tmp17_ = i;
#line 189 "../src/Core/Programmer.vala"
					i = _tmp17_ + 1;
#line 1709 "Programmer.c"
				}
#line 189 "../src/Core/Programmer.vala"
				_tmp16_ = FALSE;
#line 189 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 189 "../src/Core/Programmer.vala"
					break;
#line 1717 "Programmer.c"
				}
#line 190 "../src/Core/Programmer.vala"
				_tmp18_ = dividend;
#line 190 "../src/Core/Programmer.vala"
				_tmp18__length1 = dividend_length1;
#line 190 "../src/Core/Programmer.vala"
				_tmp19_ = shift_size;
#line 190 "../src/Core/Programmer.vala"
				_tmp19__length1 = shift_size_length1;
#line 190 "../src/Core/Programmer.vala"
				_tmp20_ = dividend;
#line 190 "../src/Core/Programmer.vala"
				_tmp20__length1 = dividend_length1;
#line 190 "../src/Core/Programmer.vala"
				_tmp21_ = _tmp20_[64 - (*word_size)];
#line 190 "../src/Core/Programmer.vala"
				_tmp23_ = pebbles_programmer_left_shift (self, _tmp18_, (gint) _tmp18__length1, _tmp19_, (gint) _tmp19__length1, _tmp21_, word_size, &_tmp22_);
#line 190 "../src/Core/Programmer.vala"
				dividend = (g_free (dividend), NULL);
#line 190 "../src/Core/Programmer.vala"
				dividend = _tmp23_;
#line 190 "../src/Core/Programmer.vala"
				dividend_length1 = _tmp22_;
#line 190 "../src/Core/Programmer.vala"
				_dividend_size_ = dividend_length1;
#line 191 "../src/Core/Programmer.vala"
				g_print ("Left shift : ");
#line 1745 "Programmer.c"
				{
					gint j = 0;
#line 192 "../src/Core/Programmer.vala"
					j = 0;
#line 1750 "Programmer.c"
					{
						gboolean _tmp24_ = FALSE;
#line 192 "../src/Core/Programmer.vala"
						_tmp24_ = TRUE;
#line 192 "../src/Core/Programmer.vala"
						while (TRUE) {
#line 1757 "Programmer.c"
							const gchar* _tmp26_ = NULL;
							gboolean* _tmp27_;
							gint _tmp27__length1;
							gboolean _tmp28_;
#line 192 "../src/Core/Programmer.vala"
							if (!_tmp24_) {
#line 1764 "Programmer.c"
								gint _tmp25_;
#line 192 "../src/Core/Programmer.vala"
								_tmp25_ = j;
#line 192 "../src/Core/Programmer.vala"
								j = _tmp25_ + 1;
#line 1770 "Programmer.c"
							}
#line 192 "../src/Core/Programmer.vala"
							_tmp24_ = FALSE;
#line 192 "../src/Core/Programmer.vala"
							if (!(j < 64)) {
#line 192 "../src/Core/Programmer.vala"
								break;
#line 1778 "Programmer.c"
							}
#line 192 "../src/Core/Programmer.vala"
							_tmp27_ = dividend;
#line 192 "../src/Core/Programmer.vala"
							_tmp27__length1 = dividend_length1;
#line 192 "../src/Core/Programmer.vala"
							_tmp28_ = _tmp27_[j];
#line 192 "../src/Core/Programmer.vala"
							if (_tmp28_) {
#line 192 "../src/Core/Programmer.vala"
								_tmp26_ = "1";
#line 1790 "Programmer.c"
							} else {
#line 192 "../src/Core/Programmer.vala"
								_tmp26_ = "0";
#line 1794 "Programmer.c"
							}
#line 192 "../src/Core/Programmer.vala"
							g_print ("%s", _tmp26_);
#line 1798 "Programmer.c"
						}
					}
				}
#line 193 "../src/Core/Programmer.vala"
				g_print ("\n");
#line 194 "../src/Core/Programmer.vala"
				_tmp29_ = dividend;
#line 194 "../src/Core/Programmer.vala"
				_tmp29__length1 = dividend_length1;
#line 194 "../src/Core/Programmer.vala"
				_tmp30_ = input_a[i];
#line 194 "../src/Core/Programmer.vala"
				_tmp29_[63] = _tmp30_;
#line 195 "../src/Core/Programmer.vala"
				_tmp31_ = dividend;
#line 195 "../src/Core/Programmer.vala"
				_tmp31__length1 = dividend_length1;
#line 195 "../src/Core/Programmer.vala"
				comparator_result = pebbles_programmer_comparator (self, _tmp31_, (gint) _tmp31__length1, input_b, (gint) input_b_length1, word_size);
#line 196 "../src/Core/Programmer.vala"
				g_print ("i : %d , Comparator : %d \n", i, comparator_result);
#line 197 "../src/Core/Programmer.vala"
				if (comparator_result == -1) {
#line 1822 "Programmer.c"
					gboolean* _tmp32_;
					gint _tmp32__length1;
#line 198 "../src/Core/Programmer.vala"
					_tmp32_ = self->output;
#line 198 "../src/Core/Programmer.vala"
					_tmp32__length1 = self->output_length1;
#line 198 "../src/Core/Programmer.vala"
					_tmp32_[i] = FALSE;
#line 1831 "Programmer.c"
				} else {
					gboolean* _tmp33_;
					gint _tmp33__length1;
					gboolean* _tmp43_;
					gint _tmp43__length1;
					gint _tmp44_ = 0;
					gboolean* _tmp45_;
#line 201 "../src/Core/Programmer.vala"
					_tmp33_ = self->output;
#line 201 "../src/Core/Programmer.vala"
					_tmp33__length1 = self->output_length1;
#line 201 "../src/Core/Programmer.vala"
					_tmp33_[i] = TRUE;
#line 202 "../src/Core/Programmer.vala"
					g_print ("Subtract for div : ");
#line 1847 "Programmer.c"
					{
						gint j = 0;
#line 203 "../src/Core/Programmer.vala"
						j = 0;
#line 1852 "Programmer.c"
						{
							gboolean _tmp34_ = FALSE;
#line 203 "../src/Core/Programmer.vala"
							_tmp34_ = TRUE;
#line 203 "../src/Core/Programmer.vala"
							while (TRUE) {
#line 1859 "Programmer.c"
								const gchar* _tmp36_ = NULL;
								gboolean* _tmp37_;
								gint _tmp37__length1;
								gboolean _tmp38_;
#line 203 "../src/Core/Programmer.vala"
								if (!_tmp34_) {
#line 1866 "Programmer.c"
									gint _tmp35_;
#line 203 "../src/Core/Programmer.vala"
									_tmp35_ = j;
#line 203 "../src/Core/Programmer.vala"
									j = _tmp35_ + 1;
#line 1872 "Programmer.c"
								}
#line 203 "../src/Core/Programmer.vala"
								_tmp34_ = FALSE;
#line 203 "../src/Core/Programmer.vala"
								if (!(j < 64)) {
#line 203 "../src/Core/Programmer.vala"
									break;
#line 1880 "Programmer.c"
								}
#line 203 "../src/Core/Programmer.vala"
								_tmp37_ = dividend;
#line 203 "../src/Core/Programmer.vala"
								_tmp37__length1 = dividend_length1;
#line 203 "../src/Core/Programmer.vala"
								_tmp38_ = _tmp37_[j];
#line 203 "../src/Core/Programmer.vala"
								if (_tmp38_) {
#line 203 "../src/Core/Programmer.vala"
									_tmp36_ = "1";
#line 1892 "Programmer.c"
								} else {
#line 203 "../src/Core/Programmer.vala"
									_tmp36_ = "0";
#line 1896 "Programmer.c"
								}
#line 203 "../src/Core/Programmer.vala"
								g_print ("%s", _tmp36_);
#line 1900 "Programmer.c"
							}
						}
					}
#line 204 "../src/Core/Programmer.vala"
					g_print ("\n");
#line 1906 "Programmer.c"
					{
						gint j = 0;
#line 205 "../src/Core/Programmer.vala"
						j = 0;
#line 1911 "Programmer.c"
						{
							gboolean _tmp39_ = FALSE;
#line 205 "../src/Core/Programmer.vala"
							_tmp39_ = TRUE;
#line 205 "../src/Core/Programmer.vala"
							while (TRUE) {
#line 1918 "Programmer.c"
								const gchar* _tmp41_ = NULL;
								gboolean _tmp42_;
#line 205 "../src/Core/Programmer.vala"
								if (!_tmp39_) {
#line 1923 "Programmer.c"
									gint _tmp40_;
#line 205 "../src/Core/Programmer.vala"
									_tmp40_ = j;
#line 205 "../src/Core/Programmer.vala"
									j = _tmp40_ + 1;
#line 1929 "Programmer.c"
								}
#line 205 "../src/Core/Programmer.vala"
								_tmp39_ = FALSE;
#line 205 "../src/Core/Programmer.vala"
								if (!(j < 64)) {
#line 205 "../src/Core/Programmer.vala"
									break;
#line 1937 "Programmer.c"
								}
#line 205 "../src/Core/Programmer.vala"
								_tmp42_ = input_b[j];
#line 205 "../src/Core/Programmer.vala"
								if (_tmp42_) {
#line 205 "../src/Core/Programmer.vala"
									_tmp41_ = "1";
#line 1945 "Programmer.c"
								} else {
#line 205 "../src/Core/Programmer.vala"
									_tmp41_ = "0";
#line 1949 "Programmer.c"
								}
#line 205 "../src/Core/Programmer.vala"
								g_print ("%s", _tmp41_);
#line 1953 "Programmer.c"
							}
						}
					}
#line 206 "../src/Core/Programmer.vala"
					g_print ("\n");
#line 207 "../src/Core/Programmer.vala"
					_tmp43_ = dividend;
#line 207 "../src/Core/Programmer.vala"
					_tmp43__length1 = dividend_length1;
#line 207 "../src/Core/Programmer.vala"
					_tmp45_ = pebbles_programmer_subtract (self, _tmp43_, (gint) _tmp43__length1, input_b, (gint) input_b_length1, word_size, &_tmp44_);
#line 207 "../src/Core/Programmer.vala"
					dividend = (g_free (dividend), NULL);
#line 207 "../src/Core/Programmer.vala"
					dividend = _tmp45_;
#line 207 "../src/Core/Programmer.vala"
					dividend_length1 = _tmp44_;
#line 207 "../src/Core/Programmer.vala"
					_dividend_size_ = dividend_length1;
#line 1973 "Programmer.c"
					{
						gint j = 0;
#line 208 "../src/Core/Programmer.vala"
						j = 0;
#line 1978 "Programmer.c"
						{
							gboolean _tmp46_ = FALSE;
#line 208 "../src/Core/Programmer.vala"
							_tmp46_ = TRUE;
#line 208 "../src/Core/Programmer.vala"
							while (TRUE) {
#line 1985 "Programmer.c"
								const gchar* _tmp48_ = NULL;
								gboolean* _tmp49_;
								gint _tmp49__length1;
								gboolean _tmp50_;
#line 208 "../src/Core/Programmer.vala"
								if (!_tmp46_) {
#line 1992 "Programmer.c"
									gint _tmp47_;
#line 208 "../src/Core/Programmer.vala"
									_tmp47_ = j;
#line 208 "../src/Core/Programmer.vala"
									j = _tmp47_ + 1;
#line 1998 "Programmer.c"
								}
#line 208 "../src/Core/Programmer.vala"
								_tmp46_ = FALSE;
#line 208 "../src/Core/Programmer.vala"
								if (!(j < 64)) {
#line 208 "../src/Core/Programmer.vala"
									break;
#line 2006 "Programmer.c"
								}
#line 208 "../src/Core/Programmer.vala"
								_tmp49_ = dividend;
#line 208 "../src/Core/Programmer.vala"
								_tmp49__length1 = dividend_length1;
#line 208 "../src/Core/Programmer.vala"
								_tmp50_ = _tmp49_[j];
#line 208 "../src/Core/Programmer.vala"
								if (_tmp50_) {
#line 208 "../src/Core/Programmer.vala"
									_tmp48_ = "1";
#line 2018 "Programmer.c"
								} else {
#line 208 "../src/Core/Programmer.vala"
									_tmp48_ = "0";
#line 2022 "Programmer.c"
								}
#line 208 "../src/Core/Programmer.vala"
								g_print ("%s", _tmp48_);
#line 2026 "Programmer.c"
							}
						}
					}
#line 209 "../src/Core/Programmer.vala"
					g_print ("\n");
#line 2032 "Programmer.c"
				}
			}
		}
	}
#line 212 "../src/Core/Programmer.vala"
	_tmp51_ = self->output;
#line 212 "../src/Core/Programmer.vala"
	_tmp51__length1 = self->output_length1;
#line 212 "../src/Core/Programmer.vala"
	_tmp52_ = (_tmp51_ != NULL) ? _vala_array_dup24 (_tmp51_, _tmp51__length1) : ((gpointer) _tmp51_);
#line 212 "../src/Core/Programmer.vala"
	_tmp52__length1 = _tmp51__length1;
#line 212 "../src/Core/Programmer.vala"
	_tmp53_ = _tmp52_;
#line 212 "../src/Core/Programmer.vala"
	_tmp53__length1 = _tmp52__length1;
#line 212 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 212 "../src/Core/Programmer.vala"
		*result_length1 = _tmp53__length1;
#line 2053 "Programmer.c"
	}
#line 212 "../src/Core/Programmer.vala"
	result = _tmp53_;
#line 212 "../src/Core/Programmer.vala"
	shift_size = (g_free (shift_size), NULL);
#line 212 "../src/Core/Programmer.vala"
	dividend = (g_free (dividend), NULL);
#line 212 "../src/Core/Programmer.vala"
	return result;
#line 2063 "Programmer.c"
}

static gint
pebbles_programmer_find_right_most_one (PebblesProgrammer* self,
                                        gboolean* input,
                                        gint input_length1)
{
	gint i = 0;
	gint result = 0;
#line 215 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 216 "../src/Core/Programmer.vala"
	i = 0;
#line 2077 "Programmer.c"
	{
		gboolean _tmp0_ = FALSE;
#line 217 "../src/Core/Programmer.vala"
		_tmp0_ = TRUE;
#line 217 "../src/Core/Programmer.vala"
		while (TRUE) {
#line 2084 "Programmer.c"
			gboolean _tmp2_;
#line 217 "../src/Core/Programmer.vala"
			if (!_tmp0_) {
#line 2088 "Programmer.c"
				gint _tmp1_;
#line 217 "../src/Core/Programmer.vala"
				_tmp1_ = i;
#line 217 "../src/Core/Programmer.vala"
				i = _tmp1_ + 1;
#line 2094 "Programmer.c"
			}
#line 217 "../src/Core/Programmer.vala"
			_tmp0_ = FALSE;
#line 217 "../src/Core/Programmer.vala"
			if (!(i < input_length1)) {
#line 217 "../src/Core/Programmer.vala"
				break;
#line 2102 "Programmer.c"
			}
#line 218 "../src/Core/Programmer.vala"
			_tmp2_ = input[i];
#line 218 "../src/Core/Programmer.vala"
			if (_tmp2_ == TRUE) {
#line 219 "../src/Core/Programmer.vala"
				break;
#line 2110 "Programmer.c"
			}
		}
	}
#line 222 "../src/Core/Programmer.vala"
	result = input_length1 - i;
#line 222 "../src/Core/Programmer.vala"
	return result;
#line 2118 "Programmer.c"
}

/***
        compares two boolean arrays and returns an integer based on the following:
        a<b return -1
        a=b return 0
        a>b return 1
        */
gint
pebbles_programmer_comparator (PebblesProgrammer* self,
                               gboolean* input_a,
                               gint input_a_length1,
                               gboolean* input_b,
                               gint input_b_length1,
                               gint* word_size)
{
	gint result = 0;
#line 232 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 2138 "Programmer.c"
	{
		gint i = 0;
#line 233 "../src/Core/Programmer.vala"
		i = 64 - ((gint) (*word_size));
#line 2143 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 233 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 233 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2150 "Programmer.c"
				gboolean _tmp2_ = FALSE;
				gboolean _tmp3_;
#line 233 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 2155 "Programmer.c"
					gint _tmp1_;
#line 233 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 233 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 2161 "Programmer.c"
				}
#line 233 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 233 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 233 "../src/Core/Programmer.vala"
					break;
#line 2169 "Programmer.c"
				}
#line 234 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 234 "../src/Core/Programmer.vala"
				if (_tmp3_ == FALSE) {
#line 2175 "Programmer.c"
					gboolean _tmp4_;
#line 234 "../src/Core/Programmer.vala"
					_tmp4_ = input_b[i];
#line 234 "../src/Core/Programmer.vala"
					_tmp2_ = _tmp4_ == TRUE;
#line 2181 "Programmer.c"
				} else {
#line 234 "../src/Core/Programmer.vala"
					_tmp2_ = FALSE;
#line 2185 "Programmer.c"
				}
#line 234 "../src/Core/Programmer.vala"
				if (_tmp2_) {
#line 235 "../src/Core/Programmer.vala"
					result = -1;
#line 235 "../src/Core/Programmer.vala"
					return result;
#line 2193 "Programmer.c"
				} else {
					gboolean _tmp5_;
					gboolean _tmp6_;
#line 237 "../src/Core/Programmer.vala"
					_tmp5_ = input_a[i];
#line 237 "../src/Core/Programmer.vala"
					_tmp6_ = input_b[i];
#line 237 "../src/Core/Programmer.vala"
					if (_tmp5_ == _tmp6_) {
#line 238 "../src/Core/Programmer.vala"
						continue;
#line 2205 "Programmer.c"
					} else {
#line 241 "../src/Core/Programmer.vala"
						result = 1;
#line 241 "../src/Core/Programmer.vala"
						return result;
#line 2211 "Programmer.c"
					}
				}
			}
		}
	}
#line 244 "../src/Core/Programmer.vala"
	result = 0;
#line 244 "../src/Core/Programmer.vala"
	return result;
#line 2221 "Programmer.c"
}

static gboolean*
_vala_array_dup25 (gboolean* self,
                   gint length)
{
#line 262 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 262 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 2232 "Programmer.c"
	}
#line 262 "../src/Core/Programmer.vala"
	return NULL;
#line 2236 "Programmer.c"
}

gboolean*
pebbles_programmer_left_shift (PebblesProgrammer* self,
                               gboolean* input_a,
                               gint input_a_length1,
                               gboolean* input_b,
                               gint input_b_length1,
                               gboolean fill_bits,
                               gint* word_size,
                               gint* result_length1)
{
	gint64 shift_amount = 0LL;
	gchar* shift_amount_binary_string = NULL;
	gchar* _tmp0_;
	const gchar* _tmp7_;
	gint64 _tmp8_ = 0LL;
	gboolean* _tmp13_;
	gint _tmp13__length1;
	gboolean* _tmp14_;
	gint _tmp14__length1;
	gboolean* _tmp15_;
	gint _tmp15__length1;
	gboolean* _tmp16_;
	gint _tmp16__length1;
	GError* _inner_error0_ = NULL;
	gboolean* result = NULL;
#line 247 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 249 "../src/Core/Programmer.vala"
	_tmp0_ = g_strdup ("");
#line 249 "../src/Core/Programmer.vala"
	shift_amount_binary_string = _tmp0_;
#line 2270 "Programmer.c"
	{
		gint i = 0;
#line 250 "../src/Core/Programmer.vala"
		i = 63;
#line 2275 "Programmer.c"
		{
			gboolean _tmp1_ = FALSE;
#line 250 "../src/Core/Programmer.vala"
			_tmp1_ = TRUE;
#line 250 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2282 "Programmer.c"
				const gchar* _tmp3_ = NULL;
				gboolean _tmp4_;
				const gchar* _tmp5_;
				gchar* _tmp6_;
#line 250 "../src/Core/Programmer.vala"
				if (!_tmp1_) {
#line 2289 "Programmer.c"
					gint _tmp2_;
#line 250 "../src/Core/Programmer.vala"
					_tmp2_ = i;
#line 250 "../src/Core/Programmer.vala"
					i = _tmp2_ - 1;
#line 2295 "Programmer.c"
				}
#line 250 "../src/Core/Programmer.vala"
				_tmp1_ = FALSE;
#line 250 "../src/Core/Programmer.vala"
				if (!(i >= 0)) {
#line 250 "../src/Core/Programmer.vala"
					break;
#line 2303 "Programmer.c"
				}
#line 251 "../src/Core/Programmer.vala"
				_tmp4_ = input_b[i];
#line 251 "../src/Core/Programmer.vala"
				if (_tmp4_) {
#line 251 "../src/Core/Programmer.vala"
					_tmp3_ = "1";
#line 2311 "Programmer.c"
				} else {
#line 251 "../src/Core/Programmer.vala"
					_tmp3_ = "0";
#line 2315 "Programmer.c"
				}
#line 251 "../src/Core/Programmer.vala"
				_tmp5_ = shift_amount_binary_string;
#line 251 "../src/Core/Programmer.vala"
				_tmp6_ = g_strconcat (_tmp3_, _tmp5_, NULL);
#line 251 "../src/Core/Programmer.vala"
				_g_free0 (shift_amount_binary_string);
#line 251 "../src/Core/Programmer.vala"
				shift_amount_binary_string = _tmp6_;
#line 2325 "Programmer.c"
			}
		}
	}
#line 253 "../src/Core/Programmer.vala"
	_tmp7_ = shift_amount_binary_string;
#line 253 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp7_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp8_, &_inner_error0_);
#line 253 "../src/Core/Programmer.vala"
	shift_amount = _tmp8_;
#line 253 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 253 "../src/Core/Programmer.vala"
		_g_free0 (shift_amount_binary_string);
#line 253 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 253 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 253 "../src/Core/Programmer.vala"
		return NULL;
#line 2345 "Programmer.c"
	}
#line 254 "../src/Core/Programmer.vala"
	if (shift_amount < ((gint64) 1)) {
#line 255 "../src/Core/Programmer.vala"
		shift_amount = (gint64) 1;
#line 2351 "Programmer.c"
	}
#line 256 "../src/Core/Programmer.vala"
	if (shift_amount > (*word_size)) {
#line 257 "../src/Core/Programmer.vala"
		shift_amount = *word_size;
#line 2357 "Programmer.c"
	}
	{
		gint i = 0;
#line 258 "../src/Core/Programmer.vala"
		i = (64 - ((gint) (*word_size))) + ((gint) shift_amount);
#line 2363 "Programmer.c"
		{
			gboolean _tmp9_ = FALSE;
#line 258 "../src/Core/Programmer.vala"
			_tmp9_ = TRUE;
#line 258 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2370 "Programmer.c"
				gboolean* _tmp11_;
				gint _tmp11__length1;
				gboolean _tmp12_;
#line 258 "../src/Core/Programmer.vala"
				if (!_tmp9_) {
#line 2376 "Programmer.c"
					gint _tmp10_;
#line 258 "../src/Core/Programmer.vala"
					_tmp10_ = i;
#line 258 "../src/Core/Programmer.vala"
					i = _tmp10_ + 1;
#line 2382 "Programmer.c"
				}
#line 258 "../src/Core/Programmer.vala"
				_tmp9_ = FALSE;
#line 258 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 258 "../src/Core/Programmer.vala"
					break;
#line 2390 "Programmer.c"
				}
#line 259 "../src/Core/Programmer.vala"
				_tmp11_ = self->output;
#line 259 "../src/Core/Programmer.vala"
				_tmp11__length1 = self->output_length1;
#line 259 "../src/Core/Programmer.vala"
				_tmp12_ = input_a[i];
#line 259 "../src/Core/Programmer.vala"
				_tmp11_[i - shift_amount] = _tmp12_;
#line 2400 "Programmer.c"
			}
		}
	}
#line 261 "../src/Core/Programmer.vala"
	_tmp13_ = self->output;
#line 261 "../src/Core/Programmer.vala"
	_tmp13__length1 = self->output_length1;
#line 261 "../src/Core/Programmer.vala"
	_tmp13_[63] = fill_bits;
#line 262 "../src/Core/Programmer.vala"
	_tmp14_ = self->output;
#line 262 "../src/Core/Programmer.vala"
	_tmp14__length1 = self->output_length1;
#line 262 "../src/Core/Programmer.vala"
	_tmp15_ = (_tmp14_ != NULL) ? _vala_array_dup25 (_tmp14_, _tmp14__length1) : ((gpointer) _tmp14_);
#line 262 "../src/Core/Programmer.vala"
	_tmp15__length1 = _tmp14__length1;
#line 262 "../src/Core/Programmer.vala"
	_tmp16_ = _tmp15_;
#line 262 "../src/Core/Programmer.vala"
	_tmp16__length1 = _tmp15__length1;
#line 262 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 262 "../src/Core/Programmer.vala"
		*result_length1 = _tmp16__length1;
#line 2426 "Programmer.c"
	}
#line 262 "../src/Core/Programmer.vala"
	result = _tmp16_;
#line 262 "../src/Core/Programmer.vala"
	_g_free0 (shift_amount_binary_string);
#line 262 "../src/Core/Programmer.vala"
	return result;
#line 2434 "Programmer.c"
}

static gboolean*
_vala_array_dup26 (gboolean* self,
                   gint length)
{
#line 280 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 280 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 2445 "Programmer.c"
	}
#line 280 "../src/Core/Programmer.vala"
	return NULL;
#line 2449 "Programmer.c"
}

gboolean*
pebbles_programmer_right_shift (PebblesProgrammer* self,
                                gboolean* input_a,
                                gint input_a_length1,
                                gboolean* input_b,
                                gint input_b_length1,
                                gboolean fill_bits,
                                gint* word_size,
                                gint* result_length1)
{
	gint64 shift_amount = 0LL;
	gchar* shift_amount_binary_string = NULL;
	gchar* _tmp0_;
	const gchar* _tmp7_;
	gint64 _tmp8_ = 0LL;
	gboolean* _tmp13_;
	gint _tmp13__length1;
	gboolean* _tmp14_;
	gint _tmp14__length1;
	gboolean* _tmp15_;
	gint _tmp15__length1;
	gboolean* _tmp16_;
	gint _tmp16__length1;
	GError* _inner_error0_ = NULL;
	gboolean* result = NULL;
#line 265 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 267 "../src/Core/Programmer.vala"
	_tmp0_ = g_strdup ("");
#line 267 "../src/Core/Programmer.vala"
	shift_amount_binary_string = _tmp0_;
#line 2483 "Programmer.c"
	{
		gint i = 0;
#line 268 "../src/Core/Programmer.vala"
		i = 63;
#line 2488 "Programmer.c"
		{
			gboolean _tmp1_ = FALSE;
#line 268 "../src/Core/Programmer.vala"
			_tmp1_ = TRUE;
#line 268 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2495 "Programmer.c"
				const gchar* _tmp3_ = NULL;
				gboolean _tmp4_;
				const gchar* _tmp5_;
				gchar* _tmp6_;
#line 268 "../src/Core/Programmer.vala"
				if (!_tmp1_) {
#line 2502 "Programmer.c"
					gint _tmp2_;
#line 268 "../src/Core/Programmer.vala"
					_tmp2_ = i;
#line 268 "../src/Core/Programmer.vala"
					i = _tmp2_ - 1;
#line 2508 "Programmer.c"
				}
#line 268 "../src/Core/Programmer.vala"
				_tmp1_ = FALSE;
#line 268 "../src/Core/Programmer.vala"
				if (!(i >= 0)) {
#line 268 "../src/Core/Programmer.vala"
					break;
#line 2516 "Programmer.c"
				}
#line 269 "../src/Core/Programmer.vala"
				_tmp4_ = input_b[i];
#line 269 "../src/Core/Programmer.vala"
				if (_tmp4_) {
#line 269 "../src/Core/Programmer.vala"
					_tmp3_ = "1";
#line 2524 "Programmer.c"
				} else {
#line 269 "../src/Core/Programmer.vala"
					_tmp3_ = "0";
#line 2528 "Programmer.c"
				}
#line 269 "../src/Core/Programmer.vala"
				_tmp5_ = shift_amount_binary_string;
#line 269 "../src/Core/Programmer.vala"
				_tmp6_ = g_strconcat (_tmp3_, _tmp5_, NULL);
#line 269 "../src/Core/Programmer.vala"
				_g_free0 (shift_amount_binary_string);
#line 269 "../src/Core/Programmer.vala"
				shift_amount_binary_string = _tmp6_;
#line 2538 "Programmer.c"
			}
		}
	}
#line 271 "../src/Core/Programmer.vala"
	_tmp7_ = shift_amount_binary_string;
#line 271 "../src/Core/Programmer.vala"
	g_ascii_string_to_signed (_tmp7_, (guint) 2, G_MININT64, G_MAXINT64, &_tmp8_, &_inner_error0_);
#line 271 "../src/Core/Programmer.vala"
	shift_amount = _tmp8_;
#line 271 "../src/Core/Programmer.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 271 "../src/Core/Programmer.vala"
		_g_free0 (shift_amount_binary_string);
#line 271 "../src/Core/Programmer.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 271 "../src/Core/Programmer.vala"
		g_clear_error (&_inner_error0_);
#line 271 "../src/Core/Programmer.vala"
		return NULL;
#line 2558 "Programmer.c"
	}
#line 272 "../src/Core/Programmer.vala"
	if (shift_amount < ((gint64) 1)) {
#line 273 "../src/Core/Programmer.vala"
		shift_amount = (gint64) 1;
#line 2564 "Programmer.c"
	}
#line 274 "../src/Core/Programmer.vala"
	if (shift_amount > (*word_size)) {
#line 275 "../src/Core/Programmer.vala"
		shift_amount = *word_size;
#line 2570 "Programmer.c"
	}
	{
		gint i = 0;
#line 276 "../src/Core/Programmer.vala"
		i = 64 - (*word_size);
#line 2576 "Programmer.c"
		{
			gboolean _tmp9_ = FALSE;
#line 276 "../src/Core/Programmer.vala"
			_tmp9_ = TRUE;
#line 276 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2583 "Programmer.c"
				gboolean* _tmp11_;
				gint _tmp11__length1;
				gboolean _tmp12_;
#line 276 "../src/Core/Programmer.vala"
				if (!_tmp9_) {
#line 2589 "Programmer.c"
					gint _tmp10_;
#line 276 "../src/Core/Programmer.vala"
					_tmp10_ = i;
#line 276 "../src/Core/Programmer.vala"
					i = _tmp10_ + 1;
#line 2595 "Programmer.c"
				}
#line 276 "../src/Core/Programmer.vala"
				_tmp9_ = FALSE;
#line 276 "../src/Core/Programmer.vala"
				if (!(((gint64) i) < (64 - shift_amount))) {
#line 276 "../src/Core/Programmer.vala"
					break;
#line 2603 "Programmer.c"
				}
#line 277 "../src/Core/Programmer.vala"
				_tmp11_ = self->output;
#line 277 "../src/Core/Programmer.vala"
				_tmp11__length1 = self->output_length1;
#line 277 "../src/Core/Programmer.vala"
				_tmp12_ = input_a[i];
#line 277 "../src/Core/Programmer.vala"
				_tmp11_[i + shift_amount] = _tmp12_;
#line 2613 "Programmer.c"
			}
		}
	}
#line 279 "../src/Core/Programmer.vala"
	_tmp13_ = self->output;
#line 279 "../src/Core/Programmer.vala"
	_tmp13__length1 = self->output_length1;
#line 279 "../src/Core/Programmer.vala"
	_tmp13_[0] = fill_bits;
#line 280 "../src/Core/Programmer.vala"
	_tmp14_ = self->output;
#line 280 "../src/Core/Programmer.vala"
	_tmp14__length1 = self->output_length1;
#line 280 "../src/Core/Programmer.vala"
	_tmp15_ = (_tmp14_ != NULL) ? _vala_array_dup26 (_tmp14_, _tmp14__length1) : ((gpointer) _tmp14_);
#line 280 "../src/Core/Programmer.vala"
	_tmp15__length1 = _tmp14__length1;
#line 280 "../src/Core/Programmer.vala"
	_tmp16_ = _tmp15_;
#line 280 "../src/Core/Programmer.vala"
	_tmp16__length1 = _tmp15__length1;
#line 280 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 280 "../src/Core/Programmer.vala"
		*result_length1 = _tmp16__length1;
#line 2639 "Programmer.c"
	}
#line 280 "../src/Core/Programmer.vala"
	result = _tmp16_;
#line 280 "../src/Core/Programmer.vala"
	_g_free0 (shift_amount_binary_string);
#line 280 "../src/Core/Programmer.vala"
	return result;
#line 2647 "Programmer.c"
}

static gboolean*
_vala_array_dup27 (gboolean* self,
                   gint length)
{
#line 287 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 287 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 2658 "Programmer.c"
	}
#line 287 "../src/Core/Programmer.vala"
	return NULL;
#line 2662 "Programmer.c"
}

gboolean*
pebbles_programmer_and (PebblesProgrammer* self,
                        gboolean* input_a,
                        gint input_a_length1,
                        gboolean* input_b,
                        gint input_b_length1,
                        gint* word_size,
                        gint* result_length1)
{
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* _tmp8_;
	gint _tmp8__length1;
	gboolean* result = NULL;
#line 283 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2683 "Programmer.c"
	{
		gint i = 0;
#line 284 "../src/Core/Programmer.vala"
		i = 64 - ((gint) (*word_size));
#line 2688 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 284 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 284 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2695 "Programmer.c"
				gboolean _tmp2_ = FALSE;
				gboolean _tmp3_;
				gboolean* _tmp5_;
				gint _tmp5__length1;
#line 284 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 2702 "Programmer.c"
					gint _tmp1_;
#line 284 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 284 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 2708 "Programmer.c"
				}
#line 284 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 284 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 284 "../src/Core/Programmer.vala"
					break;
#line 2716 "Programmer.c"
				}
#line 285 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 285 "../src/Core/Programmer.vala"
				if (_tmp3_) {
#line 2722 "Programmer.c"
					gboolean _tmp4_;
#line 285 "../src/Core/Programmer.vala"
					_tmp4_ = input_b[i];
#line 285 "../src/Core/Programmer.vala"
					_tmp2_ = _tmp4_;
#line 2728 "Programmer.c"
				} else {
#line 285 "../src/Core/Programmer.vala"
					_tmp2_ = FALSE;
#line 2732 "Programmer.c"
				}
#line 285 "../src/Core/Programmer.vala"
				_tmp5_ = self->output;
#line 285 "../src/Core/Programmer.vala"
				_tmp5__length1 = self->output_length1;
#line 285 "../src/Core/Programmer.vala"
				_tmp5_[i] = _tmp2_;
#line 2740 "Programmer.c"
			}
		}
	}
#line 287 "../src/Core/Programmer.vala"
	_tmp6_ = self->output;
#line 287 "../src/Core/Programmer.vala"
	_tmp6__length1 = self->output_length1;
#line 287 "../src/Core/Programmer.vala"
	_tmp7_ = (_tmp6_ != NULL) ? _vala_array_dup27 (_tmp6_, _tmp6__length1) : ((gpointer) _tmp6_);
#line 287 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 287 "../src/Core/Programmer.vala"
	_tmp8_ = _tmp7_;
#line 287 "../src/Core/Programmer.vala"
	_tmp8__length1 = _tmp7__length1;
#line 287 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 287 "../src/Core/Programmer.vala"
		*result_length1 = _tmp8__length1;
#line 2760 "Programmer.c"
	}
#line 287 "../src/Core/Programmer.vala"
	result = _tmp8_;
#line 287 "../src/Core/Programmer.vala"
	return result;
#line 2766 "Programmer.c"
}

static gboolean*
_vala_array_dup28 (gboolean* self,
                   gint length)
{
#line 293 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 293 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 2777 "Programmer.c"
	}
#line 293 "../src/Core/Programmer.vala"
	return NULL;
#line 2781 "Programmer.c"
}

gboolean*
pebbles_programmer_nand (PebblesProgrammer* self,
                         gboolean* input_a,
                         gint input_a_length1,
                         gboolean* input_b,
                         gint input_b_length1,
                         gint* word_size,
                         gint* result_length1)
{
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* _tmp8_;
	gint _tmp8__length1;
	gboolean* result = NULL;
#line 289 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2802 "Programmer.c"
	{
		gint i = 0;
#line 290 "../src/Core/Programmer.vala"
		i = 64 - ((gint) (*word_size));
#line 2807 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 290 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 290 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2814 "Programmer.c"
				gboolean _tmp2_ = FALSE;
				gboolean _tmp3_;
				gboolean* _tmp5_;
				gint _tmp5__length1;
#line 290 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 2821 "Programmer.c"
					gint _tmp1_;
#line 290 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 290 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 2827 "Programmer.c"
				}
#line 290 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 290 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 290 "../src/Core/Programmer.vala"
					break;
#line 2835 "Programmer.c"
				}
#line 291 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 291 "../src/Core/Programmer.vala"
				if (_tmp3_) {
#line 2841 "Programmer.c"
					gboolean _tmp4_;
#line 291 "../src/Core/Programmer.vala"
					_tmp4_ = input_b[i];
#line 291 "../src/Core/Programmer.vala"
					_tmp2_ = _tmp4_;
#line 2847 "Programmer.c"
				} else {
#line 291 "../src/Core/Programmer.vala"
					_tmp2_ = FALSE;
#line 2851 "Programmer.c"
				}
#line 291 "../src/Core/Programmer.vala"
				_tmp5_ = self->output;
#line 291 "../src/Core/Programmer.vala"
				_tmp5__length1 = self->output_length1;
#line 291 "../src/Core/Programmer.vala"
				_tmp5_[i] = !_tmp2_;
#line 2859 "Programmer.c"
			}
		}
	}
#line 293 "../src/Core/Programmer.vala"
	_tmp6_ = self->output;
#line 293 "../src/Core/Programmer.vala"
	_tmp6__length1 = self->output_length1;
#line 293 "../src/Core/Programmer.vala"
	_tmp7_ = (_tmp6_ != NULL) ? _vala_array_dup28 (_tmp6_, _tmp6__length1) : ((gpointer) _tmp6_);
#line 293 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 293 "../src/Core/Programmer.vala"
	_tmp8_ = _tmp7_;
#line 293 "../src/Core/Programmer.vala"
	_tmp8__length1 = _tmp7__length1;
#line 293 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 293 "../src/Core/Programmer.vala"
		*result_length1 = _tmp8__length1;
#line 2879 "Programmer.c"
	}
#line 293 "../src/Core/Programmer.vala"
	result = _tmp8_;
#line 293 "../src/Core/Programmer.vala"
	return result;
#line 2885 "Programmer.c"
}

static gboolean*
_vala_array_dup29 (gboolean* self,
                   gint length)
{
#line 299 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 299 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 2896 "Programmer.c"
	}
#line 299 "../src/Core/Programmer.vala"
	return NULL;
#line 2900 "Programmer.c"
}

gboolean*
pebbles_programmer_or (PebblesProgrammer* self,
                       gboolean* input_a,
                       gint input_a_length1,
                       gboolean* input_b,
                       gint input_b_length1,
                       gint* word_size,
                       gint* result_length1)
{
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* _tmp8_;
	gint _tmp8__length1;
	gboolean* result = NULL;
#line 295 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2921 "Programmer.c"
	{
		gint i = 0;
#line 296 "../src/Core/Programmer.vala"
		i = 64 - ((gint) (*word_size));
#line 2926 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 296 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 296 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 2933 "Programmer.c"
				gboolean _tmp2_ = FALSE;
				gboolean _tmp3_;
				gboolean* _tmp5_;
				gint _tmp5__length1;
#line 296 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 2940 "Programmer.c"
					gint _tmp1_;
#line 296 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 296 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 2946 "Programmer.c"
				}
#line 296 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 296 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 296 "../src/Core/Programmer.vala"
					break;
#line 2954 "Programmer.c"
				}
#line 297 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 297 "../src/Core/Programmer.vala"
				if (_tmp3_) {
#line 297 "../src/Core/Programmer.vala"
					_tmp2_ = TRUE;
#line 2962 "Programmer.c"
				} else {
					gboolean _tmp4_;
#line 297 "../src/Core/Programmer.vala"
					_tmp4_ = input_b[i];
#line 297 "../src/Core/Programmer.vala"
					_tmp2_ = _tmp4_;
#line 2969 "Programmer.c"
				}
#line 297 "../src/Core/Programmer.vala"
				_tmp5_ = self->output;
#line 297 "../src/Core/Programmer.vala"
				_tmp5__length1 = self->output_length1;
#line 297 "../src/Core/Programmer.vala"
				_tmp5_[i] = _tmp2_;
#line 2977 "Programmer.c"
			}
		}
	}
#line 299 "../src/Core/Programmer.vala"
	_tmp6_ = self->output;
#line 299 "../src/Core/Programmer.vala"
	_tmp6__length1 = self->output_length1;
#line 299 "../src/Core/Programmer.vala"
	_tmp7_ = (_tmp6_ != NULL) ? _vala_array_dup29 (_tmp6_, _tmp6__length1) : ((gpointer) _tmp6_);
#line 299 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 299 "../src/Core/Programmer.vala"
	_tmp8_ = _tmp7_;
#line 299 "../src/Core/Programmer.vala"
	_tmp8__length1 = _tmp7__length1;
#line 299 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 299 "../src/Core/Programmer.vala"
		*result_length1 = _tmp8__length1;
#line 2997 "Programmer.c"
	}
#line 299 "../src/Core/Programmer.vala"
	result = _tmp8_;
#line 299 "../src/Core/Programmer.vala"
	return result;
#line 3003 "Programmer.c"
}

static gboolean*
_vala_array_dup30 (gboolean* self,
                   gint length)
{
#line 305 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 305 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 3014 "Programmer.c"
	}
#line 305 "../src/Core/Programmer.vala"
	return NULL;
#line 3018 "Programmer.c"
}

gboolean*
pebbles_programmer_nor (PebblesProgrammer* self,
                        gboolean* input_a,
                        gint input_a_length1,
                        gboolean* input_b,
                        gint input_b_length1,
                        gint* word_size,
                        gint* result_length1)
{
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* _tmp8_;
	gint _tmp8__length1;
	gboolean* result = NULL;
#line 301 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 3039 "Programmer.c"
	{
		gint i = 0;
#line 302 "../src/Core/Programmer.vala"
		i = 64 - ((gint) (*word_size));
#line 3044 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 302 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 302 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 3051 "Programmer.c"
				gboolean _tmp2_ = FALSE;
				gboolean _tmp3_;
				gboolean* _tmp5_;
				gint _tmp5__length1;
#line 302 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 3058 "Programmer.c"
					gint _tmp1_;
#line 302 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 302 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 3064 "Programmer.c"
				}
#line 302 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 302 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 302 "../src/Core/Programmer.vala"
					break;
#line 3072 "Programmer.c"
				}
#line 303 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 303 "../src/Core/Programmer.vala"
				if (_tmp3_) {
#line 303 "../src/Core/Programmer.vala"
					_tmp2_ = TRUE;
#line 3080 "Programmer.c"
				} else {
					gboolean _tmp4_;
#line 303 "../src/Core/Programmer.vala"
					_tmp4_ = input_b[i];
#line 303 "../src/Core/Programmer.vala"
					_tmp2_ = _tmp4_;
#line 3087 "Programmer.c"
				}
#line 303 "../src/Core/Programmer.vala"
				_tmp5_ = self->output;
#line 303 "../src/Core/Programmer.vala"
				_tmp5__length1 = self->output_length1;
#line 303 "../src/Core/Programmer.vala"
				_tmp5_[i] = !_tmp2_;
#line 3095 "Programmer.c"
			}
		}
	}
#line 305 "../src/Core/Programmer.vala"
	_tmp6_ = self->output;
#line 305 "../src/Core/Programmer.vala"
	_tmp6__length1 = self->output_length1;
#line 305 "../src/Core/Programmer.vala"
	_tmp7_ = (_tmp6_ != NULL) ? _vala_array_dup30 (_tmp6_, _tmp6__length1) : ((gpointer) _tmp6_);
#line 305 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 305 "../src/Core/Programmer.vala"
	_tmp8_ = _tmp7_;
#line 305 "../src/Core/Programmer.vala"
	_tmp8__length1 = _tmp7__length1;
#line 305 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 305 "../src/Core/Programmer.vala"
		*result_length1 = _tmp8__length1;
#line 3115 "Programmer.c"
	}
#line 305 "../src/Core/Programmer.vala"
	result = _tmp8_;
#line 305 "../src/Core/Programmer.vala"
	return result;
#line 3121 "Programmer.c"
}

static gboolean*
_vala_array_dup31 (gboolean* self,
                   gint length)
{
#line 311 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 311 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 3132 "Programmer.c"
	}
#line 311 "../src/Core/Programmer.vala"
	return NULL;
#line 3136 "Programmer.c"
}

gboolean*
pebbles_programmer_xor (PebblesProgrammer* self,
                        gboolean* input_a,
                        gint input_a_length1,
                        gboolean* input_b,
                        gint input_b_length1,
                        gint* word_size,
                        gint* result_length1)
{
	gboolean* _tmp5_;
	gint _tmp5__length1;
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* result = NULL;
#line 307 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 3157 "Programmer.c"
	{
		gint i = 0;
#line 308 "../src/Core/Programmer.vala"
		i = 64 - (*word_size);
#line 3162 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 308 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 308 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 3169 "Programmer.c"
				gboolean* _tmp2_;
				gint _tmp2__length1;
				gboolean _tmp3_;
				gboolean _tmp4_;
#line 308 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 3176 "Programmer.c"
					gint _tmp1_;
#line 308 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 308 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 3182 "Programmer.c"
				}
#line 308 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 308 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 308 "../src/Core/Programmer.vala"
					break;
#line 3190 "Programmer.c"
				}
#line 309 "../src/Core/Programmer.vala"
				_tmp2_ = self->output;
#line 309 "../src/Core/Programmer.vala"
				_tmp2__length1 = self->output_length1;
#line 309 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 309 "../src/Core/Programmer.vala"
				_tmp4_ = input_b[i];
#line 309 "../src/Core/Programmer.vala"
				_tmp2_[i] = pebbles_programmer_xor_each_bit (self, _tmp3_, _tmp4_);
#line 3202 "Programmer.c"
			}
		}
	}
#line 311 "../src/Core/Programmer.vala"
	_tmp5_ = self->output;
#line 311 "../src/Core/Programmer.vala"
	_tmp5__length1 = self->output_length1;
#line 311 "../src/Core/Programmer.vala"
	_tmp6_ = (_tmp5_ != NULL) ? _vala_array_dup31 (_tmp5_, _tmp5__length1) : ((gpointer) _tmp5_);
#line 311 "../src/Core/Programmer.vala"
	_tmp6__length1 = _tmp5__length1;
#line 311 "../src/Core/Programmer.vala"
	_tmp7_ = _tmp6_;
#line 311 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 311 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 311 "../src/Core/Programmer.vala"
		*result_length1 = _tmp7__length1;
#line 3222 "Programmer.c"
	}
#line 311 "../src/Core/Programmer.vala"
	result = _tmp7_;
#line 311 "../src/Core/Programmer.vala"
	return result;
#line 3228 "Programmer.c"
}

static gboolean*
_vala_array_dup32 (gboolean* self,
                   gint length)
{
#line 317 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 317 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 3239 "Programmer.c"
	}
#line 317 "../src/Core/Programmer.vala"
	return NULL;
#line 3243 "Programmer.c"
}

gboolean*
pebbles_programmer_xnor (PebblesProgrammer* self,
                         gboolean* input_a,
                         gint input_a_length1,
                         gboolean* input_b,
                         gint input_b_length1,
                         gint* word_size,
                         gint* result_length1)
{
	gboolean* _tmp5_;
	gint _tmp5__length1;
	gboolean* _tmp6_;
	gint _tmp6__length1;
	gboolean* _tmp7_;
	gint _tmp7__length1;
	gboolean* result = NULL;
#line 313 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 3264 "Programmer.c"
	{
		gint i = 0;
#line 314 "../src/Core/Programmer.vala"
		i = 64 - ((gint) (*word_size));
#line 3269 "Programmer.c"
		{
			gboolean _tmp0_ = FALSE;
#line 314 "../src/Core/Programmer.vala"
			_tmp0_ = TRUE;
#line 314 "../src/Core/Programmer.vala"
			while (TRUE) {
#line 3276 "Programmer.c"
				gboolean* _tmp2_;
				gint _tmp2__length1;
				gboolean _tmp3_;
				gboolean _tmp4_;
#line 314 "../src/Core/Programmer.vala"
				if (!_tmp0_) {
#line 3283 "Programmer.c"
					gint _tmp1_;
#line 314 "../src/Core/Programmer.vala"
					_tmp1_ = i;
#line 314 "../src/Core/Programmer.vala"
					i = _tmp1_ + 1;
#line 3289 "Programmer.c"
				}
#line 314 "../src/Core/Programmer.vala"
				_tmp0_ = FALSE;
#line 314 "../src/Core/Programmer.vala"
				if (!(i < 64)) {
#line 314 "../src/Core/Programmer.vala"
					break;
#line 3297 "Programmer.c"
				}
#line 315 "../src/Core/Programmer.vala"
				_tmp2_ = self->output;
#line 315 "../src/Core/Programmer.vala"
				_tmp2__length1 = self->output_length1;
#line 315 "../src/Core/Programmer.vala"
				_tmp3_ = input_a[i];
#line 315 "../src/Core/Programmer.vala"
				_tmp4_ = input_b[i];
#line 315 "../src/Core/Programmer.vala"
				_tmp2_[i] = !pebbles_programmer_xor_each_bit (self, _tmp3_, _tmp4_);
#line 3309 "Programmer.c"
			}
		}
	}
#line 317 "../src/Core/Programmer.vala"
	_tmp5_ = self->output;
#line 317 "../src/Core/Programmer.vala"
	_tmp5__length1 = self->output_length1;
#line 317 "../src/Core/Programmer.vala"
	_tmp6_ = (_tmp5_ != NULL) ? _vala_array_dup32 (_tmp5_, _tmp5__length1) : ((gpointer) _tmp5_);
#line 317 "../src/Core/Programmer.vala"
	_tmp6__length1 = _tmp5__length1;
#line 317 "../src/Core/Programmer.vala"
	_tmp7_ = _tmp6_;
#line 317 "../src/Core/Programmer.vala"
	_tmp7__length1 = _tmp6__length1;
#line 317 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 317 "../src/Core/Programmer.vala"
		*result_length1 = _tmp7__length1;
#line 3329 "Programmer.c"
	}
#line 317 "../src/Core/Programmer.vala"
	result = _tmp7_;
#line 317 "../src/Core/Programmer.vala"
	return result;
#line 3335 "Programmer.c"
}

static gboolean*
_vala_array_dup33 (gboolean* self,
                   gint length)
{
#line 321 "../src/Core/Programmer.vala"
	if (length > 0) {
#line 321 "../src/Core/Programmer.vala"
		return g_memdup (self, length * sizeof (gboolean));
#line 3346 "Programmer.c"
	}
#line 321 "../src/Core/Programmer.vala"
	return NULL;
#line 3350 "Programmer.c"
}

gboolean*
pebbles_programmer_not (PebblesProgrammer* self,
                        gboolean* input,
                        gint input_length1,
                        gint* word_size,
                        gint* result_length1)
{
	gint _tmp0_ = 0;
	gboolean* _tmp1_;
	gboolean* _tmp2_;
	gint _tmp2__length1;
	gboolean* _tmp3_;
	gint _tmp3__length1;
	gboolean* _tmp4_;
	gint _tmp4__length1;
	gboolean* result = NULL;
#line 319 "../src/Core/Programmer.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 320 "../src/Core/Programmer.vala"
	_tmp1_ = pebbles_programmer_ones_complement (self, input, (gint) input_length1, word_size, &_tmp0_);
#line 320 "../src/Core/Programmer.vala"
	self->output = (g_free (self->output), NULL);
#line 320 "../src/Core/Programmer.vala"
	self->output = _tmp1_;
#line 320 "../src/Core/Programmer.vala"
	self->output_length1 = _tmp0_;
#line 321 "../src/Core/Programmer.vala"
	_tmp2_ = self->output;
#line 321 "../src/Core/Programmer.vala"
	_tmp2__length1 = self->output_length1;
#line 321 "../src/Core/Programmer.vala"
	_tmp3_ = (_tmp2_ != NULL) ? _vala_array_dup33 (_tmp2_, _tmp2__length1) : ((gpointer) _tmp2_);
#line 321 "../src/Core/Programmer.vala"
	_tmp3__length1 = _tmp2__length1;
#line 321 "../src/Core/Programmer.vala"
	_tmp4_ = _tmp3_;
#line 321 "../src/Core/Programmer.vala"
	_tmp4__length1 = _tmp3__length1;
#line 321 "../src/Core/Programmer.vala"
	if (result_length1) {
#line 321 "../src/Core/Programmer.vala"
		*result_length1 = _tmp4__length1;
#line 3395 "Programmer.c"
	}
#line 321 "../src/Core/Programmer.vala"
	result = _tmp4_;
#line 321 "../src/Core/Programmer.vala"
	return result;
#line 3401 "Programmer.c"
}

static void
pebbles_value_programmer_init (GValue* value)
{
#line 31 "../src/Core/Programmer.vala"
	value->data[0].v_pointer = NULL;
#line 3409 "Programmer.c"
}

static void
pebbles_value_programmer_free_value (GValue* value)
{
#line 31 "../src/Core/Programmer.vala"
	if (value->data[0].v_pointer) {
#line 31 "../src/Core/Programmer.vala"
		pebbles_programmer_unref (value->data[0].v_pointer);
#line 3419 "Programmer.c"
	}
}

static void
pebbles_value_programmer_copy_value (const GValue* src_value,
                                     GValue* dest_value)
{
#line 31 "../src/Core/Programmer.vala"
	if (src_value->data[0].v_pointer) {
#line 31 "../src/Core/Programmer.vala"
		dest_value->data[0].v_pointer = pebbles_programmer_ref (src_value->data[0].v_pointer);
#line 3431 "Programmer.c"
	} else {
#line 31 "../src/Core/Programmer.vala"
		dest_value->data[0].v_pointer = NULL;
#line 3435 "Programmer.c"
	}
}

static gpointer
pebbles_value_programmer_peek_pointer (const GValue* value)
{
#line 31 "../src/Core/Programmer.vala"
	return value->data[0].v_pointer;
#line 3444 "Programmer.c"
}

static gchar*
pebbles_value_programmer_collect_value (GValue* value,
                                        guint n_collect_values,
                                        GTypeCValue* collect_values,
                                        guint collect_flags)
{
#line 31 "../src/Core/Programmer.vala"
	if (collect_values[0].v_pointer) {
#line 3455 "Programmer.c"
		PebblesProgrammer * object;
		object = collect_values[0].v_pointer;
#line 31 "../src/Core/Programmer.vala"
		if (object->parent_instance.g_class == NULL) {
#line 31 "../src/Core/Programmer.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3462 "Programmer.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 31 "../src/Core/Programmer.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3466 "Programmer.c"
		}
#line 31 "../src/Core/Programmer.vala"
		value->data[0].v_pointer = pebbles_programmer_ref (object);
#line 3470 "Programmer.c"
	} else {
#line 31 "../src/Core/Programmer.vala"
		value->data[0].v_pointer = NULL;
#line 3474 "Programmer.c"
	}
#line 31 "../src/Core/Programmer.vala"
	return NULL;
#line 3478 "Programmer.c"
}

static gchar*
pebbles_value_programmer_lcopy_value (const GValue* value,
                                      guint n_collect_values,
                                      GTypeCValue* collect_values,
                                      guint collect_flags)
{
	PebblesProgrammer ** object_p;
	object_p = collect_values[0].v_pointer;
#line 31 "../src/Core/Programmer.vala"
	if (!object_p) {
#line 31 "../src/Core/Programmer.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 3493 "Programmer.c"
	}
#line 31 "../src/Core/Programmer.vala"
	if (!value->data[0].v_pointer) {
#line 31 "../src/Core/Programmer.vala"
		*object_p = NULL;
#line 3499 "Programmer.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 31 "../src/Core/Programmer.vala"
		*object_p = value->data[0].v_pointer;
#line 3503 "Programmer.c"
	} else {
#line 31 "../src/Core/Programmer.vala"
		*object_p = pebbles_programmer_ref (value->data[0].v_pointer);
#line 3507 "Programmer.c"
	}
#line 31 "../src/Core/Programmer.vala"
	return NULL;
#line 3511 "Programmer.c"
}

GParamSpec*
pebbles_param_spec_programmer (const gchar* name,
                               const gchar* nick,
                               const gchar* blurb,
                               GType object_type,
                               GParamFlags flags)
{
	PebblesParamSpecProgrammer* spec;
#line 31 "../src/Core/Programmer.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_PROGRAMMER), NULL);
#line 31 "../src/Core/Programmer.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 31 "../src/Core/Programmer.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 31 "../src/Core/Programmer.vala"
	return G_PARAM_SPEC (spec);
#line 3530 "Programmer.c"
}

gpointer
pebbles_value_get_programmer (const GValue* value)
{
#line 31 "../src/Core/Programmer.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_PROGRAMMER), NULL);
#line 31 "../src/Core/Programmer.vala"
	return value->data[0].v_pointer;
#line 3540 "Programmer.c"
}

void
pebbles_value_set_programmer (GValue* value,
                              gpointer v_object)
{
	PebblesProgrammer * old;
#line 31 "../src/Core/Programmer.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_PROGRAMMER));
#line 31 "../src/Core/Programmer.vala"
	old = value->data[0].v_pointer;
#line 31 "../src/Core/Programmer.vala"
	if (v_object) {
#line 31 "../src/Core/Programmer.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_PROGRAMMER));
#line 31 "../src/Core/Programmer.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 31 "../src/Core/Programmer.vala"
		value->data[0].v_pointer = v_object;
#line 31 "../src/Core/Programmer.vala"
		pebbles_programmer_ref (value->data[0].v_pointer);
#line 3562 "Programmer.c"
	} else {
#line 31 "../src/Core/Programmer.vala"
		value->data[0].v_pointer = NULL;
#line 3566 "Programmer.c"
	}
#line 31 "../src/Core/Programmer.vala"
	if (old) {
#line 31 "../src/Core/Programmer.vala"
		pebbles_programmer_unref (old);
#line 3572 "Programmer.c"
	}
}

void
pebbles_value_take_programmer (GValue* value,
                               gpointer v_object)
{
	PebblesProgrammer * old;
#line 31 "../src/Core/Programmer.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_PROGRAMMER));
#line 31 "../src/Core/Programmer.vala"
	old = value->data[0].v_pointer;
#line 31 "../src/Core/Programmer.vala"
	if (v_object) {
#line 31 "../src/Core/Programmer.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_PROGRAMMER));
#line 31 "../src/Core/Programmer.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 31 "../src/Core/Programmer.vala"
		value->data[0].v_pointer = v_object;
#line 3593 "Programmer.c"
	} else {
#line 31 "../src/Core/Programmer.vala"
		value->data[0].v_pointer = NULL;
#line 3597 "Programmer.c"
	}
#line 31 "../src/Core/Programmer.vala"
	if (old) {
#line 31 "../src/Core/Programmer.vala"
		pebbles_programmer_unref (old);
#line 3603 "Programmer.c"
	}
}

static void
pebbles_programmer_class_init (PebblesProgrammerClass * klass,
                               gpointer klass_data)
{
#line 31 "../src/Core/Programmer.vala"
	pebbles_programmer_parent_class = g_type_class_peek_parent (klass);
#line 31 "../src/Core/Programmer.vala"
	((PebblesProgrammerClass *) klass)->finalize = pebbles_programmer_finalize;
#line 3615 "Programmer.c"
}

static void
pebbles_programmer_instance_init (PebblesProgrammer * self,
                                  gpointer klass)
{
#line 31 "../src/Core/Programmer.vala"
	self->ref_count = 1;
#line 3624 "Programmer.c"
}

static void
pebbles_programmer_finalize (PebblesProgrammer * obj)
{
	PebblesProgrammer * self;
#line 31 "../src/Core/Programmer.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_PROGRAMMER, PebblesProgrammer);
#line 31 "../src/Core/Programmer.vala"
	g_signal_handlers_destroy (self);
#line 33 "../src/Core/Programmer.vala"
	self->output = (g_free (self->output), NULL);
#line 3637 "Programmer.c"
}

static GType
pebbles_programmer_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_programmer_init, pebbles_value_programmer_free_value, pebbles_value_programmer_copy_value, pebbles_value_programmer_peek_pointer, "p", pebbles_value_programmer_collect_value, "p", pebbles_value_programmer_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesProgrammerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_programmer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesProgrammer), 0, (GInstanceInitFunc) pebbles_programmer_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_programmer_type_id;
	pebbles_programmer_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesProgrammer", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_programmer_type_id;
}

GType
pebbles_programmer_get_type (void)
{
	static volatile gsize pebbles_programmer_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_programmer_type_id__volatile)) {
		GType pebbles_programmer_type_id;
		pebbles_programmer_type_id = pebbles_programmer_get_type_once ();
		g_once_init_leave (&pebbles_programmer_type_id__volatile, pebbles_programmer_type_id);
	}
	return pebbles_programmer_type_id__volatile;
}

gpointer
pebbles_programmer_ref (gpointer instance)
{
	PebblesProgrammer * self;
	self = instance;
#line 31 "../src/Core/Programmer.vala"
	g_atomic_int_inc (&self->ref_count);
#line 31 "../src/Core/Programmer.vala"
	return instance;
#line 3672 "Programmer.c"
}

void
pebbles_programmer_unref (gpointer instance)
{
	PebblesProgrammer * self;
	self = instance;
#line 31 "../src/Core/Programmer.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 31 "../src/Core/Programmer.vala"
		PEBBLES_PROGRAMMER_GET_CLASS (self)->finalize (self);
#line 31 "../src/Core/Programmer.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 3686 "Programmer.c"
	}
}


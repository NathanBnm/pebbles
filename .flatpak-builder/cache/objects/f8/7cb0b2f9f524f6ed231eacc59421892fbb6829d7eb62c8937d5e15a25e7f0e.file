/* ScientificCalculator.c generated by valac 0.48.14, the Vala compiler
 * generated from ScientificCalculator.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas  <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 *              Saunak Biswas  <saunakbis97@gmail.com>
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_SCIENTIFIC_CALCULATOR (pebbles_scientific_calculator_get_type ())
#define PEBBLES_SCIENTIFIC_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculator))
#define PEBBLES_SCIENTIFIC_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculatorClass))
#define PEBBLES_IS_SCIENTIFIC_CALCULATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR))
#define PEBBLES_IS_SCIENTIFIC_CALCULATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR))
#define PEBBLES_SCIENTIFIC_CALCULATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculatorClass))

typedef struct _PebblesScientificCalculator PebblesScientificCalculator;
typedef struct _PebblesScientificCalculatorClass PebblesScientificCalculatorClass;
typedef struct _PebblesScientificCalculatorPrivate PebblesScientificCalculatorPrivate;
typedef enum  {
	PEBBLES_GLOBAL_ANGLE_UNIT_DEG = 0,
	PEBBLES_GLOBAL_ANGLE_UNIT_RAD = 1,
	PEBBLES_GLOBAL_ANGLE_UNIT_GRAD = 2
} PebblesGlobalAngleUnit;

#define PEBBLES_TYPE_GLOBAL_ANGLE_UNIT (pebbles_global_angle_unit_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))

#define PEBBLES_TYPE_DOUBLE_STACK (pebbles_double_stack_get_type ())
#define PEBBLES_DOUBLE_STACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_DOUBLE_STACK, PebblesDoubleStack))
#define PEBBLES_DOUBLE_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_DOUBLE_STACK, PebblesDoubleStackClass))
#define PEBBLES_IS_DOUBLE_STACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_DOUBLE_STACK))
#define PEBBLES_IS_DOUBLE_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_DOUBLE_STACK))
#define PEBBLES_DOUBLE_STACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_DOUBLE_STACK, PebblesDoubleStackClass))

typedef struct _PebblesDoubleStack PebblesDoubleStack;
typedef struct _PebblesDoubleStackClass PebblesDoubleStackClass;

#define TYPE_CHAR_STACK (char_stack_get_type ())
#define CHAR_STACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CHAR_STACK, CharStack))
#define CHAR_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CHAR_STACK, CharStackClass))
#define IS_CHAR_STACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CHAR_STACK))
#define IS_CHAR_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CHAR_STACK))
#define CHAR_STACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CHAR_STACK, CharStackClass))

typedef struct _CharStack CharStack;
typedef struct _CharStackClass CharStackClass;
#define _char_stack_unref0(var) ((var == NULL) ? NULL : (var = (char_stack_unref (var), NULL)))
#define _pebbles_double_stack_unref0(var) ((var == NULL) ? NULL : (var = (pebbles_double_stack_unref (var), NULL)))
typedef struct _PebblesParamSpecScientificCalculator PebblesParamSpecScientificCalculator;
typedef struct _PebblesDoubleStackPrivate PebblesDoubleStackPrivate;
typedef struct _PebblesParamSpecDoubleStack PebblesParamSpecDoubleStack;

struct _PebblesScientificCalculator {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesScientificCalculatorPrivate * priv;
	gchar** tokens;
	gint tokens_length1;
	PebblesGlobalAngleUnit angle_mode_sci;
};

struct _PebblesScientificCalculatorClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesScientificCalculator *self);
};

struct _PebblesParamSpecScientificCalculator {
	GParamSpec parent_instance;
};

struct _PebblesDoubleStack {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesDoubleStackPrivate * priv;
	gdouble* stack;
	gint stack_length1;
};

struct _PebblesDoubleStackClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesDoubleStack *self);
};

struct _PebblesDoubleStackPrivate {
	gint tp;
	gint n;
	gdouble temp;
};

struct _PebblesParamSpecDoubleStack {
	GParamSpec parent_instance;
};

static gpointer pebbles_scientific_calculator_parent_class = NULL;
static gint PebblesDoubleStack_private_offset;
static gpointer pebbles_double_stack_parent_class = NULL;

gpointer pebbles_scientific_calculator_ref (gpointer instance);
void pebbles_scientific_calculator_unref (gpointer instance);
GParamSpec* pebbles_param_spec_scientific_calculator (const gchar* name,
                                                      const gchar* nick,
                                                      const gchar* blurb,
                                                      GType object_type,
                                                      GParamFlags flags);
void pebbles_value_set_scientific_calculator (GValue* value,
                                              gpointer v_object);
void pebbles_value_take_scientific_calculator (GValue* value,
                                               gpointer v_object);
gpointer pebbles_value_get_scientific_calculator (const GValue* value);
GType pebbles_scientific_calculator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesScientificCalculator, pebbles_scientific_calculator_unref)
GType pebbles_global_angle_unit_get_type (void) G_GNUC_CONST;
#define PEBBLES_SCIENTIFIC_CALCULATOR_GRAD_VAL (G_PI / 200)
#define PEBBLES_SCIENTIFIC_CALCULATOR_DEG_VAL (G_PI / 180)
#define PEBBLES_SCIENTIFIC_CALCULATOR_INV_GRAD_VAL (200 / G_PI)
#define PEBBLES_SCIENTIFIC_CALCULATOR_INV_DEG_VAL (180 / G_PI)
gchar* pebbles_scientific_calculator_get_result (PebblesScientificCalculator* self,
                                                 const gchar* exp,
                                                 PebblesGlobalAngleUnit angle_mode_in,
                                                 gint* float_accuracy,
                                                 gboolean* tokenize);
gchar* pebbles_utils_st_tokenize (const gchar* input);
gchar* pebbles_utils_get_local_radix_symbol (void);
gchar* pebbles_scientific_calculator_evaluate_exp (PebblesScientificCalculator* self,
                                                   const gchar* exp,
                                                   gint float_accuracy);
static gboolean pebbles_scientific_calculator_has_precedence_pemdas (gchar op1,
                                                              gchar op2);
gboolean pebbles_scientific_calculator_angle_op (gunichar op);
gdouble pebbles_scientific_calculator_fact (gdouble n);
gchar* pebbles_scientific_calculator_apply_op (PebblesScientificCalculator* self,
                                               gchar op,
                                               gdouble a,
                                               gdouble b);
static gboolean pebbles_scientific_calculator_is_operator (PebblesScientificCalculator* self,
                                                    const gchar* str);
gpointer pebbles_double_stack_ref (gpointer instance);
void pebbles_double_stack_unref (gpointer instance);
GParamSpec* pebbles_param_spec_double_stack (const gchar* name,
                                             const gchar* nick,
                                             const gchar* blurb,
                                             GType object_type,
                                             GParamFlags flags);
void pebbles_value_set_double_stack (GValue* value,
                                     gpointer v_object);
void pebbles_value_take_double_stack (GValue* value,
                                      gpointer v_object);
gpointer pebbles_value_get_double_stack (const GValue* value);
GType pebbles_double_stack_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesDoubleStack, pebbles_double_stack_unref)
PebblesDoubleStack* pebbles_double_stack_new (gint num);
PebblesDoubleStack* pebbles_double_stack_construct (GType object_type,
                                                    gint num);
gpointer char_stack_ref (gpointer instance);
void char_stack_unref (gpointer instance);
GParamSpec* param_spec_char_stack (const gchar* name,
                                   const gchar* nick,
                                   const gchar* blurb,
                                   GType object_type,
                                   GParamFlags flags);
void value_set_char_stack (GValue* value,
                           gpointer v_object);
void value_take_char_stack (GValue* value,
                            gpointer v_object);
gpointer value_get_char_stack (const GValue* value);
GType char_stack_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (CharStack, char_stack_unref)
CharStack* char_stack_new (gint num);
CharStack* char_stack_construct (GType object_type,
                                 gint num);
gboolean pebbles_double_stack_push (PebblesDoubleStack* self,
                                    gdouble elem);
gboolean char_stack_push (CharStack* self,
                          gchar elem);
gchar char_stack_peek (CharStack* self);
gchar char_stack_pop (CharStack* self);
gdouble pebbles_double_stack_pop (PebblesDoubleStack* self);
static gboolean pebbles_scientific_calculator_r_l_associative (const gchar* operator);
gboolean char_stack_empty (CharStack* self);
gchar* pebbles_utils_manage_decimal_places (gdouble _result_,
                                            gint accuracy);
PebblesScientificCalculator* pebbles_scientific_calculator_new (void);
PebblesScientificCalculator* pebbles_scientific_calculator_construct (GType object_type);
static void pebbles_scientific_calculator_finalize (PebblesScientificCalculator * obj);
static GType pebbles_scientific_calculator_get_type_once (void);
static void pebbles_double_stack_finalize (PebblesDoubleStack * obj);
static GType pebbles_double_stack_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1535 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 241 "ScientificCalculator.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 245 "ScientificCalculator.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 251 "ScientificCalculator.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 255 "ScientificCalculator.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp0_) {
#line 259 "ScientificCalculator.c"
		gchar* _tmp2_;
#line 1536 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1536 "glib-2.0.vapi"
		result = _tmp2_;
#line 1536 "glib-2.0.vapi"
		return result;
#line 267 "ScientificCalculator.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1539 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1539 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1539 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1539 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1539 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1539 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1539 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1539 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 295 "ScientificCalculator.c"
				goto __catch0_g_regex_error;
			}
#line 1539 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1539 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1539 "glib-2.0.vapi"
			return NULL;
#line 304 "ScientificCalculator.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1540 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1540 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1540 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1540 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 318 "ScientificCalculator.c"
				goto __catch0_g_regex_error;
			}
#line 1540 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1540 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1540 "glib-2.0.vapi"
			return NULL;
#line 327 "ScientificCalculator.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1540 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1540 "glib-2.0.vapi"
		result = _tmp10_;
#line 1540 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
		return result;
#line 341 "ScientificCalculator.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1538 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1542 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 350 "ScientificCalculator.c"
	}
	__finally0:
#line 1538 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1538 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1538 "glib-2.0.vapi"
	return NULL;
#line 359 "ScientificCalculator.c"
}

gchar*
pebbles_scientific_calculator_get_result (PebblesScientificCalculator* self,
                                          const gchar* exp,
                                          PebblesGlobalAngleUnit angle_mode_in,
                                          gint* float_accuracy,
                                          gboolean* tokenize)
{
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp7_;
	const gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* result = NULL;
#line 32 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 32 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (exp != NULL, NULL);
#line 33 "../src/Core/ScientificCalculator.vala"
	_tmp0_ = g_strdup (exp);
#line 33 "../src/Core/ScientificCalculator.vala"
	_result_ = _tmp0_;
#line 34 "../src/Core/ScientificCalculator.vala"
	_tmp1_ = _result_;
#line 34 "../src/Core/ScientificCalculator.vala"
	g_warning ("ScientificCalculator.vala:34: %s", _tmp1_);
#line 35 "../src/Core/ScientificCalculator.vala"
	if (*tokenize) {
#line 390 "ScientificCalculator.c"
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
#line 36 "../src/Core/ScientificCalculator.vala"
		_tmp2_ = pebbles_utils_get_local_radix_symbol ();
#line 36 "../src/Core/ScientificCalculator.vala"
		_tmp3_ = _tmp2_;
#line 36 "../src/Core/ScientificCalculator.vala"
		_tmp4_ = string_replace (exp, _tmp3_, ".");
#line 36 "../src/Core/ScientificCalculator.vala"
		_tmp5_ = _tmp4_;
#line 36 "../src/Core/ScientificCalculator.vala"
		_tmp6_ = pebbles_utils_st_tokenize (_tmp5_);
#line 36 "../src/Core/ScientificCalculator.vala"
		_g_free0 (_result_);
#line 36 "../src/Core/ScientificCalculator.vala"
		_result_ = _tmp6_;
#line 36 "../src/Core/ScientificCalculator.vala"
		_g_free0 (_tmp5_);
#line 36 "../src/Core/ScientificCalculator.vala"
		_g_free0 (_tmp3_);
#line 414 "ScientificCalculator.c"
	}
#line 38 "../src/Core/ScientificCalculator.vala"
	self->angle_mode_sci = angle_mode_in;
#line 39 "../src/Core/ScientificCalculator.vala"
	_tmp7_ = _result_;
#line 39 "../src/Core/ScientificCalculator.vala"
	if (g_strcmp0 (_tmp7_, "E") == 0) {
#line 422 "ScientificCalculator.c"
		gchar* _tmp8_;
#line 40 "../src/Core/ScientificCalculator.vala"
		_tmp8_ = g_strdup ("E");
#line 40 "../src/Core/ScientificCalculator.vala"
		result = _tmp8_;
#line 40 "../src/Core/ScientificCalculator.vala"
		_g_free0 (_result_);
#line 40 "../src/Core/ScientificCalculator.vala"
		return result;
#line 432 "ScientificCalculator.c"
	}
#line 42 "../src/Core/ScientificCalculator.vala"
	_tmp9_ = _result_;
#line 42 "../src/Core/ScientificCalculator.vala"
	_tmp10_ = pebbles_scientific_calculator_evaluate_exp (self, _tmp9_, *float_accuracy);
#line 42 "../src/Core/ScientificCalculator.vala"
	result = _tmp10_;
#line 42 "../src/Core/ScientificCalculator.vala"
	_g_free0 (_result_);
#line 42 "../src/Core/ScientificCalculator.vala"
	return result;
#line 444 "ScientificCalculator.c"
}

static gboolean
pebbles_scientific_calculator_has_precedence_pemdas (gchar op1,
                                                     gchar op2)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean result = FALSE;
#line 46 "../src/Core/ScientificCalculator.vala"
	if (op2 == '(') {
#line 46 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = TRUE;
#line 458 "ScientificCalculator.c"
	} else {
#line 46 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = op2 == ')';
#line 462 "ScientificCalculator.c"
	}
#line 46 "../src/Core/ScientificCalculator.vala"
	if (_tmp0_) {
#line 47 "../src/Core/ScientificCalculator.vala"
		result = FALSE;
#line 47 "../src/Core/ScientificCalculator.vala"
		return result;
#line 470 "ScientificCalculator.c"
	}
#line 50 "../src/Core/ScientificCalculator.vala"
	if (pebbles_scientific_calculator_angle_op ((gunichar) op1)) {
#line 474 "ScientificCalculator.c"
		gboolean _tmp2_ = FALSE;
		gboolean _tmp3_ = FALSE;
		gboolean _tmp4_ = FALSE;
		gboolean _tmp5_ = FALSE;
		gboolean _tmp6_ = FALSE;
		gboolean _tmp7_ = FALSE;
		gboolean _tmp8_ = FALSE;
		gboolean _tmp9_ = FALSE;
		gboolean _tmp10_ = FALSE;
		gboolean _tmp11_ = FALSE;
		gboolean _tmp12_ = FALSE;
#line 50 "../src/Core/ScientificCalculator.vala"
		if (op2 == '!') {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp12_ = TRUE;
#line 490 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp12_ = op2 == 'p';
#line 494 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp12_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp11_ = TRUE;
#line 500 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp11_ = op2 == 'b';
#line 504 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp11_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp10_ = TRUE;
#line 510 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp10_ = op2 == 'l';
#line 514 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp10_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp9_ = TRUE;
#line 520 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp9_ = op2 == 'u';
#line 524 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp9_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp8_ = TRUE;
#line 530 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp8_ = op2 == 'q';
#line 534 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp8_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp7_ = TRUE;
#line 540 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp7_ = op2 == '^';
#line 544 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp7_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp6_ = TRUE;
#line 550 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp6_ = op2 == '*';
#line 554 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp6_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp5_ = TRUE;
#line 560 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp5_ = op2 == '/';
#line 564 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp5_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp4_ = TRUE;
#line 570 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp4_ = op2 == '-';
#line 574 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp4_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp3_ = TRUE;
#line 580 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp3_ = op2 == '+';
#line 584 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		if (_tmp3_) {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp2_ = TRUE;
#line 590 "ScientificCalculator.c"
		} else {
#line 50 "../src/Core/ScientificCalculator.vala"
			_tmp2_ = op2 == 'm';
#line 594 "ScientificCalculator.c"
		}
#line 50 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = _tmp2_;
#line 598 "ScientificCalculator.c"
	} else {
#line 50 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = FALSE;
#line 602 "ScientificCalculator.c"
	}
#line 50 "../src/Core/ScientificCalculator.vala"
	if (_tmp1_) {
#line 51 "../src/Core/ScientificCalculator.vala"
		result = FALSE;
#line 51 "../src/Core/ScientificCalculator.vala"
		return result;
#line 610 "ScientificCalculator.c"
	} else {
		gboolean _tmp13_ = FALSE;
#line 53 "../src/Core/ScientificCalculator.vala"
		if (op1 == '!') {
#line 615 "ScientificCalculator.c"
			gboolean _tmp14_ = FALSE;
			gboolean _tmp15_ = FALSE;
			gboolean _tmp16_ = FALSE;
			gboolean _tmp17_ = FALSE;
			gboolean _tmp18_ = FALSE;
			gboolean _tmp19_ = FALSE;
			gboolean _tmp20_ = FALSE;
			gboolean _tmp21_ = FALSE;
			gboolean _tmp22_ = FALSE;
			gboolean _tmp23_ = FALSE;
#line 53 "../src/Core/ScientificCalculator.vala"
			if (op2 == 'p') {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp23_ = TRUE;
#line 630 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp23_ = op2 == 'b';
#line 634 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp23_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp22_ = TRUE;
#line 640 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp22_ = op2 == 'l';
#line 644 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp22_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp21_ = TRUE;
#line 650 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp21_ = op2 == 'u';
#line 654 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp21_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp20_ = TRUE;
#line 660 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp20_ = op2 == 'q';
#line 664 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp20_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp19_ = TRUE;
#line 670 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp19_ = op2 == '^';
#line 674 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp19_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp18_ = TRUE;
#line 680 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp18_ = op2 == '*';
#line 684 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp18_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp17_ = TRUE;
#line 690 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp17_ = op2 == '/';
#line 694 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp17_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp16_ = TRUE;
#line 700 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp16_ = op2 == '-';
#line 704 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp16_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp15_ = TRUE;
#line 710 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp15_ = op2 == '+';
#line 714 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			if (_tmp15_) {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp14_ = TRUE;
#line 720 "ScientificCalculator.c"
			} else {
#line 53 "../src/Core/ScientificCalculator.vala"
				_tmp14_ = op2 == 'm';
#line 724 "ScientificCalculator.c"
			}
#line 53 "../src/Core/ScientificCalculator.vala"
			_tmp13_ = _tmp14_;
#line 728 "ScientificCalculator.c"
		} else {
#line 53 "../src/Core/ScientificCalculator.vala"
			_tmp13_ = FALSE;
#line 732 "ScientificCalculator.c"
		}
#line 53 "../src/Core/ScientificCalculator.vala"
		if (_tmp13_) {
#line 54 "../src/Core/ScientificCalculator.vala"
			result = FALSE;
#line 54 "../src/Core/ScientificCalculator.vala"
			return result;
#line 740 "ScientificCalculator.c"
		} else {
			gboolean _tmp24_ = FALSE;
			gboolean _tmp25_ = FALSE;
#line 56 "../src/Core/ScientificCalculator.vala"
			if (op1 == 'p') {
#line 56 "../src/Core/ScientificCalculator.vala"
				_tmp25_ = TRUE;
#line 748 "ScientificCalculator.c"
			} else {
#line 56 "../src/Core/ScientificCalculator.vala"
				_tmp25_ = op1 == 'b';
#line 752 "ScientificCalculator.c"
			}
#line 56 "../src/Core/ScientificCalculator.vala"
			if (_tmp25_) {
#line 756 "ScientificCalculator.c"
				gboolean _tmp26_ = FALSE;
				gboolean _tmp27_ = FALSE;
				gboolean _tmp28_ = FALSE;
				gboolean _tmp29_ = FALSE;
				gboolean _tmp30_ = FALSE;
				gboolean _tmp31_ = FALSE;
				gboolean _tmp32_ = FALSE;
				gboolean _tmp33_ = FALSE;
#line 56 "../src/Core/ScientificCalculator.vala"
				if (op2 == 'l') {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp33_ = TRUE;
#line 769 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp33_ = op2 == 'u';
#line 773 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				if (_tmp33_) {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp32_ = TRUE;
#line 779 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp32_ = op2 == 'q';
#line 783 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				if (_tmp32_) {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp31_ = TRUE;
#line 789 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp31_ = op2 == '^';
#line 793 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				if (_tmp31_) {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp30_ = TRUE;
#line 799 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp30_ = op2 == '*';
#line 803 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				if (_tmp30_) {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp29_ = TRUE;
#line 809 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp29_ = op2 == '/';
#line 813 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				if (_tmp29_) {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp28_ = TRUE;
#line 819 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp28_ = op2 == '-';
#line 823 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				if (_tmp28_) {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp27_ = TRUE;
#line 829 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp27_ = op2 == '+';
#line 833 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				if (_tmp27_) {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp26_ = TRUE;
#line 839 "ScientificCalculator.c"
				} else {
#line 56 "../src/Core/ScientificCalculator.vala"
					_tmp26_ = op2 == 'm';
#line 843 "ScientificCalculator.c"
				}
#line 56 "../src/Core/ScientificCalculator.vala"
				_tmp24_ = _tmp26_;
#line 847 "ScientificCalculator.c"
			} else {
#line 56 "../src/Core/ScientificCalculator.vala"
				_tmp24_ = FALSE;
#line 851 "ScientificCalculator.c"
			}
#line 56 "../src/Core/ScientificCalculator.vala"
			if (_tmp24_) {
#line 57 "../src/Core/ScientificCalculator.vala"
				result = FALSE;
#line 57 "../src/Core/ScientificCalculator.vala"
				return result;
#line 859 "ScientificCalculator.c"
			} else {
				gboolean _tmp34_ = FALSE;
#line 59 "../src/Core/ScientificCalculator.vala"
				if (op1 == 'l') {
#line 864 "ScientificCalculator.c"
					gboolean _tmp35_ = FALSE;
					gboolean _tmp36_ = FALSE;
					gboolean _tmp37_ = FALSE;
					gboolean _tmp38_ = FALSE;
					gboolean _tmp39_ = FALSE;
					gboolean _tmp40_ = FALSE;
					gboolean _tmp41_ = FALSE;
#line 59 "../src/Core/ScientificCalculator.vala"
					if (op2 == 'u') {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp41_ = TRUE;
#line 876 "ScientificCalculator.c"
					} else {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp41_ = op2 == 'q';
#line 880 "ScientificCalculator.c"
					}
#line 59 "../src/Core/ScientificCalculator.vala"
					if (_tmp41_) {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp40_ = TRUE;
#line 886 "ScientificCalculator.c"
					} else {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp40_ = op2 == '^';
#line 890 "ScientificCalculator.c"
					}
#line 59 "../src/Core/ScientificCalculator.vala"
					if (_tmp40_) {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp39_ = TRUE;
#line 896 "ScientificCalculator.c"
					} else {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp39_ = op2 == '*';
#line 900 "ScientificCalculator.c"
					}
#line 59 "../src/Core/ScientificCalculator.vala"
					if (_tmp39_) {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp38_ = TRUE;
#line 906 "ScientificCalculator.c"
					} else {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp38_ = op2 == '/';
#line 910 "ScientificCalculator.c"
					}
#line 59 "../src/Core/ScientificCalculator.vala"
					if (_tmp38_) {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp37_ = TRUE;
#line 916 "ScientificCalculator.c"
					} else {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp37_ = op2 == '-';
#line 920 "ScientificCalculator.c"
					}
#line 59 "../src/Core/ScientificCalculator.vala"
					if (_tmp37_) {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp36_ = TRUE;
#line 926 "ScientificCalculator.c"
					} else {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp36_ = op2 == '+';
#line 930 "ScientificCalculator.c"
					}
#line 59 "../src/Core/ScientificCalculator.vala"
					if (_tmp36_) {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp35_ = TRUE;
#line 936 "ScientificCalculator.c"
					} else {
#line 59 "../src/Core/ScientificCalculator.vala"
						_tmp35_ = op2 == 'm';
#line 940 "ScientificCalculator.c"
					}
#line 59 "../src/Core/ScientificCalculator.vala"
					_tmp34_ = _tmp35_;
#line 944 "ScientificCalculator.c"
				} else {
#line 59 "../src/Core/ScientificCalculator.vala"
					_tmp34_ = FALSE;
#line 948 "ScientificCalculator.c"
				}
#line 59 "../src/Core/ScientificCalculator.vala"
				if (_tmp34_) {
#line 60 "../src/Core/ScientificCalculator.vala"
					result = FALSE;
#line 60 "../src/Core/ScientificCalculator.vala"
					return result;
#line 956 "ScientificCalculator.c"
				} else {
					gboolean _tmp42_ = FALSE;
#line 62 "../src/Core/ScientificCalculator.vala"
					if (op1 == 'u') {
#line 961 "ScientificCalculator.c"
						gboolean _tmp43_ = FALSE;
						gboolean _tmp44_ = FALSE;
						gboolean _tmp45_ = FALSE;
						gboolean _tmp46_ = FALSE;
						gboolean _tmp47_ = FALSE;
						gboolean _tmp48_ = FALSE;
#line 62 "../src/Core/ScientificCalculator.vala"
						if (op2 == '^') {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp48_ = TRUE;
#line 972 "ScientificCalculator.c"
						} else {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp48_ = op2 == 'q';
#line 976 "ScientificCalculator.c"
						}
#line 62 "../src/Core/ScientificCalculator.vala"
						if (_tmp48_) {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp47_ = TRUE;
#line 982 "ScientificCalculator.c"
						} else {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp47_ = op2 == '*';
#line 986 "ScientificCalculator.c"
						}
#line 62 "../src/Core/ScientificCalculator.vala"
						if (_tmp47_) {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp46_ = TRUE;
#line 992 "ScientificCalculator.c"
						} else {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp46_ = op2 == '/';
#line 996 "ScientificCalculator.c"
						}
#line 62 "../src/Core/ScientificCalculator.vala"
						if (_tmp46_) {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp45_ = TRUE;
#line 1002 "ScientificCalculator.c"
						} else {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp45_ = op2 == '-';
#line 1006 "ScientificCalculator.c"
						}
#line 62 "../src/Core/ScientificCalculator.vala"
						if (_tmp45_) {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp44_ = TRUE;
#line 1012 "ScientificCalculator.c"
						} else {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp44_ = op2 == '+';
#line 1016 "ScientificCalculator.c"
						}
#line 62 "../src/Core/ScientificCalculator.vala"
						if (_tmp44_) {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp43_ = TRUE;
#line 1022 "ScientificCalculator.c"
						} else {
#line 62 "../src/Core/ScientificCalculator.vala"
							_tmp43_ = op2 == 'm';
#line 1026 "ScientificCalculator.c"
						}
#line 62 "../src/Core/ScientificCalculator.vala"
						_tmp42_ = _tmp43_;
#line 1030 "ScientificCalculator.c"
					} else {
#line 62 "../src/Core/ScientificCalculator.vala"
						_tmp42_ = FALSE;
#line 1034 "ScientificCalculator.c"
					}
#line 62 "../src/Core/ScientificCalculator.vala"
					if (_tmp42_) {
#line 63 "../src/Core/ScientificCalculator.vala"
						result = FALSE;
#line 63 "../src/Core/ScientificCalculator.vala"
						return result;
#line 1042 "ScientificCalculator.c"
					} else {
						gboolean _tmp49_ = FALSE;
						gboolean _tmp50_ = FALSE;
#line 65 "../src/Core/ScientificCalculator.vala"
						if (op1 == '^') {
#line 65 "../src/Core/ScientificCalculator.vala"
							_tmp50_ = TRUE;
#line 1050 "ScientificCalculator.c"
						} else {
#line 65 "../src/Core/ScientificCalculator.vala"
							_tmp50_ = op1 == 'q';
#line 1054 "ScientificCalculator.c"
						}
#line 65 "../src/Core/ScientificCalculator.vala"
						if (_tmp50_) {
#line 1058 "ScientificCalculator.c"
							gboolean _tmp51_ = FALSE;
							gboolean _tmp52_ = FALSE;
							gboolean _tmp53_ = FALSE;
							gboolean _tmp54_ = FALSE;
#line 65 "../src/Core/ScientificCalculator.vala"
							if (op2 == '*') {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp54_ = TRUE;
#line 1067 "ScientificCalculator.c"
							} else {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp54_ = op2 == '/';
#line 1071 "ScientificCalculator.c"
							}
#line 65 "../src/Core/ScientificCalculator.vala"
							if (_tmp54_) {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp53_ = TRUE;
#line 1077 "ScientificCalculator.c"
							} else {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp53_ = op2 == '-';
#line 1081 "ScientificCalculator.c"
							}
#line 65 "../src/Core/ScientificCalculator.vala"
							if (_tmp53_) {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp52_ = TRUE;
#line 1087 "ScientificCalculator.c"
							} else {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp52_ = op2 == '+';
#line 1091 "ScientificCalculator.c"
							}
#line 65 "../src/Core/ScientificCalculator.vala"
							if (_tmp52_) {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp51_ = TRUE;
#line 1097 "ScientificCalculator.c"
							} else {
#line 65 "../src/Core/ScientificCalculator.vala"
								_tmp51_ = op2 == 'm';
#line 1101 "ScientificCalculator.c"
							}
#line 65 "../src/Core/ScientificCalculator.vala"
							_tmp49_ = _tmp51_;
#line 1105 "ScientificCalculator.c"
						} else {
#line 65 "../src/Core/ScientificCalculator.vala"
							_tmp49_ = FALSE;
#line 1109 "ScientificCalculator.c"
						}
#line 65 "../src/Core/ScientificCalculator.vala"
						if (_tmp49_) {
#line 66 "../src/Core/ScientificCalculator.vala"
							result = FALSE;
#line 66 "../src/Core/ScientificCalculator.vala"
							return result;
#line 1117 "ScientificCalculator.c"
						} else {
							gboolean _tmp55_ = FALSE;
#line 68 "../src/Core/ScientificCalculator.vala"
							if (op1 == 'm') {
#line 1122 "ScientificCalculator.c"
								gboolean _tmp56_ = FALSE;
								gboolean _tmp57_ = FALSE;
								gboolean _tmp58_ = FALSE;
#line 68 "../src/Core/ScientificCalculator.vala"
								if (op2 == '/') {
#line 68 "../src/Core/ScientificCalculator.vala"
									_tmp58_ = TRUE;
#line 1130 "ScientificCalculator.c"
								} else {
#line 68 "../src/Core/ScientificCalculator.vala"
									_tmp58_ = op2 == '*';
#line 1134 "ScientificCalculator.c"
								}
#line 68 "../src/Core/ScientificCalculator.vala"
								if (_tmp58_) {
#line 68 "../src/Core/ScientificCalculator.vala"
									_tmp57_ = TRUE;
#line 1140 "ScientificCalculator.c"
								} else {
#line 68 "../src/Core/ScientificCalculator.vala"
									_tmp57_ = op2 == '+';
#line 1144 "ScientificCalculator.c"
								}
#line 68 "../src/Core/ScientificCalculator.vala"
								if (_tmp57_) {
#line 68 "../src/Core/ScientificCalculator.vala"
									_tmp56_ = TRUE;
#line 1150 "ScientificCalculator.c"
								} else {
#line 68 "../src/Core/ScientificCalculator.vala"
									_tmp56_ = op2 == '-';
#line 1154 "ScientificCalculator.c"
								}
#line 68 "../src/Core/ScientificCalculator.vala"
								_tmp55_ = _tmp56_;
#line 1158 "ScientificCalculator.c"
							} else {
#line 68 "../src/Core/ScientificCalculator.vala"
								_tmp55_ = FALSE;
#line 1162 "ScientificCalculator.c"
							}
#line 68 "../src/Core/ScientificCalculator.vala"
							if (_tmp55_) {
#line 69 "../src/Core/ScientificCalculator.vala"
								result = FALSE;
#line 69 "../src/Core/ScientificCalculator.vala"
								return result;
#line 1170 "ScientificCalculator.c"
							} else {
								gboolean _tmp59_ = FALSE;
								gboolean _tmp60_ = FALSE;
#line 71 "../src/Core/ScientificCalculator.vala"
								if (op1 == '/') {
#line 71 "../src/Core/ScientificCalculator.vala"
									_tmp60_ = TRUE;
#line 1178 "ScientificCalculator.c"
								} else {
#line 71 "../src/Core/ScientificCalculator.vala"
									_tmp60_ = op1 == '*';
#line 1182 "ScientificCalculator.c"
								}
#line 71 "../src/Core/ScientificCalculator.vala"
								if (_tmp60_) {
#line 1186 "ScientificCalculator.c"
									gboolean _tmp61_ = FALSE;
#line 71 "../src/Core/ScientificCalculator.vala"
									if (op2 == '+') {
#line 71 "../src/Core/ScientificCalculator.vala"
										_tmp61_ = TRUE;
#line 1192 "ScientificCalculator.c"
									} else {
#line 71 "../src/Core/ScientificCalculator.vala"
										_tmp61_ = op2 == '-';
#line 1196 "ScientificCalculator.c"
									}
#line 71 "../src/Core/ScientificCalculator.vala"
									_tmp59_ = _tmp61_;
#line 1200 "ScientificCalculator.c"
								} else {
#line 71 "../src/Core/ScientificCalculator.vala"
									_tmp59_ = FALSE;
#line 1204 "ScientificCalculator.c"
								}
#line 71 "../src/Core/ScientificCalculator.vala"
								if (_tmp59_) {
#line 72 "../src/Core/ScientificCalculator.vala"
									result = FALSE;
#line 72 "../src/Core/ScientificCalculator.vala"
									return result;
#line 1212 "ScientificCalculator.c"
								} else {
#line 75 "../src/Core/ScientificCalculator.vala"
									result = TRUE;
#line 75 "../src/Core/ScientificCalculator.vala"
									return result;
#line 1218 "ScientificCalculator.c"
								}
							}
						}
					}
				}
			}
		}
	}
}

gdouble
pebbles_scientific_calculator_fact (gdouble n)
{
	glong j = 0L;
	glong fact = 0L;
	gdouble result = 0.0;
#line 79 "../src/Core/ScientificCalculator.vala"
	j = (glong) 1;
#line 79 "../src/Core/ScientificCalculator.vala"
	fact = (glong) 1;
#line 1239 "ScientificCalculator.c"
	{
		gboolean _tmp0_ = FALSE;
#line 80 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = TRUE;
#line 80 "../src/Core/ScientificCalculator.vala"
		while (TRUE) {
#line 80 "../src/Core/ScientificCalculator.vala"
			if (!_tmp0_) {
#line 1248 "ScientificCalculator.c"
				glong _tmp1_;
#line 80 "../src/Core/ScientificCalculator.vala"
				_tmp1_ = j;
#line 80 "../src/Core/ScientificCalculator.vala"
				j = _tmp1_ + 1;
#line 1254 "ScientificCalculator.c"
			}
#line 80 "../src/Core/ScientificCalculator.vala"
			_tmp0_ = FALSE;
#line 80 "../src/Core/ScientificCalculator.vala"
			if (!(((gdouble) j) <= n)) {
#line 80 "../src/Core/ScientificCalculator.vala"
				break;
#line 1262 "ScientificCalculator.c"
			}
#line 81 "../src/Core/ScientificCalculator.vala"
			fact = fact * j;
#line 1266 "ScientificCalculator.c"
		}
	}
#line 83 "../src/Core/ScientificCalculator.vala"
	result = (gdouble) fact;
#line 83 "../src/Core/ScientificCalculator.vala"
	return result;
#line 1273 "ScientificCalculator.c"
}

gboolean
pebbles_scientific_calculator_angle_op (gunichar op)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	gboolean _tmp4_ = FALSE;
	gboolean _tmp5_ = FALSE;
	gboolean _tmp6_ = FALSE;
	gboolean _tmp7_ = FALSE;
	gboolean _tmp8_ = FALSE;
	gboolean _tmp9_ = FALSE;
	gboolean _tmp10_ = FALSE;
	gboolean result = FALSE;
#line 86 "../src/Core/ScientificCalculator.vala"
	if (op == ((gunichar) 's')) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp10_ = TRUE;
#line 1295 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp10_ = op == ((gunichar) 'c');
#line 1299 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp10_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp9_ = TRUE;
#line 1305 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp9_ = op == ((gunichar) 't');
#line 1309 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp9_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp8_ = TRUE;
#line 1315 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp8_ = op == ((gunichar) 'i');
#line 1319 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp8_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp7_ = TRUE;
#line 1325 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp7_ = op == ((gunichar) 'o');
#line 1329 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp7_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp6_ = TRUE;
#line 1335 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp6_ = op == ((gunichar) 'a');
#line 1339 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp6_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp5_ = TRUE;
#line 1345 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp5_ = op == ((gunichar) 'h');
#line 1349 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp5_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp4_ = TRUE;
#line 1355 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp4_ = op == ((gunichar) 'y');
#line 1359 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp4_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp3_ = TRUE;
#line 1365 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp3_ = op == ((gunichar) 'e');
#line 1369 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp3_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp2_ = TRUE;
#line 1375 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp2_ = op == ((gunichar) 'r');
#line 1379 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp2_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = TRUE;
#line 1385 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = op == ((gunichar) 'z');
#line 1389 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp1_) {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = TRUE;
#line 1395 "ScientificCalculator.c"
	} else {
#line 86 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = op == ((gunichar) 'k');
#line 1399 "ScientificCalculator.c"
	}
#line 86 "../src/Core/ScientificCalculator.vala"
	if (_tmp0_) {
#line 87 "../src/Core/ScientificCalculator.vala"
		result = TRUE;
#line 87 "../src/Core/ScientificCalculator.vala"
		return result;
#line 1407 "ScientificCalculator.c"
	} else {
#line 90 "../src/Core/ScientificCalculator.vala"
		result = FALSE;
#line 90 "../src/Core/ScientificCalculator.vala"
		return result;
#line 1413 "ScientificCalculator.c"
	}
}

static gchar*
double_to_string (gdouble self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gint _tmp1__length1;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* result = NULL;
#line 989 "glib-2.0.vapi"
	_tmp0_ = g_new0 (gchar, G_ASCII_DTOSTR_BUF_SIZE);
#line 989 "glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 989 "glib-2.0.vapi"
	_tmp1__length1 = G_ASCII_DTOSTR_BUF_SIZE;
#line 989 "glib-2.0.vapi"
	_tmp2_ = g_ascii_dtostr (_tmp1_, (gint) G_ASCII_DTOSTR_BUF_SIZE, self);
#line 989 "glib-2.0.vapi"
	_tmp3_ = g_strdup (_tmp2_);
#line 989 "glib-2.0.vapi"
	_tmp4_ = _tmp3_;
#line 989 "glib-2.0.vapi"
	_tmp1_ = (g_free (_tmp1_), NULL);
#line 989 "glib-2.0.vapi"
	result = _tmp4_;
#line 989 "glib-2.0.vapi"
	return result;
#line 1445 "ScientificCalculator.c"
}

gchar*
pebbles_scientific_calculator_apply_op (PebblesScientificCalculator* self,
                                        gchar op,
                                        gdouble a,
                                        gdouble b)
{
	gchar* _tmp66_;
	gchar* result = NULL;
#line 93 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 94 "../src/Core/ScientificCalculator.vala"
	switch (op) {
#line 94 "../src/Core/ScientificCalculator.vala"
		case '+':
#line 1462 "ScientificCalculator.c"
		{
			gchar* _tmp0_;
#line 96 "../src/Core/ScientificCalculator.vala"
			_tmp0_ = double_to_string (a + b);
#line 96 "../src/Core/ScientificCalculator.vala"
			result = _tmp0_;
#line 96 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1471 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case '-':
#line 1475 "ScientificCalculator.c"
		{
			gchar* _tmp1_;
#line 98 "../src/Core/ScientificCalculator.vala"
			_tmp1_ = double_to_string (a - b);
#line 98 "../src/Core/ScientificCalculator.vala"
			result = _tmp1_;
#line 98 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1484 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'u':
#line 1488 "ScientificCalculator.c"
		{
			gchar* _tmp2_;
#line 100 "../src/Core/ScientificCalculator.vala"
			_tmp2_ = double_to_string (-1 * b);
#line 100 "../src/Core/ScientificCalculator.vala"
			result = _tmp2_;
#line 100 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1497 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case '*':
#line 1501 "ScientificCalculator.c"
		{
			gchar* _tmp3_;
#line 102 "../src/Core/ScientificCalculator.vala"
			_tmp3_ = double_to_string (a * b);
#line 102 "../src/Core/ScientificCalculator.vala"
			result = _tmp3_;
#line 102 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1510 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case '/':
#line 1514 "ScientificCalculator.c"
		{
			gchar* _tmp4_ = NULL;
#line 104 "../src/Core/ScientificCalculator.vala"
			if (b == ((gdouble) 0)) {
#line 1519 "ScientificCalculator.c"
				gchar* _tmp5_;
#line 104 "../src/Core/ScientificCalculator.vala"
				_tmp5_ = g_strdup ("E");
#line 104 "../src/Core/ScientificCalculator.vala"
				_g_free0 (_tmp4_);
#line 104 "../src/Core/ScientificCalculator.vala"
				_tmp4_ = _tmp5_;
#line 1527 "ScientificCalculator.c"
			} else {
				gchar* _tmp6_;
#line 104 "../src/Core/ScientificCalculator.vala"
				_tmp6_ = double_to_string (a / b);
#line 104 "../src/Core/ScientificCalculator.vala"
				_g_free0 (_tmp4_);
#line 104 "../src/Core/ScientificCalculator.vala"
				_tmp4_ = _tmp6_;
#line 1536 "ScientificCalculator.c"
			}
#line 104 "../src/Core/ScientificCalculator.vala"
			result = _tmp4_;
#line 104 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1542 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'q':
#line 1546 "ScientificCalculator.c"
		{
			gchar* _tmp7_;
#line 106 "../src/Core/ScientificCalculator.vala"
			_tmp7_ = double_to_string (pow (b, (1 / a) + 0.0));
#line 106 "../src/Core/ScientificCalculator.vala"
			result = _tmp7_;
#line 106 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1555 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case '^':
#line 1559 "ScientificCalculator.c"
		{
			gchar* _tmp8_;
#line 108 "../src/Core/ScientificCalculator.vala"
			_tmp8_ = double_to_string (pow (a + 0.0, b + 0.0));
#line 108 "../src/Core/ScientificCalculator.vala"
			result = _tmp8_;
#line 108 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1568 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'm':
#line 1572 "ScientificCalculator.c"
		{
			gchar* _tmp9_;
#line 110 "../src/Core/ScientificCalculator.vala"
			_tmp9_ = double_to_string (fmod (a, b));
#line 110 "../src/Core/ScientificCalculator.vala"
			result = _tmp9_;
#line 110 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1581 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'l':
#line 1585 "ScientificCalculator.c"
		{
			gchar* _tmp10_;
#line 112 "../src/Core/ScientificCalculator.vala"
			_tmp10_ = double_to_string (log (b) / log (a));
#line 112 "../src/Core/ScientificCalculator.vala"
			result = _tmp10_;
#line 112 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1594 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case '!':
#line 1598 "ScientificCalculator.c"
		{
			gchar* _tmp11_;
#line 114 "../src/Core/ScientificCalculator.vala"
			_tmp11_ = double_to_string (pebbles_scientific_calculator_fact (b));
#line 114 "../src/Core/ScientificCalculator.vala"
			result = _tmp11_;
#line 114 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1607 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'p':
#line 1611 "ScientificCalculator.c"
		{
			gchar* _tmp12_;
#line 116 "../src/Core/ScientificCalculator.vala"
			_tmp12_ = double_to_string (pebbles_scientific_calculator_fact (a) / pebbles_scientific_calculator_fact (a - b));
#line 116 "../src/Core/ScientificCalculator.vala"
			result = _tmp12_;
#line 116 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1620 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'b':
#line 1624 "ScientificCalculator.c"
		{
			gchar* _tmp13_;
#line 118 "../src/Core/ScientificCalculator.vala"
			_tmp13_ = double_to_string (pebbles_scientific_calculator_fact (a) / (pebbles_scientific_calculator_fact (b) * pebbles_scientific_calculator_fact (a - b)));
#line 118 "../src/Core/ScientificCalculator.vala"
			result = _tmp13_;
#line 118 "../src/Core/ScientificCalculator.vala"
			return result;
#line 1633 "ScientificCalculator.c"
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 's':
#line 1637 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp14_;
#line 120 "../src/Core/ScientificCalculator.vala"
			_tmp14_ = self->angle_mode_sci;
#line 120 "../src/Core/ScientificCalculator.vala"
			switch (_tmp14_) {
#line 120 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 1646 "ScientificCalculator.c"
				{
					gchar* _tmp15_;
#line 122 "../src/Core/ScientificCalculator.vala"
					_tmp15_ = double_to_string (sin (b));
#line 122 "../src/Core/ScientificCalculator.vala"
					result = _tmp15_;
#line 122 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1655 "ScientificCalculator.c"
				}
#line 120 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 1659 "ScientificCalculator.c"
				{
					gchar* _tmp16_;
#line 124 "../src/Core/ScientificCalculator.vala"
					_tmp16_ = double_to_string (sin (PEBBLES_SCIENTIFIC_CALCULATOR_GRAD_VAL * b));
#line 124 "../src/Core/ScientificCalculator.vala"
					result = _tmp16_;
#line 124 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1668 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp17_;
#line 126 "../src/Core/ScientificCalculator.vala"
					_tmp17_ = double_to_string (sin (PEBBLES_SCIENTIFIC_CALCULATOR_DEG_VAL * b));
#line 126 "../src/Core/ScientificCalculator.vala"
					result = _tmp17_;
#line 126 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1679 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'c':
#line 1685 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp18_;
#line 129 "../src/Core/ScientificCalculator.vala"
			_tmp18_ = self->angle_mode_sci;
#line 129 "../src/Core/ScientificCalculator.vala"
			switch (_tmp18_) {
#line 129 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 1694 "ScientificCalculator.c"
				{
					gchar* _tmp19_;
#line 131 "../src/Core/ScientificCalculator.vala"
					_tmp19_ = double_to_string (cos (b));
#line 131 "../src/Core/ScientificCalculator.vala"
					result = _tmp19_;
#line 131 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1703 "ScientificCalculator.c"
				}
#line 129 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 1707 "ScientificCalculator.c"
				{
					gchar* _tmp20_;
#line 133 "../src/Core/ScientificCalculator.vala"
					_tmp20_ = double_to_string (cos (PEBBLES_SCIENTIFIC_CALCULATOR_GRAD_VAL * b));
#line 133 "../src/Core/ScientificCalculator.vala"
					result = _tmp20_;
#line 133 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1716 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp21_;
#line 135 "../src/Core/ScientificCalculator.vala"
					_tmp21_ = double_to_string (cos (PEBBLES_SCIENTIFIC_CALCULATOR_DEG_VAL * b));
#line 135 "../src/Core/ScientificCalculator.vala"
					result = _tmp21_;
#line 135 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1727 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 't':
#line 1733 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp22_;
#line 138 "../src/Core/ScientificCalculator.vala"
			_tmp22_ = self->angle_mode_sci;
#line 138 "../src/Core/ScientificCalculator.vala"
			switch (_tmp22_) {
#line 138 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 1742 "ScientificCalculator.c"
				{
					gchar* _tmp23_;
#line 140 "../src/Core/ScientificCalculator.vala"
					_tmp23_ = double_to_string (tan (b));
#line 140 "../src/Core/ScientificCalculator.vala"
					result = _tmp23_;
#line 140 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1751 "ScientificCalculator.c"
				}
#line 138 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 1755 "ScientificCalculator.c"
				{
					gchar* _tmp24_;
#line 142 "../src/Core/ScientificCalculator.vala"
					_tmp24_ = double_to_string (tan (PEBBLES_SCIENTIFIC_CALCULATOR_GRAD_VAL * b));
#line 142 "../src/Core/ScientificCalculator.vala"
					result = _tmp24_;
#line 142 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1764 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp25_;
#line 144 "../src/Core/ScientificCalculator.vala"
					_tmp25_ = double_to_string (tan (PEBBLES_SCIENTIFIC_CALCULATOR_DEG_VAL * b));
#line 144 "../src/Core/ScientificCalculator.vala"
					result = _tmp25_;
#line 144 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1775 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'i':
#line 1781 "ScientificCalculator.c"
		{
			{
				gboolean _tmp26_ = FALSE;
#line 148 "../src/Core/ScientificCalculator.vala"
				if (b >= ((gdouble) -1)) {
#line 148 "../src/Core/ScientificCalculator.vala"
					_tmp26_ = b <= ((gdouble) 1);
#line 1789 "ScientificCalculator.c"
				} else {
#line 148 "../src/Core/ScientificCalculator.vala"
					_tmp26_ = FALSE;
#line 1793 "ScientificCalculator.c"
				}
#line 148 "../src/Core/ScientificCalculator.vala"
				if (_tmp26_) {
#line 1797 "ScientificCalculator.c"
					PebblesGlobalAngleUnit _tmp27_;
#line 149 "../src/Core/ScientificCalculator.vala"
					_tmp27_ = self->angle_mode_sci;
#line 149 "../src/Core/ScientificCalculator.vala"
					switch (_tmp27_) {
#line 149 "../src/Core/ScientificCalculator.vala"
						case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 1805 "ScientificCalculator.c"
						{
							gchar* _tmp28_;
#line 151 "../src/Core/ScientificCalculator.vala"
							_tmp28_ = double_to_string (asin (b));
#line 151 "../src/Core/ScientificCalculator.vala"
							result = _tmp28_;
#line 151 "../src/Core/ScientificCalculator.vala"
							return result;
#line 1814 "ScientificCalculator.c"
						}
#line 149 "../src/Core/ScientificCalculator.vala"
						case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 1818 "ScientificCalculator.c"
						{
							gchar* _tmp29_;
#line 153 "../src/Core/ScientificCalculator.vala"
							_tmp29_ = double_to_string (asin (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_GRAD_VAL);
#line 153 "../src/Core/ScientificCalculator.vala"
							result = _tmp29_;
#line 153 "../src/Core/ScientificCalculator.vala"
							return result;
#line 1827 "ScientificCalculator.c"
						}
						default:
						{
							gchar* _tmp30_;
#line 155 "../src/Core/ScientificCalculator.vala"
							_tmp30_ = double_to_string (asin (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_DEG_VAL);
#line 155 "../src/Core/ScientificCalculator.vala"
							result = _tmp30_;
#line 155 "../src/Core/ScientificCalculator.vala"
							return result;
#line 1838 "ScientificCalculator.c"
						}
					}
				} else {
					gchar* _tmp31_;
#line 159 "../src/Core/ScientificCalculator.vala"
					_tmp31_ = g_strdup ("E");
#line 159 "../src/Core/ScientificCalculator.vala"
					result = _tmp31_;
#line 159 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1849 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'o':
#line 1855 "ScientificCalculator.c"
		{
			{
				gboolean _tmp32_ = FALSE;
#line 164 "../src/Core/ScientificCalculator.vala"
				if (b >= ((gdouble) -1)) {
#line 164 "../src/Core/ScientificCalculator.vala"
					_tmp32_ = b <= ((gdouble) 1);
#line 1863 "ScientificCalculator.c"
				} else {
#line 164 "../src/Core/ScientificCalculator.vala"
					_tmp32_ = FALSE;
#line 1867 "ScientificCalculator.c"
				}
#line 164 "../src/Core/ScientificCalculator.vala"
				if (_tmp32_) {
#line 1871 "ScientificCalculator.c"
					PebblesGlobalAngleUnit _tmp33_;
#line 165 "../src/Core/ScientificCalculator.vala"
					_tmp33_ = self->angle_mode_sci;
#line 165 "../src/Core/ScientificCalculator.vala"
					switch (_tmp33_) {
#line 165 "../src/Core/ScientificCalculator.vala"
						case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 1879 "ScientificCalculator.c"
						{
							gchar* _tmp34_;
#line 167 "../src/Core/ScientificCalculator.vala"
							_tmp34_ = double_to_string (acos (b));
#line 167 "../src/Core/ScientificCalculator.vala"
							result = _tmp34_;
#line 167 "../src/Core/ScientificCalculator.vala"
							return result;
#line 1888 "ScientificCalculator.c"
						}
#line 165 "../src/Core/ScientificCalculator.vala"
						case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 1892 "ScientificCalculator.c"
						{
							gchar* _tmp35_;
#line 169 "../src/Core/ScientificCalculator.vala"
							_tmp35_ = double_to_string (acos (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_GRAD_VAL);
#line 169 "../src/Core/ScientificCalculator.vala"
							result = _tmp35_;
#line 169 "../src/Core/ScientificCalculator.vala"
							return result;
#line 1901 "ScientificCalculator.c"
						}
						default:
						{
							gchar* _tmp36_;
#line 171 "../src/Core/ScientificCalculator.vala"
							_tmp36_ = double_to_string (acos (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_DEG_VAL);
#line 171 "../src/Core/ScientificCalculator.vala"
							result = _tmp36_;
#line 171 "../src/Core/ScientificCalculator.vala"
							return result;
#line 1912 "ScientificCalculator.c"
						}
					}
				} else {
					gchar* _tmp37_;
#line 175 "../src/Core/ScientificCalculator.vala"
					_tmp37_ = g_strdup ("E");
#line 175 "../src/Core/ScientificCalculator.vala"
					result = _tmp37_;
#line 175 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1923 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'a':
#line 1929 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp38_;
#line 179 "../src/Core/ScientificCalculator.vala"
			_tmp38_ = self->angle_mode_sci;
#line 179 "../src/Core/ScientificCalculator.vala"
			switch (_tmp38_) {
#line 179 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 1938 "ScientificCalculator.c"
				{
					gchar* _tmp39_;
#line 181 "../src/Core/ScientificCalculator.vala"
					_tmp39_ = double_to_string (atan (b));
#line 181 "../src/Core/ScientificCalculator.vala"
					result = _tmp39_;
#line 181 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1947 "ScientificCalculator.c"
				}
#line 179 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 1951 "ScientificCalculator.c"
				{
					gchar* _tmp40_;
#line 183 "../src/Core/ScientificCalculator.vala"
					_tmp40_ = double_to_string (atan (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_GRAD_VAL);
#line 183 "../src/Core/ScientificCalculator.vala"
					result = _tmp40_;
#line 183 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1960 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp41_;
#line 185 "../src/Core/ScientificCalculator.vala"
					_tmp41_ = double_to_string (atan (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_DEG_VAL);
#line 185 "../src/Core/ScientificCalculator.vala"
					result = _tmp41_;
#line 185 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1971 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'h':
#line 1977 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp42_;
#line 188 "../src/Core/ScientificCalculator.vala"
			_tmp42_ = self->angle_mode_sci;
#line 188 "../src/Core/ScientificCalculator.vala"
			switch (_tmp42_) {
#line 188 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 1986 "ScientificCalculator.c"
				{
					gchar* _tmp43_;
#line 190 "../src/Core/ScientificCalculator.vala"
					_tmp43_ = double_to_string (sinh (b));
#line 190 "../src/Core/ScientificCalculator.vala"
					result = _tmp43_;
#line 190 "../src/Core/ScientificCalculator.vala"
					return result;
#line 1995 "ScientificCalculator.c"
				}
#line 188 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 1999 "ScientificCalculator.c"
				{
					gchar* _tmp44_;
#line 192 "../src/Core/ScientificCalculator.vala"
					_tmp44_ = double_to_string (sinh (PEBBLES_SCIENTIFIC_CALCULATOR_GRAD_VAL * b));
#line 192 "../src/Core/ScientificCalculator.vala"
					result = _tmp44_;
#line 192 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2008 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp45_;
#line 194 "../src/Core/ScientificCalculator.vala"
					_tmp45_ = double_to_string (sinh (PEBBLES_SCIENTIFIC_CALCULATOR_DEG_VAL * b));
#line 194 "../src/Core/ScientificCalculator.vala"
					result = _tmp45_;
#line 194 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2019 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'y':
#line 2025 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp46_;
#line 197 "../src/Core/ScientificCalculator.vala"
			_tmp46_ = self->angle_mode_sci;
#line 197 "../src/Core/ScientificCalculator.vala"
			switch (_tmp46_) {
#line 197 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 2034 "ScientificCalculator.c"
				{
					gchar* _tmp47_;
#line 199 "../src/Core/ScientificCalculator.vala"
					_tmp47_ = double_to_string (cosh (b));
#line 199 "../src/Core/ScientificCalculator.vala"
					result = _tmp47_;
#line 199 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2043 "ScientificCalculator.c"
				}
#line 197 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 2047 "ScientificCalculator.c"
				{
					gchar* _tmp48_;
#line 201 "../src/Core/ScientificCalculator.vala"
					_tmp48_ = double_to_string (cosh (PEBBLES_SCIENTIFIC_CALCULATOR_GRAD_VAL * b));
#line 201 "../src/Core/ScientificCalculator.vala"
					result = _tmp48_;
#line 201 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2056 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp49_;
#line 203 "../src/Core/ScientificCalculator.vala"
					_tmp49_ = double_to_string (cosh (PEBBLES_SCIENTIFIC_CALCULATOR_DEG_VAL * b));
#line 203 "../src/Core/ScientificCalculator.vala"
					result = _tmp49_;
#line 203 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2067 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'e':
#line 2073 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp50_;
#line 206 "../src/Core/ScientificCalculator.vala"
			_tmp50_ = self->angle_mode_sci;
#line 206 "../src/Core/ScientificCalculator.vala"
			switch (_tmp50_) {
#line 206 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 2082 "ScientificCalculator.c"
				{
					gchar* _tmp51_;
#line 208 "../src/Core/ScientificCalculator.vala"
					_tmp51_ = double_to_string (tanh (b));
#line 208 "../src/Core/ScientificCalculator.vala"
					result = _tmp51_;
#line 208 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2091 "ScientificCalculator.c"
				}
#line 206 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 2095 "ScientificCalculator.c"
				{
					gchar* _tmp52_;
#line 210 "../src/Core/ScientificCalculator.vala"
					_tmp52_ = double_to_string (tanh (PEBBLES_SCIENTIFIC_CALCULATOR_GRAD_VAL * b));
#line 210 "../src/Core/ScientificCalculator.vala"
					result = _tmp52_;
#line 210 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2104 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp53_;
#line 212 "../src/Core/ScientificCalculator.vala"
					_tmp53_ = double_to_string (tanh (PEBBLES_SCIENTIFIC_CALCULATOR_DEG_VAL * b));
#line 212 "../src/Core/ScientificCalculator.vala"
					result = _tmp53_;
#line 212 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2115 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'r':
#line 2121 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp54_;
#line 215 "../src/Core/ScientificCalculator.vala"
			_tmp54_ = self->angle_mode_sci;
#line 215 "../src/Core/ScientificCalculator.vala"
			switch (_tmp54_) {
#line 215 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 2130 "ScientificCalculator.c"
				{
					gchar* _tmp55_;
#line 217 "../src/Core/ScientificCalculator.vala"
					_tmp55_ = double_to_string (asinh (b));
#line 217 "../src/Core/ScientificCalculator.vala"
					result = _tmp55_;
#line 217 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2139 "ScientificCalculator.c"
				}
#line 215 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 2143 "ScientificCalculator.c"
				{
					gchar* _tmp56_;
#line 219 "../src/Core/ScientificCalculator.vala"
					_tmp56_ = double_to_string (asinh (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_GRAD_VAL);
#line 219 "../src/Core/ScientificCalculator.vala"
					result = _tmp56_;
#line 219 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2152 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp57_;
#line 221 "../src/Core/ScientificCalculator.vala"
					_tmp57_ = double_to_string (asinh (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_DEG_VAL);
#line 221 "../src/Core/ScientificCalculator.vala"
					result = _tmp57_;
#line 221 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2163 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'z':
#line 2169 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp58_;
#line 224 "../src/Core/ScientificCalculator.vala"
			_tmp58_ = self->angle_mode_sci;
#line 224 "../src/Core/ScientificCalculator.vala"
			switch (_tmp58_) {
#line 224 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 2178 "ScientificCalculator.c"
				{
					gchar* _tmp59_;
#line 226 "../src/Core/ScientificCalculator.vala"
					_tmp59_ = double_to_string (acosh (b));
#line 226 "../src/Core/ScientificCalculator.vala"
					result = _tmp59_;
#line 226 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2187 "ScientificCalculator.c"
				}
#line 224 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 2191 "ScientificCalculator.c"
				{
					gchar* _tmp60_;
#line 228 "../src/Core/ScientificCalculator.vala"
					_tmp60_ = double_to_string (acosh (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_GRAD_VAL);
#line 228 "../src/Core/ScientificCalculator.vala"
					result = _tmp60_;
#line 228 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2200 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp61_;
#line 230 "../src/Core/ScientificCalculator.vala"
					_tmp61_ = double_to_string (acosh (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_DEG_VAL);
#line 230 "../src/Core/ScientificCalculator.vala"
					result = _tmp61_;
#line 230 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2211 "ScientificCalculator.c"
				}
			}
		}
#line 94 "../src/Core/ScientificCalculator.vala"
		case 'k':
#line 2217 "ScientificCalculator.c"
		{
			PebblesGlobalAngleUnit _tmp62_;
#line 233 "../src/Core/ScientificCalculator.vala"
			_tmp62_ = self->angle_mode_sci;
#line 233 "../src/Core/ScientificCalculator.vala"
			switch (_tmp62_) {
#line 233 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_RAD:
#line 2226 "ScientificCalculator.c"
				{
					gchar* _tmp63_;
#line 235 "../src/Core/ScientificCalculator.vala"
					_tmp63_ = double_to_string (atanh (b));
#line 235 "../src/Core/ScientificCalculator.vala"
					result = _tmp63_;
#line 235 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2235 "ScientificCalculator.c"
				}
#line 233 "../src/Core/ScientificCalculator.vala"
				case PEBBLES_GLOBAL_ANGLE_UNIT_GRAD:
#line 2239 "ScientificCalculator.c"
				{
					gchar* _tmp64_;
#line 237 "../src/Core/ScientificCalculator.vala"
					_tmp64_ = double_to_string (atanh (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_GRAD_VAL);
#line 237 "../src/Core/ScientificCalculator.vala"
					result = _tmp64_;
#line 237 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2248 "ScientificCalculator.c"
				}
				default:
				{
					gchar* _tmp65_;
#line 239 "../src/Core/ScientificCalculator.vala"
					_tmp65_ = double_to_string (atanh (b) * PEBBLES_SCIENTIFIC_CALCULATOR_INV_DEG_VAL);
#line 239 "../src/Core/ScientificCalculator.vala"
					result = _tmp65_;
#line 239 "../src/Core/ScientificCalculator.vala"
					return result;
#line 2259 "ScientificCalculator.c"
				}
			}
		}
		default:
#line 94 "../src/Core/ScientificCalculator.vala"
		break;
#line 2266 "ScientificCalculator.c"
	}
#line 242 "../src/Core/ScientificCalculator.vala"
	_tmp66_ = g_strdup ("E");
#line 242 "../src/Core/ScientificCalculator.vala"
	result = _tmp66_;
#line 242 "../src/Core/ScientificCalculator.vala"
	return result;
#line 2274 "ScientificCalculator.c"
}

static gunichar
string_get_char (const gchar* self,
                 glong index)
{
	gunichar result = 0U;
#line 1262 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, 0U);
#line 1263 "glib-2.0.vapi"
	result = g_utf8_get_char (((gchar*) self) + index);
#line 1263 "glib-2.0.vapi"
	return result;
#line 2288 "ScientificCalculator.c"
}

static gboolean
pebbles_scientific_calculator_is_operator (PebblesScientificCalculator* self,
                                           const gchar* str)
{
	gunichar chr = 0U;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	gboolean _tmp4_ = FALSE;
	gboolean _tmp5_ = FALSE;
	gboolean _tmp6_ = FALSE;
	gboolean _tmp7_ = FALSE;
	gboolean _tmp8_ = FALSE;
	gboolean _tmp9_ = FALSE;
	gboolean _tmp10_ = FALSE;
	gboolean _tmp11_ = FALSE;
	gboolean result = FALSE;
#line 244 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 244 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (str != NULL, FALSE);
#line 245 "../src/Core/ScientificCalculator.vala"
	chr = string_get_char (str, (glong) 0);
#line 246 "../src/Core/ScientificCalculator.vala"
	if (chr == ((gunichar) '+')) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp11_ = TRUE;
#line 2319 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp11_ = chr == ((gunichar) '-');
#line 2323 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp11_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp10_ = TRUE;
#line 2329 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp10_ = chr == ((gunichar) '/');
#line 2333 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp10_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp9_ = TRUE;
#line 2339 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp9_ = chr == ((gunichar) '*');
#line 2343 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp9_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp8_ = TRUE;
#line 2349 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp8_ = chr == ((gunichar) '^');
#line 2353 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp8_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp7_ = TRUE;
#line 2359 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp7_ = chr == ((gunichar) 'm');
#line 2363 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp7_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp6_ = TRUE;
#line 2369 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp6_ = chr == ((gunichar) 'l');
#line 2373 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp6_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp5_ = TRUE;
#line 2379 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp5_ = chr == ((gunichar) '!');
#line 2383 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp5_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp4_ = TRUE;
#line 2389 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp4_ = chr == ((gunichar) 'p');
#line 2393 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp4_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp3_ = TRUE;
#line 2399 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp3_ = chr == ((gunichar) 'b');
#line 2403 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp3_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp2_ = TRUE;
#line 2409 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp2_ = pebbles_scientific_calculator_angle_op (chr);
#line 2413 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp2_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = TRUE;
#line 2419 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = chr == ((gunichar) 'q');
#line 2423 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp1_) {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = TRUE;
#line 2429 "ScientificCalculator.c"
	} else {
#line 246 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = chr == ((gunichar) 'u');
#line 2433 "ScientificCalculator.c"
	}
#line 246 "../src/Core/ScientificCalculator.vala"
	if (_tmp0_) {
#line 247 "../src/Core/ScientificCalculator.vala"
		result = TRUE;
#line 247 "../src/Core/ScientificCalculator.vala"
		return result;
#line 2441 "ScientificCalculator.c"
	} else {
#line 250 "../src/Core/ScientificCalculator.vala"
		result = FALSE;
#line 250 "../src/Core/ScientificCalculator.vala"
		return result;
#line 2447 "ScientificCalculator.c"
	}
}

static gdouble
double_parse (const gchar* str)
{
	gdouble result = 0.0;
#line 995 "glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0.0);
#line 996 "glib-2.0.vapi"
	result = g_ascii_strtod (str, NULL);
#line 996 "glib-2.0.vapi"
	return result;
#line 2461 "ScientificCalculator.c"
}

static gchar
string_get (const gchar* self,
            glong index)
{
	gchar _tmp0_;
	gchar result = '\0';
#line 1232 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, '\0');
#line 1233 "glib-2.0.vapi"
	_tmp0_ = ((gchar*) self)[index];
#line 1233 "glib-2.0.vapi"
	result = _tmp0_;
#line 1233 "glib-2.0.vapi"
	return result;
#line 2478 "ScientificCalculator.c"
}

gchar*
pebbles_scientific_calculator_evaluate_exp (PebblesScientificCalculator* self,
                                            const gchar* exp,
                                            gint float_accuracy)
{
	gchar** _tmp0_;
	gchar** _tmp1_;
	PebblesDoubleStack* values = NULL;
	PebblesDoubleStack* _tmp2_;
	CharStack* ops = NULL;
	CharStack* _tmp3_;
	gchar* output = NULL;
	PebblesDoubleStack* _tmp63_;
	gchar* _tmp64_;
	gchar* result = NULL;
#line 253 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 253 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (exp != NULL, NULL);
#line 254 "../src/Core/ScientificCalculator.vala"
	_tmp1_ = _tmp0_ = g_strsplit (exp, " ", 0);
#line 254 "../src/Core/ScientificCalculator.vala"
	self->tokens = (_vala_array_free (self->tokens, self->tokens_length1, (GDestroyNotify) g_free), NULL);
#line 254 "../src/Core/ScientificCalculator.vala"
	self->tokens = _tmp1_;
#line 254 "../src/Core/ScientificCalculator.vala"
	self->tokens_length1 = _vala_array_length (_tmp0_);
#line 255 "../src/Core/ScientificCalculator.vala"
	_tmp2_ = pebbles_double_stack_new (50);
#line 255 "../src/Core/ScientificCalculator.vala"
	values = _tmp2_;
#line 256 "../src/Core/ScientificCalculator.vala"
	_tmp3_ = char_stack_new (50);
#line 256 "../src/Core/ScientificCalculator.vala"
	ops = _tmp3_;
#line 2516 "ScientificCalculator.c"
	{
		gint i = 0;
#line 257 "../src/Core/ScientificCalculator.vala"
		i = 0;
#line 2521 "ScientificCalculator.c"
		{
			gboolean _tmp4_ = FALSE;
#line 257 "../src/Core/ScientificCalculator.vala"
			_tmp4_ = TRUE;
#line 257 "../src/Core/ScientificCalculator.vala"
			while (TRUE) {
#line 2528 "ScientificCalculator.c"
				gchar** _tmp6_;
				gint _tmp6__length1;
				gboolean _tmp7_ = FALSE;
				gboolean _tmp8_ = FALSE;
				gchar** _tmp9_;
				gint _tmp9__length1;
				const gchar* _tmp10_;
#line 257 "../src/Core/ScientificCalculator.vala"
				if (!_tmp4_) {
#line 2538 "ScientificCalculator.c"
					gint _tmp5_;
#line 257 "../src/Core/ScientificCalculator.vala"
					_tmp5_ = i;
#line 257 "../src/Core/ScientificCalculator.vala"
					i = _tmp5_ + 1;
#line 2544 "ScientificCalculator.c"
				}
#line 257 "../src/Core/ScientificCalculator.vala"
				_tmp4_ = FALSE;
#line 257 "../src/Core/ScientificCalculator.vala"
				_tmp6_ = self->tokens;
#line 257 "../src/Core/ScientificCalculator.vala"
				_tmp6__length1 = self->tokens_length1;
#line 257 "../src/Core/ScientificCalculator.vala"
				if (!(i < _tmp6__length1)) {
#line 257 "../src/Core/ScientificCalculator.vala"
					break;
#line 2556 "ScientificCalculator.c"
				}
#line 259 "../src/Core/ScientificCalculator.vala"
				_tmp9_ = self->tokens;
#line 259 "../src/Core/ScientificCalculator.vala"
				_tmp9__length1 = self->tokens_length1;
#line 259 "../src/Core/ScientificCalculator.vala"
				_tmp10_ = _tmp9_[i];
#line 259 "../src/Core/ScientificCalculator.vala"
				if (!pebbles_scientific_calculator_is_operator (self, _tmp10_)) {
#line 2566 "ScientificCalculator.c"
					gchar** _tmp11_;
					gint _tmp11__length1;
					const gchar* _tmp12_;
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp11_ = self->tokens;
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp11__length1 = self->tokens_length1;
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp12_ = _tmp11_[i];
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp8_ = g_strcmp0 (_tmp12_, "(") != 0;
#line 2578 "ScientificCalculator.c"
				} else {
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp8_ = FALSE;
#line 2582 "ScientificCalculator.c"
				}
#line 259 "../src/Core/ScientificCalculator.vala"
				if (_tmp8_) {
#line 2586 "ScientificCalculator.c"
					gchar** _tmp13_;
					gint _tmp13__length1;
					const gchar* _tmp14_;
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp13_ = self->tokens;
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp13__length1 = self->tokens_length1;
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp14_ = _tmp13_[i];
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp7_ = g_strcmp0 (_tmp14_, ")") != 0;
#line 2598 "ScientificCalculator.c"
				} else {
#line 259 "../src/Core/ScientificCalculator.vala"
					_tmp7_ = FALSE;
#line 2602 "ScientificCalculator.c"
				}
#line 259 "../src/Core/ScientificCalculator.vala"
				if (_tmp7_) {
#line 2606 "ScientificCalculator.c"
					PebblesDoubleStack* _tmp15_;
					gchar** _tmp16_;
					gint _tmp16__length1;
					const gchar* _tmp17_;
#line 260 "../src/Core/ScientificCalculator.vala"
					_tmp15_ = values;
#line 260 "../src/Core/ScientificCalculator.vala"
					_tmp16_ = self->tokens;
#line 260 "../src/Core/ScientificCalculator.vala"
					_tmp16__length1 = self->tokens_length1;
#line 260 "../src/Core/ScientificCalculator.vala"
					_tmp17_ = _tmp16_[i];
#line 260 "../src/Core/ScientificCalculator.vala"
					pebbles_double_stack_push (_tmp15_, double_parse (_tmp17_));
#line 2621 "ScientificCalculator.c"
				} else {
					gchar** _tmp18_;
					gint _tmp18__length1;
					const gchar* _tmp19_;
#line 264 "../src/Core/ScientificCalculator.vala"
					_tmp18_ = self->tokens;
#line 264 "../src/Core/ScientificCalculator.vala"
					_tmp18__length1 = self->tokens_length1;
#line 264 "../src/Core/ScientificCalculator.vala"
					_tmp19_ = _tmp18_[i];
#line 264 "../src/Core/ScientificCalculator.vala"
					if (g_strcmp0 (_tmp19_, "(") == 0) {
#line 2634 "ScientificCalculator.c"
						CharStack* _tmp20_;
#line 265 "../src/Core/ScientificCalculator.vala"
						_tmp20_ = ops;
#line 265 "../src/Core/ScientificCalculator.vala"
						char_stack_push (_tmp20_, '(');
#line 2640 "ScientificCalculator.c"
					} else {
						gchar** _tmp21_;
						gint _tmp21__length1;
						const gchar* _tmp22_;
#line 269 "../src/Core/ScientificCalculator.vala"
						_tmp21_ = self->tokens;
#line 269 "../src/Core/ScientificCalculator.vala"
						_tmp21__length1 = self->tokens_length1;
#line 269 "../src/Core/ScientificCalculator.vala"
						_tmp22_ = _tmp21_[i];
#line 269 "../src/Core/ScientificCalculator.vala"
						if (g_strcmp0 (_tmp22_, ")") == 0) {
#line 2653 "ScientificCalculator.c"
							CharStack* _tmp32_;
#line 270 "../src/Core/ScientificCalculator.vala"
							while (TRUE) {
#line 2657 "ScientificCalculator.c"
								CharStack* _tmp23_;
								gchar* tmp = NULL;
								CharStack* _tmp24_;
								PebblesDoubleStack* _tmp25_;
								PebblesDoubleStack* _tmp26_;
								gchar* _tmp27_;
								const gchar* _tmp28_;
#line 270 "../src/Core/ScientificCalculator.vala"
								_tmp23_ = ops;
#line 270 "../src/Core/ScientificCalculator.vala"
								if (!(char_stack_peek (_tmp23_) != '(')) {
#line 270 "../src/Core/ScientificCalculator.vala"
									break;
#line 2671 "ScientificCalculator.c"
								}
#line 271 "../src/Core/ScientificCalculator.vala"
								_tmp24_ = ops;
#line 271 "../src/Core/ScientificCalculator.vala"
								_tmp25_ = values;
#line 271 "../src/Core/ScientificCalculator.vala"
								_tmp26_ = values;
#line 271 "../src/Core/ScientificCalculator.vala"
								_tmp27_ = pebbles_scientific_calculator_apply_op (self, char_stack_pop (_tmp24_), pebbles_double_stack_pop (_tmp25_), pebbles_double_stack_pop (_tmp26_));
#line 271 "../src/Core/ScientificCalculator.vala"
								tmp = _tmp27_;
#line 272 "../src/Core/ScientificCalculator.vala"
								_tmp28_ = tmp;
#line 272 "../src/Core/ScientificCalculator.vala"
								if (g_strcmp0 (_tmp28_, "E") != 0) {
#line 2687 "ScientificCalculator.c"
									PebblesDoubleStack* _tmp29_;
									const gchar* _tmp30_;
#line 273 "../src/Core/ScientificCalculator.vala"
									_tmp29_ = values;
#line 273 "../src/Core/ScientificCalculator.vala"
									_tmp30_ = tmp;
#line 273 "../src/Core/ScientificCalculator.vala"
									pebbles_double_stack_push (_tmp29_, double_parse (_tmp30_));
#line 2696 "ScientificCalculator.c"
								} else {
									gchar* _tmp31_;
#line 276 "../src/Core/ScientificCalculator.vala"
									_tmp31_ = g_strdup ("E");
#line 276 "../src/Core/ScientificCalculator.vala"
									result = _tmp31_;
#line 276 "../src/Core/ScientificCalculator.vala"
									_g_free0 (tmp);
#line 276 "../src/Core/ScientificCalculator.vala"
									_char_stack_unref0 (ops);
#line 276 "../src/Core/ScientificCalculator.vala"
									_pebbles_double_stack_unref0 (values);
#line 276 "../src/Core/ScientificCalculator.vala"
									return result;
#line 2711 "ScientificCalculator.c"
								}
#line 270 "../src/Core/ScientificCalculator.vala"
								_g_free0 (tmp);
#line 2715 "ScientificCalculator.c"
							}
#line 279 "../src/Core/ScientificCalculator.vala"
							_tmp32_ = ops;
#line 279 "../src/Core/ScientificCalculator.vala"
							char_stack_pop (_tmp32_);
#line 2721 "ScientificCalculator.c"
						} else {
							gchar** _tmp33_;
							gint _tmp33__length1;
							const gchar* _tmp34_;
#line 283 "../src/Core/ScientificCalculator.vala"
							_tmp33_ = self->tokens;
#line 283 "../src/Core/ScientificCalculator.vala"
							_tmp33__length1 = self->tokens_length1;
#line 283 "../src/Core/ScientificCalculator.vala"
							_tmp34_ = _tmp33_[i];
#line 283 "../src/Core/ScientificCalculator.vala"
							if (pebbles_scientific_calculator_is_operator (self, _tmp34_)) {
#line 2734 "ScientificCalculator.c"
								CharStack* _tmp51_;
								gchar** _tmp52_;
								gint _tmp52__length1;
								const gchar* _tmp53_;
#line 284 "../src/Core/ScientificCalculator.vala"
								while (TRUE) {
#line 2741 "ScientificCalculator.c"
									gboolean _tmp35_ = FALSE;
									gboolean _tmp36_ = FALSE;
									gchar** _tmp37_;
									gint _tmp37__length1;
									const gchar* _tmp38_;
									gchar* tmp = NULL;
									CharStack* _tmp43_;
									PebblesDoubleStack* _tmp44_;
									PebblesDoubleStack* _tmp45_;
									gchar* _tmp46_;
									const gchar* _tmp47_;
#line 284 "../src/Core/ScientificCalculator.vala"
									_tmp37_ = self->tokens;
#line 284 "../src/Core/ScientificCalculator.vala"
									_tmp37__length1 = self->tokens_length1;
#line 284 "../src/Core/ScientificCalculator.vala"
									_tmp38_ = _tmp37_[i];
#line 284 "../src/Core/ScientificCalculator.vala"
									if (!pebbles_scientific_calculator_r_l_associative (_tmp38_)) {
#line 2761 "ScientificCalculator.c"
										CharStack* _tmp39_;
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp39_ = ops;
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp36_ = !char_stack_empty (_tmp39_);
#line 2767 "ScientificCalculator.c"
									} else {
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp36_ = FALSE;
#line 2771 "ScientificCalculator.c"
									}
#line 284 "../src/Core/ScientificCalculator.vala"
									if (_tmp36_) {
#line 2775 "ScientificCalculator.c"
										gchar** _tmp40_;
										gint _tmp40__length1;
										const gchar* _tmp41_;
										CharStack* _tmp42_;
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp40_ = self->tokens;
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp40__length1 = self->tokens_length1;
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp41_ = _tmp40_[i];
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp42_ = ops;
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp35_ = pebbles_scientific_calculator_has_precedence_pemdas (string_get (_tmp41_, (glong) 0), char_stack_peek (_tmp42_));
#line 2790 "ScientificCalculator.c"
									} else {
#line 284 "../src/Core/ScientificCalculator.vala"
										_tmp35_ = FALSE;
#line 2794 "ScientificCalculator.c"
									}
#line 284 "../src/Core/ScientificCalculator.vala"
									if (!_tmp35_) {
#line 284 "../src/Core/ScientificCalculator.vala"
										break;
#line 2800 "ScientificCalculator.c"
									}
#line 285 "../src/Core/ScientificCalculator.vala"
									_tmp43_ = ops;
#line 285 "../src/Core/ScientificCalculator.vala"
									_tmp44_ = values;
#line 285 "../src/Core/ScientificCalculator.vala"
									_tmp45_ = values;
#line 285 "../src/Core/ScientificCalculator.vala"
									_tmp46_ = pebbles_scientific_calculator_apply_op (self, char_stack_pop (_tmp43_), pebbles_double_stack_pop (_tmp44_), pebbles_double_stack_pop (_tmp45_));
#line 285 "../src/Core/ScientificCalculator.vala"
									tmp = _tmp46_;
#line 286 "../src/Core/ScientificCalculator.vala"
									_tmp47_ = tmp;
#line 286 "../src/Core/ScientificCalculator.vala"
									if (g_strcmp0 (_tmp47_, "E") != 0) {
#line 2816 "ScientificCalculator.c"
										PebblesDoubleStack* _tmp48_;
										const gchar* _tmp49_;
#line 287 "../src/Core/ScientificCalculator.vala"
										_tmp48_ = values;
#line 287 "../src/Core/ScientificCalculator.vala"
										_tmp49_ = tmp;
#line 287 "../src/Core/ScientificCalculator.vala"
										pebbles_double_stack_push (_tmp48_, double_parse (_tmp49_));
#line 2825 "ScientificCalculator.c"
									} else {
										gchar* _tmp50_;
#line 290 "../src/Core/ScientificCalculator.vala"
										_tmp50_ = g_strdup ("E");
#line 290 "../src/Core/ScientificCalculator.vala"
										result = _tmp50_;
#line 290 "../src/Core/ScientificCalculator.vala"
										_g_free0 (tmp);
#line 290 "../src/Core/ScientificCalculator.vala"
										_char_stack_unref0 (ops);
#line 290 "../src/Core/ScientificCalculator.vala"
										_pebbles_double_stack_unref0 (values);
#line 290 "../src/Core/ScientificCalculator.vala"
										return result;
#line 2840 "ScientificCalculator.c"
									}
#line 284 "../src/Core/ScientificCalculator.vala"
									_g_free0 (tmp);
#line 2844 "ScientificCalculator.c"
								}
#line 294 "../src/Core/ScientificCalculator.vala"
								_tmp51_ = ops;
#line 294 "../src/Core/ScientificCalculator.vala"
								_tmp52_ = self->tokens;
#line 294 "../src/Core/ScientificCalculator.vala"
								_tmp52__length1 = self->tokens_length1;
#line 294 "../src/Core/ScientificCalculator.vala"
								_tmp53_ = _tmp52_[i];
#line 294 "../src/Core/ScientificCalculator.vala"
								char_stack_push (_tmp51_, string_get (_tmp53_, (glong) 0));
#line 2856 "ScientificCalculator.c"
							}
						}
					}
				}
			}
		}
	}
#line 298 "../src/Core/ScientificCalculator.vala"
	while (TRUE) {
#line 2866 "ScientificCalculator.c"
		CharStack* _tmp54_;
		gchar* tmp = NULL;
		CharStack* _tmp55_;
		PebblesDoubleStack* _tmp56_;
		PebblesDoubleStack* _tmp57_;
		gchar* _tmp58_;
		const gchar* _tmp59_;
#line 298 "../src/Core/ScientificCalculator.vala"
		_tmp54_ = ops;
#line 298 "../src/Core/ScientificCalculator.vala"
		if (!(!char_stack_empty (_tmp54_))) {
#line 298 "../src/Core/ScientificCalculator.vala"
			break;
#line 2880 "ScientificCalculator.c"
		}
#line 299 "../src/Core/ScientificCalculator.vala"
		_tmp55_ = ops;
#line 299 "../src/Core/ScientificCalculator.vala"
		_tmp56_ = values;
#line 299 "../src/Core/ScientificCalculator.vala"
		_tmp57_ = values;
#line 299 "../src/Core/ScientificCalculator.vala"
		_tmp58_ = pebbles_scientific_calculator_apply_op (self, char_stack_pop (_tmp55_), pebbles_double_stack_pop (_tmp56_), pebbles_double_stack_pop (_tmp57_));
#line 299 "../src/Core/ScientificCalculator.vala"
		tmp = _tmp58_;
#line 300 "../src/Core/ScientificCalculator.vala"
		_tmp59_ = tmp;
#line 300 "../src/Core/ScientificCalculator.vala"
		if (g_strcmp0 (_tmp59_, "E") != 0) {
#line 2896 "ScientificCalculator.c"
			PebblesDoubleStack* _tmp60_;
			const gchar* _tmp61_;
#line 301 "../src/Core/ScientificCalculator.vala"
			_tmp60_ = values;
#line 301 "../src/Core/ScientificCalculator.vala"
			_tmp61_ = tmp;
#line 301 "../src/Core/ScientificCalculator.vala"
			pebbles_double_stack_push (_tmp60_, double_parse (_tmp61_));
#line 2905 "ScientificCalculator.c"
		} else {
			gchar* _tmp62_;
#line 304 "../src/Core/ScientificCalculator.vala"
			_tmp62_ = g_strdup ("E");
#line 304 "../src/Core/ScientificCalculator.vala"
			result = _tmp62_;
#line 304 "../src/Core/ScientificCalculator.vala"
			_g_free0 (tmp);
#line 304 "../src/Core/ScientificCalculator.vala"
			_char_stack_unref0 (ops);
#line 304 "../src/Core/ScientificCalculator.vala"
			_pebbles_double_stack_unref0 (values);
#line 304 "../src/Core/ScientificCalculator.vala"
			return result;
#line 2920 "ScientificCalculator.c"
		}
#line 298 "../src/Core/ScientificCalculator.vala"
		_g_free0 (tmp);
#line 2924 "ScientificCalculator.c"
	}
#line 309 "../src/Core/ScientificCalculator.vala"
	_tmp63_ = values;
#line 309 "../src/Core/ScientificCalculator.vala"
	_tmp64_ = pebbles_utils_manage_decimal_places (pebbles_double_stack_pop (_tmp63_), float_accuracy);
#line 309 "../src/Core/ScientificCalculator.vala"
	output = _tmp64_;
#line 310 "../src/Core/ScientificCalculator.vala"
	result = output;
#line 310 "../src/Core/ScientificCalculator.vala"
	_char_stack_unref0 (ops);
#line 310 "../src/Core/ScientificCalculator.vala"
	_pebbles_double_stack_unref0 (values);
#line 310 "../src/Core/ScientificCalculator.vala"
	return result;
#line 2940 "ScientificCalculator.c"
}

static gboolean
pebbles_scientific_calculator_r_l_associative (const gchar* operator)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean result = FALSE;
#line 312 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (operator != NULL, FALSE);
#line 313 "../src/Core/ScientificCalculator.vala"
	if (g_strcmp0 (operator, "u") == 0) {
#line 313 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = TRUE;
#line 2955 "ScientificCalculator.c"
	} else {
#line 313 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = g_strcmp0 (operator, "^") == 0;
#line 2959 "ScientificCalculator.c"
	}
#line 313 "../src/Core/ScientificCalculator.vala"
	if (_tmp1_) {
#line 313 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = TRUE;
#line 2965 "ScientificCalculator.c"
	} else {
#line 313 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = g_strcmp0 (operator, "") == 0;
#line 2969 "ScientificCalculator.c"
	}
#line 313 "../src/Core/ScientificCalculator.vala"
	if (_tmp0_) {
#line 314 "../src/Core/ScientificCalculator.vala"
		result = TRUE;
#line 314 "../src/Core/ScientificCalculator.vala"
		return result;
#line 2977 "ScientificCalculator.c"
	}
#line 316 "../src/Core/ScientificCalculator.vala"
	result = FALSE;
#line 316 "../src/Core/ScientificCalculator.vala"
	return result;
#line 2983 "ScientificCalculator.c"
}

PebblesScientificCalculator*
pebbles_scientific_calculator_construct (GType object_type)
{
	PebblesScientificCalculator* self = NULL;
#line 24 "../src/Core/ScientificCalculator.vala"
	self = (PebblesScientificCalculator*) g_type_create_instance (object_type);
#line 24 "../src/Core/ScientificCalculator.vala"
	return self;
#line 2994 "ScientificCalculator.c"
}

PebblesScientificCalculator*
pebbles_scientific_calculator_new (void)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	return pebbles_scientific_calculator_construct (PEBBLES_TYPE_SCIENTIFIC_CALCULATOR);
#line 3002 "ScientificCalculator.c"
}

static void
pebbles_value_scientific_calculator_init (GValue* value)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	value->data[0].v_pointer = NULL;
#line 3010 "ScientificCalculator.c"
}

static void
pebbles_value_scientific_calculator_free_value (GValue* value)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	if (value->data[0].v_pointer) {
#line 24 "../src/Core/ScientificCalculator.vala"
		pebbles_scientific_calculator_unref (value->data[0].v_pointer);
#line 3020 "ScientificCalculator.c"
	}
}

static void
pebbles_value_scientific_calculator_copy_value (const GValue* src_value,
                                                GValue* dest_value)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	if (src_value->data[0].v_pointer) {
#line 24 "../src/Core/ScientificCalculator.vala"
		dest_value->data[0].v_pointer = pebbles_scientific_calculator_ref (src_value->data[0].v_pointer);
#line 3032 "ScientificCalculator.c"
	} else {
#line 24 "../src/Core/ScientificCalculator.vala"
		dest_value->data[0].v_pointer = NULL;
#line 3036 "ScientificCalculator.c"
	}
}

static gpointer
pebbles_value_scientific_calculator_peek_pointer (const GValue* value)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	return value->data[0].v_pointer;
#line 3045 "ScientificCalculator.c"
}

static gchar*
pebbles_value_scientific_calculator_collect_value (GValue* value,
                                                   guint n_collect_values,
                                                   GTypeCValue* collect_values,
                                                   guint collect_flags)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	if (collect_values[0].v_pointer) {
#line 3056 "ScientificCalculator.c"
		PebblesScientificCalculator * object;
		object = collect_values[0].v_pointer;
#line 24 "../src/Core/ScientificCalculator.vala"
		if (object->parent_instance.g_class == NULL) {
#line 24 "../src/Core/ScientificCalculator.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3063 "ScientificCalculator.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 24 "../src/Core/ScientificCalculator.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3067 "ScientificCalculator.c"
		}
#line 24 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = pebbles_scientific_calculator_ref (object);
#line 3071 "ScientificCalculator.c"
	} else {
#line 24 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 3075 "ScientificCalculator.c"
	}
#line 24 "../src/Core/ScientificCalculator.vala"
	return NULL;
#line 3079 "ScientificCalculator.c"
}

static gchar*
pebbles_value_scientific_calculator_lcopy_value (const GValue* value,
                                                 guint n_collect_values,
                                                 GTypeCValue* collect_values,
                                                 guint collect_flags)
{
	PebblesScientificCalculator ** object_p;
	object_p = collect_values[0].v_pointer;
#line 24 "../src/Core/ScientificCalculator.vala"
	if (!object_p) {
#line 24 "../src/Core/ScientificCalculator.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 3094 "ScientificCalculator.c"
	}
#line 24 "../src/Core/ScientificCalculator.vala"
	if (!value->data[0].v_pointer) {
#line 24 "../src/Core/ScientificCalculator.vala"
		*object_p = NULL;
#line 3100 "ScientificCalculator.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 24 "../src/Core/ScientificCalculator.vala"
		*object_p = value->data[0].v_pointer;
#line 3104 "ScientificCalculator.c"
	} else {
#line 24 "../src/Core/ScientificCalculator.vala"
		*object_p = pebbles_scientific_calculator_ref (value->data[0].v_pointer);
#line 3108 "ScientificCalculator.c"
	}
#line 24 "../src/Core/ScientificCalculator.vala"
	return NULL;
#line 3112 "ScientificCalculator.c"
}

GParamSpec*
pebbles_param_spec_scientific_calculator (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags)
{
	PebblesParamSpecScientificCalculator* spec;
#line 24 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_SCIENTIFIC_CALCULATOR), NULL);
#line 24 "../src/Core/ScientificCalculator.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 24 "../src/Core/ScientificCalculator.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 24 "../src/Core/ScientificCalculator.vala"
	return G_PARAM_SPEC (spec);
#line 3131 "ScientificCalculator.c"
}

gpointer
pebbles_value_get_scientific_calculator (const GValue* value)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_SCIENTIFIC_CALCULATOR), NULL);
#line 24 "../src/Core/ScientificCalculator.vala"
	return value->data[0].v_pointer;
#line 3141 "ScientificCalculator.c"
}

void
pebbles_value_set_scientific_calculator (GValue* value,
                                         gpointer v_object)
{
	PebblesScientificCalculator * old;
#line 24 "../src/Core/ScientificCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_SCIENTIFIC_CALCULATOR));
#line 24 "../src/Core/ScientificCalculator.vala"
	old = value->data[0].v_pointer;
#line 24 "../src/Core/ScientificCalculator.vala"
	if (v_object) {
#line 24 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_SCIENTIFIC_CALCULATOR));
#line 24 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 24 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 24 "../src/Core/ScientificCalculator.vala"
		pebbles_scientific_calculator_ref (value->data[0].v_pointer);
#line 3163 "ScientificCalculator.c"
	} else {
#line 24 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 3167 "ScientificCalculator.c"
	}
#line 24 "../src/Core/ScientificCalculator.vala"
	if (old) {
#line 24 "../src/Core/ScientificCalculator.vala"
		pebbles_scientific_calculator_unref (old);
#line 3173 "ScientificCalculator.c"
	}
}

void
pebbles_value_take_scientific_calculator (GValue* value,
                                          gpointer v_object)
{
	PebblesScientificCalculator * old;
#line 24 "../src/Core/ScientificCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_SCIENTIFIC_CALCULATOR));
#line 24 "../src/Core/ScientificCalculator.vala"
	old = value->data[0].v_pointer;
#line 24 "../src/Core/ScientificCalculator.vala"
	if (v_object) {
#line 24 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_SCIENTIFIC_CALCULATOR));
#line 24 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 24 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 3194 "ScientificCalculator.c"
	} else {
#line 24 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 3198 "ScientificCalculator.c"
	}
#line 24 "../src/Core/ScientificCalculator.vala"
	if (old) {
#line 24 "../src/Core/ScientificCalculator.vala"
		pebbles_scientific_calculator_unref (old);
#line 3204 "ScientificCalculator.c"
	}
}

static void
pebbles_scientific_calculator_class_init (PebblesScientificCalculatorClass * klass,
                                          gpointer klass_data)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	pebbles_scientific_calculator_parent_class = g_type_class_peek_parent (klass);
#line 24 "../src/Core/ScientificCalculator.vala"
	((PebblesScientificCalculatorClass *) klass)->finalize = pebbles_scientific_calculator_finalize;
#line 3216 "ScientificCalculator.c"
}

static void
pebbles_scientific_calculator_instance_init (PebblesScientificCalculator * self,
                                             gpointer klass)
{
#line 24 "../src/Core/ScientificCalculator.vala"
	self->ref_count = 1;
#line 3225 "ScientificCalculator.c"
}

static void
pebbles_scientific_calculator_finalize (PebblesScientificCalculator * obj)
{
	PebblesScientificCalculator * self;
#line 24 "../src/Core/ScientificCalculator.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_SCIENTIFIC_CALCULATOR, PebblesScientificCalculator);
#line 24 "../src/Core/ScientificCalculator.vala"
	g_signal_handlers_destroy (self);
#line 25 "../src/Core/ScientificCalculator.vala"
	self->tokens = (_vala_array_free (self->tokens, self->tokens_length1, (GDestroyNotify) g_free), NULL);
#line 3238 "ScientificCalculator.c"
}

static GType
pebbles_scientific_calculator_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_scientific_calculator_init, pebbles_value_scientific_calculator_free_value, pebbles_value_scientific_calculator_copy_value, pebbles_value_scientific_calculator_peek_pointer, "p", pebbles_value_scientific_calculator_collect_value, "p", pebbles_value_scientific_calculator_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesScientificCalculatorClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_scientific_calculator_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesScientificCalculator), 0, (GInstanceInitFunc) pebbles_scientific_calculator_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_scientific_calculator_type_id;
	pebbles_scientific_calculator_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesScientificCalculator", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_scientific_calculator_type_id;
}

GType
pebbles_scientific_calculator_get_type (void)
{
	static volatile gsize pebbles_scientific_calculator_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_scientific_calculator_type_id__volatile)) {
		GType pebbles_scientific_calculator_type_id;
		pebbles_scientific_calculator_type_id = pebbles_scientific_calculator_get_type_once ();
		g_once_init_leave (&pebbles_scientific_calculator_type_id__volatile, pebbles_scientific_calculator_type_id);
	}
	return pebbles_scientific_calculator_type_id__volatile;
}

gpointer
pebbles_scientific_calculator_ref (gpointer instance)
{
	PebblesScientificCalculator * self;
	self = instance;
#line 24 "../src/Core/ScientificCalculator.vala"
	g_atomic_int_inc (&self->ref_count);
#line 24 "../src/Core/ScientificCalculator.vala"
	return instance;
#line 3273 "ScientificCalculator.c"
}

void
pebbles_scientific_calculator_unref (gpointer instance)
{
	PebblesScientificCalculator * self;
	self = instance;
#line 24 "../src/Core/ScientificCalculator.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 24 "../src/Core/ScientificCalculator.vala"
		PEBBLES_SCIENTIFIC_CALCULATOR_GET_CLASS (self)->finalize (self);
#line 24 "../src/Core/ScientificCalculator.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 3287 "ScientificCalculator.c"
	}
}

static inline gpointer
pebbles_double_stack_get_instance_private (PebblesDoubleStack* self)
{
	return G_STRUCT_MEMBER_P (self, PebblesDoubleStack_private_offset);
}

PebblesDoubleStack*
pebbles_double_stack_construct (GType object_type,
                                gint num)
{
	PebblesDoubleStack* self = NULL;
	gdouble* _tmp0_;
#line 324 "../src/Core/ScientificCalculator.vala"
	self = (PebblesDoubleStack*) g_type_create_instance (object_type);
#line 325 "../src/Core/ScientificCalculator.vala"
	self->priv->n = num;
#line 326 "../src/Core/ScientificCalculator.vala"
	_tmp0_ = g_new0 (gdouble, num);
#line 326 "../src/Core/ScientificCalculator.vala"
	self->stack = (g_free (self->stack), NULL);
#line 326 "../src/Core/ScientificCalculator.vala"
	self->stack = _tmp0_;
#line 326 "../src/Core/ScientificCalculator.vala"
	self->stack_length1 = num;
#line 327 "../src/Core/ScientificCalculator.vala"
	self->priv->tp = -1;
#line 324 "../src/Core/ScientificCalculator.vala"
	return self;
#line 3319 "ScientificCalculator.c"
}

PebblesDoubleStack*
pebbles_double_stack_new (gint num)
{
#line 324 "../src/Core/ScientificCalculator.vala"
	return pebbles_double_stack_construct (PEBBLES_TYPE_DOUBLE_STACK, num);
#line 3327 "ScientificCalculator.c"
}

gboolean
pebbles_double_stack_push (PebblesDoubleStack* self,
                           gdouble elem)
{
	gboolean result = FALSE;
#line 329 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 330 "../src/Core/ScientificCalculator.vala"
	if (self->priv->tp < self->priv->n) {
#line 3339 "ScientificCalculator.c"
		gint _tmp0_;
		gdouble* _tmp1_;
		gint _tmp1__length1;
#line 331 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = self->priv->tp;
#line 331 "../src/Core/ScientificCalculator.vala"
		self->priv->tp = _tmp0_ + 1;
#line 332 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = self->stack;
#line 332 "../src/Core/ScientificCalculator.vala"
		_tmp1__length1 = self->stack_length1;
#line 332 "../src/Core/ScientificCalculator.vala"
		_tmp1_[self->priv->tp] = elem;
#line 333 "../src/Core/ScientificCalculator.vala"
		result = TRUE;
#line 333 "../src/Core/ScientificCalculator.vala"
		return result;
#line 3357 "ScientificCalculator.c"
	} else {
#line 336 "../src/Core/ScientificCalculator.vala"
		result = FALSE;
#line 336 "../src/Core/ScientificCalculator.vala"
		return result;
#line 3363 "ScientificCalculator.c"
	}
}

gdouble
pebbles_double_stack_pop (PebblesDoubleStack* self)
{
	gdouble result = 0.0;
#line 339 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 340 "../src/Core/ScientificCalculator.vala"
	if (self->priv->tp >= 0) {
#line 3375 "ScientificCalculator.c"
		gdouble* _tmp0_;
		gint _tmp0__length1;
		gdouble _tmp1_;
		gint _tmp2_;
#line 341 "../src/Core/ScientificCalculator.vala"
		_tmp0_ = self->stack;
#line 341 "../src/Core/ScientificCalculator.vala"
		_tmp0__length1 = self->stack_length1;
#line 341 "../src/Core/ScientificCalculator.vala"
		_tmp1_ = _tmp0_[self->priv->tp];
#line 341 "../src/Core/ScientificCalculator.vala"
		self->priv->temp = _tmp1_;
#line 342 "../src/Core/ScientificCalculator.vala"
		_tmp2_ = self->priv->tp;
#line 342 "../src/Core/ScientificCalculator.vala"
		self->priv->tp = _tmp2_ - 1;
#line 343 "../src/Core/ScientificCalculator.vala"
		result = self->priv->temp;
#line 343 "../src/Core/ScientificCalculator.vala"
		return result;
#line 3396 "ScientificCalculator.c"
	}
#line 345 "../src/Core/ScientificCalculator.vala"
	result = (gdouble) 0;
#line 345 "../src/Core/ScientificCalculator.vala"
	return result;
#line 3402 "ScientificCalculator.c"
}

static void
pebbles_value_double_stack_init (GValue* value)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	value->data[0].v_pointer = NULL;
#line 3410 "ScientificCalculator.c"
}

static void
pebbles_value_double_stack_free_value (GValue* value)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	if (value->data[0].v_pointer) {
#line 319 "../src/Core/ScientificCalculator.vala"
		pebbles_double_stack_unref (value->data[0].v_pointer);
#line 3420 "ScientificCalculator.c"
	}
}

static void
pebbles_value_double_stack_copy_value (const GValue* src_value,
                                       GValue* dest_value)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	if (src_value->data[0].v_pointer) {
#line 319 "../src/Core/ScientificCalculator.vala"
		dest_value->data[0].v_pointer = pebbles_double_stack_ref (src_value->data[0].v_pointer);
#line 3432 "ScientificCalculator.c"
	} else {
#line 319 "../src/Core/ScientificCalculator.vala"
		dest_value->data[0].v_pointer = NULL;
#line 3436 "ScientificCalculator.c"
	}
}

static gpointer
pebbles_value_double_stack_peek_pointer (const GValue* value)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	return value->data[0].v_pointer;
#line 3445 "ScientificCalculator.c"
}

static gchar*
pebbles_value_double_stack_collect_value (GValue* value,
                                          guint n_collect_values,
                                          GTypeCValue* collect_values,
                                          guint collect_flags)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	if (collect_values[0].v_pointer) {
#line 3456 "ScientificCalculator.c"
		PebblesDoubleStack * object;
		object = collect_values[0].v_pointer;
#line 319 "../src/Core/ScientificCalculator.vala"
		if (object->parent_instance.g_class == NULL) {
#line 319 "../src/Core/ScientificCalculator.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3463 "ScientificCalculator.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 319 "../src/Core/ScientificCalculator.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 3467 "ScientificCalculator.c"
		}
#line 319 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = pebbles_double_stack_ref (object);
#line 3471 "ScientificCalculator.c"
	} else {
#line 319 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 3475 "ScientificCalculator.c"
	}
#line 319 "../src/Core/ScientificCalculator.vala"
	return NULL;
#line 3479 "ScientificCalculator.c"
}

static gchar*
pebbles_value_double_stack_lcopy_value (const GValue* value,
                                        guint n_collect_values,
                                        GTypeCValue* collect_values,
                                        guint collect_flags)
{
	PebblesDoubleStack ** object_p;
	object_p = collect_values[0].v_pointer;
#line 319 "../src/Core/ScientificCalculator.vala"
	if (!object_p) {
#line 319 "../src/Core/ScientificCalculator.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 3494 "ScientificCalculator.c"
	}
#line 319 "../src/Core/ScientificCalculator.vala"
	if (!value->data[0].v_pointer) {
#line 319 "../src/Core/ScientificCalculator.vala"
		*object_p = NULL;
#line 3500 "ScientificCalculator.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 319 "../src/Core/ScientificCalculator.vala"
		*object_p = value->data[0].v_pointer;
#line 3504 "ScientificCalculator.c"
	} else {
#line 319 "../src/Core/ScientificCalculator.vala"
		*object_p = pebbles_double_stack_ref (value->data[0].v_pointer);
#line 3508 "ScientificCalculator.c"
	}
#line 319 "../src/Core/ScientificCalculator.vala"
	return NULL;
#line 3512 "ScientificCalculator.c"
}

GParamSpec*
pebbles_param_spec_double_stack (const gchar* name,
                                 const gchar* nick,
                                 const gchar* blurb,
                                 GType object_type,
                                 GParamFlags flags)
{
	PebblesParamSpecDoubleStack* spec;
#line 319 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_DOUBLE_STACK), NULL);
#line 319 "../src/Core/ScientificCalculator.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 319 "../src/Core/ScientificCalculator.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 319 "../src/Core/ScientificCalculator.vala"
	return G_PARAM_SPEC (spec);
#line 3531 "ScientificCalculator.c"
}

gpointer
pebbles_value_get_double_stack (const GValue* value)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DOUBLE_STACK), NULL);
#line 319 "../src/Core/ScientificCalculator.vala"
	return value->data[0].v_pointer;
#line 3541 "ScientificCalculator.c"
}

void
pebbles_value_set_double_stack (GValue* value,
                                gpointer v_object)
{
	PebblesDoubleStack * old;
#line 319 "../src/Core/ScientificCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DOUBLE_STACK));
#line 319 "../src/Core/ScientificCalculator.vala"
	old = value->data[0].v_pointer;
#line 319 "../src/Core/ScientificCalculator.vala"
	if (v_object) {
#line 319 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_DOUBLE_STACK));
#line 319 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 319 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 319 "../src/Core/ScientificCalculator.vala"
		pebbles_double_stack_ref (value->data[0].v_pointer);
#line 3563 "ScientificCalculator.c"
	} else {
#line 319 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 3567 "ScientificCalculator.c"
	}
#line 319 "../src/Core/ScientificCalculator.vala"
	if (old) {
#line 319 "../src/Core/ScientificCalculator.vala"
		pebbles_double_stack_unref (old);
#line 3573 "ScientificCalculator.c"
	}
}

void
pebbles_value_take_double_stack (GValue* value,
                                 gpointer v_object)
{
	PebblesDoubleStack * old;
#line 319 "../src/Core/ScientificCalculator.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_DOUBLE_STACK));
#line 319 "../src/Core/ScientificCalculator.vala"
	old = value->data[0].v_pointer;
#line 319 "../src/Core/ScientificCalculator.vala"
	if (v_object) {
#line 319 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_DOUBLE_STACK));
#line 319 "../src/Core/ScientificCalculator.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 319 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = v_object;
#line 3594 "ScientificCalculator.c"
	} else {
#line 319 "../src/Core/ScientificCalculator.vala"
		value->data[0].v_pointer = NULL;
#line 3598 "ScientificCalculator.c"
	}
#line 319 "../src/Core/ScientificCalculator.vala"
	if (old) {
#line 319 "../src/Core/ScientificCalculator.vala"
		pebbles_double_stack_unref (old);
#line 3604 "ScientificCalculator.c"
	}
}

static void
pebbles_double_stack_class_init (PebblesDoubleStackClass * klass,
                                 gpointer klass_data)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	pebbles_double_stack_parent_class = g_type_class_peek_parent (klass);
#line 319 "../src/Core/ScientificCalculator.vala"
	((PebblesDoubleStackClass *) klass)->finalize = pebbles_double_stack_finalize;
#line 319 "../src/Core/ScientificCalculator.vala"
	g_type_class_adjust_private_offset (klass, &PebblesDoubleStack_private_offset);
#line 3618 "ScientificCalculator.c"
}

static void
pebbles_double_stack_instance_init (PebblesDoubleStack * self,
                                    gpointer klass)
{
#line 319 "../src/Core/ScientificCalculator.vala"
	self->priv = pebbles_double_stack_get_instance_private (self);
#line 319 "../src/Core/ScientificCalculator.vala"
	self->ref_count = 1;
#line 3629 "ScientificCalculator.c"
}

static void
pebbles_double_stack_finalize (PebblesDoubleStack * obj)
{
	PebblesDoubleStack * self;
#line 319 "../src/Core/ScientificCalculator.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_DOUBLE_STACK, PebblesDoubleStack);
#line 319 "../src/Core/ScientificCalculator.vala"
	g_signal_handlers_destroy (self);
#line 320 "../src/Core/ScientificCalculator.vala"
	self->stack = (g_free (self->stack), NULL);
#line 3642 "ScientificCalculator.c"
}

static GType
pebbles_double_stack_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_double_stack_init, pebbles_value_double_stack_free_value, pebbles_value_double_stack_copy_value, pebbles_value_double_stack_peek_pointer, "p", pebbles_value_double_stack_collect_value, "p", pebbles_value_double_stack_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesDoubleStackClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_double_stack_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesDoubleStack), 0, (GInstanceInitFunc) pebbles_double_stack_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_double_stack_type_id;
	pebbles_double_stack_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesDoubleStack", &g_define_type_info, &g_define_type_fundamental_info, 0);
	PebblesDoubleStack_private_offset = g_type_add_instance_private (pebbles_double_stack_type_id, sizeof (PebblesDoubleStackPrivate));
	return pebbles_double_stack_type_id;
}

GType
pebbles_double_stack_get_type (void)
{
	static volatile gsize pebbles_double_stack_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_double_stack_type_id__volatile)) {
		GType pebbles_double_stack_type_id;
		pebbles_double_stack_type_id = pebbles_double_stack_get_type_once ();
		g_once_init_leave (&pebbles_double_stack_type_id__volatile, pebbles_double_stack_type_id);
	}
	return pebbles_double_stack_type_id__volatile;
}

gpointer
pebbles_double_stack_ref (gpointer instance)
{
	PebblesDoubleStack * self;
	self = instance;
#line 319 "../src/Core/ScientificCalculator.vala"
	g_atomic_int_inc (&self->ref_count);
#line 319 "../src/Core/ScientificCalculator.vala"
	return instance;
#line 3678 "ScientificCalculator.c"
}

void
pebbles_double_stack_unref (gpointer instance)
{
	PebblesDoubleStack * self;
	self = instance;
#line 319 "../src/Core/ScientificCalculator.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 319 "../src/Core/ScientificCalculator.vala"
		PEBBLES_DOUBLE_STACK_GET_CLASS (self)->finalize (self);
#line 319 "../src/Core/ScientificCalculator.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 3692 "ScientificCalculator.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


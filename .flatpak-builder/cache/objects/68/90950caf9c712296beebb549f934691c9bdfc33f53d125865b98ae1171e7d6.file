/* CurrencyConverter.c generated by valac 0.48.14, the Vala compiler
 * generated from CurrencyConverter.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 */
/* Using Alpha Vantage <https://www.alphavantage.co>*/
/* API KEY: RXOIDV8ZZ8W29VK9*/
/* For FCSAPI <https://fcsapi.com>*/
/* API KEY: KV9lazf1j19qahz958FCKc051xvDEc5ZcFw1v7uTbkHa9CBl6D*/

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <glib/gi18n-lib.h>
#include <granite.h>
#include <libsoup/soup.h>
#include <json-glib/json-glib.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_CURRENCY_CONVERTER (pebbles_currency_converter_get_type ())
#define PEBBLES_CURRENCY_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_CURRENCY_CONVERTER, PebblesCurrencyConverter))
#define PEBBLES_CURRENCY_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_CURRENCY_CONVERTER, PebblesCurrencyConverterClass))
#define PEBBLES_IS_CURRENCY_CONVERTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_CURRENCY_CONVERTER))
#define PEBBLES_IS_CURRENCY_CONVERTER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_CURRENCY_CONVERTER))
#define PEBBLES_CURRENCY_CONVERTER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_CURRENCY_CONVERTER, PebblesCurrencyConverterClass))

typedef struct _PebblesCurrencyConverter PebblesCurrencyConverter;
typedef struct _PebblesCurrencyConverterClass PebblesCurrencyConverterClass;
typedef struct _PebblesCurrencyConverterPrivate PebblesCurrencyConverterPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_thread_unref0(var) ((var == NULL) ? NULL : (var = (g_thread_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define PEBBLES_TYPE_SETTINGS (pebbles_settings_get_type ())
#define PEBBLES_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettings))
#define PEBBLES_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))
#define PEBBLES_IS_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_IS_SETTINGS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_SETTINGS))
#define PEBBLES_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_SETTINGS, PebblesSettingsClass))

typedef struct _PebblesSettings PebblesSettings;
typedef struct _PebblesSettingsClass PebblesSettingsClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define __vala_SoupBuffer_free0(var) ((var == NULL) ? NULL : (var = (_vala_SoupBuffer_free (var), NULL)))
#define _json_object_unref0(var) ((var == NULL) ? NULL : (var = (json_object_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
typedef struct _PebblesParamSpecCurrencyConverter PebblesParamSpecCurrencyConverter;
enum  {
	PEBBLES_CURRENCY_CONVERTER_CURRENCY_UPDATED_SIGNAL,
	PEBBLES_CURRENCY_CONVERTER_UPDATE_FAILED_SIGNAL,
	PEBBLES_CURRENCY_CONVERTER_NUM_SIGNALS
};
static guint pebbles_currency_converter_signals[PEBBLES_CURRENCY_CONVERTER_NUM_SIGNALS] = {0};

struct _PebblesCurrencyConverter {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesCurrencyConverterPrivate * priv;
	gchar** currency;
	gint currency_length1;
	gdouble* muliplier_info;
	gint muliplier_info_length1;
};

struct _PebblesCurrencyConverterClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesCurrencyConverter *self);
};

struct _PebblesParamSpecCurrencyConverter {
	GParamSpec parent_instance;
};

static gpointer pebbles_currency_converter_parent_class = NULL;

gpointer pebbles_currency_converter_ref (gpointer instance);
void pebbles_currency_converter_unref (gpointer instance);
GParamSpec* pebbles_param_spec_currency_converter (const gchar* name,
                                                   const gchar* nick,
                                                   const gchar* blurb,
                                                   GType object_type,
                                                   GParamFlags flags);
void pebbles_value_set_currency_converter (GValue* value,
                                           gpointer v_object);
void pebbles_value_take_currency_converter (GValue* value,
                                            gpointer v_object);
gpointer pebbles_value_get_currency_converter (const GValue* value);
GType pebbles_currency_converter_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesCurrencyConverter, pebbles_currency_converter_unref)
PebblesCurrencyConverter* pebbles_currency_converter_new (void);
PebblesCurrencyConverter* pebbles_currency_converter_construct (GType object_type);
gboolean pebbles_currency_converter_request_update (PebblesCurrencyConverter* self);
static gint pebbles_currency_converter_update_currency_thread (PebblesCurrencyConverter* self);
static gpointer _pebbles_currency_converter_update_currency_thread_gthread_func (gpointer self);
gboolean pebbles_currency_converter_request_multiplier (PebblesCurrencyConverter* self,
                                                        const gchar* coin_iso_a,
                                                        const gchar* coin_iso_b,
                                                        gint index);
static void pebbles_currency_converter_save (PebblesCurrencyConverter* self,
                                      gdouble* multipliers,
                                      gint multipliers_length1);
GType pebbles_settings_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesSettings, g_object_unref)
PebblesSettings* pebbles_settings_get_default (void);
const gchar* pebbles_settings_get_forex_api_key (PebblesSettings* self);
static void _vala_SoupBuffer_free (SoupBuffer* self);
gdouble* pebbles_currency_converter_load_from_save (PebblesCurrencyConverter* self,
                                                    gint* result_length1);
const gchar* pebbles_settings_get_currency_multipliers (PebblesSettings* self);
void pebbles_settings_set_currency_multipliers (PebblesSettings* self,
                                                const gchar* value);
void pebbles_settings_set_currency_update_date (PebblesSettings* self,
                                                const gchar* value);
static void g_cclosure_user_marshal_VOID__POINTER_INT (GClosure * closure,
                                                GValue * return_value,
                                                guint n_param_values,
                                                const GValue * param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
static void pebbles_currency_converter_finalize (PebblesCurrencyConverter * obj);
static GType pebbles_currency_converter_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

PebblesCurrencyConverter*
pebbles_currency_converter_construct (GType object_type)
{
	PebblesCurrencyConverter* self = NULL;
	gdouble* _tmp0_;
#line 50 "../src/Core/CurrencyConverter.vala"
	self = (PebblesCurrencyConverter*) g_type_create_instance (object_type);
#line 51 "../src/Core/CurrencyConverter.vala"
	_tmp0_ = g_new0 (gdouble, 11);
#line 51 "../src/Core/CurrencyConverter.vala"
	self->muliplier_info = (g_free (self->muliplier_info), NULL);
#line 51 "../src/Core/CurrencyConverter.vala"
	self->muliplier_info = _tmp0_;
#line 51 "../src/Core/CurrencyConverter.vala"
	self->muliplier_info_length1 = 11;
#line 50 "../src/Core/CurrencyConverter.vala"
	return self;
#line 168 "CurrencyConverter.c"
}

PebblesCurrencyConverter*
pebbles_currency_converter_new (void)
{
#line 50 "../src/Core/CurrencyConverter.vala"
	return pebbles_currency_converter_construct (PEBBLES_TYPE_CURRENCY_CONVERTER);
#line 176 "CurrencyConverter.c"
}

static gpointer
_pebbles_currency_converter_update_currency_thread_gthread_func (gpointer self)
{
	gpointer result;
	result = (gpointer) ((gintptr) pebbles_currency_converter_update_currency_thread ((PebblesCurrencyConverter*) self));
#line 62 "../src/Core/CurrencyConverter.vala"
	pebbles_currency_converter_unref (self);
#line 62 "../src/Core/CurrencyConverter.vala"
	return result;
#line 188 "CurrencyConverter.c"
}

gboolean
pebbles_currency_converter_request_update (PebblesCurrencyConverter* self)
{
	GError* _inner_error0_ = NULL;
	gboolean result = FALSE;
#line 54 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 55 "../src/Core/CurrencyConverter.vala"
	if (!g_thread_supported ()) {
#line 200 "CurrencyConverter.c"
		gchar* _tmp0_;
		gchar* _tmp1_;
#line 56 "../src/Core/CurrencyConverter.vala"
		_tmp0_ = g_strconcat (_ ("Thread support missing. Please wait for web API access…"), "\n", NULL);
#line 56 "../src/Core/CurrencyConverter.vala"
		_tmp1_ = _tmp0_;
#line 56 "../src/Core/CurrencyConverter.vala"
		g_warning ("CurrencyConverter.vala:56: %s", _tmp1_);
#line 56 "../src/Core/CurrencyConverter.vala"
		_g_free0 (_tmp1_);
#line 57 "../src/Core/CurrencyConverter.vala"
		pebbles_currency_converter_update_currency_thread (self);
#line 58 "../src/Core/CurrencyConverter.vala"
		result = TRUE;
#line 58 "../src/Core/CurrencyConverter.vala"
		return result;
#line 217 "CurrencyConverter.c"
	} else {
		{
			GThread* _tmp2_;
			GThread* _tmp3_;
#line 62 "../src/Core/CurrencyConverter.vala"
			_tmp2_ = g_thread_try_new ("thread_a", _pebbles_currency_converter_update_currency_thread_gthread_func, pebbles_currency_converter_ref (self), &_inner_error0_);
#line 62 "../src/Core/CurrencyConverter.vala"
			_tmp3_ = _tmp2_;
#line 62 "../src/Core/CurrencyConverter.vala"
			_g_thread_unref0 (_tmp3_);
#line 62 "../src/Core/CurrencyConverter.vala"
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 230 "CurrencyConverter.c"
				goto __catch0_g_error;
			}
		}
		goto __finally0;
		__catch0_g_error:
		{
			GError* e = NULL;
			GError* _tmp4_;
			const gchar* _tmp5_;
#line 61 "../src/Core/CurrencyConverter.vala"
			e = _inner_error0_;
#line 61 "../src/Core/CurrencyConverter.vala"
			_inner_error0_ = NULL;
#line 65 "../src/Core/CurrencyConverter.vala"
			_tmp4_ = e;
#line 65 "../src/Core/CurrencyConverter.vala"
			_tmp5_ = _tmp4_->message;
#line 65 "../src/Core/CurrencyConverter.vala"
			g_warning ("CurrencyConverter.vala:65: %s\n", _tmp5_);
#line 66 "../src/Core/CurrencyConverter.vala"
			result = FALSE;
#line 66 "../src/Core/CurrencyConverter.vala"
			_g_error_free0 (e);
#line 66 "../src/Core/CurrencyConverter.vala"
			return result;
#line 256 "CurrencyConverter.c"
		}
		__finally0:
#line 61 "../src/Core/CurrencyConverter.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 261 "CurrencyConverter.c"
			gboolean _tmp6_ = FALSE;
#line 61 "../src/Core/CurrencyConverter.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 61 "../src/Core/CurrencyConverter.vala"
			g_clear_error (&_inner_error0_);
#line 61 "../src/Core/CurrencyConverter.vala"
			return _tmp6_;
#line 269 "CurrencyConverter.c"
		}
	}
#line 69 "../src/Core/CurrencyConverter.vala"
	result = TRUE;
#line 69 "../src/Core/CurrencyConverter.vala"
	return result;
#line 276 "CurrencyConverter.c"
}

static gint
pebbles_currency_converter_update_currency_thread (PebblesCurrencyConverter* self)
{
	gint cnt = 0;
	gint result = 0;
#line 71 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 72 "../src/Core/CurrencyConverter.vala"
	cnt = 0;
#line 288 "CurrencyConverter.c"
	{
		gint i = 0;
#line 73 "../src/Core/CurrencyConverter.vala"
		i = 0;
#line 293 "CurrencyConverter.c"
		{
			gboolean _tmp0_ = FALSE;
#line 73 "../src/Core/CurrencyConverter.vala"
			_tmp0_ = TRUE;
#line 73 "../src/Core/CurrencyConverter.vala"
			while (TRUE) {
#line 73 "../src/Core/CurrencyConverter.vala"
				if (!_tmp0_) {
#line 302 "CurrencyConverter.c"
					gint _tmp1_;
#line 73 "../src/Core/CurrencyConverter.vala"
					_tmp1_ = i;
#line 73 "../src/Core/CurrencyConverter.vala"
					i = _tmp1_ + 1;
#line 308 "CurrencyConverter.c"
				}
#line 73 "../src/Core/CurrencyConverter.vala"
				_tmp0_ = FALSE;
#line 73 "../src/Core/CurrencyConverter.vala"
				if (!(i < 11)) {
#line 73 "../src/Core/CurrencyConverter.vala"
					break;
#line 316 "CurrencyConverter.c"
				}
				{
					gint j = 0;
#line 74 "../src/Core/CurrencyConverter.vala"
					j = 0;
#line 322 "CurrencyConverter.c"
					{
						gboolean _tmp2_ = FALSE;
#line 74 "../src/Core/CurrencyConverter.vala"
						_tmp2_ = TRUE;
#line 74 "../src/Core/CurrencyConverter.vala"
						while (TRUE) {
#line 329 "CurrencyConverter.c"
							gchar** _tmp4_;
							gint _tmp4__length1;
							const gchar* _tmp5_;
#line 74 "../src/Core/CurrencyConverter.vala"
							if (!_tmp2_) {
#line 335 "CurrencyConverter.c"
								gint _tmp3_;
#line 74 "../src/Core/CurrencyConverter.vala"
								_tmp3_ = j;
#line 74 "../src/Core/CurrencyConverter.vala"
								j = _tmp3_ + 1;
#line 341 "CurrencyConverter.c"
							}
#line 74 "../src/Core/CurrencyConverter.vala"
							_tmp2_ = FALSE;
#line 74 "../src/Core/CurrencyConverter.vala"
							if (!(j < 2)) {
#line 74 "../src/Core/CurrencyConverter.vala"
								break;
#line 349 "CurrencyConverter.c"
							}
#line 75 "../src/Core/CurrencyConverter.vala"
							_tmp4_ = self->currency;
#line 75 "../src/Core/CurrencyConverter.vala"
							_tmp4__length1 = self->currency_length1;
#line 75 "../src/Core/CurrencyConverter.vala"
							_tmp5_ = _tmp4_[i];
#line 75 "../src/Core/CurrencyConverter.vala"
							if (pebbles_currency_converter_request_multiplier (self, "USD", _tmp5_, i)) {
#line 359 "CurrencyConverter.c"
								gint _tmp6_;
#line 76 "../src/Core/CurrencyConverter.vala"
								_tmp6_ = cnt;
#line 76 "../src/Core/CurrencyConverter.vala"
								cnt = _tmp6_ + 1;
#line 77 "../src/Core/CurrencyConverter.vala"
								break;
#line 367 "CurrencyConverter.c"
							}
						}
					}
				}
			}
		}
	}
#line 81 "../src/Core/CurrencyConverter.vala"
	if (cnt < 11) {
#line 82 "../src/Core/CurrencyConverter.vala"
		g_warning ("CurrencyConverter.vala:82: %s", _ ("Failed to connect to currency exchange service"));
#line 83 "../src/Core/CurrencyConverter.vala"
		g_signal_emit (self, pebbles_currency_converter_signals[PEBBLES_CURRENCY_CONVERTER_UPDATE_FAILED_SIGNAL], 0);
#line 381 "CurrencyConverter.c"
	} else {
		gdouble* _tmp7_;
		gint _tmp7__length1;
		gdouble* _tmp8_;
		gint _tmp8__length1;
#line 86 "../src/Core/CurrencyConverter.vala"
		_tmp7_ = self->muliplier_info;
#line 86 "../src/Core/CurrencyConverter.vala"
		_tmp7__length1 = self->muliplier_info_length1;
#line 86 "../src/Core/CurrencyConverter.vala"
		g_signal_emit (self, pebbles_currency_converter_signals[PEBBLES_CURRENCY_CONVERTER_CURRENCY_UPDATED_SIGNAL], 0, _tmp7_, (gint) _tmp7__length1);
#line 87 "../src/Core/CurrencyConverter.vala"
		_tmp8_ = self->muliplier_info;
#line 87 "../src/Core/CurrencyConverter.vala"
		_tmp8__length1 = self->muliplier_info_length1;
#line 87 "../src/Core/CurrencyConverter.vala"
		pebbles_currency_converter_save (self, _tmp8_, (gint) _tmp8__length1);
#line 399 "CurrencyConverter.c"
	}
#line 89 "../src/Core/CurrencyConverter.vala"
	result = 0;
#line 89 "../src/Core/CurrencyConverter.vala"
	return result;
#line 405 "CurrencyConverter.c"
}

static void
_vala_SoupBuffer_free (SoupBuffer* self)
{
#line 105 "../src/Core/CurrencyConverter.vala"
	g_boxed_free (soup_buffer_get_type (), self);
#line 413 "CurrencyConverter.c"
}

static gpointer
_json_object_ref0 (gpointer self)
{
#line 106 "../src/Core/CurrencyConverter.vala"
	return self ? json_object_ref (self) : NULL;
#line 421 "CurrencyConverter.c"
}

gboolean
pebbles_currency_converter_request_multiplier (PebblesCurrencyConverter* self,
                                               const gchar* coin_iso_a,
                                               const gchar* coin_iso_b,
                                               gint index)
{
	PebblesSettings* settings = NULL;
	PebblesSettings* _tmp0_;
	gchar* api_key = NULL;
	PebblesSettings* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* uri = NULL;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	SoupSession* session = NULL;
	SoupSession* _tmp7_;
	SoupMessage* message = NULL;
	const gchar* _tmp8_;
	SoupMessage* _tmp9_;
	gdouble avg = 0.0;
	SoupSession* _tmp10_;
	SoupMessage* _tmp11_;
	GError* _inner_error0_ = NULL;
	gboolean result = FALSE;
#line 91 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 91 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (coin_iso_a != NULL, FALSE);
#line 91 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (coin_iso_b != NULL, FALSE);
#line 92 "../src/Core/CurrencyConverter.vala"
	_tmp0_ = pebbles_settings_get_default ();
#line 92 "../src/Core/CurrencyConverter.vala"
	settings = _tmp0_;
#line 93 "../src/Core/CurrencyConverter.vala"
	_tmp1_ = settings;
#line 93 "../src/Core/CurrencyConverter.vala"
	_tmp2_ = pebbles_settings_get_forex_api_key (_tmp1_);
#line 93 "../src/Core/CurrencyConverter.vala"
	_tmp3_ = _tmp2_;
#line 93 "../src/Core/CurrencyConverter.vala"
	_tmp4_ = g_strdup (_tmp3_);
#line 93 "../src/Core/CurrencyConverter.vala"
	api_key = _tmp4_;
#line 94 "../src/Core/CurrencyConverter.vala"
	_tmp5_ = api_key;
#line 94 "../src/Core/CurrencyConverter.vala"
	_tmp6_ = g_strdup_printf ("https://free.currencyconverterapi.com/api/v6/convert?q=%s_%s&compact=y" \
"&apiKey=%s", coin_iso_a, coin_iso_b, _tmp5_);
#line 94 "../src/Core/CurrencyConverter.vala"
	uri = _tmp6_;
#line 95 "../src/Core/CurrencyConverter.vala"
	_tmp7_ = soup_session_new ();
#line 95 "../src/Core/CurrencyConverter.vala"
	session = _tmp7_;
#line 96 "../src/Core/CurrencyConverter.vala"
	_tmp8_ = uri;
#line 96 "../src/Core/CurrencyConverter.vala"
	_tmp9_ = soup_message_new ("GET", _tmp8_);
#line 96 "../src/Core/CurrencyConverter.vala"
	message = _tmp9_;
#line 97 "../src/Core/CurrencyConverter.vala"
	avg = 0.0;
#line 99 "../src/Core/CurrencyConverter.vala"
	_tmp10_ = session;
#line 99 "../src/Core/CurrencyConverter.vala"
	_tmp11_ = message;
#line 99 "../src/Core/CurrencyConverter.vala"
	if (soup_session_send_message (_tmp10_, _tmp11_) != ((guint) 200)) {
#line 100 "../src/Core/CurrencyConverter.vala"
		result = FALSE;
#line 100 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (message);
#line 100 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (session);
#line 100 "../src/Core/CurrencyConverter.vala"
		_g_free0 (uri);
#line 100 "../src/Core/CurrencyConverter.vala"
		_g_free0 (api_key);
#line 100 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (settings);
#line 100 "../src/Core/CurrencyConverter.vala"
		return result;
#line 508 "CurrencyConverter.c"
	}
	{
		JsonParser* parser = NULL;
		JsonParser* _tmp12_;
		JsonParser* _tmp13_;
		SoupMessage* _tmp14_;
		SoupMessageBody* _tmp15_;
		SoupBuffer* _tmp16_;
		SoupBuffer* _tmp17_;
		guint8* _tmp18_;
		gint _tmp18__length1;
		JsonObject* root_object = NULL;
		JsonParser* _tmp19_;
		JsonNode* _tmp20_;
		JsonObject* _tmp21_;
		JsonObject* _tmp22_;
		JsonObject* response_object = NULL;
		JsonObject* _tmp23_;
		gchar* _tmp24_;
		gchar* _tmp25_;
		JsonObject* _tmp26_;
		JsonObject* _tmp27_;
		JsonObject* _tmp28_;
		JsonObject* _tmp29_;
		gdouble* _tmp30_;
		gint _tmp30__length1;
#line 104 "../src/Core/CurrencyConverter.vala"
		_tmp12_ = json_parser_new ();
#line 104 "../src/Core/CurrencyConverter.vala"
		parser = _tmp12_;
#line 105 "../src/Core/CurrencyConverter.vala"
		_tmp13_ = parser;
#line 105 "../src/Core/CurrencyConverter.vala"
		_tmp14_ = message;
#line 105 "../src/Core/CurrencyConverter.vala"
		_tmp15_ = _tmp14_->response_body;
#line 105 "../src/Core/CurrencyConverter.vala"
		_tmp16_ = soup_message_body_flatten (_tmp15_);
#line 105 "../src/Core/CurrencyConverter.vala"
		_tmp17_ = _tmp16_;
#line 105 "../src/Core/CurrencyConverter.vala"
		_tmp18_ = _tmp17_->data;
#line 105 "../src/Core/CurrencyConverter.vala"
		_tmp18__length1 = _tmp17_->length;
#line 105 "../src/Core/CurrencyConverter.vala"
		json_parser_load_from_data (_tmp13_, (const gchar*) _tmp18_, (gssize) -1, &_inner_error0_);
#line 105 "../src/Core/CurrencyConverter.vala"
		__vala_SoupBuffer_free0 (_tmp17_);
#line 105 "../src/Core/CurrencyConverter.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 105 "../src/Core/CurrencyConverter.vala"
			_g_object_unref0 (parser);
#line 561 "CurrencyConverter.c"
			goto __catch0_g_error;
		}
#line 106 "../src/Core/CurrencyConverter.vala"
		_tmp19_ = parser;
#line 106 "../src/Core/CurrencyConverter.vala"
		_tmp20_ = json_parser_get_root (_tmp19_);
#line 106 "../src/Core/CurrencyConverter.vala"
		_tmp21_ = json_node_get_object (_tmp20_);
#line 106 "../src/Core/CurrencyConverter.vala"
		_tmp22_ = _json_object_ref0 (_tmp21_);
#line 106 "../src/Core/CurrencyConverter.vala"
		root_object = _tmp22_;
#line 107 "../src/Core/CurrencyConverter.vala"
		_tmp23_ = root_object;
#line 107 "../src/Core/CurrencyConverter.vala"
		_tmp24_ = g_strdup_printf ("%s_%s", coin_iso_a, coin_iso_b);
#line 107 "../src/Core/CurrencyConverter.vala"
		_tmp25_ = _tmp24_;
#line 107 "../src/Core/CurrencyConverter.vala"
		_tmp26_ = json_object_get_object_member (_tmp23_, _tmp25_);
#line 107 "../src/Core/CurrencyConverter.vala"
		_tmp27_ = _json_object_ref0 (_tmp26_);
#line 107 "../src/Core/CurrencyConverter.vala"
		_tmp28_ = _tmp27_;
#line 107 "../src/Core/CurrencyConverter.vala"
		_g_free0 (_tmp25_);
#line 107 "../src/Core/CurrencyConverter.vala"
		response_object = _tmp28_;
#line 108 "../src/Core/CurrencyConverter.vala"
		_tmp29_ = response_object;
#line 108 "../src/Core/CurrencyConverter.vala"
		avg = json_object_get_double_member (_tmp29_, "val");
#line 109 "../src/Core/CurrencyConverter.vala"
		_tmp30_ = self->muliplier_info;
#line 109 "../src/Core/CurrencyConverter.vala"
		_tmp30__length1 = self->muliplier_info_length1;
#line 109 "../src/Core/CurrencyConverter.vala"
		_tmp30_[index] = avg;
#line 103 "../src/Core/CurrencyConverter.vala"
		_json_object_unref0 (response_object);
#line 103 "../src/Core/CurrencyConverter.vala"
		_json_object_unref0 (root_object);
#line 103 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (parser);
#line 606 "CurrencyConverter.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp31_;
		const gchar* _tmp32_;
#line 103 "../src/Core/CurrencyConverter.vala"
		e = _inner_error0_;
#line 103 "../src/Core/CurrencyConverter.vala"
		_inner_error0_ = NULL;
#line 112 "../src/Core/CurrencyConverter.vala"
		_tmp31_ = e;
#line 112 "../src/Core/CurrencyConverter.vala"
		_tmp32_ = _tmp31_->message;
#line 112 "../src/Core/CurrencyConverter.vala"
		g_warning (_ ("Failed to connect to service: %s"), _tmp32_);
#line 113 "../src/Core/CurrencyConverter.vala"
		result = FALSE;
#line 113 "../src/Core/CurrencyConverter.vala"
		_g_error_free0 (e);
#line 113 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (message);
#line 113 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (session);
#line 113 "../src/Core/CurrencyConverter.vala"
		_g_free0 (uri);
#line 113 "../src/Core/CurrencyConverter.vala"
		_g_free0 (api_key);
#line 113 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (settings);
#line 113 "../src/Core/CurrencyConverter.vala"
		return result;
#line 640 "CurrencyConverter.c"
	}
	__finally0:
#line 103 "../src/Core/CurrencyConverter.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 645 "CurrencyConverter.c"
		gboolean _tmp33_ = FALSE;
#line 103 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (message);
#line 103 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (session);
#line 103 "../src/Core/CurrencyConverter.vala"
		_g_free0 (uri);
#line 103 "../src/Core/CurrencyConverter.vala"
		_g_free0 (api_key);
#line 103 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (settings);
#line 103 "../src/Core/CurrencyConverter.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 103 "../src/Core/CurrencyConverter.vala"
		g_clear_error (&_inner_error0_);
#line 103 "../src/Core/CurrencyConverter.vala"
		return _tmp33_;
#line 663 "CurrencyConverter.c"
	}
#line 115 "../src/Core/CurrencyConverter.vala"
	result = TRUE;
#line 115 "../src/Core/CurrencyConverter.vala"
	_g_object_unref0 (message);
#line 115 "../src/Core/CurrencyConverter.vala"
	_g_object_unref0 (session);
#line 115 "../src/Core/CurrencyConverter.vala"
	_g_free0 (uri);
#line 115 "../src/Core/CurrencyConverter.vala"
	_g_free0 (api_key);
#line 115 "../src/Core/CurrencyConverter.vala"
	_g_object_unref0 (settings);
#line 115 "../src/Core/CurrencyConverter.vala"
	return result;
#line 679 "CurrencyConverter.c"
}

static gdouble
double_parse (const gchar* str)
{
	gdouble result = 0.0;
#line 995 "glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0.0);
#line 996 "glib-2.0.vapi"
	result = g_ascii_strtod (str, NULL);
#line 996 "glib-2.0.vapi"
	return result;
#line 692 "CurrencyConverter.c"
}

gdouble*
pebbles_currency_converter_load_from_save (PebblesCurrencyConverter* self,
                                           gint* result_length1)
{
	PebblesSettings* settings = NULL;
	PebblesSettings* _tmp0_;
	gchar* data_set = NULL;
	PebblesSettings* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gdouble* multipliers = NULL;
	gint multipliers_length1 = 0;
	gint _multipliers_size_ = 0;
	const gchar* _tmp5_;
	gdouble* _tmp18_;
	gint _tmp18__length1;
	gdouble* result = NULL;
#line 118 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 119 "../src/Core/CurrencyConverter.vala"
	_tmp0_ = pebbles_settings_get_default ();
#line 119 "../src/Core/CurrencyConverter.vala"
	settings = _tmp0_;
#line 120 "../src/Core/CurrencyConverter.vala"
	_tmp1_ = settings;
#line 120 "../src/Core/CurrencyConverter.vala"
	_tmp2_ = pebbles_settings_get_currency_multipliers (_tmp1_);
#line 120 "../src/Core/CurrencyConverter.vala"
	_tmp3_ = _tmp2_;
#line 120 "../src/Core/CurrencyConverter.vala"
	_tmp4_ = g_strdup (_tmp3_);
#line 120 "../src/Core/CurrencyConverter.vala"
	data_set = _tmp4_;
#line 122 "../src/Core/CurrencyConverter.vala"
	_tmp5_ = data_set;
#line 122 "../src/Core/CurrencyConverter.vala"
	if (g_strcmp0 (_tmp5_, "") != 0) {
#line 733 "CurrencyConverter.c"
		gchar** token = NULL;
		const gchar* _tmp6_;
		gchar** _tmp7_;
		gchar** _tmp8_;
		gint token_length1;
		gint _token_size_;
		gchar** _tmp9_;
		gint _tmp9__length1;
		gdouble* _tmp10_;
		gdouble* _tmp17_;
		gint _tmp17__length1;
#line 123 "../src/Core/CurrencyConverter.vala"
		_tmp6_ = data_set;
#line 123 "../src/Core/CurrencyConverter.vala"
		_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, "[&&]", 0);
#line 123 "../src/Core/CurrencyConverter.vala"
		token = _tmp8_;
#line 123 "../src/Core/CurrencyConverter.vala"
		token_length1 = _vala_array_length (_tmp7_);
#line 123 "../src/Core/CurrencyConverter.vala"
		_token_size_ = token_length1;
#line 124 "../src/Core/CurrencyConverter.vala"
		_tmp9_ = token;
#line 124 "../src/Core/CurrencyConverter.vala"
		_tmp9__length1 = token_length1;
#line 124 "../src/Core/CurrencyConverter.vala"
		_tmp10_ = g_new0 (gdouble, _tmp9__length1);
#line 124 "../src/Core/CurrencyConverter.vala"
		multipliers = (g_free (multipliers), NULL);
#line 124 "../src/Core/CurrencyConverter.vala"
		multipliers = _tmp10_;
#line 124 "../src/Core/CurrencyConverter.vala"
		multipliers_length1 = _tmp9__length1;
#line 124 "../src/Core/CurrencyConverter.vala"
		_multipliers_size_ = multipliers_length1;
#line 769 "CurrencyConverter.c"
		{
			gint i = 0;
#line 125 "../src/Core/CurrencyConverter.vala"
			i = 0;
#line 774 "CurrencyConverter.c"
			{
				gboolean _tmp11_ = FALSE;
#line 125 "../src/Core/CurrencyConverter.vala"
				_tmp11_ = TRUE;
#line 125 "../src/Core/CurrencyConverter.vala"
				while (TRUE) {
#line 781 "CurrencyConverter.c"
					gchar** _tmp13_;
					gint _tmp13__length1;
					gdouble* _tmp14_;
					gint _tmp14__length1;
					gchar** _tmp15_;
					gint _tmp15__length1;
					const gchar* _tmp16_;
#line 125 "../src/Core/CurrencyConverter.vala"
					if (!_tmp11_) {
#line 791 "CurrencyConverter.c"
						gint _tmp12_;
#line 125 "../src/Core/CurrencyConverter.vala"
						_tmp12_ = i;
#line 125 "../src/Core/CurrencyConverter.vala"
						i = _tmp12_ + 1;
#line 797 "CurrencyConverter.c"
					}
#line 125 "../src/Core/CurrencyConverter.vala"
					_tmp11_ = FALSE;
#line 125 "../src/Core/CurrencyConverter.vala"
					_tmp13_ = token;
#line 125 "../src/Core/CurrencyConverter.vala"
					_tmp13__length1 = token_length1;
#line 125 "../src/Core/CurrencyConverter.vala"
					if (!(i < _tmp13__length1)) {
#line 125 "../src/Core/CurrencyConverter.vala"
						break;
#line 809 "CurrencyConverter.c"
					}
#line 126 "../src/Core/CurrencyConverter.vala"
					_tmp14_ = multipliers;
#line 126 "../src/Core/CurrencyConverter.vala"
					_tmp14__length1 = multipliers_length1;
#line 126 "../src/Core/CurrencyConverter.vala"
					_tmp15_ = token;
#line 126 "../src/Core/CurrencyConverter.vala"
					_tmp15__length1 = token_length1;
#line 126 "../src/Core/CurrencyConverter.vala"
					_tmp16_ = _tmp15_[i];
#line 126 "../src/Core/CurrencyConverter.vala"
					_tmp14_[i] = double_parse (_tmp16_);
#line 823 "CurrencyConverter.c"
				}
			}
		}
#line 128 "../src/Core/CurrencyConverter.vala"
		_tmp17_ = multipliers;
#line 128 "../src/Core/CurrencyConverter.vala"
		_tmp17__length1 = multipliers_length1;
#line 128 "../src/Core/CurrencyConverter.vala"
		if (result_length1) {
#line 128 "../src/Core/CurrencyConverter.vala"
			*result_length1 = _tmp17__length1;
#line 835 "CurrencyConverter.c"
		}
#line 128 "../src/Core/CurrencyConverter.vala"
		result = _tmp17_;
#line 128 "../src/Core/CurrencyConverter.vala"
		token = (_vala_array_free (token, token_length1, (GDestroyNotify) g_free), NULL);
#line 128 "../src/Core/CurrencyConverter.vala"
		_g_free0 (data_set);
#line 128 "../src/Core/CurrencyConverter.vala"
		_g_object_unref0 (settings);
#line 128 "../src/Core/CurrencyConverter.vala"
		return result;
#line 847 "CurrencyConverter.c"
	}
#line 130 "../src/Core/CurrencyConverter.vala"
	_tmp18_ = NULL;
#line 130 "../src/Core/CurrencyConverter.vala"
	_tmp18__length1 = 0;
#line 130 "../src/Core/CurrencyConverter.vala"
	if (result_length1) {
#line 130 "../src/Core/CurrencyConverter.vala"
		*result_length1 = _tmp18__length1;
#line 857 "CurrencyConverter.c"
	}
#line 130 "../src/Core/CurrencyConverter.vala"
	result = _tmp18_;
#line 130 "../src/Core/CurrencyConverter.vala"
	multipliers = (g_free (multipliers), NULL);
#line 130 "../src/Core/CurrencyConverter.vala"
	_g_free0 (data_set);
#line 130 "../src/Core/CurrencyConverter.vala"
	_g_object_unref0 (settings);
#line 130 "../src/Core/CurrencyConverter.vala"
	return result;
#line 869 "CurrencyConverter.c"
}

static gchar*
double_to_string (gdouble self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gint _tmp1__length1;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* result = NULL;
#line 989 "glib-2.0.vapi"
	_tmp0_ = g_new0 (gchar, G_ASCII_DTOSTR_BUF_SIZE);
#line 989 "glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 989 "glib-2.0.vapi"
	_tmp1__length1 = G_ASCII_DTOSTR_BUF_SIZE;
#line 989 "glib-2.0.vapi"
	_tmp2_ = g_ascii_dtostr (_tmp1_, (gint) G_ASCII_DTOSTR_BUF_SIZE, self);
#line 989 "glib-2.0.vapi"
	_tmp3_ = g_strdup (_tmp2_);
#line 989 "glib-2.0.vapi"
	_tmp4_ = _tmp3_;
#line 989 "glib-2.0.vapi"
	_tmp1_ = (g_free (_tmp1_), NULL);
#line 989 "glib-2.0.vapi"
	result = _tmp4_;
#line 989 "glib-2.0.vapi"
	return result;
#line 900 "CurrencyConverter.c"
}

static void
pebbles_currency_converter_save (PebblesCurrencyConverter* self,
                                 gdouble* multipliers,
                                 gint multipliers_length1)
{
	gchar* save_data = NULL;
	gchar* _tmp0_;
	GDateTime* date_time = NULL;
	GDateTime* _tmp10_;
	PebblesSettings* settings = NULL;
	PebblesSettings* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
#line 134 "../src/Core/CurrencyConverter.vala"
	g_return_if_fail (self != NULL);
#line 135 "../src/Core/CurrencyConverter.vala"
	_tmp0_ = g_strdup ("");
#line 135 "../src/Core/CurrencyConverter.vala"
	save_data = _tmp0_;
#line 923 "CurrencyConverter.c"
	{
		gint i = 0;
#line 136 "../src/Core/CurrencyConverter.vala"
		i = 0;
#line 928 "CurrencyConverter.c"
		{
			gboolean _tmp1_ = FALSE;
#line 136 "../src/Core/CurrencyConverter.vala"
			_tmp1_ = TRUE;
#line 136 "../src/Core/CurrencyConverter.vala"
			while (TRUE) {
#line 935 "CurrencyConverter.c"
				const gchar* _tmp3_;
				gdouble _tmp4_;
				gchar* _tmp5_;
				gchar* _tmp6_;
				gchar* _tmp7_;
#line 136 "../src/Core/CurrencyConverter.vala"
				if (!_tmp1_) {
#line 943 "CurrencyConverter.c"
					gint _tmp2_;
#line 136 "../src/Core/CurrencyConverter.vala"
					_tmp2_ = i;
#line 136 "../src/Core/CurrencyConverter.vala"
					i = _tmp2_ + 1;
#line 949 "CurrencyConverter.c"
				}
#line 136 "../src/Core/CurrencyConverter.vala"
				_tmp1_ = FALSE;
#line 136 "../src/Core/CurrencyConverter.vala"
				if (!(i < multipliers_length1)) {
#line 136 "../src/Core/CurrencyConverter.vala"
					break;
#line 957 "CurrencyConverter.c"
				}
#line 137 "../src/Core/CurrencyConverter.vala"
				_tmp3_ = save_data;
#line 137 "../src/Core/CurrencyConverter.vala"
				_tmp4_ = multipliers[i];
#line 137 "../src/Core/CurrencyConverter.vala"
				_tmp5_ = double_to_string (_tmp4_);
#line 137 "../src/Core/CurrencyConverter.vala"
				_tmp6_ = _tmp5_;
#line 137 "../src/Core/CurrencyConverter.vala"
				_tmp7_ = g_strconcat (_tmp3_, _tmp6_, NULL);
#line 137 "../src/Core/CurrencyConverter.vala"
				_g_free0 (save_data);
#line 137 "../src/Core/CurrencyConverter.vala"
				save_data = _tmp7_;
#line 137 "../src/Core/CurrencyConverter.vala"
				_g_free0 (_tmp6_);
#line 138 "../src/Core/CurrencyConverter.vala"
				if (i < (multipliers_length1 - 1)) {
#line 977 "CurrencyConverter.c"
					const gchar* _tmp8_;
					gchar* _tmp9_;
#line 139 "../src/Core/CurrencyConverter.vala"
					_tmp8_ = save_data;
#line 139 "../src/Core/CurrencyConverter.vala"
					_tmp9_ = g_strconcat (_tmp8_, "[&&]", NULL);
#line 139 "../src/Core/CurrencyConverter.vala"
					_g_free0 (save_data);
#line 139 "../src/Core/CurrencyConverter.vala"
					save_data = _tmp9_;
#line 988 "CurrencyConverter.c"
				}
			}
		}
	}
#line 142 "../src/Core/CurrencyConverter.vala"
	_tmp10_ = g_date_time_new_now_local ();
#line 142 "../src/Core/CurrencyConverter.vala"
	date_time = _tmp10_;
#line 143 "../src/Core/CurrencyConverter.vala"
	_tmp11_ = pebbles_settings_get_default ();
#line 143 "../src/Core/CurrencyConverter.vala"
	settings = _tmp11_;
#line 144 "../src/Core/CurrencyConverter.vala"
	_tmp12_ = save_data;
#line 144 "../src/Core/CurrencyConverter.vala"
	pebbles_settings_set_currency_multipliers (settings, _tmp12_);
#line 145 "../src/Core/CurrencyConverter.vala"
	_tmp13_ = g_date_time_format (date_time, "%x");
#line 145 "../src/Core/CurrencyConverter.vala"
	_tmp14_ = _tmp13_;
#line 145 "../src/Core/CurrencyConverter.vala"
	pebbles_settings_set_currency_update_date (settings, _tmp14_);
#line 145 "../src/Core/CurrencyConverter.vala"
	_g_free0 (_tmp14_);
#line 134 "../src/Core/CurrencyConverter.vala"
	_g_object_unref0 (settings);
#line 134 "../src/Core/CurrencyConverter.vala"
	_g_date_time_unref0 (date_time);
#line 134 "../src/Core/CurrencyConverter.vala"
	_g_free0 (save_data);
#line 1019 "CurrencyConverter.c"
}

static void
g_cclosure_user_marshal_VOID__POINTER_INT (GClosure * closure,
                                           GValue * return_value,
                                           guint n_param_values,
                                           const GValue * param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__POINTER_INT) (gpointer data1, gpointer arg_1, gint arg_2, gpointer data2);
	register GMarshalFunc_VOID__POINTER_INT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 31 "../src/Core/CurrencyConverter.vala"
	g_return_if_fail (n_param_values == 3);
#line 31 "../src/Core/CurrencyConverter.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 31 "../src/Core/CurrencyConverter.vala"
		data1 = closure->data;
#line 31 "../src/Core/CurrencyConverter.vala"
		data2 = param_values->data[0].v_pointer;
#line 1044 "CurrencyConverter.c"
	} else {
#line 31 "../src/Core/CurrencyConverter.vala"
		data1 = param_values->data[0].v_pointer;
#line 31 "../src/Core/CurrencyConverter.vala"
		data2 = closure->data;
#line 1050 "CurrencyConverter.c"
	}
#line 31 "../src/Core/CurrencyConverter.vala"
	callback = (GMarshalFunc_VOID__POINTER_INT) (marshal_data ? marshal_data : cc->callback);
#line 31 "../src/Core/CurrencyConverter.vala"
	callback (data1, g_value_get_pointer (param_values + 1), g_value_get_int (param_values + 2), data2);
#line 1056 "CurrencyConverter.c"
}

static void
pebbles_value_currency_converter_init (GValue* value)
{
#line 31 "../src/Core/CurrencyConverter.vala"
	value->data[0].v_pointer = NULL;
#line 1064 "CurrencyConverter.c"
}

static void
pebbles_value_currency_converter_free_value (GValue* value)
{
#line 31 "../src/Core/CurrencyConverter.vala"
	if (value->data[0].v_pointer) {
#line 31 "../src/Core/CurrencyConverter.vala"
		pebbles_currency_converter_unref (value->data[0].v_pointer);
#line 1074 "CurrencyConverter.c"
	}
}

static void
pebbles_value_currency_converter_copy_value (const GValue* src_value,
                                             GValue* dest_value)
{
#line 31 "../src/Core/CurrencyConverter.vala"
	if (src_value->data[0].v_pointer) {
#line 31 "../src/Core/CurrencyConverter.vala"
		dest_value->data[0].v_pointer = pebbles_currency_converter_ref (src_value->data[0].v_pointer);
#line 1086 "CurrencyConverter.c"
	} else {
#line 31 "../src/Core/CurrencyConverter.vala"
		dest_value->data[0].v_pointer = NULL;
#line 1090 "CurrencyConverter.c"
	}
}

static gpointer
pebbles_value_currency_converter_peek_pointer (const GValue* value)
{
#line 31 "../src/Core/CurrencyConverter.vala"
	return value->data[0].v_pointer;
#line 1099 "CurrencyConverter.c"
}

static gchar*
pebbles_value_currency_converter_collect_value (GValue* value,
                                                guint n_collect_values,
                                                GTypeCValue* collect_values,
                                                guint collect_flags)
{
#line 31 "../src/Core/CurrencyConverter.vala"
	if (collect_values[0].v_pointer) {
#line 1110 "CurrencyConverter.c"
		PebblesCurrencyConverter * object;
		object = collect_values[0].v_pointer;
#line 31 "../src/Core/CurrencyConverter.vala"
		if (object->parent_instance.g_class == NULL) {
#line 31 "../src/Core/CurrencyConverter.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 1117 "CurrencyConverter.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 31 "../src/Core/CurrencyConverter.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 1121 "CurrencyConverter.c"
		}
#line 31 "../src/Core/CurrencyConverter.vala"
		value->data[0].v_pointer = pebbles_currency_converter_ref (object);
#line 1125 "CurrencyConverter.c"
	} else {
#line 31 "../src/Core/CurrencyConverter.vala"
		value->data[0].v_pointer = NULL;
#line 1129 "CurrencyConverter.c"
	}
#line 31 "../src/Core/CurrencyConverter.vala"
	return NULL;
#line 1133 "CurrencyConverter.c"
}

static gchar*
pebbles_value_currency_converter_lcopy_value (const GValue* value,
                                              guint n_collect_values,
                                              GTypeCValue* collect_values,
                                              guint collect_flags)
{
	PebblesCurrencyConverter ** object_p;
	object_p = collect_values[0].v_pointer;
#line 31 "../src/Core/CurrencyConverter.vala"
	if (!object_p) {
#line 31 "../src/Core/CurrencyConverter.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 1148 "CurrencyConverter.c"
	}
#line 31 "../src/Core/CurrencyConverter.vala"
	if (!value->data[0].v_pointer) {
#line 31 "../src/Core/CurrencyConverter.vala"
		*object_p = NULL;
#line 1154 "CurrencyConverter.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 31 "../src/Core/CurrencyConverter.vala"
		*object_p = value->data[0].v_pointer;
#line 1158 "CurrencyConverter.c"
	} else {
#line 31 "../src/Core/CurrencyConverter.vala"
		*object_p = pebbles_currency_converter_ref (value->data[0].v_pointer);
#line 1162 "CurrencyConverter.c"
	}
#line 31 "../src/Core/CurrencyConverter.vala"
	return NULL;
#line 1166 "CurrencyConverter.c"
}

GParamSpec*
pebbles_param_spec_currency_converter (const gchar* name,
                                       const gchar* nick,
                                       const gchar* blurb,
                                       GType object_type,
                                       GParamFlags flags)
{
	PebblesParamSpecCurrencyConverter* spec;
#line 31 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_CURRENCY_CONVERTER), NULL);
#line 31 "../src/Core/CurrencyConverter.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 31 "../src/Core/CurrencyConverter.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 31 "../src/Core/CurrencyConverter.vala"
	return G_PARAM_SPEC (spec);
#line 1185 "CurrencyConverter.c"
}

gpointer
pebbles_value_get_currency_converter (const GValue* value)
{
#line 31 "../src/Core/CurrencyConverter.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CURRENCY_CONVERTER), NULL);
#line 31 "../src/Core/CurrencyConverter.vala"
	return value->data[0].v_pointer;
#line 1195 "CurrencyConverter.c"
}

void
pebbles_value_set_currency_converter (GValue* value,
                                      gpointer v_object)
{
	PebblesCurrencyConverter * old;
#line 31 "../src/Core/CurrencyConverter.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CURRENCY_CONVERTER));
#line 31 "../src/Core/CurrencyConverter.vala"
	old = value->data[0].v_pointer;
#line 31 "../src/Core/CurrencyConverter.vala"
	if (v_object) {
#line 31 "../src/Core/CurrencyConverter.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_CURRENCY_CONVERTER));
#line 31 "../src/Core/CurrencyConverter.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 31 "../src/Core/CurrencyConverter.vala"
		value->data[0].v_pointer = v_object;
#line 31 "../src/Core/CurrencyConverter.vala"
		pebbles_currency_converter_ref (value->data[0].v_pointer);
#line 1217 "CurrencyConverter.c"
	} else {
#line 31 "../src/Core/CurrencyConverter.vala"
		value->data[0].v_pointer = NULL;
#line 1221 "CurrencyConverter.c"
	}
#line 31 "../src/Core/CurrencyConverter.vala"
	if (old) {
#line 31 "../src/Core/CurrencyConverter.vala"
		pebbles_currency_converter_unref (old);
#line 1227 "CurrencyConverter.c"
	}
}

void
pebbles_value_take_currency_converter (GValue* value,
                                       gpointer v_object)
{
	PebblesCurrencyConverter * old;
#line 31 "../src/Core/CurrencyConverter.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CURRENCY_CONVERTER));
#line 31 "../src/Core/CurrencyConverter.vala"
	old = value->data[0].v_pointer;
#line 31 "../src/Core/CurrencyConverter.vala"
	if (v_object) {
#line 31 "../src/Core/CurrencyConverter.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_CURRENCY_CONVERTER));
#line 31 "../src/Core/CurrencyConverter.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 31 "../src/Core/CurrencyConverter.vala"
		value->data[0].v_pointer = v_object;
#line 1248 "CurrencyConverter.c"
	} else {
#line 31 "../src/Core/CurrencyConverter.vala"
		value->data[0].v_pointer = NULL;
#line 1252 "CurrencyConverter.c"
	}
#line 31 "../src/Core/CurrencyConverter.vala"
	if (old) {
#line 31 "../src/Core/CurrencyConverter.vala"
		pebbles_currency_converter_unref (old);
#line 1258 "CurrencyConverter.c"
	}
}

static void
pebbles_currency_converter_class_init (PebblesCurrencyConverterClass * klass,
                                       gpointer klass_data)
{
#line 31 "../src/Core/CurrencyConverter.vala"
	pebbles_currency_converter_parent_class = g_type_class_peek_parent (klass);
#line 31 "../src/Core/CurrencyConverter.vala"
	((PebblesCurrencyConverterClass *) klass)->finalize = pebbles_currency_converter_finalize;
#line 31 "../src/Core/CurrencyConverter.vala"
	pebbles_currency_converter_signals[PEBBLES_CURRENCY_CONVERTER_CURRENCY_UPDATED_SIGNAL] = g_signal_new ("currency-updated", PEBBLES_TYPE_CURRENCY_CONVERTER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__POINTER_INT, G_TYPE_NONE, 2, G_TYPE_POINTER, G_TYPE_INT);
#line 31 "../src/Core/CurrencyConverter.vala"
	pebbles_currency_converter_signals[PEBBLES_CURRENCY_CONVERTER_UPDATE_FAILED_SIGNAL] = g_signal_new ("update-failed", PEBBLES_TYPE_CURRENCY_CONVERTER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1274 "CurrencyConverter.c"
}

static void
pebbles_currency_converter_instance_init (PebblesCurrencyConverter * self,
                                          gpointer klass)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar** _tmp11_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp0_ = g_strdup ("USD");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp1_ = g_strdup ("EUR");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp2_ = g_strdup ("GBP");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp3_ = g_strdup ("AUD");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp4_ = g_strdup ("BRL");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp5_ = g_strdup ("CAD");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp6_ = g_strdup ("CNY");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp7_ = g_strdup ("INR");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp8_ = g_strdup ("JPY");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp9_ = g_strdup ("RUB");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp10_ = g_strdup ("ZAR");
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_ = g_new0 (gchar*, 11 + 1);
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[0] = _tmp0_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[1] = _tmp1_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[2] = _tmp2_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[3] = _tmp3_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[4] = _tmp4_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[5] = _tmp5_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[6] = _tmp6_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[7] = _tmp7_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[8] = _tmp8_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[9] = _tmp9_;
#line 32 "../src/Core/CurrencyConverter.vala"
	_tmp11_[10] = _tmp10_;
#line 32 "../src/Core/CurrencyConverter.vala"
	self->currency = _tmp11_;
#line 32 "../src/Core/CurrencyConverter.vala"
	self->currency_length1 = 11;
#line 31 "../src/Core/CurrencyConverter.vala"
	self->ref_count = 1;
#line 1345 "CurrencyConverter.c"
}

static void
pebbles_currency_converter_finalize (PebblesCurrencyConverter * obj)
{
	PebblesCurrencyConverter * self;
#line 31 "../src/Core/CurrencyConverter.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_CURRENCY_CONVERTER, PebblesCurrencyConverter);
#line 31 "../src/Core/CurrencyConverter.vala"
	g_signal_handlers_destroy (self);
#line 32 "../src/Core/CurrencyConverter.vala"
	self->currency = (_vala_array_free (self->currency, self->currency_length1, (GDestroyNotify) g_free), NULL);
#line 45 "../src/Core/CurrencyConverter.vala"
	self->muliplier_info = (g_free (self->muliplier_info), NULL);
#line 1360 "CurrencyConverter.c"
}

static GType
pebbles_currency_converter_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_currency_converter_init, pebbles_value_currency_converter_free_value, pebbles_value_currency_converter_copy_value, pebbles_value_currency_converter_peek_pointer, "p", pebbles_value_currency_converter_collect_value, "p", pebbles_value_currency_converter_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesCurrencyConverterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_currency_converter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesCurrencyConverter), 0, (GInstanceInitFunc) pebbles_currency_converter_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_currency_converter_type_id;
	pebbles_currency_converter_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesCurrencyConverter", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_currency_converter_type_id;
}

GType
pebbles_currency_converter_get_type (void)
{
	static volatile gsize pebbles_currency_converter_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_currency_converter_type_id__volatile)) {
		GType pebbles_currency_converter_type_id;
		pebbles_currency_converter_type_id = pebbles_currency_converter_get_type_once ();
		g_once_init_leave (&pebbles_currency_converter_type_id__volatile, pebbles_currency_converter_type_id);
	}
	return pebbles_currency_converter_type_id__volatile;
}

gpointer
pebbles_currency_converter_ref (gpointer instance)
{
	PebblesCurrencyConverter * self;
	self = instance;
#line 31 "../src/Core/CurrencyConverter.vala"
	g_atomic_int_inc (&self->ref_count);
#line 31 "../src/Core/CurrencyConverter.vala"
	return instance;
#line 1395 "CurrencyConverter.c"
}

void
pebbles_currency_converter_unref (gpointer instance)
{
	PebblesCurrencyConverter * self;
	self = instance;
#line 31 "../src/Core/CurrencyConverter.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 31 "../src/Core/CurrencyConverter.vala"
		PEBBLES_CURRENCY_CONVERTER_GET_CLASS (self)->finalize (self);
#line 31 "../src/Core/CurrencyConverter.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1409 "CurrencyConverter.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


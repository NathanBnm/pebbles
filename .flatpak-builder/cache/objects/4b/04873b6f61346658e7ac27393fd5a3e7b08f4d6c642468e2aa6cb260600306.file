/* Color.c generated by valac 0.48.14, the Vala compiler
 * generated from Color.vala, do not modify */

/*
 *  Copyright (c) 2019 elementary, Inc. (https://elementary.io)
 *                2011–2013 Robert Dyer
 *
 *  This program or library is free software; you can redistribute it
 *  and/or modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General
 *  Public License along with this library; if not, write to the
 *  Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 *  Boston, MA 02110-1301 USA.
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <gdk/gdk.h>

#define GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE (granite_services_settings_serializable_get_type ())
#define GRANITE_SERVICES_SETTINGS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE, GraniteServicesSettingsSerializable))
#define GRANITE_SERVICES_IS_SETTINGS_SERIALIZABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE))
#define GRANITE_SERVICES_SETTINGS_SERIALIZABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE, GraniteServicesSettingsSerializableIface))

typedef struct _GraniteServicesSettingsSerializable GraniteServicesSettingsSerializable;
typedef struct _GraniteServicesSettingsSerializableIface GraniteServicesSettingsSerializableIface;

#define GRANITE_DRAWING_TYPE_COLOR (granite_drawing_color_get_type ())
#define GRANITE_DRAWING_COLOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GRANITE_DRAWING_TYPE_COLOR, GraniteDrawingColor))
#define GRANITE_DRAWING_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GRANITE_DRAWING_TYPE_COLOR, GraniteDrawingColorClass))
#define GRANITE_DRAWING_IS_COLOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GRANITE_DRAWING_TYPE_COLOR))
#define GRANITE_DRAWING_IS_COLOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GRANITE_DRAWING_TYPE_COLOR))
#define GRANITE_DRAWING_COLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GRANITE_DRAWING_TYPE_COLOR, GraniteDrawingColorClass))

typedef struct _GraniteDrawingColor GraniteDrawingColor;
typedef struct _GraniteDrawingColorClass GraniteDrawingColorClass;
typedef struct _GraniteDrawingColorPrivate GraniteDrawingColorPrivate;
enum  {
	GRANITE_DRAWING_COLOR_0_PROPERTY,
	GRANITE_DRAWING_COLOR_NUM_PROPERTIES
};
static GParamSpec* granite_drawing_color_properties[GRANITE_DRAWING_COLOR_NUM_PROPERTIES];
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _GraniteServicesSettingsSerializableIface {
	GTypeInterface parent_iface;
	gchar* (*settings_serialize) (GraniteServicesSettingsSerializable* self);
	void (*settings_deserialize) (GraniteServicesSettingsSerializable* self, const gchar* s);
};

struct _GraniteDrawingColor {
	GObject parent_instance;
	gdouble R;
	gdouble G;
	gdouble B;
	gdouble A;
	GraniteDrawingColorPrivate * priv;
};

struct _GraniteDrawingColorClass {
	GObjectClass parent_class;
};

static gpointer granite_drawing_color_parent_class = NULL;
static GraniteServicesSettingsSerializableIface * granite_drawing_color_granite_services_settings_serializable_parent_iface = NULL;

GType granite_services_settings_serializable_get_type (void) G_GNUC_CONST;
GType granite_drawing_color_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GraniteDrawingColor, g_object_unref)
guint8 granite_drawing_color_alpha_from_int (gint color);
guint8 granite_drawing_color_red_from_int (gint color);
guint8 granite_drawing_color_green_from_int (gint color);
guint8 granite_drawing_color_blue_from_int (gint color);
GraniteDrawingColor* granite_drawing_color_new (gdouble R,
                                                gdouble G,
                                                gdouble B,
                                                gdouble A);
GraniteDrawingColor* granite_drawing_color_construct (GType object_type,
                                                      gdouble R,
                                                      gdouble G,
                                                      gdouble B,
                                                      gdouble A);
GraniteDrawingColor* granite_drawing_color_new_from_gdk (GdkColor* color);
GraniteDrawingColor* granite_drawing_color_construct_from_gdk (GType object_type,
                                                               GdkColor* color);
GraniteDrawingColor* granite_drawing_color_new_from_rgba (GdkRGBA* color);
GraniteDrawingColor* granite_drawing_color_construct_from_rgba (GType object_type,
                                                                GdkRGBA* color);
static void granite_drawing_color_set_from_rgba (GraniteDrawingColor* self,
                                          GdkRGBA* color);
GraniteDrawingColor* granite_drawing_color_new_from_string (const gchar* color);
GraniteDrawingColor* granite_drawing_color_construct_from_string (GType object_type,
                                                                  const gchar* color);
GraniteDrawingColor* granite_drawing_color_new_from_int (gint color);
GraniteDrawingColor* granite_drawing_color_construct_from_int (GType object_type,
                                                               gint color);
GraniteDrawingColor* granite_drawing_color_set_hue (GraniteDrawingColor* self,
                                                    gdouble hue);
static void granite_drawing_color_rgb_to_hsv (GraniteDrawingColor* self,
                                       gdouble r,
                                       gdouble g,
                                       gdouble b,
                                       gdouble* h,
                                       gdouble* s,
                                       gdouble* v);
static void granite_drawing_color_hsv_to_rgb (GraniteDrawingColor* self,
                                       gdouble h,
                                       gdouble s,
                                       gdouble v,
                                       gdouble* r,
                                       gdouble* g,
                                       gdouble* b);
GraniteDrawingColor* granite_drawing_color_set_sat (GraniteDrawingColor* self,
                                                    gdouble sat);
GraniteDrawingColor* granite_drawing_color_set_val (GraniteDrawingColor* self,
                                                    gdouble val);
GraniteDrawingColor* granite_drawing_color_set_alpha (GraniteDrawingColor* self,
                                                      gdouble alpha);
gdouble granite_drawing_color_get_hue (GraniteDrawingColor* self);
gdouble granite_drawing_color_get_sat (GraniteDrawingColor* self);
gdouble granite_drawing_color_get_val (GraniteDrawingColor* self);
GraniteDrawingColor* granite_drawing_color_add_hue (GraniteDrawingColor* self,
                                                    gdouble val);
GraniteDrawingColor* granite_drawing_color_set_min_sat (GraniteDrawingColor* self,
                                                        gdouble sat);
GraniteDrawingColor* granite_drawing_color_set_min_value (GraniteDrawingColor* self,
                                                          gdouble val);
GraniteDrawingColor* granite_drawing_color_set_max_sat (GraniteDrawingColor* self,
                                                        gdouble sat);
GraniteDrawingColor* granite_drawing_color_set_max_val (GraniteDrawingColor* self,
                                                        gdouble val);
GraniteDrawingColor* granite_drawing_color_multiply_sat (GraniteDrawingColor* self,
                                                         gdouble amount);
GraniteDrawingColor* granite_drawing_color_brighten_val (GraniteDrawingColor* self,
                                                         gdouble amount);
GraniteDrawingColor* granite_drawing_color_darken_val (GraniteDrawingColor* self,
                                                       gdouble amount);
GraniteDrawingColor* granite_drawing_color_darken_by_sat (GraniteDrawingColor* self,
                                                          gdouble amount);
static gchar* granite_drawing_color_real_settings_serialize (GraniteServicesSettingsSerializable* base);
static void granite_drawing_color_real_settings_deserialize (GraniteServicesSettingsSerializable* base,
                                                      const gchar* s);
gchar* granite_drawing_color_to_string (GraniteDrawingColor* self);
gint granite_drawing_color_to_int (GraniteDrawingColor* self);
gchar* granite_services_settings_serializable_settings_serialize (GraniteServicesSettingsSerializable* self);
void granite_services_settings_serializable_settings_deserialize (GraniteServicesSettingsSerializable* self,
                                                                  const gchar* s);
static void granite_drawing_color_finalize (GObject * obj);
static GType granite_drawing_color_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

/**
         * Extracts the alpha value from the integer value
         * serialized by {@link Granite.Drawing.Color.to_int}.
         *
         * @return the alpha channel value as a uint8 ranging from 0 - 255.
         */
guint8
granite_drawing_color_alpha_from_int (gint color)
{
	guint8 result = 0U;
#line 57 "../lib/Drawing/Color.vala"
	result = (guint8) ((color >> 24) & 0xFF);
#line 57 "../lib/Drawing/Color.vala"
	return result;
#line 188 "Color.c"
}

/**
         * Extracts the red value from the integer value
         * serialized by {@link Granite.Drawing.Color.to_int}.
         *
         * @return the red channel value as a uint8 ranging from 0 - 255.
         */
guint8
granite_drawing_color_red_from_int (gint color)
{
	guint8 result = 0U;
#line 67 "../lib/Drawing/Color.vala"
	result = (guint8) ((color >> 16) & 0xFF);
#line 67 "../lib/Drawing/Color.vala"
	return result;
#line 205 "Color.c"
}

/**
         * Extracts the green value from the integer value
         * serialized by {@link Granite.Drawing.Color.to_int}.
         *
         * @return the green channel value as a uint8 ranging from 0 - 255.
         */
guint8
granite_drawing_color_green_from_int (gint color)
{
	guint8 result = 0U;
#line 77 "../lib/Drawing/Color.vala"
	result = (guint8) ((color >> 8) & 0xFF);
#line 77 "../lib/Drawing/Color.vala"
	return result;
#line 222 "Color.c"
}

/**
         * Extracts the blue value from the integer value
         * serialized by {@link Granite.Drawing.Color.to_int}.
         *
         * @return the blue channel value as a uint8 ranging from 0 - 255.
         */
guint8
granite_drawing_color_blue_from_int (gint color)
{
	guint8 result = 0U;
#line 87 "../lib/Drawing/Color.vala"
	result = (guint8) (color & 0xFF);
#line 87 "../lib/Drawing/Color.vala"
	return result;
#line 239 "Color.c"
}

/**
         * Constructs a new {@link Granite.Drawing.Color} with the supplied values.
         *
         * @param R the value of the red channel as a double
         * @param G the value of the green channel as a double
         * @param B the value of the blue channel as a double
         * @param A the value of the alpha channel as a double
         */
GraniteDrawingColor*
granite_drawing_color_construct (GType object_type,
                                 gdouble R,
                                 gdouble G,
                                 gdouble B,
                                 gdouble A)
{
	GraniteDrawingColor * self = NULL;
#line 98 "../lib/Drawing/Color.vala"
	self = (GraniteDrawingColor*) g_object_new (object_type, NULL);
#line 99 "../lib/Drawing/Color.vala"
	self->R = R;
#line 100 "../lib/Drawing/Color.vala"
	self->G = G;
#line 101 "../lib/Drawing/Color.vala"
	self->B = B;
#line 102 "../lib/Drawing/Color.vala"
	self->A = A;
#line 98 "../lib/Drawing/Color.vala"
	return self;
#line 270 "Color.c"
}

GraniteDrawingColor*
granite_drawing_color_new (gdouble R,
                           gdouble G,
                           gdouble B,
                           gdouble A)
{
#line 98 "../lib/Drawing/Color.vala"
	return granite_drawing_color_construct (GRANITE_DRAWING_TYPE_COLOR, R, G, B, A);
#line 281 "Color.c"
}

/**
         * Constructs a new {@link Granite.Drawing.Color} from a {@link Gdk.Color}.
         *
         * @param color the {@link Gdk.Color}
         */
GraniteDrawingColor*
granite_drawing_color_construct_from_gdk (GType object_type,
                                          GdkColor* color)
{
	GraniteDrawingColor * self = NULL;
	GdkColor _tmp0_;
	GdkColor _tmp1_;
	GdkColor _tmp2_;
#line 110 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (color != NULL, NULL);
#line 110 "../lib/Drawing/Color.vala"
	self = (GraniteDrawingColor*) g_object_new (object_type, NULL);
#line 111 "../lib/Drawing/Color.vala"
	_tmp0_ = *color;
#line 111 "../lib/Drawing/Color.vala"
	self->R = _tmp0_.red / ((gdouble) G_MAXUINT16);
#line 112 "../lib/Drawing/Color.vala"
	_tmp1_ = *color;
#line 112 "../lib/Drawing/Color.vala"
	self->G = _tmp1_.green / ((gdouble) G_MAXUINT16);
#line 113 "../lib/Drawing/Color.vala"
	_tmp2_ = *color;
#line 113 "../lib/Drawing/Color.vala"
	self->B = _tmp2_.blue / ((gdouble) G_MAXUINT16);
#line 114 "../lib/Drawing/Color.vala"
	self->A = 1.0;
#line 110 "../lib/Drawing/Color.vala"
	return self;
#line 317 "Color.c"
}

GraniteDrawingColor*
granite_drawing_color_new_from_gdk (GdkColor* color)
{
#line 110 "../lib/Drawing/Color.vala"
	return granite_drawing_color_construct_from_gdk (GRANITE_DRAWING_TYPE_COLOR, color);
#line 325 "Color.c"
}

/**
         * Constructs a new {@link Granite.Drawing.Color} from a {@link Gdk.RGBA}.
         *
         * @param color the {@link Gdk.RGBA}
         */
GraniteDrawingColor*
granite_drawing_color_construct_from_rgba (GType object_type,
                                           GdkRGBA* color)
{
	GraniteDrawingColor * self = NULL;
	GdkRGBA _tmp0_;
#line 122 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (color != NULL, NULL);
#line 122 "../lib/Drawing/Color.vala"
	self = (GraniteDrawingColor*) g_object_new (object_type, NULL);
#line 123 "../lib/Drawing/Color.vala"
	_tmp0_ = *color;
#line 123 "../lib/Drawing/Color.vala"
	granite_drawing_color_set_from_rgba (self, &_tmp0_);
#line 122 "../lib/Drawing/Color.vala"
	return self;
#line 349 "Color.c"
}

GraniteDrawingColor*
granite_drawing_color_new_from_rgba (GdkRGBA* color)
{
#line 122 "../lib/Drawing/Color.vala"
	return granite_drawing_color_construct_from_rgba (GRANITE_DRAWING_TYPE_COLOR, color);
#line 357 "Color.c"
}

/**
         * Constructs a new {@link Granite.Drawing.Color} from a string.
         *
         * The string can be either one of:
         *
         * * A standard name (Taken from the X11 rgb.txt file).
         * * A hexadecimal value in the form “#rgb”, “#rrggbb”, “#rrrgggbbb” or ”#rrrrggggbbbb”
         * * A RGB color in the form “rgb(r,g,b)” (In this case the color will have full opacity)
         * * A RGBA color in the form “rgba(r,g,b,a)”
         *
         * For more details on formatting and how this function works see {@link Gdk.RGBA.parse}
         *
         * @param color the string specifying the color
         */
GraniteDrawingColor*
granite_drawing_color_construct_from_string (GType object_type,
                                             const gchar* color)
{
	GraniteDrawingColor * self = NULL;
	GdkRGBA rgba = {0};
	GdkRGBA _tmp0_;
#line 140 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (color != NULL, NULL);
#line 140 "../lib/Drawing/Color.vala"
	self = (GraniteDrawingColor*) g_object_new (object_type, NULL);
#line 141 "../lib/Drawing/Color.vala"
	memset (&rgba, 0, sizeof (GdkRGBA));
#line 142 "../lib/Drawing/Color.vala"
	gdk_rgba_parse (&rgba, color);
#line 143 "../lib/Drawing/Color.vala"
	_tmp0_ = rgba;
#line 143 "../lib/Drawing/Color.vala"
	granite_drawing_color_set_from_rgba (self, &_tmp0_);
#line 140 "../lib/Drawing/Color.vala"
	return self;
#line 395 "Color.c"
}

GraniteDrawingColor*
granite_drawing_color_new_from_string (const gchar* color)
{
#line 140 "../lib/Drawing/Color.vala"
	return granite_drawing_color_construct_from_string (GRANITE_DRAWING_TYPE_COLOR, color);
#line 403 "Color.c"
}

/**
         * Constructs a new {@link Granite.Drawing.Color} from an integer.
         *
         * This constructor should be used when deserializing the previously serialized
         * color by {@link Granite.Drawing.Color.to_int}.
         *
         * For more details on what format the color integer representation has, see {@link Granite.Drawing.Color.to_int}.
         *
         * If you would like to deserialize the A, R, G and B values from the integer without
         * creating a new instance of {@link Granite.Drawing.Color}, you can use the available
         * //*_from_int// static method collection such as {@link Granite.Drawing.Color.alpha_from_int}.
         *
         * @param color the integer specyfying the color
         */
GraniteDrawingColor*
granite_drawing_color_construct_from_int (GType object_type,
                                          gint color)
{
	GraniteDrawingColor * self = NULL;
#line 160 "../lib/Drawing/Color.vala"
	self = (GraniteDrawingColor*) g_object_new (object_type, NULL);
#line 161 "../lib/Drawing/Color.vala"
	self->R = ((gdouble) granite_drawing_color_red_from_int (color)) / ((gdouble) G_MAXUINT8);
#line 162 "../lib/Drawing/Color.vala"
	self->G = ((gdouble) granite_drawing_color_green_from_int (color)) / ((gdouble) G_MAXUINT8);
#line 163 "../lib/Drawing/Color.vala"
	self->B = ((gdouble) granite_drawing_color_blue_from_int (color)) / ((gdouble) G_MAXUINT8);
#line 164 "../lib/Drawing/Color.vala"
	self->A = ((gdouble) granite_drawing_color_alpha_from_int (color)) / ((gdouble) G_MAXUINT8);
#line 160 "../lib/Drawing/Color.vala"
	return self;
#line 437 "Color.c"
}

GraniteDrawingColor*
granite_drawing_color_new_from_int (gint color)
{
#line 160 "../lib/Drawing/Color.vala"
	return granite_drawing_color_construct_from_int (GRANITE_DRAWING_TYPE_COLOR, color);
#line 445 "Color.c"
}

/**
         * Changes the hue of this color to the supplied one.
         *
         * @param hue the hue to change this color to
         *
         * @return the new {@link Granite.Drawing.Color}
         */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 180 "../lib/Drawing/Color.vala"
	return self ? g_object_ref (self) : NULL;
#line 460 "Color.c"
}

GraniteDrawingColor*
granite_drawing_color_set_hue (GraniteDrawingColor* self,
                               gdouble hue)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 174 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 174 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((hue >= ((gdouble) 0)) && (hue <= ((gdouble) 360)), "hue >= 0 && hue <= 360", NULL);
#line 176 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 176 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 176 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 176 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 177 "../lib/Drawing/Color.vala"
	h = hue;
#line 178 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 178 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 178 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 178 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 180 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 180 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 180 "../lib/Drawing/Color.vala"
	return result;
#line 506 "Color.c"
}

/**
         * Changes the saturation of this color to the supplied one.
         *
         * @param sat the saturation to change this color to
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_set_sat (GraniteDrawingColor* self,
                               gdouble sat)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 190 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 190 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((sat >= ((gdouble) 0)) && (sat <= ((gdouble) 1)), "sat >= 0 && sat <= 1", NULL);
#line 192 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 192 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 192 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 192 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 193 "../lib/Drawing/Color.vala"
	s = sat;
#line 194 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 194 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 194 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 194 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 196 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 196 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 196 "../lib/Drawing/Color.vala"
	return result;
#line 559 "Color.c"
}

/**
         * Changes the value of this color to the supplied one.
         *
         * @param val the value to change this color to
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_set_val (GraniteDrawingColor* self,
                               gdouble val)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 206 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 206 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((val >= ((gdouble) 0)) && (val <= ((gdouble) 1)), "val >= 0 && val <= 1", NULL);
#line 208 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 208 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 208 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 208 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 209 "../lib/Drawing/Color.vala"
	v = val;
#line 210 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 210 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 210 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 210 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 212 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 212 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 212 "../lib/Drawing/Color.vala"
	return result;
#line 612 "Color.c"
}

/**
         * Changes the value of the alpha channel.
         *
         * @param alpha the value of the alpha channel
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_set_alpha (GraniteDrawingColor* self,
                                 gdouble alpha)
{
	GraniteDrawingColor* _tmp0_;
	GraniteDrawingColor* result = NULL;
#line 222 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 222 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((alpha >= ((gdouble) 0)) && (alpha <= ((gdouble) 1)), "alpha >= 0 && alpha <= 1", NULL);
#line 223 "../lib/Drawing/Color.vala"
	self->A = alpha;
#line 224 "../lib/Drawing/Color.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 224 "../lib/Drawing/Color.vala"
	result = _tmp0_;
#line 224 "../lib/Drawing/Color.vala"
	return result;
#line 640 "Color.c"
}

/**
         * Get the value.
         * @return the hue of this color, as a double value
         */
gdouble
granite_drawing_color_get_hue (GraniteDrawingColor* self)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble result = 0.0;
#line 231 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 233 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 233 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 233 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 233 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 234 "../lib/Drawing/Color.vala"
	result = h;
#line 234 "../lib/Drawing/Color.vala"
	return result;
#line 671 "Color.c"
}

/**
         * Get the value.
         * @return the saturation of this color, as a double value
         */
gdouble
granite_drawing_color_get_sat (GraniteDrawingColor* self)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble result = 0.0;
#line 241 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 243 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 243 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 243 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 243 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 244 "../lib/Drawing/Color.vala"
	result = s;
#line 244 "../lib/Drawing/Color.vala"
	return result;
#line 702 "Color.c"
}

/**
         * Get the value.
         *
         * @return the value of this color, as a double value
         */
gdouble
granite_drawing_color_get_val (GraniteDrawingColor* self)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble result = 0.0;
#line 252 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 254 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 254 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 254 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 254 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 255 "../lib/Drawing/Color.vala"
	result = v;
#line 255 "../lib/Drawing/Color.vala"
	return result;
#line 734 "Color.c"
}

/**
         * Adds the supplied hue value to this color's hue value.
         *
         * @param val the hue to add to this color's hue
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_add_hue (GraniteDrawingColor* self,
                               gdouble val)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 265 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 267 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 267 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 267 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 267 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 268 "../lib/Drawing/Color.vala"
	h = fmod (fmod (h + val, 360) + 360, 360);
#line 269 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 269 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 269 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 269 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 271 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 271 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 271 "../lib/Drawing/Color.vala"
	return result;
#line 785 "Color.c"
}

/**
         * Changes this color's saturation to the supplied saturation, if it is greater than this color's saturation.
         *
         * @param sat the saturation to change this color to
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_set_min_sat (GraniteDrawingColor* self,
                                   gdouble sat)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 281 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 281 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((sat >= ((gdouble) 0)) && (sat <= ((gdouble) 1)), "sat >= 0 && sat <= 1", NULL);
#line 283 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 283 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 283 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 283 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 284 "../lib/Drawing/Color.vala"
	s = MAX (s, sat);
#line 285 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 285 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 285 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 285 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 287 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 287 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 287 "../lib/Drawing/Color.vala"
	return result;
#line 838 "Color.c"
}

/**
         * Changes this color's value to the supplied value, if it is greater than this color's value.
         *
         * @param val the value to change this color to
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_set_min_value (GraniteDrawingColor* self,
                                     gdouble val)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 297 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 297 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((val >= ((gdouble) 0)) && (val <= ((gdouble) 1)), "val >= 0 && val <= 1", NULL);
#line 299 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 299 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 299 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 299 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 300 "../lib/Drawing/Color.vala"
	v = MAX (v, val);
#line 301 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 301 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 301 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 301 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 303 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 303 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 303 "../lib/Drawing/Color.vala"
	return result;
#line 891 "Color.c"
}

/**
         * Changes this color's saturation to the supplied saturation, if it is smaller than this color's saturation.
         *
         * @param sat the hue to change this color to
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_set_max_sat (GraniteDrawingColor* self,
                                   gdouble sat)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 313 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 313 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((sat >= ((gdouble) 0)) && (sat <= ((gdouble) 1)), "sat >= 0 && sat <= 1", NULL);
#line 315 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 315 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 315 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 315 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 316 "../lib/Drawing/Color.vala"
	s = MIN (s, sat);
#line 317 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 317 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 317 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 317 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 319 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 319 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 319 "../lib/Drawing/Color.vala"
	return result;
#line 944 "Color.c"
}

/**
         * Changes this color's value to the supplied value, if it is smaller than this color's value.
         *
         * @param val the value to change this color to
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_set_max_val (GraniteDrawingColor* self,
                                   gdouble val)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 329 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 329 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((val >= ((gdouble) 0)) && (val <= ((gdouble) 1)), "val >= 0 && val <= 1", NULL);
#line 331 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 331 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 331 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 331 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 332 "../lib/Drawing/Color.vala"
	v = MIN (v, val);
#line 333 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 333 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 333 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 333 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 335 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 335 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 335 "../lib/Drawing/Color.vala"
	return result;
#line 997 "Color.c"
}

/**
         * Multiplies this color's saturation by the supplied amount.
         *
         * @param amount the amount to multiply the saturation by
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_multiply_sat (GraniteDrawingColor* self,
                                    gdouble amount)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 345 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 345 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail (amount >= ((gdouble) 0), "amount >= 0", NULL);
#line 347 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 347 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 347 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 347 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 348 "../lib/Drawing/Color.vala"
	s = MIN ((gdouble) 1, s * amount);
#line 349 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 349 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 349 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 349 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 351 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 351 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 351 "../lib/Drawing/Color.vala"
	return result;
#line 1050 "Color.c"
}

/**
         * Brightens this color's value by the supplied amount.
         *
         * @param amount the amount to brighten the value by
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_brighten_val (GraniteDrawingColor* self,
                                    gdouble amount)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 361 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 361 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((amount >= ((gdouble) 0)) && (amount <= ((gdouble) 1)), "amount >= 0 && amount <= 1", NULL);
#line 363 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 363 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 363 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 363 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 364 "../lib/Drawing/Color.vala"
	v = MIN ((gdouble) 1, v + ((1 - v) * amount));
#line 365 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 365 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 365 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 365 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 367 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 367 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 367 "../lib/Drawing/Color.vala"
	return result;
#line 1103 "Color.c"
}

/**
         * Darkens this color's value by the supplied amount.
         *
         * @param amount the amount to darken the value by
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_darken_val (GraniteDrawingColor* self,
                                  gdouble amount)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 377 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 377 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((amount >= ((gdouble) 0)) && (amount <= ((gdouble) 1)), "amount >= 0 && amount <= 1", NULL);
#line 379 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 379 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 379 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 379 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 380 "../lib/Drawing/Color.vala"
	v = MAX ((gdouble) 0, v - ((1 - v) * amount));
#line 381 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 381 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 381 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 381 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 383 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 383 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 383 "../lib/Drawing/Color.vala"
	return result;
#line 1156 "Color.c"
}

/**
         * Darkens this color's value by the supplied amount * color's saturation.
         *
         * @param amount the amount to darken the value by
         *
         * @return the new {@link Granite.Drawing.Color}
         */
GraniteDrawingColor*
granite_drawing_color_darken_by_sat (GraniteDrawingColor* self,
                                     gdouble amount)
{
	gdouble h = 0.0;
	gdouble s = 0.0;
	gdouble v = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble _tmp2_ = 0.0;
	gdouble _tmp3_ = 0.0;
	gdouble _tmp4_ = 0.0;
	gdouble _tmp5_ = 0.0;
	GraniteDrawingColor* _tmp6_;
	GraniteDrawingColor* result = NULL;
#line 393 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 393 "../lib/Drawing/Color.vala"
	_vala_return_val_if_fail ((amount >= ((gdouble) 0)) && (amount <= ((gdouble) 1)), "amount >= 0 && amount <= 1", NULL);
#line 395 "../lib/Drawing/Color.vala"
	granite_drawing_color_rgb_to_hsv (self, self->R, self->G, self->B, &_tmp0_, &_tmp1_, &_tmp2_);
#line 395 "../lib/Drawing/Color.vala"
	h = _tmp0_;
#line 395 "../lib/Drawing/Color.vala"
	s = _tmp1_;
#line 395 "../lib/Drawing/Color.vala"
	v = _tmp2_;
#line 396 "../lib/Drawing/Color.vala"
	v = MAX ((gdouble) 0, v - (amount * s));
#line 397 "../lib/Drawing/Color.vala"
	granite_drawing_color_hsv_to_rgb (self, h, s, v, &_tmp3_, &_tmp4_, &_tmp5_);
#line 397 "../lib/Drawing/Color.vala"
	self->R = _tmp3_;
#line 397 "../lib/Drawing/Color.vala"
	self->G = _tmp4_;
#line 397 "../lib/Drawing/Color.vala"
	self->B = _tmp5_;
#line 399 "../lib/Drawing/Color.vala"
	_tmp6_ = _g_object_ref0 (self);
#line 399 "../lib/Drawing/Color.vala"
	result = _tmp6_;
#line 399 "../lib/Drawing/Color.vala"
	return result;
#line 1209 "Color.c"
}

static void
granite_drawing_color_rgb_to_hsv (GraniteDrawingColor* self,
                                  gdouble r,
                                  gdouble g,
                                  gdouble b,
                                  gdouble* h,
                                  gdouble* s,
                                  gdouble* v)
{
	gdouble _vala_h = 0.0;
	gdouble _vala_s = 0.0;
	gdouble _vala_v = 0.0;
	gdouble min = 0.0;
	gdouble max = 0.0;
	gdouble delta = 0.0;
#line 402 "../lib/Drawing/Color.vala"
	g_return_if_fail (self != NULL);
#line 402 "../lib/Drawing/Color.vala"
	_vala_return_if_fail ((r >= ((gdouble) 0)) && (r <= ((gdouble) 1)), "r >= 0 && r <= 1");
#line 402 "../lib/Drawing/Color.vala"
	_vala_return_if_fail ((g >= ((gdouble) 0)) && (g <= ((gdouble) 1)), "g >= 0 && g <= 1");
#line 402 "../lib/Drawing/Color.vala"
	_vala_return_if_fail ((b >= ((gdouble) 0)) && (b <= ((gdouble) 1)), "b >= 0 && b <= 1");
#line 405 "../lib/Drawing/Color.vala"
	min = MIN (r, MIN (g, b));
#line 406 "../lib/Drawing/Color.vala"
	max = MAX (r, MAX (g, b));
#line 408 "../lib/Drawing/Color.vala"
	_vala_v = max;
#line 409 "../lib/Drawing/Color.vala"
	if (_vala_v == ((gdouble) 0)) {
#line 410 "../lib/Drawing/Color.vala"
		_vala_h = (gdouble) 0;
#line 411 "../lib/Drawing/Color.vala"
		_vala_s = (gdouble) 0;
#line 412 "../lib/Drawing/Color.vala"
		if (h) {
#line 412 "../lib/Drawing/Color.vala"
			*h = _vala_h;
#line 1251 "Color.c"
		}
#line 412 "../lib/Drawing/Color.vala"
		if (s) {
#line 412 "../lib/Drawing/Color.vala"
			*s = _vala_s;
#line 1257 "Color.c"
		}
#line 412 "../lib/Drawing/Color.vala"
		if (v) {
#line 412 "../lib/Drawing/Color.vala"
			*v = _vala_v;
#line 1263 "Color.c"
		}
#line 412 "../lib/Drawing/Color.vala"
		return;
#line 1267 "Color.c"
	}
#line 416 "../lib/Drawing/Color.vala"
	r = r / _vala_v;
#line 417 "../lib/Drawing/Color.vala"
	g = g / _vala_v;
#line 418 "../lib/Drawing/Color.vala"
	b = b / _vala_v;
#line 420 "../lib/Drawing/Color.vala"
	min = MIN (r, MIN (g, b));
#line 421 "../lib/Drawing/Color.vala"
	max = MAX (r, MAX (g, b));
#line 423 "../lib/Drawing/Color.vala"
	delta = max - min;
#line 424 "../lib/Drawing/Color.vala"
	_vala_s = delta;
#line 425 "../lib/Drawing/Color.vala"
	if (_vala_s == ((gdouble) 0)) {
#line 426 "../lib/Drawing/Color.vala"
		_vala_h = (gdouble) 0;
#line 427 "../lib/Drawing/Color.vala"
		if (h) {
#line 427 "../lib/Drawing/Color.vala"
			*h = _vala_h;
#line 1291 "Color.c"
		}
#line 427 "../lib/Drawing/Color.vala"
		if (s) {
#line 427 "../lib/Drawing/Color.vala"
			*s = _vala_s;
#line 1297 "Color.c"
		}
#line 427 "../lib/Drawing/Color.vala"
		if (v) {
#line 427 "../lib/Drawing/Color.vala"
			*v = _vala_v;
#line 1303 "Color.c"
		}
#line 427 "../lib/Drawing/Color.vala"
		return;
#line 1307 "Color.c"
	}
#line 431 "../lib/Drawing/Color.vala"
	r = (r - min) / delta;
#line 432 "../lib/Drawing/Color.vala"
	g = (g - min) / delta;
#line 433 "../lib/Drawing/Color.vala"
	b = (b - min) / delta;
#line 435 "../lib/Drawing/Color.vala"
	if (max == r) {
#line 436 "../lib/Drawing/Color.vala"
		_vala_h = 0 + (60 * (g - b));
#line 437 "../lib/Drawing/Color.vala"
		if (_vala_h < ((gdouble) 0)) {
#line 438 "../lib/Drawing/Color.vala"
			_vala_h = _vala_h + 360;
#line 1323 "Color.c"
		}
	} else {
#line 439 "../lib/Drawing/Color.vala"
		if (max == g) {
#line 440 "../lib/Drawing/Color.vala"
			_vala_h = 120 + (60 * (b - r));
#line 1330 "Color.c"
		} else {
#line 442 "../lib/Drawing/Color.vala"
			_vala_h = 240 + (60 * (r - g));
#line 1334 "Color.c"
		}
	}
#line 402 "../lib/Drawing/Color.vala"
	if (h) {
#line 402 "../lib/Drawing/Color.vala"
		*h = _vala_h;
#line 1341 "Color.c"
	}
#line 402 "../lib/Drawing/Color.vala"
	if (s) {
#line 402 "../lib/Drawing/Color.vala"
		*s = _vala_s;
#line 1347 "Color.c"
	}
#line 402 "../lib/Drawing/Color.vala"
	if (v) {
#line 402 "../lib/Drawing/Color.vala"
		*v = _vala_v;
#line 1353 "Color.c"
	}
}

static void
granite_drawing_color_hsv_to_rgb (GraniteDrawingColor* self,
                                  gdouble h,
                                  gdouble s,
                                  gdouble v,
                                  gdouble* r,
                                  gdouble* g,
                                  gdouble* b)
{
	gdouble _vala_r = 0.0;
	gdouble _vala_g = 0.0;
	gdouble _vala_b = 0.0;
#line 446 "../lib/Drawing/Color.vala"
	g_return_if_fail (self != NULL);
#line 446 "../lib/Drawing/Color.vala"
	_vala_return_if_fail ((h >= ((gdouble) 0)) && (h <= ((gdouble) 360)), "h >= 0 && h <= 360");
#line 446 "../lib/Drawing/Color.vala"
	_vala_return_if_fail ((s >= ((gdouble) 0)) && (s <= ((gdouble) 1)), "s >= 0 && s <= 1");
#line 446 "../lib/Drawing/Color.vala"
	_vala_return_if_fail ((v >= ((gdouble) 0)) && (v <= ((gdouble) 1)), "v >= 0 && v <= 1");
#line 449 "../lib/Drawing/Color.vala"
	_vala_r = (gdouble) 0;
#line 450 "../lib/Drawing/Color.vala"
	_vala_g = (gdouble) 0;
#line 451 "../lib/Drawing/Color.vala"
	_vala_b = (gdouble) 0;
#line 453 "../lib/Drawing/Color.vala"
	if (s == ((gdouble) 0)) {
#line 454 "../lib/Drawing/Color.vala"
		_vala_r = v;
#line 455 "../lib/Drawing/Color.vala"
		_vala_g = v;
#line 456 "../lib/Drawing/Color.vala"
		_vala_b = v;
#line 1391 "Color.c"
	} else {
		gint sec_num = 0;
		gdouble frac_sec = 0.0;
		gdouble p = 0.0;
		gdouble q = 0.0;
		gdouble t = 0.0;
#line 458 "../lib/Drawing/Color.vala"
		sec_num = (gint) floor (h / 60);
#line 459 "../lib/Drawing/Color.vala"
		frac_sec = (h / 60.0) - sec_num;
#line 461 "../lib/Drawing/Color.vala"
		p = v * (1 - s);
#line 462 "../lib/Drawing/Color.vala"
		q = v * (1 - (s * frac_sec));
#line 463 "../lib/Drawing/Color.vala"
		t = v * (1 - (s * (1 - frac_sec)));
#line 465 "../lib/Drawing/Color.vala"
		switch (sec_num) {
#line 465 "../lib/Drawing/Color.vala"
			case 0:
#line 1412 "Color.c"
			{
#line 467 "../lib/Drawing/Color.vala"
				_vala_r = v;
#line 468 "../lib/Drawing/Color.vala"
				_vala_g = t;
#line 469 "../lib/Drawing/Color.vala"
				_vala_b = p;
#line 470 "../lib/Drawing/Color.vala"
				break;
#line 1422 "Color.c"
			}
#line 465 "../lib/Drawing/Color.vala"
			case 1:
#line 1426 "Color.c"
			{
#line 472 "../lib/Drawing/Color.vala"
				_vala_r = q;
#line 473 "../lib/Drawing/Color.vala"
				_vala_g = v;
#line 474 "../lib/Drawing/Color.vala"
				_vala_b = p;
#line 475 "../lib/Drawing/Color.vala"
				break;
#line 1436 "Color.c"
			}
#line 465 "../lib/Drawing/Color.vala"
			case 2:
#line 1440 "Color.c"
			{
#line 477 "../lib/Drawing/Color.vala"
				_vala_r = p;
#line 478 "../lib/Drawing/Color.vala"
				_vala_g = v;
#line 479 "../lib/Drawing/Color.vala"
				_vala_b = t;
#line 480 "../lib/Drawing/Color.vala"
				break;
#line 1450 "Color.c"
			}
#line 465 "../lib/Drawing/Color.vala"
			case 3:
#line 1454 "Color.c"
			{
#line 482 "../lib/Drawing/Color.vala"
				_vala_r = p;
#line 483 "../lib/Drawing/Color.vala"
				_vala_g = q;
#line 484 "../lib/Drawing/Color.vala"
				_vala_b = v;
#line 485 "../lib/Drawing/Color.vala"
				break;
#line 1464 "Color.c"
			}
#line 465 "../lib/Drawing/Color.vala"
			case 4:
#line 1468 "Color.c"
			{
#line 487 "../lib/Drawing/Color.vala"
				_vala_r = t;
#line 488 "../lib/Drawing/Color.vala"
				_vala_g = p;
#line 489 "../lib/Drawing/Color.vala"
				_vala_b = v;
#line 490 "../lib/Drawing/Color.vala"
				break;
#line 1478 "Color.c"
			}
#line 465 "../lib/Drawing/Color.vala"
			case 5:
#line 1482 "Color.c"
			{
#line 492 "../lib/Drawing/Color.vala"
				_vala_r = v;
#line 493 "../lib/Drawing/Color.vala"
				_vala_g = p;
#line 494 "../lib/Drawing/Color.vala"
				_vala_b = q;
#line 495 "../lib/Drawing/Color.vala"
				break;
#line 1492 "Color.c"
			}
			default:
#line 465 "../lib/Drawing/Color.vala"
			break;
#line 1497 "Color.c"
		}
	}
#line 446 "../lib/Drawing/Color.vala"
	if (r) {
#line 446 "../lib/Drawing/Color.vala"
		*r = _vala_r;
#line 1504 "Color.c"
	}
#line 446 "../lib/Drawing/Color.vala"
	if (g) {
#line 446 "../lib/Drawing/Color.vala"
		*g = _vala_g;
#line 1510 "Color.c"
	}
#line 446 "../lib/Drawing/Color.vala"
	if (b) {
#line 446 "../lib/Drawing/Color.vala"
		*b = _vala_b;
#line 1516 "Color.c"
	}
}

/**
         * {@inheritDoc}
         */
static gchar*
granite_drawing_color_real_settings_serialize (GraniteServicesSettingsSerializable* base)
{
	GraniteDrawingColor * self;
	gchar* _tmp0_;
	gchar* result = NULL;
#line 503 "../lib/Drawing/Color.vala"
	self = (GraniteDrawingColor*) base;
#line 504 "../lib/Drawing/Color.vala"
	_tmp0_ = g_strdup_printf ("%d;;%d;;%d;;%d", (gint) (self->R * G_MAXUINT8), (gint) (self->G * G_MAXUINT8), (gint) (self->B * G_MAXUINT8), (gint) (self->A * G_MAXUINT8));
#line 504 "../lib/Drawing/Color.vala"
	result = _tmp0_;
#line 504 "../lib/Drawing/Color.vala"
	return result;
#line 1537 "Color.c"
}

/**
         * {@inheritDoc}
         */
static void
granite_drawing_color_real_settings_deserialize (GraniteServicesSettingsSerializable* base,
                                                 const gchar* s)
{
	GraniteDrawingColor * self;
	gchar** parts = NULL;
	gchar** _tmp0_;
	gchar** _tmp1_;
	gint parts_length1;
	gint _parts_size_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
#line 513 "../lib/Drawing/Color.vala"
	self = (GraniteDrawingColor*) base;
#line 513 "../lib/Drawing/Color.vala"
	g_return_if_fail (s != NULL);
#line 514 "../lib/Drawing/Color.vala"
	_tmp1_ = _tmp0_ = g_strsplit (s, ";;", 0);
#line 514 "../lib/Drawing/Color.vala"
	parts = _tmp1_;
#line 514 "../lib/Drawing/Color.vala"
	parts_length1 = _vala_array_length (_tmp0_);
#line 514 "../lib/Drawing/Color.vala"
	_parts_size_ = parts_length1;
#line 516 "../lib/Drawing/Color.vala"
	_tmp2_ = parts[0];
#line 516 "../lib/Drawing/Color.vala"
	self->R = MIN ((gdouble) G_MAXUINT8, MAX ((gdouble) 0, (gdouble) atoi (_tmp2_))) / G_MAXUINT8;
#line 517 "../lib/Drawing/Color.vala"
	_tmp3_ = parts[1];
#line 517 "../lib/Drawing/Color.vala"
	self->G = MIN ((gdouble) G_MAXUINT8, MAX ((gdouble) 0, (gdouble) atoi (_tmp3_))) / G_MAXUINT8;
#line 518 "../lib/Drawing/Color.vala"
	_tmp4_ = parts[2];
#line 518 "../lib/Drawing/Color.vala"
	self->B = MIN ((gdouble) G_MAXUINT8, MAX ((gdouble) 0, (gdouble) atoi (_tmp4_))) / G_MAXUINT8;
#line 519 "../lib/Drawing/Color.vala"
	_tmp5_ = parts[3];
#line 519 "../lib/Drawing/Color.vala"
	self->A = MIN ((gdouble) G_MAXUINT8, MAX ((gdouble) 0, (gdouble) atoi (_tmp5_))) / G_MAXUINT8;
#line 513 "../lib/Drawing/Color.vala"
	parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 1587 "Color.c"
}

/**
         * Returns a textual specification of this in the form `rgb (r, g, b)` or `rgba (r, g, b, a)`,
         * where “r”, “g”, “b” and “a” represent the red, green, blue and alpha values respectively.
         *
         * r, g, and b are represented as integers in the range 0 to 255, and a is represented as
         * floating point value in the range 0 to 1.
         *
         * Note: that this string representation may lose some precision, since r, g and b are represented
         * as 8-bit integers. If this is a concern, you should use a different representation.
         *
         * This returns the same string as a {@link Gdk.RGBA} would return in {@link Gdk.RGBA.to_string}
         *
         * @return the text string
         */
gchar*
granite_drawing_color_to_string (GraniteDrawingColor* self)
{
	GdkRGBA rgba = {0};
	GdkRGBA _tmp0_ = {0};
	gchar* _tmp1_;
	gchar* result = NULL;
#line 536 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 537 "../lib/Drawing/Color.vala"
	_tmp0_.red = self->R;
#line 537 "../lib/Drawing/Color.vala"
	_tmp0_.green = self->G;
#line 537 "../lib/Drawing/Color.vala"
	_tmp0_.blue = self->B;
#line 537 "../lib/Drawing/Color.vala"
	_tmp0_.alpha = self->A;
#line 537 "../lib/Drawing/Color.vala"
	rgba = _tmp0_;
#line 538 "../lib/Drawing/Color.vala"
	_tmp1_ = gdk_rgba_to_string (&rgba);
#line 538 "../lib/Drawing/Color.vala"
	result = _tmp1_;
#line 538 "../lib/Drawing/Color.vala"
	return result;
#line 1629 "Color.c"
}

/**
         * Converts this to a 32 bit integer.
         *
         * This function can be useful for serializing the color so that it can be stored
         * and retrieved easily with hash tables and lists.
         *
         * The returned integer will contain the four channels
         * that define the {@link Granite.Drawing.Color} class: alpha, red, green and blue.
         *
         * Each channel is represented by 8 bits.
         * The first 8 bits of the integer conatin the alpha channel while all other 24 bits represent
         * red, green and blue channels respectively.
         *
         * The format written as a string would look like this:
         *
         * //AAAAAAAA RRRRRRRR GGGGGGGG BBBBBBBB//
         *
         * where //A// is one bit of alpha chnnel, //R// of red channel, //G// of green channel and //B// of blue channel.
         *
         * @return a 32 bit integer representing this
         */
gint
granite_drawing_color_to_int (GraniteDrawingColor* self)
{
	guint8 red = 0U;
	guint8 green = 0U;
	guint8 blue = 0U;
	guint8 alpha = 0U;
	gint result = 0;
#line 562 "../lib/Drawing/Color.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 563 "../lib/Drawing/Color.vala"
	red = (guint8) (self->R * G_MAXUINT8);
#line 564 "../lib/Drawing/Color.vala"
	green = (guint8) (self->G * G_MAXUINT8);
#line 565 "../lib/Drawing/Color.vala"
	blue = (guint8) (self->B * G_MAXUINT8);
#line 566 "../lib/Drawing/Color.vala"
	alpha = (guint8) (self->A * G_MAXUINT8);
#line 568 "../lib/Drawing/Color.vala"
	result = (((alpha << 24) | (red << 16)) | (green << 8)) | blue;
#line 568 "../lib/Drawing/Color.vala"
	return result;
#line 1675 "Color.c"
}

static void
granite_drawing_color_set_from_rgba (GraniteDrawingColor* self,
                                     GdkRGBA* color)
{
	GdkRGBA _tmp0_;
	GdkRGBA _tmp1_;
	GdkRGBA _tmp2_;
	GdkRGBA _tmp3_;
#line 571 "../lib/Drawing/Color.vala"
	g_return_if_fail (self != NULL);
#line 571 "../lib/Drawing/Color.vala"
	g_return_if_fail (color != NULL);
#line 572 "../lib/Drawing/Color.vala"
	_tmp0_ = *color;
#line 572 "../lib/Drawing/Color.vala"
	self->R = _tmp0_.red;
#line 573 "../lib/Drawing/Color.vala"
	_tmp1_ = *color;
#line 573 "../lib/Drawing/Color.vala"
	self->G = _tmp1_.green;
#line 574 "../lib/Drawing/Color.vala"
	_tmp2_ = *color;
#line 574 "../lib/Drawing/Color.vala"
	self->B = _tmp2_.blue;
#line 575 "../lib/Drawing/Color.vala"
	_tmp3_ = *color;
#line 575 "../lib/Drawing/Color.vala"
	self->A = _tmp3_.alpha;
#line 1706 "Color.c"
}

static void
granite_drawing_color_class_init (GraniteDrawingColorClass * klass,
                                  gpointer klass_data)
{
#line 29 "../lib/Drawing/Color.vala"
	granite_drawing_color_parent_class = g_type_class_peek_parent (klass);
#line 29 "../lib/Drawing/Color.vala"
	G_OBJECT_CLASS (klass)->finalize = granite_drawing_color_finalize;
#line 1717 "Color.c"
}

static void
granite_drawing_color_granite_services_settings_serializable_interface_init (GraniteServicesSettingsSerializableIface * iface,
                                                                             gpointer iface_data)
{
#line 29 "../lib/Drawing/Color.vala"
	granite_drawing_color_granite_services_settings_serializable_parent_iface = g_type_interface_peek_parent (iface);
#line 29 "../lib/Drawing/Color.vala"
	iface->settings_serialize = (gchar* (*) (GraniteServicesSettingsSerializable*)) granite_drawing_color_real_settings_serialize;
#line 29 "../lib/Drawing/Color.vala"
	iface->settings_deserialize = (void (*) (GraniteServicesSettingsSerializable*, const gchar*)) granite_drawing_color_real_settings_deserialize;
#line 1730 "Color.c"
}

static void
granite_drawing_color_instance_init (GraniteDrawingColor * self,
                                     gpointer klass)
{
}

static void
granite_drawing_color_finalize (GObject * obj)
{
	GraniteDrawingColor * self;
#line 29 "../lib/Drawing/Color.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, GRANITE_DRAWING_TYPE_COLOR, GraniteDrawingColor);
#line 29 "../lib/Drawing/Color.vala"
	G_OBJECT_CLASS (granite_drawing_color_parent_class)->finalize (obj);
#line 1747 "Color.c"
}

/**
     * A class containing an RGBA color and methods for more powerful color manipulation.
     */
static GType
granite_drawing_color_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (GraniteDrawingColorClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) granite_drawing_color_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GraniteDrawingColor), 0, (GInstanceInitFunc) granite_drawing_color_instance_init, NULL };
	static const GInterfaceInfo granite_services_settings_serializable_info = { (GInterfaceInitFunc) granite_drawing_color_granite_services_settings_serializable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType granite_drawing_color_type_id;
	granite_drawing_color_type_id = g_type_register_static (G_TYPE_OBJECT, "GraniteDrawingColor", &g_define_type_info, 0);
	g_type_add_interface_static (granite_drawing_color_type_id, GRANITE_SERVICES_TYPE_SETTINGS_SERIALIZABLE, &granite_services_settings_serializable_info);
	return granite_drawing_color_type_id;
}

GType
granite_drawing_color_get_type (void)
{
	static volatile gsize granite_drawing_color_type_id__volatile = 0;
	if (g_once_init_enter (&granite_drawing_color_type_id__volatile)) {
		GType granite_drawing_color_type_id;
		granite_drawing_color_type_id = granite_drawing_color_get_type_once ();
		g_once_init_leave (&granite_drawing_color_type_id__volatile, granite_drawing_color_type_id);
	}
	return granite_drawing_color_type_id__volatile;
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gint
_vala_array_length (gpointer array)
{
	gint length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}


/* ControlsScheme.c generated by valac 0.48.14, the Vala compiler
 * generated from ControlsScheme.vala, do not modify */

/*-
 * Copyright (c) 2017-2020 Subhadeep Jasu <subhajasu@gmail.com>
 * Copyright (c) 2017-2020 Saunak Biswas <saunakbis97@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 * Authored by: Subhadeep Jasu <subhajasu@gmail.com>
 */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib/gi18n-lib.h>
#include <gobject/gvaluecollector.h>

#define PEBBLES_TYPE_CONTROL_SCHEME (pebbles_control_scheme_get_type ())
#define PEBBLES_CONTROL_SCHEME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), PEBBLES_TYPE_CONTROL_SCHEME, PebblesControlScheme))
#define PEBBLES_CONTROL_SCHEME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), PEBBLES_TYPE_CONTROL_SCHEME, PebblesControlSchemeClass))
#define PEBBLES_IS_CONTROL_SCHEME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PEBBLES_TYPE_CONTROL_SCHEME))
#define PEBBLES_IS_CONTROL_SCHEME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PEBBLES_TYPE_CONTROL_SCHEME))
#define PEBBLES_CONTROL_SCHEME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), PEBBLES_TYPE_CONTROL_SCHEME, PebblesControlSchemeClass))

typedef struct _PebblesControlScheme PebblesControlScheme;
typedef struct _PebblesControlSchemeClass PebblesControlSchemeClass;
typedef struct _PebblesControlSchemePrivate PebblesControlSchemePrivate;
typedef struct _PebblesParamSpecControlScheme PebblesParamSpecControlScheme;

struct _PebblesControlScheme {
	GTypeInstance parent_instance;
	volatile int ref_count;
	PebblesControlSchemePrivate * priv;
	gchar** common;
	gint common_length1;
	gint common_length2;
	gchar** scientific;
	gint scientific_length1;
	gint scientific_length2;
	gchar** programmer;
	gint programmer_length1;
	gint programmer_length2;
	gchar** statistics;
	gint statistics_length1;
	gint statistics_length2;
	gchar** calculus;
	gint calculus_length1;
	gint calculus_length2;
	gchar** converter;
	gint converter_length1;
	gint converter_length2;
};

struct _PebblesControlSchemeClass {
	GTypeClass parent_class;
	void (*finalize) (PebblesControlScheme *self);
};

struct _PebblesParamSpecControlScheme {
	GParamSpec parent_instance;
};

static gpointer pebbles_control_scheme_parent_class = NULL;

gpointer pebbles_control_scheme_ref (gpointer instance);
void pebbles_control_scheme_unref (gpointer instance);
GParamSpec* pebbles_param_spec_control_scheme (const gchar* name,
                                               const gchar* nick,
                                               const gchar* blurb,
                                               GType object_type,
                                               GParamFlags flags);
void pebbles_value_set_control_scheme (GValue* value,
                                       gpointer v_object);
void pebbles_value_take_control_scheme (GValue* value,
                                        gpointer v_object);
gpointer pebbles_value_get_control_scheme (const GValue* value);
GType pebbles_control_scheme_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (PebblesControlScheme, pebbles_control_scheme_unref)
PebblesControlScheme* pebbles_control_scheme_new (void);
PebblesControlScheme* pebbles_control_scheme_construct (GType object_type);
static void pebbles_control_scheme_finalize (PebblesControlScheme * obj);
static GType pebbles_control_scheme_get_type_once (void);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);

PebblesControlScheme*
pebbles_control_scheme_construct (GType object_type)
{
	PebblesControlScheme* self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	gchar* _tmp21_;
	gchar** _tmp22_;
	gchar* _tmp23_;
	gchar* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	gchar* _tmp27_;
	gchar* _tmp28_;
	gchar* _tmp29_;
	gchar* _tmp30_;
	gchar* _tmp31_;
	gchar* _tmp32_;
	gchar* _tmp33_;
	gchar* _tmp34_;
	gchar* _tmp35_;
	gchar* _tmp36_;
	gchar* _tmp37_;
	gchar* _tmp38_;
	gchar* _tmp39_;
	gchar* _tmp40_;
	gchar* _tmp41_;
	gchar* _tmp42_;
	gchar* _tmp43_;
	gchar* _tmp44_;
	gchar* _tmp45_;
	gchar* _tmp46_;
	gchar* _tmp47_;
	gchar* _tmp48_;
	gchar* _tmp49_;
	gchar* _tmp50_;
	gchar* _tmp51_;
	gchar* _tmp52_;
	gchar** _tmp53_;
	gchar* _tmp54_;
	gchar* _tmp55_;
	gchar* _tmp56_;
	gchar* _tmp57_;
	gchar* _tmp58_;
	gchar* _tmp59_;
	gchar* _tmp60_;
	gchar* _tmp61_;
	gchar* _tmp62_;
	gchar* _tmp63_;
	gchar** _tmp64_;
	gchar* _tmp65_;
	gchar* _tmp66_;
	gchar* _tmp67_;
	gchar* _tmp68_;
	gchar* _tmp69_;
	gchar* _tmp70_;
	gchar* _tmp71_;
	gchar* _tmp72_;
	gchar* _tmp73_;
	gchar* _tmp74_;
	gchar* _tmp75_;
	gchar* _tmp76_;
	gchar* _tmp77_;
	gchar* _tmp78_;
	gchar* _tmp79_;
	gchar* _tmp80_;
	gchar* _tmp81_;
	gchar* _tmp82_;
	gchar* _tmp83_;
	gchar* _tmp84_;
	gchar* _tmp85_;
	gchar* _tmp86_;
	gchar* _tmp87_;
	gchar* _tmp88_;
	gchar* _tmp89_;
	gchar* _tmp90_;
	gchar* _tmp91_;
	gchar* _tmp92_;
	gchar* _tmp93_;
	gchar* _tmp94_;
	gchar* _tmp95_;
	gchar* _tmp96_;
	gchar* _tmp97_;
	gchar* _tmp98_;
	gchar* _tmp99_;
	gchar* _tmp100_;
	gchar* _tmp101_;
	gchar* _tmp102_;
	gchar* _tmp103_;
	gchar* _tmp104_;
	gchar** _tmp105_;
	gchar* _tmp106_;
	gchar* _tmp107_;
	gchar* _tmp108_;
	gchar* _tmp109_;
	gchar* _tmp110_;
	gchar* _tmp111_;
	gchar** _tmp112_;
	gchar* _tmp113_;
	gchar* _tmp114_;
	gchar* _tmp115_;
	gchar* _tmp116_;
	gchar** _tmp117_;
#line 30 "../src/ControlsScheme.vala"
	self = (PebblesControlScheme*) g_type_create_instance (object_type);
#line 31 "../src/ControlsScheme.vala"
	_tmp0_ = g_strdup (_ ("Show this controls window"));
#line 31 "../src/ControlsScheme.vala"
	_tmp1_ = g_strdup ("F1");
#line 31 "../src/ControlsScheme.vala"
	_tmp2_ = g_strdup (_ ("Show Preferences"));
#line 31 "../src/ControlsScheme.vala"
	_tmp3_ = g_strdup ("F2");
#line 31 "../src/ControlsScheme.vala"
	_tmp4_ = g_strdup (_ ("Add to Memory"));
#line 31 "../src/ControlsScheme.vala"
	_tmp5_ = g_strdup ("F3");
#line 31 "../src/ControlsScheme.vala"
	_tmp6_ = g_strdup (_ ("Subtract from Memory"));
#line 31 "../src/ControlsScheme.vala"
	_tmp7_ = g_strdup ("F4");
#line 31 "../src/ControlsScheme.vala"
	_tmp8_ = g_strdup (_ ("Recall from Memory"));
#line 31 "../src/ControlsScheme.vala"
	_tmp9_ = g_strdup ("F5");
#line 31 "../src/ControlsScheme.vala"
	_tmp10_ = g_strdup (_ ("Clear Memory"));
#line 31 "../src/ControlsScheme.vala"
	_tmp11_ = g_strdup ("F6");
#line 31 "../src/ControlsScheme.vala"
	_tmp12_ = g_strdup (_ ("Last Answer"));
#line 31 "../src/ControlsScheme.vala"
	_tmp13_ = g_strdup ("F7");
#line 31 "../src/ControlsScheme.vala"
	_tmp14_ = g_strdup (_ ("Close Dialog"));
#line 31 "../src/ControlsScheme.vala"
	_tmp15_ = g_strdup ("Escape");
#line 31 "../src/ControlsScheme.vala"
	_tmp16_ = g_strdup (_ ("All Clear"));
#line 31 "../src/ControlsScheme.vala"
	_tmp17_ = g_strdup ("Delete");
#line 31 "../src/ControlsScheme.vala"
	_tmp18_ = g_strdup (_ ("Copy Result"));
#line 31 "../src/ControlsScheme.vala"
	_tmp19_ = g_strdup ("<Ctrl>C");
#line 31 "../src/ControlsScheme.vala"
	_tmp20_ = g_strdup (_ ("Paste Input Expression"));
#line 31 "../src/ControlsScheme.vala"
	_tmp21_ = g_strdup ("<Ctrl>V");
#line 31 "../src/ControlsScheme.vala"
	_tmp22_ = g_new0 (gchar*, (11 * 2) + 1);
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[0] = _tmp0_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[1] = _tmp1_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[2] = _tmp2_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[3] = _tmp3_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[4] = _tmp4_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[5] = _tmp5_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[6] = _tmp6_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[7] = _tmp7_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[8] = _tmp8_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[9] = _tmp9_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[10] = _tmp10_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[11] = _tmp11_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[12] = _tmp12_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[13] = _tmp13_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[14] = _tmp14_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[15] = _tmp15_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[16] = _tmp16_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[17] = _tmp17_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[18] = _tmp18_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[19] = _tmp19_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[20] = _tmp20_;
#line 31 "../src/ControlsScheme.vala"
	_tmp22_[21] = _tmp21_;
#line 31 "../src/ControlsScheme.vala"
	self->common = (_vala_array_free (self->common, self->common_length1 * self->common_length2, (GDestroyNotify) g_free), NULL);
#line 31 "../src/ControlsScheme.vala"
	self->common = _tmp22_;
#line 31 "../src/ControlsScheme.vala"
	self->common_length1 = 11;
#line 31 "../src/ControlsScheme.vala"
	self->common_length2 = 2;
#line 66 "../src/ControlsScheme.vala"
	_tmp23_ = g_strdup (_ ("Square (root) a Number"));
#line 66 "../src/ControlsScheme.vala"
	_tmp24_ = g_strdup ("Q");
#line 66 "../src/ControlsScheme.vala"
	_tmp25_ = g_strdup (_ ("Raise to the power (or nth root over)"));
#line 66 "../src/ControlsScheme.vala"
	_tmp26_ = g_strdup ("Z");
#line 66 "../src/ControlsScheme.vala"
	_tmp27_ = g_strdup (_ ("10 (or e) raised to the power"));
#line 66 "../src/ControlsScheme.vala"
	_tmp28_ = g_strdup ("W");
#line 66 "../src/ControlsScheme.vala"
	_tmp29_ = g_strdup (_ ("Log base 10 (or e)"));
#line 66 "../src/ControlsScheme.vala"
	_tmp30_ = g_strdup ("L");
#line 66 "../src/ControlsScheme.vala"
	_tmp31_ = g_strdup (_ ("(Inverse) Sine"));
#line 66 "../src/ControlsScheme.vala"
	_tmp32_ = g_strdup ("S");
#line 66 "../src/ControlsScheme.vala"
	_tmp33_ = g_strdup (_ ("(Inverse) Cosine"));
#line 66 "../src/ControlsScheme.vala"
	_tmp34_ = g_strdup ("C");
#line 66 "../src/ControlsScheme.vala"
	_tmp35_ = g_strdup (_ ("(Inverse) Tangent"));
#line 66 "../src/ControlsScheme.vala"
	_tmp36_ = g_strdup ("T");
#line 66 "../src/ControlsScheme.vala"
	_tmp37_ = g_strdup (_ ("(Inverse) Hyperbolic Sine"));
#line 66 "../src/ControlsScheme.vala"
	_tmp38_ = g_strdup ("H");
#line 66 "../src/ControlsScheme.vala"
	_tmp39_ = g_strdup (_ ("(Inverse) Hyperbolic Cosine"));
#line 66 "../src/ControlsScheme.vala"
	_tmp40_ = g_strdup ("O");
#line 66 "../src/ControlsScheme.vala"
	_tmp41_ = g_strdup (_ ("(Inverse) Hyperbolic Tangent"));
#line 66 "../src/ControlsScheme.vala"
	_tmp42_ = g_strdup ("A");
#line 66 "../src/ControlsScheme.vala"
	_tmp43_ = g_strdup (_ ("Modulus or Log base x"));
#line 66 "../src/ControlsScheme.vala"
	_tmp44_ = g_strdup ("M");
#line 66 "../src/ControlsScheme.vala"
	_tmp45_ = g_strdup (_ ("Permutation or Combination"));
#line 66 "../src/ControlsScheme.vala"
	_tmp46_ = g_strdup ("P");
#line 66 "../src/ControlsScheme.vala"
	_tmp47_ = g_strdup (_ ("Factorial"));
#line 66 "../src/ControlsScheme.vala"
	_tmp48_ = g_strdup ("F");
#line 66 "../src/ControlsScheme.vala"
	_tmp49_ = g_strdup (_ ("Constants"));
#line 66 "../src/ControlsScheme.vala"
	_tmp50_ = g_strdup ("R");
#line 66 "../src/ControlsScheme.vala"
	_tmp51_ = g_strdup (_ ("Result"));
#line 66 "../src/ControlsScheme.vala"
	_tmp52_ = g_strdup ("Return");
#line 66 "../src/ControlsScheme.vala"
	_tmp53_ = g_new0 (gchar*, (15 * 2) + 1);
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[0] = _tmp23_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[1] = _tmp24_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[2] = _tmp25_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[3] = _tmp26_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[4] = _tmp27_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[5] = _tmp28_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[6] = _tmp29_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[7] = _tmp30_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[8] = _tmp31_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[9] = _tmp32_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[10] = _tmp33_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[11] = _tmp34_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[12] = _tmp35_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[13] = _tmp36_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[14] = _tmp37_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[15] = _tmp38_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[16] = _tmp39_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[17] = _tmp40_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[18] = _tmp41_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[19] = _tmp42_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[20] = _tmp43_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[21] = _tmp44_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[22] = _tmp45_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[23] = _tmp46_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[24] = _tmp47_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[25] = _tmp48_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[26] = _tmp49_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[27] = _tmp50_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[28] = _tmp51_;
#line 66 "../src/ControlsScheme.vala"
	_tmp53_[29] = _tmp52_;
#line 66 "../src/ControlsScheme.vala"
	self->scientific = (_vala_array_free (self->scientific, self->scientific_length1 * self->scientific_length2, (GDestroyNotify) g_free), NULL);
#line 66 "../src/ControlsScheme.vala"
	self->scientific = _tmp53_;
#line 66 "../src/ControlsScheme.vala"
	self->scientific_length1 = 15;
#line 66 "../src/ControlsScheme.vala"
	self->scientific_length2 = 2;
#line 113 "../src/ControlsScheme.vala"
	_tmp54_ = g_strdup (_ ("Logical OR or NOR"));
#line 113 "../src/ControlsScheme.vala"
	_tmp55_ = g_strdup ("O");
#line 113 "../src/ControlsScheme.vala"
	_tmp56_ = g_strdup (_ ("Logical AND or NAND"));
#line 113 "../src/ControlsScheme.vala"
	_tmp57_ = g_strdup ("N");
#line 113 "../src/ControlsScheme.vala"
	_tmp58_ = g_strdup (_ ("Logical XOR or XNOR"));
#line 113 "../src/ControlsScheme.vala"
	_tmp59_ = g_strdup ("X");
#line 113 "../src/ControlsScheme.vala"
	_tmp60_ = g_strdup (_ ("Logical NOT or Mod"));
#line 113 "../src/ControlsScheme.vala"
	_tmp61_ = g_strdup ("T");
#line 113 "../src/ControlsScheme.vala"
	_tmp62_ = g_strdup (_ ("Result"));
#line 113 "../src/ControlsScheme.vala"
	_tmp63_ = g_strdup ("Return");
#line 113 "../src/ControlsScheme.vala"
	_tmp64_ = g_new0 (gchar*, (5 * 2) + 1);
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[0] = _tmp54_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[1] = _tmp55_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[2] = _tmp56_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[3] = _tmp57_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[4] = _tmp58_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[5] = _tmp59_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[6] = _tmp60_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[7] = _tmp61_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[8] = _tmp62_;
#line 113 "../src/ControlsScheme.vala"
	_tmp64_[9] = _tmp63_;
#line 113 "../src/ControlsScheme.vala"
	self->programmer = (_vala_array_free (self->programmer, self->programmer_length1 * self->programmer_length2, (GDestroyNotify) g_free), NULL);
#line 113 "../src/ControlsScheme.vala"
	self->programmer = _tmp64_;
#line 113 "../src/ControlsScheme.vala"
	self->programmer_length1 = 5;
#line 113 "../src/ControlsScheme.vala"
	self->programmer_length2 = 2;
#line 130 "../src/ControlsScheme.vala"
	_tmp65_ = g_strdup (_ ("Add Cell"));
#line 130 "../src/ControlsScheme.vala"
	_tmp66_ = g_strdup ("Page_Up");
#line 130 "../src/ControlsScheme.vala"
	_tmp67_ = g_strdup (_ ("Insert Cell"));
#line 130 "../src/ControlsScheme.vala"
	_tmp68_ = g_strdup ("Page_Down");
#line 130 "../src/ControlsScheme.vala"
	_tmp69_ = g_strdup (_ ("Next Cell or Add Right"));
#line 130 "../src/ControlsScheme.vala"
	_tmp70_ = g_strdup ("Tab");
#line 130 "../src/ControlsScheme.vala"
	_tmp71_ = g_strdup (_ ("Previous Cell or Add Left"));
#line 130 "../src/ControlsScheme.vala"
	_tmp72_ = g_strdup ("<Shift>Tab");
#line 130 "../src/ControlsScheme.vala"
	_tmp73_ = g_strdup (_ ("Navigate Left"));
#line 130 "../src/ControlsScheme.vala"
	_tmp74_ = g_strdup ("Left");
#line 130 "../src/ControlsScheme.vala"
	_tmp75_ = g_strdup (_ ("Navigate Right"));
#line 130 "../src/ControlsScheme.vala"
	_tmp76_ = g_strdup ("Right");
#line 130 "../src/ControlsScheme.vala"
	_tmp77_ = g_strdup (_ ("Remove Cell"));
#line 130 "../src/ControlsScheme.vala"
	_tmp78_ = g_strdup ("Home");
#line 130 "../src/ControlsScheme.vala"
	_tmp79_ = g_strdup (_ ("Remove All Cells (Reset)"));
#line 130 "../src/ControlsScheme.vala"
	_tmp80_ = g_strdup ("End");
#line 130 "../src/ControlsScheme.vala"
	_tmp81_ = g_strdup (_ ("Cardinality"));
#line 130 "../src/ControlsScheme.vala"
	_tmp82_ = g_strdup ("N");
#line 130 "../src/ControlsScheme.vala"
	_tmp83_ = g_strdup (_ ("Mode"));
#line 130 "../src/ControlsScheme.vala"
	_tmp84_ = g_strdup ("O");
#line 130 "../src/ControlsScheme.vala"
	_tmp85_ = g_strdup (_ ("Median"));
#line 130 "../src/ControlsScheme.vala"
	_tmp86_ = g_strdup ("E");
#line 130 "../src/ControlsScheme.vala"
	_tmp87_ = g_strdup (_ ("Summation"));
#line 130 "../src/ControlsScheme.vala"
	_tmp88_ = g_strdup ("S");
#line 130 "../src/ControlsScheme.vala"
	_tmp89_ = g_strdup (_ ("Summation Squared"));
#line 130 "../src/ControlsScheme.vala"
	_tmp90_ = g_strdup ("Q");
#line 130 "../src/ControlsScheme.vala"
	_tmp91_ = g_strdup (_ ("Sample Variance"));
#line 130 "../src/ControlsScheme.vala"
	_tmp92_ = g_strdup ("V");
#line 130 "../src/ControlsScheme.vala"
	_tmp93_ = g_strdup (_ ("Mean"));
#line 130 "../src/ControlsScheme.vala"
	_tmp94_ = g_strdup ("M");
#line 130 "../src/ControlsScheme.vala"
	_tmp95_ = g_strdup (_ ("Mean Squared"));
#line 130 "../src/ControlsScheme.vala"
	_tmp96_ = g_strdup ("A");
#line 130 "../src/ControlsScheme.vala"
	_tmp97_ = g_strdup (_ ("Geometric Mean"));
#line 130 "../src/ControlsScheme.vala"
	_tmp98_ = g_strdup ("G");
#line 130 "../src/ControlsScheme.vala"
	_tmp99_ = g_strdup (_ ("Sample Standard Deviation"));
#line 130 "../src/ControlsScheme.vala"
	_tmp100_ = g_strdup ("D");
#line 130 "../src/ControlsScheme.vala"
	_tmp101_ = g_strdup (_ ("Population Variance"));
#line 130 "../src/ControlsScheme.vala"
	_tmp102_ = g_strdup ("P");
#line 130 "../src/ControlsScheme.vala"
	_tmp103_ = g_strdup (_ ("Population Standard Deviation"));
#line 130 "../src/ControlsScheme.vala"
	_tmp104_ = g_strdup ("L");
#line 130 "../src/ControlsScheme.vala"
	_tmp105_ = g_new0 (gchar*, (20 * 2) + 1);
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[0] = _tmp65_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[1] = _tmp66_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[2] = _tmp67_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[3] = _tmp68_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[4] = _tmp69_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[5] = _tmp70_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[6] = _tmp71_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[7] = _tmp72_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[8] = _tmp73_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[9] = _tmp74_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[10] = _tmp75_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[11] = _tmp76_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[12] = _tmp77_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[13] = _tmp78_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[14] = _tmp79_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[15] = _tmp80_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[16] = _tmp81_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[17] = _tmp82_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[18] = _tmp83_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[19] = _tmp84_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[20] = _tmp85_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[21] = _tmp86_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[22] = _tmp87_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[23] = _tmp88_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[24] = _tmp89_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[25] = _tmp90_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[26] = _tmp91_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[27] = _tmp92_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[28] = _tmp93_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[29] = _tmp94_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[30] = _tmp95_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[31] = _tmp96_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[32] = _tmp97_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[33] = _tmp98_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[34] = _tmp99_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[35] = _tmp100_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[36] = _tmp101_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[37] = _tmp102_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[38] = _tmp103_;
#line 130 "../src/ControlsScheme.vala"
	_tmp105_[39] = _tmp104_;
#line 130 "../src/ControlsScheme.vala"
	self->statistics = (_vala_array_free (self->statistics, self->statistics_length1 * self->statistics_length2, (GDestroyNotify) g_free), NULL);
#line 130 "../src/ControlsScheme.vala"
	self->statistics = _tmp105_;
#line 130 "../src/ControlsScheme.vala"
	self->statistics_length1 = 20;
#line 130 "../src/ControlsScheme.vala"
	self->statistics_length2 = 2;
#line 192 "../src/ControlsScheme.vala"
	_tmp106_ = g_strdup (_ ("Variable x"));
#line 192 "../src/ControlsScheme.vala"
	_tmp107_ = g_strdup ("X");
#line 192 "../src/ControlsScheme.vala"
	_tmp108_ = g_strdup (_ ("Definite Integral"));
#line 192 "../src/ControlsScheme.vala"
	_tmp109_ = g_strdup ("I");
#line 192 "../src/ControlsScheme.vala"
	_tmp110_ = g_strdup (_ ("Derivative at a point"));
#line 192 "../src/ControlsScheme.vala"
	_tmp111_ = g_strdup ("D");
#line 192 "../src/ControlsScheme.vala"
	_tmp112_ = g_new0 (gchar*, (3 * 2) + 1);
#line 192 "../src/ControlsScheme.vala"
	_tmp112_[0] = _tmp106_;
#line 192 "../src/ControlsScheme.vala"
	_tmp112_[1] = _tmp107_;
#line 192 "../src/ControlsScheme.vala"
	_tmp112_[2] = _tmp108_;
#line 192 "../src/ControlsScheme.vala"
	_tmp112_[3] = _tmp109_;
#line 192 "../src/ControlsScheme.vala"
	_tmp112_[4] = _tmp110_;
#line 192 "../src/ControlsScheme.vala"
	_tmp112_[5] = _tmp111_;
#line 192 "../src/ControlsScheme.vala"
	self->calculus = (_vala_array_free (self->calculus, self->calculus_length1 * self->calculus_length2, (GDestroyNotify) g_free), NULL);
#line 192 "../src/ControlsScheme.vala"
	self->calculus = _tmp112_;
#line 192 "../src/ControlsScheme.vala"
	self->calculus_length1 = 3;
#line 192 "../src/ControlsScheme.vala"
	self->calculus_length2 = 2;
#line 203 "../src/ControlsScheme.vala"
	_tmp113_ = g_strdup (_ ("Interchange unit"));
#line 203 "../src/ControlsScheme.vala"
	_tmp114_ = g_strdup ("Return");
#line 203 "../src/ControlsScheme.vala"
	_tmp115_ = g_strdup (_ ("Update Forex Data (Currency converter)"));
#line 203 "../src/ControlsScheme.vala"
	_tmp116_ = g_strdup ("R");
#line 203 "../src/ControlsScheme.vala"
	_tmp117_ = g_new0 (gchar*, (2 * 2) + 1);
#line 203 "../src/ControlsScheme.vala"
	_tmp117_[0] = _tmp113_;
#line 203 "../src/ControlsScheme.vala"
	_tmp117_[1] = _tmp114_;
#line 203 "../src/ControlsScheme.vala"
	_tmp117_[2] = _tmp115_;
#line 203 "../src/ControlsScheme.vala"
	_tmp117_[3] = _tmp116_;
#line 203 "../src/ControlsScheme.vala"
	self->converter = (_vala_array_free (self->converter, self->converter_length1 * self->converter_length2, (GDestroyNotify) g_free), NULL);
#line 203 "../src/ControlsScheme.vala"
	self->converter = _tmp117_;
#line 203 "../src/ControlsScheme.vala"
	self->converter_length1 = 2;
#line 203 "../src/ControlsScheme.vala"
	self->converter_length2 = 2;
#line 30 "../src/ControlsScheme.vala"
	return self;
#line 738 "ControlsScheme.c"
}

PebblesControlScheme*
pebbles_control_scheme_new (void)
{
#line 30 "../src/ControlsScheme.vala"
	return pebbles_control_scheme_construct (PEBBLES_TYPE_CONTROL_SCHEME);
#line 746 "ControlsScheme.c"
}

static void
pebbles_value_control_scheme_init (GValue* value)
{
#line 22 "../src/ControlsScheme.vala"
	value->data[0].v_pointer = NULL;
#line 754 "ControlsScheme.c"
}

static void
pebbles_value_control_scheme_free_value (GValue* value)
{
#line 22 "../src/ControlsScheme.vala"
	if (value->data[0].v_pointer) {
#line 22 "../src/ControlsScheme.vala"
		pebbles_control_scheme_unref (value->data[0].v_pointer);
#line 764 "ControlsScheme.c"
	}
}

static void
pebbles_value_control_scheme_copy_value (const GValue* src_value,
                                         GValue* dest_value)
{
#line 22 "../src/ControlsScheme.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "../src/ControlsScheme.vala"
		dest_value->data[0].v_pointer = pebbles_control_scheme_ref (src_value->data[0].v_pointer);
#line 776 "ControlsScheme.c"
	} else {
#line 22 "../src/ControlsScheme.vala"
		dest_value->data[0].v_pointer = NULL;
#line 780 "ControlsScheme.c"
	}
}

static gpointer
pebbles_value_control_scheme_peek_pointer (const GValue* value)
{
#line 22 "../src/ControlsScheme.vala"
	return value->data[0].v_pointer;
#line 789 "ControlsScheme.c"
}

static gchar*
pebbles_value_control_scheme_collect_value (GValue* value,
                                            guint n_collect_values,
                                            GTypeCValue* collect_values,
                                            guint collect_flags)
{
#line 22 "../src/ControlsScheme.vala"
	if (collect_values[0].v_pointer) {
#line 800 "ControlsScheme.c"
		PebblesControlScheme * object;
		object = collect_values[0].v_pointer;
#line 22 "../src/ControlsScheme.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "../src/ControlsScheme.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 807 "ControlsScheme.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "../src/ControlsScheme.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 811 "ControlsScheme.c"
		}
#line 22 "../src/ControlsScheme.vala"
		value->data[0].v_pointer = pebbles_control_scheme_ref (object);
#line 815 "ControlsScheme.c"
	} else {
#line 22 "../src/ControlsScheme.vala"
		value->data[0].v_pointer = NULL;
#line 819 "ControlsScheme.c"
	}
#line 22 "../src/ControlsScheme.vala"
	return NULL;
#line 823 "ControlsScheme.c"
}

static gchar*
pebbles_value_control_scheme_lcopy_value (const GValue* value,
                                          guint n_collect_values,
                                          GTypeCValue* collect_values,
                                          guint collect_flags)
{
	PebblesControlScheme ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "../src/ControlsScheme.vala"
	if (!object_p) {
#line 22 "../src/ControlsScheme.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 838 "ControlsScheme.c"
	}
#line 22 "../src/ControlsScheme.vala"
	if (!value->data[0].v_pointer) {
#line 22 "../src/ControlsScheme.vala"
		*object_p = NULL;
#line 844 "ControlsScheme.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "../src/ControlsScheme.vala"
		*object_p = value->data[0].v_pointer;
#line 848 "ControlsScheme.c"
	} else {
#line 22 "../src/ControlsScheme.vala"
		*object_p = pebbles_control_scheme_ref (value->data[0].v_pointer);
#line 852 "ControlsScheme.c"
	}
#line 22 "../src/ControlsScheme.vala"
	return NULL;
#line 856 "ControlsScheme.c"
}

GParamSpec*
pebbles_param_spec_control_scheme (const gchar* name,
                                   const gchar* nick,
                                   const gchar* blurb,
                                   GType object_type,
                                   GParamFlags flags)
{
	PebblesParamSpecControlScheme* spec;
#line 22 "../src/ControlsScheme.vala"
	g_return_val_if_fail (g_type_is_a (object_type, PEBBLES_TYPE_CONTROL_SCHEME), NULL);
#line 22 "../src/ControlsScheme.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "../src/ControlsScheme.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "../src/ControlsScheme.vala"
	return G_PARAM_SPEC (spec);
#line 875 "ControlsScheme.c"
}

gpointer
pebbles_value_get_control_scheme (const GValue* value)
{
#line 22 "../src/ControlsScheme.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CONTROL_SCHEME), NULL);
#line 22 "../src/ControlsScheme.vala"
	return value->data[0].v_pointer;
#line 885 "ControlsScheme.c"
}

void
pebbles_value_set_control_scheme (GValue* value,
                                  gpointer v_object)
{
	PebblesControlScheme * old;
#line 22 "../src/ControlsScheme.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CONTROL_SCHEME));
#line 22 "../src/ControlsScheme.vala"
	old = value->data[0].v_pointer;
#line 22 "../src/ControlsScheme.vala"
	if (v_object) {
#line 22 "../src/ControlsScheme.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_CONTROL_SCHEME));
#line 22 "../src/ControlsScheme.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../src/ControlsScheme.vala"
		value->data[0].v_pointer = v_object;
#line 22 "../src/ControlsScheme.vala"
		pebbles_control_scheme_ref (value->data[0].v_pointer);
#line 907 "ControlsScheme.c"
	} else {
#line 22 "../src/ControlsScheme.vala"
		value->data[0].v_pointer = NULL;
#line 911 "ControlsScheme.c"
	}
#line 22 "../src/ControlsScheme.vala"
	if (old) {
#line 22 "../src/ControlsScheme.vala"
		pebbles_control_scheme_unref (old);
#line 917 "ControlsScheme.c"
	}
}

void
pebbles_value_take_control_scheme (GValue* value,
                                   gpointer v_object)
{
	PebblesControlScheme * old;
#line 22 "../src/ControlsScheme.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, PEBBLES_TYPE_CONTROL_SCHEME));
#line 22 "../src/ControlsScheme.vala"
	old = value->data[0].v_pointer;
#line 22 "../src/ControlsScheme.vala"
	if (v_object) {
#line 22 "../src/ControlsScheme.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, PEBBLES_TYPE_CONTROL_SCHEME));
#line 22 "../src/ControlsScheme.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "../src/ControlsScheme.vala"
		value->data[0].v_pointer = v_object;
#line 938 "ControlsScheme.c"
	} else {
#line 22 "../src/ControlsScheme.vala"
		value->data[0].v_pointer = NULL;
#line 942 "ControlsScheme.c"
	}
#line 22 "../src/ControlsScheme.vala"
	if (old) {
#line 22 "../src/ControlsScheme.vala"
		pebbles_control_scheme_unref (old);
#line 948 "ControlsScheme.c"
	}
}

static void
pebbles_control_scheme_class_init (PebblesControlSchemeClass * klass,
                                   gpointer klass_data)
{
#line 22 "../src/ControlsScheme.vala"
	pebbles_control_scheme_parent_class = g_type_class_peek_parent (klass);
#line 22 "../src/ControlsScheme.vala"
	((PebblesControlSchemeClass *) klass)->finalize = pebbles_control_scheme_finalize;
#line 960 "ControlsScheme.c"
}

static void
pebbles_control_scheme_instance_init (PebblesControlScheme * self,
                                      gpointer klass)
{
#line 22 "../src/ControlsScheme.vala"
	self->ref_count = 1;
#line 969 "ControlsScheme.c"
}

static void
pebbles_control_scheme_finalize (PebblesControlScheme * obj)
{
	PebblesControlScheme * self;
#line 22 "../src/ControlsScheme.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, PEBBLES_TYPE_CONTROL_SCHEME, PebblesControlScheme);
#line 22 "../src/ControlsScheme.vala"
	g_signal_handlers_destroy (self);
#line 23 "../src/ControlsScheme.vala"
	self->common = (_vala_array_free (self->common, self->common_length1 * self->common_length2, (GDestroyNotify) g_free), NULL);
#line 24 "../src/ControlsScheme.vala"
	self->scientific = (_vala_array_free (self->scientific, self->scientific_length1 * self->scientific_length2, (GDestroyNotify) g_free), NULL);
#line 25 "../src/ControlsScheme.vala"
	self->programmer = (_vala_array_free (self->programmer, self->programmer_length1 * self->programmer_length2, (GDestroyNotify) g_free), NULL);
#line 26 "../src/ControlsScheme.vala"
	self->statistics = (_vala_array_free (self->statistics, self->statistics_length1 * self->statistics_length2, (GDestroyNotify) g_free), NULL);
#line 27 "../src/ControlsScheme.vala"
	self->calculus = (_vala_array_free (self->calculus, self->calculus_length1 * self->calculus_length2, (GDestroyNotify) g_free), NULL);
#line 28 "../src/ControlsScheme.vala"
	self->converter = (_vala_array_free (self->converter, self->converter_length1 * self->converter_length2, (GDestroyNotify) g_free), NULL);
#line 992 "ControlsScheme.c"
}

static GType
pebbles_control_scheme_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { pebbles_value_control_scheme_init, pebbles_value_control_scheme_free_value, pebbles_value_control_scheme_copy_value, pebbles_value_control_scheme_peek_pointer, "p", pebbles_value_control_scheme_collect_value, "p", pebbles_value_control_scheme_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (PebblesControlSchemeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) pebbles_control_scheme_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (PebblesControlScheme), 0, (GInstanceInitFunc) pebbles_control_scheme_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType pebbles_control_scheme_type_id;
	pebbles_control_scheme_type_id = g_type_register_fundamental (g_type_fundamental_next (), "PebblesControlScheme", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return pebbles_control_scheme_type_id;
}

GType
pebbles_control_scheme_get_type (void)
{
	static volatile gsize pebbles_control_scheme_type_id__volatile = 0;
	if (g_once_init_enter (&pebbles_control_scheme_type_id__volatile)) {
		GType pebbles_control_scheme_type_id;
		pebbles_control_scheme_type_id = pebbles_control_scheme_get_type_once ();
		g_once_init_leave (&pebbles_control_scheme_type_id__volatile, pebbles_control_scheme_type_id);
	}
	return pebbles_control_scheme_type_id__volatile;
}

gpointer
pebbles_control_scheme_ref (gpointer instance)
{
	PebblesControlScheme * self;
	self = instance;
#line 22 "../src/ControlsScheme.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "../src/ControlsScheme.vala"
	return instance;
#line 1027 "ControlsScheme.c"
}

void
pebbles_control_scheme_unref (gpointer instance)
{
	PebblesControlScheme * self;
	self = instance;
#line 22 "../src/ControlsScheme.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "../src/ControlsScheme.vala"
		PEBBLES_CONTROL_SCHEME_GET_CLASS (self)->finalize (self);
#line 22 "../src/ControlsScheme.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1041 "ControlsScheme.c"
	}
}

static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gint i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

